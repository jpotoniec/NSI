%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.3)
%%For: (kyle Hamilton)
%%CreationDate: 6/21/22
%%BoundingBox: 0 0 709 324
%%HiResBoundingBox: 0 0 708.7554 323.5792
%%CropBox: 0 0 708.7554 323.5792
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.3.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.3.1 x1103 R agm 5.512 ct 6.513%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 12220 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD63FFA8FFA8CBA8FFA8CBA8CBA8A8A8FD34FFA8FD06FFA8FFFFA8%FD0DFFA8FFA8FD1BFFA8FFA8A9A8A8A2A8A2A8A2A8A8A8A2A8A8A8A2A8A8%A8FD34FFA87DFF527D5252527D52527DA8FD05527D7D527DFD055227A8FD%14FFA8FFA8A9A8A9A8A8A8A9A8A9A8A9A8A8A8CBA8A9A8CBA8A9A8A8A8FF%A8FD32FFA8A8A87D52FD057D527DA87D527D7DA87DA8527D7DA8FD047DA8%FD0DFFA8FFFD06A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2FD%05A8FF5227FD0452FD3EFFA8A9A2A87DA27DA27DA87DFFCBFFCBFFA8FFA8%FFA8FFA8CBA8CBA8A8A8CBA8A9A8CBA8A9A8CBA8A8A8CBA8CBA8FFA8FFA9%FFFFFFA8FFA8FFA8FFA8FFA8A87D7D7DA8FD35FFA8A277774C4C224C2122%212222282128212800277DA8A2A8A8A8A2A8A8A8A2FD07A8A2A8A2A8A2FD%04A8CBA8FFA8FD07FFAEFFAEFFA8FFA9AFA8A8FD37FFA27E535322282228%2122224C284C2222214C2228214C282827A8A8A9A8A9A8A8A8A9A8A9A8CB%A8A8A8A9A8A8A8CBA8FFA8FD0FFFA9FFAFFFA9FFAFA8A8FD30FFA8A87D77%4C4C21222122214C2122214C21222122214C224C21282122212227277DFF%A8A8A8A9FD0BA8FFA8FFA8FD0DFFA8FFA8FFA9FFA8FFA9FFA8FFA8FD26FF%A8FFA8A9A8A87D7E53774C4C214C2122224C214C4C4C214C2828224C4C4C%214C224C284D4C4C4C4D4C4C277D7DA27DA87EA27EA9A8CBA8FD17FFAFFF%FFFFAFFD26FF5227274C284C214C21222122212221222122224C214C2222%214C214C2822214C2222214C284C212821222128214C214C2727214C214C%21282122214C224C28534C53537D7DA8A8FD0BFFAEFFA9FFA8FFAFFD27FF%7D274C224C284C224C224C2128224C284C2128224C214C224C224C214C4C%4C214C4C4C214C224C284C284C214C2222214C274C224C284C214C284C22%4C284C224C2122214C2222224D4C7777A2A2A9A8FFFFFFAFFD2CFF522721%2221222122214C224C21282122214C2122214C21282122214C2128222821%28224C21222122214C284C224C284C272721222122212221222128214C22%4C2128214C214C21282122212221222128224D4C535377777D777E7DA27D%A27DA27DA8FD1EFF7D274C224C224C214C214C224C4C4C214C224C224C28%4C214C2828224C224C284C224C224D4C4C214C224C214C284C2252274C22%4C4C4C224C4C4C284C284C224C224C284C224C284C224C284C224C224C22%4C284C2122214C224C224C224C212727FD1EFF5227284C224C284C224C21%22214C224C2122214C2122224C214C2222214C2122224C2122214C284C22%4C2122212221222727214C224C284C214C22222122214C224C2122214C22%4C2128224C2122214C224C2228214C224C224C284C214C224C2727FD1EFF%7D274C2228214C224C284C4C4C214C224C284C214C224C284C214C282221%4C2222224C284C214C224C284C4C4C284C2828274C284C284D4C4C224C21%22214C224C224C214C284C224C284C224C224C284C224C224C224C4C4C22%4C284C214C222727FD12FF7DFD07FFA8FFA8FF5227214C21222122212221%4C224C212221282228214C2122214C214C2222214C2222214C224C212221%2221282128214C2727214C224C214C2853537777774C534C4C2122212221%2221282122214C2122214C224C222821282122214C2128214C2727A8FD10%FFA85227527D7D277D2752277DFF7D27524C4C284C4C4C224C2228224C4C%4C214C4C4C214C2828224C224C284C224C284C214C224D4C4C224C224C21%4C224C274C284C224C284C284D537EA2FD05FFA8A87D7E53774C4C224C21%4C2128224C284C214C224C224C284C284C4C2727FD12FF7D7D52FD087DFF%522721222122214C224C224C2222214C284C2128224C214C2222214C2128%224C2128224C2122214C224C224C284C214C2727214C224C224C284C2228%212221777EFD09FFA8CB7E7E7777524D4C4C2828214C2128214C2128214C%2727FF7D52A87DA8A8A87DA87DA8A8FD11FF7D274C214C22282128214C22%4C4C4C214C284C214C284C214C2822224C214C284C2128224C2228212221%22214C212221270428214C284C28534C774C774C4C21224C7EA8FD0BFFAF%FD05FFA8A8FD047771774D774C4C27FF7D7D2752277DFD0452277DFD11FF%5227274C224C284C214C21222128224C2122214C2122224C214C2222214C%212121222122214C4C534C7753775277777D7D7D7777524D2228214C4C77%537D7D7E4C22002877FFFFFFA8FFFFFFA8FFAFFFA8A87DA277A2777D77FD%077D2727A8FFA8FFA8FFA8FFA8FFA87DA8FD11FF7D274C214C224C224C4C%4C284C2228224C284C214C2228224C2122214C2853537E7EA8A8FD13FFA2%7E4C4C4C7D777D7DFFA877212228A2FD06FFA8A277A2A2A8A2A883848384%838483848384835227FD1EFF52272122212821222122214C224C2222214C%222221222122285377A2A8FD1DFF7D4C28777DA252A8FFA84C22214CA2FF%A8A2777EA2CBA8AF838359837D847D845A845A845A602727FD1EFF52F84C%284C224C284C21222122214C2222214C4C7777A8A8FD24FF774C7D77A87D%77FFFFA853214C4D7EA2FFFFFFA884598383AE84A960855A8560845A8560%2E27FD1EFF5227214C214C22FD044C534C7777A27EA8A8FD0DFFA8FFA8FF%FFFFA8FFFFFD04A8FD05FFA8FD0AFFA2287D53A8A8777EA877774C2221A2%A8A87D7D7DA8A8AF84605A605A605A605A605A842727A8FD3CFFA87DFF7D%7D5252527D7D277D7D7D52527D7D277DFD0CFF4CA253A27D4C4CFFFFFF77%4C21537D84AEFFAF8B60605A85848560856085848B847D52FD3DFFAE7DFF%7D7D7DA87DA8FD057DA852A8A87D7DFD07FFA8FFA8A2A2A22277777DFF7D%77FFFFFF594C52534CA284605A6060A98485608584FD1CFFA8FFFFFFA8FD%04FFA87DA8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2%A8A2A8A2A8A2A87DA9A2A9A2CBA8A87DA8A2CBA2A87DA2A2A8FD04A27DA2%77A2A2A8CBFF52A877A8FFA253AF838384A84C222153608484FF858584FD%1FFF5227525227275252FF27F84C714C774C714C774C714C774C714C774C%714C774C714C774C714C774C714C774C774C774D714C774C774C774D7121%274C714C77717777A27EA2A2A8A8CBA8A84CA877A8AF532884A8FFFFAF2F%282F59227D5A7EA8FD20FFA8A87DA8527D7DA8FF7D27FD1E7778FD0F7752%277771777177717777A277FD04A2A9A2774CA8527D838477FFFFAF608560%A94C4D2F4D224C4C7E7EA8A8FD24FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCBFD13FFA8CBA2A2777777A2A2%A8A2A8A8FFFF7D278359A2A2774C845A605AFFFF8584A24C4C2122212221%28214C224C2752FD3DFFA87DFFFD06A8FFFD04A87DA8A87D7DFD07FFA8A8%77777ECBA8A87D8483537DFF77FFFF7E286084A2A2845ACAA8CBA2A27777%4C4C224C224C222727FFFFFFA8FD07FFA8FFA8FD2FFFA852A85227525227%527D7D277D527D275227527DFD09FFA277777E777D7DA87E4CA8A853855A%6053A8FF8584FFA2A8A2A27DA87D7D777D777752772727FF7D2752275252%52275227522727277DFD0FFFA8FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF%FFFFAFFFFFFFAFFFFFFFAFFFA8AFA8FFA8FFA8FFFD05A8FFA8FFA8A87DFD%07FFA8FFA8AE7D7D5383A8A8A9FFA877A95A2F85AFFF527E84AE83A88384%83A883A88384838483A8835227FFA8FD057DA8FD077D52FD0EFF52275284%7D837D837D837D837D837D837D837D837D837D837D837D837D837D837D83%7D847D837D847D837D847D837D8427277DAE83A87DA87D8359837D8383AF%77A2A8A8A8FF7753605A59A88383537D7DAEA8AEA8A8FD04845A845A605A%600527A8FD0FFFA8A8FD07FFA8FD04FF7D207D838483847D8483847D8483%847D8483847D8483847D8483847D8483847D8483847D8483847D8483847D%8483847D52277D7D837D847D8483A8A8FFAFFFAEFF77A2847D7D83528484%7D77A984FFA877A2FF858560856085608584AF84AF84847DFD10FF527DFD%0452277D2727525252FF522752837D837D837D837D837D837D837D837D83%7D837D837D837D837D837D837D837D837D837D837D837D837D837D832727%588359837D837D847D847D847D837D847D7D7D84595A53FFA8775AA8CAFF%5A53285A84AF84A984FFAFFD17FFA87D7D7D52FD057DA87DA8FF7D277D83%847D837D847D837D847D837D847D837D847D837D847D837D847D837D847D%837D847D837D847D837D847D837D52277D838483847D8483847DA8A8AEA8%FFFFFF7E7E6085A8777DFF847EA8845A85A9CB537E59AFFD29FF52275283%59837D8359837D8359837D8359837D8359837D8359837D8359837D835983%7D8359837D8359837D8359837D832727588359837D837D847D8483A884A8%83847D84535A84CF7D4C7E85535A84FFA8A884A8A27D537D7DFD27FFA87D%A8A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8FFA8FFAEFFA8FFA8%FFA8FFAEFFA8FFA8FFA8FFA8FFA8FFAEA87DAEA8AEA8A883847DA883A884%AFA8AF5A84608B847DA8AE5359848453A2FFAF84FFCACBA8A977774D7777%7E77A27DA87DFD34FF7DFFA8A87DFD04A8FFA8A87DA87DA87D7DA8FFA8FF%A8A87DFD04A8FD06FFAF84A883A8848459603684AFFFA2A284605377A8AE%7D5984A87DA884A87DA8A7A2777D52524C522727A8FFA8A87DA8A8FD2CFF%A852A8A85252527D527DA852527DFD04527D7DA8A8A8A7FD05527DFD09FF%AF5A84596084FFA8A8A88B535AAFFF4CA2FFAF7EA2FD04FFA8AFFD068460%84845227FF7D7D527D27A8FD2DFFA8FFFFFFA8FFCFFFA8FFA8A8A8AF84A8%84A9848584A984845A84525284FFAFFFA8FFA8A984845A605A848484A8AF%5A605A8453CAFFCB4C7EA8FF53535A855A605A605A605A605A605A602727%FFA87DA87D7DA8FD34FFAFAF84AF848560856085608560605A6160615A52%278484858485608560605A6060AFAFFF84835985FFFF84A877CBAF5A537E%5961595A5AAF84858485848584A984AF847D52FD36FFA8A984845A605A60%5A605A605A605A605A845A845A845A84272735605A605A605A605A8484AF%84845A8484A87DAE60A9847E53605A535AA97EA9A85359A9A8AFA8FD3AFF%A8AF84855A8560605A85608460856084608560855A8560845A8560856052%275A60856085608560858485848584FFAFFFA98559845A8560857DA98453%A8FFA87E7E8453A2FD29FFA8A8A8AFA8AFA8AFA8AF84A9848584845A605A%605A605A605A845A605A845A605A845A605A845A845A845A605A605A6027%2759605A845A845A84608484A9848584845A605AFD0484AFFFCA77FF7E28%5984A8CBA2A8775377A8A8FD25FF52F85960605A8560605A8560605A6060%84608560845A8560845A8560605A8560605A8560845A8560846085608560%856052275A6084608560845A8560845A60608460AF8485FFFFA884A8FFFF%A877AF7E53A8AFA8AEA8A8A2774C77537E7DA2A2A883FD1EFF522753855A%605A605A605A605A845A605A605A605A605A605A845A845A605A845A605A%845A845A605A605A605A605A84272759855A605A605A845A8584A984AFA8%FFA884AFFF84AFA883A8AF847E77FF7777FFFFFD04A87DA87D7D52534C77%2727A8A852A87DA87D7D7DA87D7D525252A8FD0EFF7D207E848560858485%608560845A8584855A8560855A8560846085608560856085608560846085%60855A8560605A61602E205A60845A856085608584858485848560856085%5A8560855A845A85847E53852F53848560858485608560846084602727FF%A87D27FD045227FD0452275252FD0EFF522753855A605A845A845A845A60%5A845A845A605A605A845A605A845A605A605A605A605A605A8460846085%848484855252598560845A845A846085848484FF8484A8AF84A9A8FF8484%A8AF5984A9A977A87D5384AF8485848584A984A984AF7D7DFFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8A8FD0EFF7D2759608560605A8560845A8560845A85%60855A8560845A8560605A85608484AF84AFA9FFAFFD15FF84A984A95A85%84AF84FFFFFF84AFFD04FF83A8FFCB77A87E537DFD1EFFA87D7DA87DA87D%527DA87DFF522759855A845A845A845A605A605A845A605A845A605A605A%84848584AFAFA8A7FD0BFFCAFFA8FFA8FD09FFAFFFFFFF6084A884608484%8560AFFD04FFA9AF7D8484FF7E9C7D534CA8FD1DFF7D7D27525252275252%7DFF7D27596085608560856085608560605A856084608584AFA9FD07FF7D%7DFF7D517D525252FF7D527D7DFD045227A8FD06FFAFFFFFAF60FD04AFFF%A88584A984AFA9FFA9FFFFFFAEA883FFA8A2A2774C77A2FD1CFFA8FFA8A8%A8FFA8FFA8FF522759605A605A605A845A845A85848584AFA8FFAFFD0AFF%A87DAFFD087D527D7DA87D7D527DA8FFFFFFAFFFA8FFA88460AFA8AFA8AF%84AFFFFFFFAF84855A84A8FD05FF838484A877774C4C287777A2A2A8A8A8%FD1EFF76F85A848460856085608584858485848584858485848584858485%848584858485848B8585848B845A5A858485848B855927AFFFFFA9FFA9A9%608584AF84AFA9AFA8FFFFFFA8AFFD04FFA985608584FD04FFA883A87DA2%77774C4C464C4C2727FFA8A8FFFFA8FD18FF52272F615A605A605A605A60%5A605A605A605A605A605A605A605A605A605A605A605A605A605A605A60%5A605A605A60272759855A845A845A848485848584AFA8AFA8AFA8FD09FF%A8A9848484AF84A984A883837D7D777776772727FF7D275252277D7D2752%527D27522752FD0EFF7D205A60845A8560845A8560845A8560845A856084%5A8560845A8560845A8560845A8560845A8560845A8560845A856052275A%60856085848584AF84AFA9FFAFFD13FFA9AF84AF8485608584846084842E%27FFA8A87DA87DA87D7D7DA87D7D527D7DFD0EFF52F82F855A605A605A60%5A605A605A605A605A605A605A605A605A605A605A605A605A605A605A60%5A605A605A605A8427202F615A605A605A84608584848485848584858485%84858484848584848485848460858484608560845A8560845A852727A8FD%1DFFA87DA884AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84A87DA884AF84AF84AF84%AF84AFA8AF84AFA8AF84AFA9AF84AFA9AFA8AFA9AFA8AFA9AFA9FFAFFFAF%FFAFFFAFFFAFFFAFAFA8FD8FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.cb7c5a1, 2022/04/14-05:22:35        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator 26.3 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-06-21T07:24:33-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>120</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYqxW/84arp+l69eTaPNc3GlXDLaWVsspa5tv3XGVXMdC37wkhQaUI3pXFWNXH5wa7JY/WtP8o3&#xA;ssZSvrHnIqyLObd1pFG3JVkU/ErfZ+KnbFVk35w+ZBf2yR+S9TW0dSblnhlLLULx3VDTduVArErT&#xA;oahVUy1v80dX0vW5dOXyhqd5AhcrfW6lomRFkav2Ov7r7IJ23FTQFV1j+aGsXUbyf4R1KJfqlxdw&#xA;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&#xA;Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2022-06-21T07:24:33-04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2022-06-21T07:24:33-04:00</xmp:ModifyDate>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>743.981812</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:InstanceID>xmp.iid:6c6e8812-586d-4b55-aba3-0c62e0fba1c2</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:6c6e8812-586d-4b55-aba3-0c62e0fba1c2</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>xmp.did:378ec56f-c06c-45d8-bba7-c810f9ed8269</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:378ec56f-c06c-45d8-bba7-c810f9ed8269</stRef:instanceID>
            <stRef:documentID>xmp.did:378ec56f-c06c-45d8-bba7-c810f9ed8269</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:378ec56f-c06c-45d8-bba7-c810f9ed8269</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6c6e8812-586d-4b55-aba3-0c62e0fba1c2</stEvt:instanceID>
                  <stEvt:when>2022-06-21T07:24:33-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 26.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -323.579 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 323.579 li
708.755 323.579 li
708.755 0 li
cp
clp
89.8979 147.21 mo
217.398 147.21 217.398 147.21 344.898 147.21 cv
344.898 150.515 li
217.398 150.515 217.398 150.515 89.8979 150.515 cv
89.8979 147.21 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.432929 .877256 .010956 9.15541e-05 cmyk
f
354.898 147.21 mo
482.398 147.21 482.398 101.191 609.898 101.191 cv
609.898 102.843 li
482.398 102.843 482.398 148.863 354.898 148.863 cv
354.898 147.21 li
f
354.898 151.341 mo
482.398 151.341 482.313 172.663 609.813 172.663 cv
609.813 174.316 li
482.313 174.316 482.398 152.994 354.898 152.994 cv
354.898 151.341 li
f
89.8979 150.515 mo
217.398 150.515 217.398 150.515 344.898 150.515 cv
344.898 153.82 li
217.398 153.82 217.398 153.82 89.8979 153.82 cv
89.8979 150.515 li
cp
f
354.898 148.863 mo
482.398 148.863 482.398 102.843 609.898 102.843 cv
609.898 103.67 li
482.398 103.67 482.398 149.689 354.898 149.689 cv
354.898 148.863 li
f
354.898 148.863 mo
354.898 149.363 li
418.704 149.367 450.694 137.831 482.568 126.323 cv
514.444 114.821 546.204 103.348 609.898 103.343 cv
609.898 102.843 li
609.398 102.843 li
609.398 103.67 li
609.898 103.67 li
609.898 103.17 li
546.092 103.165 514.102 114.701 482.228 126.209 cv
450.352 137.711 418.592 149.184 354.898 149.189 cv
354.898 149.689 li
355.398 149.689 li
355.398 148.863 li
354.898 148.863 li
354.898 149.363 li
354.898 148.863 li
354.398 148.863 li
354.398 149.689 li
354.398 150.189 li
354.898 150.189 li
418.704 150.194 450.694 138.657 482.568 127.15 cv
514.444 115.648 546.204 104.175 609.898 104.17 cv
610.398 104.17 li
610.398 102.843 li
610.398 102.343 li
609.898 102.343 li
546.092 102.338 514.102 113.875 482.228 125.383 cv
450.352 136.885 418.592 148.358 354.898 148.363 cv
354.398 148.363 li
354.398 148.863 li
354.898 148.863 li
f
354.898 153.82 mo
482.398 153.82 482.491 218.072 609.991 218.072 cv
609.991 218.898 li
482.491 218.898 482.398 154.646 354.898 154.646 cv
354.898 153.82 li
f
354.898 153.82 mo
354.898 154.32 li
418.567 154.328 450.317 170.333 482.22 186.393 cv
514.114 202.459 546.16 218.58 609.991 218.572 cv
609.991 218.072 li
609.491 218.072 li
609.491 218.898 li
609.991 218.898 li
609.991 218.398 li
546.322 218.39 514.572 202.385 482.669 186.326 cv
450.775 170.259 418.729 154.138 354.898 154.146 cv
354.898 154.646 li
355.398 154.646 li
355.398 153.82 li
354.898 153.82 li
354.898 154.32 li
354.898 153.82 li
354.398 153.82 li
354.398 154.646 li
354.398 155.146 li
354.898 155.146 li
418.567 155.155 450.317 171.159 482.22 187.219 cv
514.114 203.286 546.16 219.407 609.991 219.398 cv
610.491 219.398 li
610.491 218.072 li
610.491 217.572 li
609.991 217.572 li
546.322 217.564 514.572 201.559 482.669 185.5 cv
450.775 169.433 418.729 153.312 354.898 153.32 cv
354.398 153.32 li
354.398 153.82 li
354.898 153.82 li
f
354.898 152.994 mo
482.398 152.994 482.313 174.316 609.813 174.316 cv
609.813 175.142 li
482.313 175.142 482.398 153.82 354.898 153.82 cv
354.898 152.994 li
f
354.898 152.994 mo
354.898 153.494 li
418.623 153.495 450.42 158.818 482.273 164.148 cv
514.128 169.479 546.038 174.817 609.813 174.816 cv
609.813 174.316 li
609.313 174.316 li
609.313 175.142 li
609.813 175.142 li
609.813 174.642 li
546.088 174.641 514.291 169.318 482.438 163.988 cv
450.583 158.657 418.673 153.319 354.898 153.32 cv
354.898 153.82 li
355.398 153.82 li
355.398 152.994 li
354.898 152.994 li
354.898 153.494 li
354.898 152.994 li
354.398 152.994 li
354.398 153.82 li
354.398 154.32 li
354.898 154.32 li
418.623 154.321 450.42 159.645 482.273 164.974 cv
514.128 170.306 546.038 175.643 609.813 175.642 cv
610.313 175.642 li
610.313 174.316 li
610.313 173.816 li
609.813 173.816 li
546.088 173.815 514.291 168.491 482.438 163.162 cv
450.583 157.83 418.673 152.493 354.898 152.494 cv
354.398 152.494 li
354.398 152.994 li
354.898 152.994 li
f
354.898 156.299 mo
482.398 156.299 482.398 303.821 609.898 303.821 cv
609.898 304.648 li
482.398 304.648 482.398 157.125 354.898 157.125 cv
354.898 156.299 li
f
354.898 156.299 mo
354.898 156.799 li
386.676 156.802 410.46 165.98 430.316 179.76 cv
460.098 200.429 481.005 231.514 506.445 257.494 cv
531.877 283.471 561.931 304.33 609.898 304.321 cv
609.898 303.821 li
609.398 303.821 li
609.398 304.648 li
609.898 304.648 li
609.898 304.148 li
578.12 304.144 554.335 294.967 534.48 281.187 cv
504.697 260.518 483.791 229.433 458.351 203.452 cv
432.919 177.475 402.864 156.616 354.898 156.625 cv
354.898 157.125 li
355.398 157.125 li
355.398 156.299 li
354.898 156.299 li
354.898 156.799 li
354.898 156.299 li
354.398 156.299 li
354.398 157.125 li
354.398 157.625 li
354.898 157.625 li
386.676 157.629 410.46 166.806 430.316 180.586 cv
460.098 201.255 481.005 232.34 506.445 258.32 cv
531.877 284.297 561.931 305.157 609.898 305.148 cv
610.398 305.148 li
610.398 303.821 li
610.398 303.321 li
609.898 303.321 li
578.12 303.318 554.335 294.14 534.48 280.36 cv
504.697 259.692 483.791 228.607 458.351 202.626 cv
432.919 176.649 402.864 155.79 354.898 155.799 cv
354.398 155.799 li
354.398 156.299 li
354.898 156.299 li
f
89.8979 253.923 mo
217.398 253.923 217.398 228.923 344.898 228.923 cv
344.898 232.228 li
217.398 232.228 217.398 257.228 89.8979 257.228 cv
89.8979 253.923 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 235.533 mo
482.398 235.533 482.398 115.786 609.898 115.786 cv
609.898 119.091 li
482.398 119.091 482.398 238.838 354.898 238.838 cv
354.898 235.533 li
f
89.8979 257.228 mo
217.398 257.228 217.398 232.228 344.898 232.228 cv
344.898 235.533 li
217.398 235.533 217.398 260.533 89.8979 260.533 cv
89.8979 257.228 li
cp
f
354.898 232.228 mo
354.898 228.923 li
372.851 228.923 388.271 224.915 401.88 218.024 cv
403.275 218.375 404.65 218.741 406.007 219.121 cv
391.406 227.355 374.688 232.228 354.898 232.228 cv
411.465 215.828 mo
410.287 215.452 409.091 215.086 407.884 214.733 cv
408.905 214.129 409.926 213.503 410.926 212.867 cv
412.227 213.108 413.511 213.356 414.779 213.612 cv
413.69 214.367 412.578 215.112 411.465 215.828 cv
418 211.296 mo
416.825 211.042 415.627 210.793 414.424 210.552 cv
415.818 209.592 417.204 208.592 418.56 207.571 cv
419.871 207.656 421.163 207.744 422.439 207.834 cv
420.979 209.025 419.504 210.176 418 211.296 cv
426.563 204.331 mo
425.388 204.241 424.205 204.154 423.001 204.068 cv
424.799 202.586 426.569 201.046 428.303 199.463 cv
429.613 199.343 430.911 199.22 432.188 199.094 cv
430.349 200.894 428.472 202.644 426.563 204.331 cv
435.774 192.169 mo
436.677 191.23 437.569 190.281 438.456 189.318 cv
439.038 189.779 439.616 190.244 440.191 190.712 cv
439.867 191.074 439.535 191.442 439.209 191.8 cv
438.078 191.925 436.93 192.048 435.774 192.169 cv
442.626 187.944 mo
442.07 187.477 441.513 187.015 440.951 186.554 cv
442.411 184.907 443.854 183.222 445.276 181.514 cv
445.869 181.893 446.462 182.276 447.049 182.661 cv
445.594 184.452 444.12 186.215 442.626 187.944 cv
447.92 181.582 mo
447.34 181.198 446.754 180.814 446.168 180.435 cv
447.67 178.607 449.15 176.75 450.614 174.862 cv
451.512 174.402 452.406 173.936 453.291 173.467 cv
453.517 173.563 453.743 173.659 453.968 173.755 cv
451.986 176.414 449.969 179.029 447.92 181.582 cv
463.923 156.748 mo
463.878 156.696 463.837 156.648 463.792 156.596 cv
465.883 153.517 467.949 150.399 469.998 147.255 cv
470.449 147.658 470.904 148.067 471.354 148.472 cv
469.986 150.586 468.607 152.694 467.223 154.783 cv
466.127 155.443 465.032 156.096 463.923 156.748 cv
472.701 146.385 mo
472.253 145.979 471.803 145.572 471.354 145.167 cv
474.035 141.025 476.691 136.843 479.341 132.649 cv
479.847 132.952 480.349 133.252 480.855 133.555 cv
478.146 137.85 475.437 142.133 472.701 146.385 cv
485.34 123.139 mo
491.23 113.815 497.159 104.534 503.315 95.6328 cv
504.024 95.7165 504.734 95.7996 505.449 95.8825 cv
499.474 104.356 493.727 113.221 488.049 122.166 cv
487.143 122.49 486.244 122.814 485.34 123.139 cv
533.469 62.2721 mo
532.434 62.1905 531.4 62.1068 530.385 62.0225 cv
551.013 41.0399 575.846 26.7281 609.648 26.6495 cv
609.648 29.9547 li
577.516 30.0294 553.484 42.9705 533.469 62.2721 cv
.118257 0 .0197147 0 cmyk
f
484.911 124.415 mo
484.821 124.361 484.727 124.305 484.638 124.252 cv
484.871 123.881 485.106 123.509 485.34 123.139 cv
486.244 122.814 487.143 122.49 488.049 122.166 cv
487.74 122.652 487.437 123.13 487.129 123.617 cv
486.387 123.883 485.651 124.148 484.911 124.415 cv
.499031 .748196 .00274662 0 cmyk
f
486.154 125.157 mo
485.737 124.908 485.327 124.664 484.911 124.415 cv
485.651 124.148 486.387 123.883 487.129 123.617 cv
486.805 124.128 486.477 124.646 486.154 125.157 cv
f
453.968 173.755 mo
453.743 173.659 453.517 173.563 453.291 173.467 cv
453.786 173.206 454.275 172.945 454.766 172.68 cv
454.501 173.038 454.234 173.399 453.968 173.755 cv
f
441.882 188.801 mo
441.317 188.329 440.762 187.872 440.191 187.407 cv
440.447 187.122 440.696 186.842 440.951 186.554 cv
441.513 187.015 442.07 187.477 442.626 187.944 cv
442.379 188.231 442.131 188.517 441.882 188.801 cv
f
89.8979 50.25 mo
217.398 50.25 217.398 25.25 344.898 25.25 cv
344.898 28.5551 li
217.398 28.5551 217.398 53.5551 89.8979 53.5551 cv
89.8979 50.25 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 28.5551 mo
354.898 25.25 li
482.312 25.25 482.405 .28357 609.648 .250046 cv
609.648 3.5552 li
482.405 3.58873 482.312 28.5551 354.898 28.5551 cv
.125002 .180667 .0336919 0 cmyk
f
89.8979 260.533 mo
217.398 260.533 217.398 235.533 344.898 235.533 cv
344.898 238.838 li
217.398 238.838 217.398 263.838 89.8979 263.838 cv
89.8979 260.533 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 238.838 mo
482.398 238.838 482.398 119.091 609.898 119.091 cv
609.898 120.743 li
482.398 120.743 482.398 240.49 354.898 240.49 cv
354.898 238.838 li
f
354.898 265.884 mo
482.398 265.884 482.398 266.844 609.898 266.844 cv
609.898 268.497 li
482.398 268.497 482.398 267.537 354.898 267.537 cv
354.898 265.884 li
f
89.8979 263.838 mo
217.398 263.838 217.398 238.838 344.898 238.838 cv
344.898 242.143 li
217.398 242.143 217.398 267.143 89.8979 267.143 cv
89.8979 263.838 li
cp
f
354.898 256.41 mo
482.398 256.41 482.398 223.215 609.898 223.215 cv
609.898 226.52 li
482.398 226.52 482.398 259.715 354.898 259.715 cv
354.898 256.41 li
f
89.8979 267.143 mo
217.398 267.143 217.398 242.143 344.898 242.143 cv
344.898 245.448 li
217.398 245.448 217.398 270.448 89.8979 270.448 cv
89.8979 267.143 li
cp
f
354.898 240.49 mo
482.398 240.49 482.398 120.743 609.898 120.743 cv
609.898 121.57 li
482.398 121.57 482.398 241.317 354.898 241.317 cv
354.898 240.49 li
f
354.898 240.49 mo
354.898 240.99 li
386.851 240.992 410.859 233.481 430.847 222.215 cv
460.829 205.314 481.766 180.022 507.121 159.017 cv
532.482 138.011 562.205 121.251 609.898 121.243 cv
609.898 120.743 li
609.398 120.743 li
609.398 121.57 li
609.898 121.57 li
609.898 121.069 li
577.945 121.067 553.937 128.579 533.949 139.844 cv
503.967 156.745 483.029 182.038 457.675 203.043 cv
432.314 224.049 402.59 240.809 354.898 240.817 cv
354.898 241.317 li
355.398 241.317 li
355.398 240.49 li
354.898 240.49 li
354.898 240.99 li
354.898 240.49 li
354.398 240.49 li
354.398 241.317 li
354.398 241.817 li
354.898 241.817 li
386.851 241.819 410.859 234.307 430.847 223.042 cv
460.829 206.141 481.766 180.848 507.121 159.843 cv
532.482 138.837 562.205 122.077 609.898 122.069 cv
610.398 122.069 li
610.398 120.743 li
610.398 120.243 li
609.898 120.243 li
577.945 120.241 553.937 127.752 533.949 139.018 cv
503.967 155.919 483.029 181.212 457.675 202.217 cv
432.314 223.223 402.59 239.982 354.898 239.99 cv
354.398 239.99 li
354.398 240.49 li
354.898 240.49 li
f
354.898 250.516 mo
482.398 250.516 482.398 182.484 609.898 182.484 cv
609.898 183.311 li
482.398 183.311 482.398 251.342 354.898 251.342 cv
354.898 250.516 li
f
354.898 250.516 mo
354.898 251.016 li
418.735 251.025 450.764 233.952 482.633 216.941 cv
514.513 199.937 546.235 182.993 609.898 182.984 cv
609.898 182.484 li
609.398 182.484 li
609.398 183.311 li
609.898 183.311 li
609.898 182.811 li
546.061 182.802 514.032 199.874 482.163 216.885 cv
450.282 233.89 418.561 250.833 354.898 250.842 cv
354.898 251.342 li
355.398 251.342 li
355.398 250.516 li
354.898 250.516 li
354.898 251.016 li
354.898 250.516 li
354.398 250.516 li
354.398 251.342 li
354.398 251.842 li
354.898 251.842 li
418.735 251.851 450.764 234.779 482.633 217.768 cv
514.513 200.763 546.235 183.819 609.898 183.811 cv
610.398 183.811 li
610.398 182.484 li
610.398 181.984 li
609.898 181.984 li
546.061 181.976 514.032 199.048 482.163 216.059 cv
450.282 233.063 418.561 250.007 354.898 250.016 cv
354.398 250.016 li
354.398 250.516 li
354.898 250.516 li
f
354.898 271.779 mo
482.398 271.779 482.398 313.269 609.898 313.269 cv
609.898 314.096 li
482.398 314.096 482.398 272.605 354.898 272.605 cv
354.898 271.779 li
f
354.898 271.779 mo
354.898 272.279 li
418.598 272.283 450.368 282.629 482.243 292.999 cv
514.118 303.375 546.098 313.773 609.898 313.769 cv
609.898 313.269 li
609.398 313.269 li
609.398 314.096 li
609.898 314.096 li
609.898 313.596 li
546.198 313.592 514.428 303.245 482.553 292.875 cv
450.678 282.5 418.698 272.101 354.898 272.105 cv
354.898 272.605 li
355.398 272.605 li
355.398 271.779 li
354.898 271.779 li
354.898 272.279 li
354.898 271.779 li
354.398 271.779 li
354.398 272.605 li
354.398 273.105 li
354.898 273.105 li
418.598 273.109 450.368 283.456 482.243 293.826 cv
514.118 304.201 546.098 314.6 609.898 314.596 cv
610.398 314.596 li
610.398 313.269 li
610.398 312.769 li
609.898 312.769 li
546.198 312.765 514.428 302.419 482.553 292.048 cv
450.678 281.673 418.698 271.274 354.898 271.279 cv
354.398 271.279 li
354.398 271.779 li
354.898 271.779 li
f
354.898 267.537 mo
482.398 267.537 482.398 268.497 609.898 268.497 cv
609.898 269.323 li
482.398 269.323 482.398 268.363 354.898 268.363 cv
354.898 267.537 li
f
354.898 267.537 mo
354.898 268.037 li
482.394 268.037 482.393 268.997 609.898 268.997 cv
609.898 268.497 li
609.398 268.497 li
609.398 269.323 li
609.898 269.323 li
609.898 268.823 li
482.402 268.823 482.402 267.863 354.898 267.863 cv
354.898 268.363 li
355.398 268.363 li
355.398 267.537 li
354.898 267.537 li
354.898 268.037 li
354.898 267.537 li
354.398 267.537 li
354.398 268.363 li
354.398 268.863 li
354.898 268.863 li
482.394 268.863 482.393 269.823 609.898 269.823 cv
610.398 269.823 li
610.398 268.497 li
610.398 267.997 li
609.898 267.997 li
482.402 267.997 482.402 267.037 354.898 267.037 cv
354.398 267.037 li
354.398 267.537 li
354.898 267.537 li
f
89.8979 270.448 mo
217.398 270.448 217.398 245.448 344.898 245.448 cv
344.898 248.753 li
217.398 248.753 217.398 273.753 89.8979 273.753 cv
89.8979 270.448 li
cp
f
354.898 241.317 mo
482.398 241.317 482.398 121.57 609.898 121.57 cv
609.898 122.23 li
482.398 122.23 482.398 241.978 354.898 241.978 cv
354.898 241.317 li
f
354.898 241.317 mo
354.898 241.817 li
386.851 241.819 410.859 234.307 430.847 223.042 cv
460.829 206.141 481.766 180.848 507.121 159.843 cv
532.482 138.837 562.205 122.077 609.898 122.069 cv
609.898 121.57 li
609.398 121.57 li
609.398 122.23 li
609.898 122.23 li
609.898 121.73 li
577.945 121.728 553.937 129.24 533.949 140.505 cv
503.967 157.407 483.029 182.699 457.675 203.704 cv
432.314 224.71 402.59 241.47 354.898 241.478 cv
354.898 241.978 li
355.398 241.978 li
355.398 241.317 li
354.898 241.317 li
354.898 241.817 li
354.898 241.317 li
354.398 241.317 li
354.398 241.978 li
354.398 242.478 li
354.898 242.478 li
386.851 242.48 410.859 234.968 430.847 223.703 cv
460.829 206.802 481.766 181.509 507.121 160.504 cv
532.482 139.498 562.205 122.738 609.898 122.73 cv
610.398 122.73 li
610.398 121.57 li
610.398 121.069 li
609.898 121.069 li
577.945 121.067 553.937 128.579 533.949 139.844 cv
503.967 156.745 483.029 182.038 457.675 203.043 cv
432.314 224.049 402.59 240.809 354.898 240.817 cv
354.398 240.817 li
354.398 241.317 li
354.898 241.317 li
f
354.898 259.715 mo
482.398 259.715 482.398 226.52 609.898 226.52 cv
609.898 227.181 li
482.398 227.181 482.398 260.376 354.898 260.376 cv
354.898 259.715 li
f
354.898 259.715 mo
354.898 260.215 li
418.687 260.218 450.649 251.902 482.524 243.601 cv
514.398 235.305 546.187 227.023 609.898 227.02 cv
609.898 226.52 li
609.398 226.52 li
609.398 227.181 li
609.898 227.181 li
609.898 226.681 li
546.109 226.679 514.147 234.994 482.272 243.295 cv
450.397 251.592 418.609 259.873 354.898 259.876 cv
354.898 260.376 li
355.398 260.376 li
355.398 259.715 li
354.898 259.715 li
354.898 260.215 li
354.898 259.715 li
354.398 259.715 li
354.398 260.376 li
354.398 260.876 li
354.898 260.876 li
418.687 260.879 450.649 252.563 482.524 244.263 cv
514.398 235.966 546.187 227.684 609.898 227.681 cv
610.398 227.681 li
610.398 226.52 li
610.398 226.02 li
609.898 226.02 li
546.109 226.018 514.147 234.333 482.272 242.634 cv
450.397 250.931 418.609 259.212 354.898 259.215 cv
354.398 259.215 li
354.398 259.715 li
354.898 259.715 li
f
354.898 251.342 mo
482.398 251.342 482.398 183.311 609.898 183.311 cv
609.898 183.972 li
482.398 183.972 482.398 252.003 354.898 252.003 cv
354.898 251.342 li
f
354.898 251.342 mo
354.898 251.842 li
418.735 251.851 450.764 234.779 482.633 217.768 cv
514.513 200.763 546.235 183.819 609.898 183.811 cv
609.898 183.311 li
609.398 183.311 li
609.398 183.972 li
609.898 183.972 li
609.898 183.472 li
546.061 183.463 514.032 200.535 482.163 217.546 cv
450.282 234.551 418.561 251.494 354.898 251.503 cv
354.898 252.003 li
355.398 252.003 li
355.398 251.342 li
354.898 251.342 li
354.898 251.842 li
354.898 251.342 li
354.398 251.342 li
354.398 252.003 li
354.398 252.503 li
354.898 252.503 li
418.735 252.512 450.764 235.44 482.633 218.428 cv
514.513 201.424 546.235 184.481 609.898 184.472 cv
610.398 184.472 li
610.398 183.311 li
610.398 182.811 li
609.898 182.811 li
546.061 182.802 514.032 199.874 482.163 216.885 cv
450.282 233.89 418.561 250.833 354.898 250.842 cv
354.398 250.842 li
354.398 251.342 li
354.898 251.342 li
f
354.898 272.605 mo
482.398 272.605 482.398 314.096 609.898 314.096 cv
609.898 314.757 li
482.398 314.757 482.398 273.266 354.898 273.266 cv
354.898 272.605 li
f
354.898 272.605 mo
354.898 273.105 li
418.598 273.109 450.368 283.456 482.243 293.826 cv
514.118 304.201 546.098 314.6 609.898 314.596 cv
609.898 314.096 li
609.398 314.096 li
609.398 314.757 li
609.898 314.757 li
609.898 314.257 li
546.198 314.252 514.428 303.906 482.553 293.536 cv
450.678 283.16 418.698 272.762 354.898 272.766 cv
354.898 273.266 li
355.398 273.266 li
355.398 272.605 li
354.898 272.605 li
354.898 273.105 li
354.898 272.605 li
354.398 272.605 li
354.398 273.266 li
354.398 273.766 li
354.898 273.766 li
418.598 273.77 450.368 284.116 482.243 294.487 cv
514.118 304.862 546.098 315.261 609.898 315.257 cv
610.398 315.257 li
610.398 314.096 li
610.398 313.596 li
609.898 313.596 li
546.198 313.592 514.428 303.245 482.553 292.875 cv
450.678 282.5 418.698 272.101 354.898 272.105 cv
354.398 272.105 li
354.398 272.605 li
354.898 272.605 li
f
354.898 268.363 mo
482.398 268.363 482.398 269.323 609.898 269.323 cv
609.898 269.984 li
482.398 269.984 482.398 269.024 354.898 269.024 cv
354.898 268.363 li
f
354.898 268.363 mo
354.898 268.863 li
482.394 268.863 482.393 269.823 609.898 269.823 cv
609.898 269.323 li
609.398 269.323 li
609.398 269.984 li
609.898 269.984 li
609.898 269.484 li
482.402 269.484 482.402 268.524 354.898 268.524 cv
354.898 269.024 li
355.398 269.024 li
355.398 268.363 li
354.898 268.363 li
354.898 268.863 li
354.898 268.363 li
354.398 268.363 li
354.398 269.024 li
354.398 269.524 li
354.898 269.524 li
482.394 269.524 482.393 270.484 609.898 270.484 cv
610.398 270.484 li
610.398 269.323 li
610.398 268.823 li
609.898 268.823 li
482.402 268.823 482.402 267.863 354.898 267.863 cv
354.398 267.863 li
354.398 268.363 li
354.898 268.363 li
f
89.8979 182.363 mo
217.398 182.363 217.398 182.363 344.898 182.363 cv
344.898 185.668 li
217.398 185.668 217.398 185.668 89.8979 185.668 cv
89.8979 182.363 li
cp
.48127 .12842 .425422 0 cmyk
f
354.898 195.859 mo
482.398 195.859 482.398 175.556 609.898 175.556 cv
609.898 178.861 li
482.398 178.861 482.398 199.164 354.898 199.164 cv
354.898 195.859 li
f
89.8979 185.668 mo
217.398 185.668 217.398 185.668 344.898 185.668 cv
344.898 188.973 li
217.398 188.973 217.398 188.973 89.8979 188.973 cv
89.8979 185.668 li
cp
f
354.898 201.918 mo
482.398 201.918 482.398 219.414 609.898 219.414 cv
609.898 221.067 li
482.398 221.067 482.398 203.571 354.898 203.571 cv
354.898 201.918 li
f
354.898 207.702 mo
482.398 207.702 482.21 307.861 609.711 307.861 cv
609.711 309.513 li
482.21 309.513 482.398 209.354 354.898 209.354 cv
354.898 207.702 li
f
89.8979 188.973 mo
217.398 188.973 217.398 188.973 344.898 188.973 cv
344.898 192.278 li
217.398 192.278 217.398 192.278 89.8979 192.278 cv
89.8979 188.973 li
cp
f
354.898 185.668 mo
482.398 185.668 482.398 105.015 609.898 105.015 cv
609.898 108.32 li
482.398 108.32 482.398 188.973 354.898 188.973 cv
354.898 185.668 li
f
89.8979 53.5551 mo
217.398 53.5551 217.398 28.5551 344.898 28.5551 cv
344.898 31.8602 li
217.398 31.8602 217.398 56.8602 89.8979 56.8602 cv
89.8979 53.5551 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 31.8601 mo
354.898 28.5551 li
482.312 28.5551 482.405 3.58873 609.648 3.5552 cv
609.648 6.86018 li
482.405 6.89371 482.312 31.8601 354.898 31.8601 cv
.125002 .180667 .0336919 0 cmyk
f
89.8979 300.194 mo
217.398 300.194 217.398 300.194 344.898 300.194 cv
344.898 303.499 li
217.398 303.499 217.398 303.499 89.8979 303.499 cv
89.8979 300.194 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 318.372 mo
482.398 318.372 482.398 316.685 609.898 316.685 cv
609.898 319.99 li
482.398 319.99 482.398 321.677 354.898 321.677 cv
354.898 318.372 li
cp
f
89.8979 56.8602 mo
217.398 56.8602 217.398 31.8602 344.898 31.8602 cv
344.898 35.1653 li
217.398 35.1653 217.398 60.1653 89.8979 60.1653 cv
89.8979 56.8602 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 84.7416 mo
482.398 84.7416 482.398 161.08 609.898 161.08 cv
609.898 164.386 li
482.398 164.386 482.398 88.0465 354.898 88.0465 cv
354.898 84.7416 li
f
89.8979 273.753 mo
217.398 273.753 217.398 248.753 344.898 248.753 cv
344.898 252.058 li
217.398 252.058 217.398 277.058 89.8979 277.058 cv
89.8979 273.753 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 260.376 mo
482.398 260.376 482.398 227.181 609.898 227.181 cv
609.898 228.008 li
482.398 228.008 482.398 261.202 354.898 261.202 cv
354.898 260.376 li
f
354.898 260.376 mo
354.898 260.876 li
418.687 260.879 450.649 252.563 482.524 244.263 cv
514.398 235.966 546.187 227.684 609.898 227.681 cv
609.898 227.181 li
609.398 227.181 li
609.398 228.008 li
609.898 228.008 li
609.898 227.508 li
546.109 227.505 514.147 235.821 482.272 244.121 cv
450.397 252.418 418.609 260.699 354.898 260.702 cv
354.898 261.202 li
355.398 261.202 li
355.398 260.376 li
354.898 260.376 li
354.898 260.876 li
354.898 260.376 li
354.398 260.376 li
354.398 261.202 li
354.398 261.702 li
354.898 261.702 li
418.687 261.705 450.649 253.389 482.524 245.089 cv
514.398 236.792 546.187 228.51 609.898 228.508 cv
610.398 228.508 li
610.398 227.181 li
610.398 226.681 li
609.898 226.681 li
546.109 226.679 514.147 234.994 482.272 243.295 cv
450.397 251.592 418.609 259.873 354.898 259.876 cv
354.398 259.876 li
354.398 260.376 li
354.898 260.376 li
f
354.898 252.003 mo
482.398 252.003 482.398 183.972 609.898 183.972 cv
609.898 184.798 li
482.398 184.798 482.398 252.829 354.898 252.829 cv
354.898 252.003 li
f
354.898 252.003 mo
354.898 252.503 li
418.735 252.512 450.764 235.44 482.633 218.428 cv
514.513 201.424 546.235 184.481 609.898 184.472 cv
609.898 183.972 li
609.398 183.972 li
609.398 184.798 li
609.898 184.798 li
609.898 184.298 li
546.061 184.289 514.032 201.361 482.163 218.372 cv
450.282 235.377 418.561 252.32 354.898 252.329 cv
354.898 252.829 li
355.398 252.829 li
355.398 252.003 li
354.898 252.003 li
354.898 252.503 li
354.898 252.003 li
354.398 252.003 li
354.398 252.829 li
354.398 253.329 li
354.898 253.329 li
418.735 253.338 450.764 236.266 482.633 219.255 cv
514.513 202.25 546.235 185.307 609.898 185.298 cv
610.398 185.298 li
610.398 183.972 li
610.398 183.472 li
609.898 183.472 li
546.061 183.463 514.032 200.535 482.163 217.546 cv
450.282 234.551 418.561 251.494 354.898 251.503 cv
354.398 251.503 li
354.398 252.003 li
354.898 252.003 li
f
354.898 273.266 mo
482.398 273.266 482.398 314.757 609.898 314.757 cv
609.898 315.583 li
482.398 315.583 482.398 274.092 354.898 274.092 cv
354.898 273.266 li
f
354.898 273.266 mo
354.898 273.766 li
418.598 273.77 450.368 284.116 482.243 294.487 cv
514.118 304.862 546.098 315.261 609.898 315.257 cv
609.898 314.757 li
609.398 314.757 li
609.398 315.583 li
609.898 315.583 li
609.898 315.083 li
546.198 315.079 514.428 304.732 482.553 294.362 cv
450.678 283.987 418.698 273.588 354.898 273.592 cv
354.898 274.092 li
355.398 274.092 li
355.398 273.266 li
354.898 273.266 li
354.898 273.766 li
354.898 273.266 li
354.398 273.266 li
354.398 274.092 li
354.398 274.592 li
354.898 274.592 li
418.598 274.596 450.368 284.943 482.243 295.313 cv
514.118 305.688 546.098 316.087 609.898 316.083 cv
610.398 316.083 li
610.398 314.757 li
610.398 314.257 li
609.898 314.257 li
546.198 314.252 514.428 303.906 482.553 293.536 cv
450.678 283.16 418.698 272.762 354.898 272.766 cv
354.398 272.766 li
354.398 273.266 li
354.898 273.266 li
f
354.898 269.024 mo
482.398 269.024 482.398 269.984 609.898 269.984 cv
609.898 270.81 li
482.398 270.81 482.398 269.851 354.898 269.851 cv
354.898 269.024 li
f
354.898 269.024 mo
354.898 269.524 li
482.394 269.524 482.393 270.484 609.898 270.484 cv
609.898 269.984 li
609.398 269.984 li
609.398 270.81 li
609.898 270.81 li
609.898 270.31 li
482.402 270.31 482.402 269.351 354.898 269.351 cv
354.898 269.851 li
355.398 269.851 li
355.398 269.024 li
354.898 269.024 li
354.898 269.524 li
354.898 269.024 li
354.398 269.024 li
354.398 269.851 li
354.398 270.351 li
354.898 270.351 li
482.394 270.351 482.393 271.31 609.898 271.31 cv
610.398 271.31 li
610.398 269.984 li
610.398 269.484 li
609.898 269.484 li
482.402 269.484 482.402 268.524 354.898 268.524 cv
354.398 268.524 li
354.398 269.024 li
354.898 269.024 li
f
89.8979 192.278 mo
217.398 192.278 217.398 192.278 344.898 192.278 cv
344.898 195.583 li
217.398 195.583 217.398 195.583 89.8979 195.583 cv
89.8979 192.278 li
cp
.48127 .12842 .425422 0 cmyk
f
354.898 188.973 mo
482.398 188.973 482.398 108.32 609.898 108.32 cv
609.898 109.972 li
482.398 109.972 482.398 190.625 354.898 190.625 cv
354.898 188.973 li
f
354.898 205.223 mo
482.398 205.223 482.224 263.865 609.724 263.865 cv
609.724 265.518 li
482.224 265.518 482.398 206.876 354.898 206.876 cv
354.898 205.223 li
f
89.8979 60.1653 mo
217.398 60.1653 217.398 35.1653 344.898 35.1653 cv
344.898 38.4703 li
217.398 38.4703 217.398 63.4703 89.8979 63.4703 cv
89.8979 60.1653 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 35.1653 mo
354.898 31.8601 li
482.312 31.8601 482.405 6.89371 609.648 6.86018 cv
609.648 10.1653 li
482.405 10.1989 482.312 35.1653 354.898 35.1653 cv
.125002 .180667 .0336919 0 cmyk
f
89.8979 63.4703 mo
217.398 63.4703 217.398 38.4703 344.898 38.4703 cv
344.898 41.7754 li
217.398 41.7754 217.398 66.7754 89.8979 66.7754 cv
89.8979 63.4703 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 48.3856 mo
482.398 48.3856 482.398 64.911 609.898 64.911 cv
609.898 68.2161 li
482.398 68.2161 482.398 51.6907 354.898 51.6907 cv
354.898 48.3856 li
f
89.8979 277.058 mo
217.398 277.058 217.398 252.058 344.898 252.058 cv
344.898 255.363 li
217.398 255.363 217.398 280.363 89.8979 280.363 cv
89.8979 277.058 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 235.533 mo
354.898 232.228 li
374.688 232.228 391.406 227.355 406.007 219.121 cv
407.267 219.475 408.514 219.841 409.743 220.219 cv
394.269 229.784 376.4 235.533 354.898 235.533 cv
354.898 235.533 li
.118257 0 .0197147 0 cmyk
f
414.77 216.923 mo
413.682 216.549 412.577 216.183 411.465 215.828 cv
412.578 215.112 413.69 214.367 414.779 213.612 cv
415.976 213.854 417.158 214.102 418.327 214.357 cv
417.154 215.236 415.972 216.089 414.77 216.923 cv
f
413.671 217.676 mo
412.552 217.302 411.419 216.937 410.275 216.583 cv
410.677 216.332 411.067 216.084 411.465 215.828 cv
412.577 216.183 413.682 216.549 414.77 216.923 cv
414.407 217.175 414.037 217.429 413.671 217.676 cv
.515862 .108736 .365789 0 cmyk
f
421.323 212.039 mo
420.226 211.785 419.122 211.538 418 211.296 cv
419.504 210.176 420.979 209.025 422.439 207.834 cv
423.654 207.92 424.853 208.008 426.038 208.098 cv
424.488 209.454 422.924 210.763 421.323 212.039 cv
429.899 204.594 mo
428.8 204.505 427.687 204.417 426.563 204.331 cv
428.472 202.644 430.349 200.894 432.188 199.094 cv
433.416 198.974 434.626 198.851 435.825 198.726 cv
433.889 200.741 431.913 202.702 429.899 204.594 cv
439.209 191.8 mo
439.535 191.442 439.867 191.074 440.191 190.712 cv
440.539 190.995 440.895 191.287 441.24 191.573 cv
440.568 191.649 439.889 191.725 439.209 191.8 cv
444.261 189.335 mo
443.719 188.868 443.174 188.405 442.626 187.944 cv
444.12 186.215 445.594 184.452 447.049 182.661 cv
447.628 183.04 448.208 183.424 448.781 183.808 cv
447.293 185.683 445.789 187.524 444.261 189.335 cv
449.633 182.729 mo
449.063 182.343 448.496 181.963 447.92 181.582 cv
449.969 179.029 451.986 176.414 453.968 173.755 cv
454.586 174.019 455.205 174.286 455.818 174.553 cv
453.788 177.332 451.731 180.057 449.633 182.729 cv
456.876 173.097 mo
456.346 172.865 455.813 172.633 455.279 172.403 cv
456.401 171.796 457.511 171.184 458.615 170.566 cv
458.628 170.583 458.64 170.6 458.653 170.617 cv
458.063 171.447 457.47 172.275 456.876 173.097 cv
.118257 0 .0197147 0 cmyk
f
455.818 174.553 mo
455.205 174.286 454.586 174.019 453.968 173.755 cv
454.234 173.399 454.501 173.038 454.766 172.68 cv
454.936 172.589 455.109 172.495 455.279 172.403 cv
455.813 172.633 456.346 172.865 456.876 173.097 cv
456.523 173.586 456.173 174.067 455.818 174.553 cv
.499031 .748196 .00274662 0 cmyk
f
443.531 190.195 mo
442.985 189.728 442.433 189.262 441.882 188.801 cv
442.131 188.517 442.379 188.231 442.626 187.944 cv
443.174 188.405 443.719 188.868 444.261 189.335 cv
444.016 189.625 443.777 189.907 443.531 190.195 cv
f
436.309 194.916 mo
437.288 193.888 438.248 192.856 439.209 191.8 cv
439.889 191.725 440.568 191.649 441.24 191.573 cv
441.458 191.753 441.665 191.925 441.882 192.106 cv
441.168 192.924 440.439 193.744 439.715 194.546 cv
438.592 194.671 437.457 194.794 436.309 194.916 cv
.515862 .108736 .365789 0 cmyk
f
428.761 205.654 mo
427.637 205.564 426.5 205.477 425.35 205.391 cv
425.758 205.038 426.158 204.689 426.563 204.331 cv
427.687 204.417 428.8 204.505 429.899 204.594 cv
429.518 204.953 429.145 205.3 428.761 205.654 cv
f
467.223 154.783 mo
468.607 152.694 469.986 150.586 471.354 148.472 cv
471.803 148.877 472.253 149.284 472.701 149.69 cv
472.08 150.655 471.45 151.629 470.827 152.591 cv
469.635 153.323 468.428 154.058 467.223 154.783 cv
474.04 147.603 mo
473.594 147.195 473.149 146.791 472.701 146.385 cv
475.437 142.133 478.146 137.85 480.855 133.555 cv
481.357 133.856 481.866 134.16 482.368 134.461 cv
479.601 138.85 476.829 143.247 474.04 147.603 cv
488.049 122.166 mo
493.727 113.221 499.474 104.356 505.449 95.8825 cv
506.168 95.9658 506.9 96.0497 507.626 96.1321 cv
501.824 104.188 496.258 112.628 490.776 121.192 cv
489.866 121.515 488.955 121.841 488.049 122.166 cv
.118257 0 .0197147 0 cmyk
f
487.129 123.617 mo
487.437 123.13 487.74 122.652 488.049 122.166 cv
488.955 121.841 489.866 121.515 490.776 121.192 cv
490.466 121.676 490.157 122.159 489.848 122.643 cv
488.939 122.967 488.034 123.291 487.129 123.617 cv
.499031 .748196 .00274662 0 cmyk
f
486.329 125.262 mo
486.271 125.227 486.212 125.192 486.154 125.157 cv
486.477 124.646 486.805 124.128 487.129 123.617 cv
488.034 123.291 488.939 122.967 489.848 122.643 cv
489.476 123.226 489.1 123.817 488.728 124.401 cv
487.927 124.688 487.128 124.975 486.329 125.262 cv
f
463.535 160.281 mo
463.619 160.156 463.708 160.026 463.792 159.901 cv
463.837 159.953 463.878 160.001 463.923 160.053 cv
463.794 160.129 463.664 160.205 463.535 160.281 cv
465.798 158.942 mo
465.546 158.645 465.294 158.349 465.041 158.053 cv
465.772 156.966 466.498 155.879 467.223 154.783 cv
468.428 154.058 469.635 153.323 470.827 152.591 cv
469.63 154.434 468.432 156.264 467.223 158.088 cv
466.749 158.374 466.275 158.658 465.798 158.942 cv
.515862 .108736 .365789 0 cmyk
f
486.154 128.462 mo
485.647 128.16 485.144 127.859 484.638 127.557 cv
484.646 127.544 484.657 127.526 484.665 127.514 cv
485.568 127.188 486.465 126.865 487.37 126.54 cv
486.964 127.181 486.559 127.821 486.154 128.462 cv
486.016 125.375 mo
486.063 125.301 486.107 125.231 486.154 125.157 cv
486.212 125.192 486.271 125.227 486.329 125.262 cv
486.224 125.3 486.121 125.337 486.016 125.375 cv
.871 1 .229892 .104494 cmyk
f
461.651 163.03 mo
462.281 162.116 462.908 161.201 463.535 160.281 cv
463.664 160.205 463.794 160.129 463.923 160.053 cv
464.237 160.418 464.55 160.783 464.864 161.15 cv
463.799 161.781 462.729 162.407 461.651 163.03 cv
466.279 159.509 mo
466.119 159.32 465.959 159.131 465.798 158.942 cv
466.275 158.658 466.749 158.374 467.223 158.088 cv
466.908 158.564 466.595 159.035 466.279 159.509 cv
.515862 .108736 .365789 0 cmyk
f
420.201 212.924 mo
419.077 212.67 417.945 212.423 416.794 212.182 cv
417.2 211.887 417.597 211.595 418 211.296 cv
419.122 211.538 420.226 211.785 421.323 212.039 cv
420.956 212.333 420.572 212.635 420.201 212.924 cv
f
536.731 62.5217 mo
535.633 62.4401 534.544 62.3568 533.469 62.2721 cv
553.484 42.9705 577.516 30.0294 609.648 29.9547 cv
609.648 33.2596 li
579.242 33.3304 556.089 44.9205 536.731 62.5217 cv
.118257 0 .0197147 0 cmyk
f
533.469 65.5773 mo
532.434 65.4957 531.4 65.412 530.385 65.3277 cv
531.405 64.2906 532.429 63.2757 533.469 62.2721 cv
534.544 62.3568 535.633 62.4401 536.731 62.5217 cv
535.633 63.5203 534.544 64.541 533.469 65.5773 cv
.871 1 .229892 .104494 cmyk
f
89.8979 280.363 mo
217.398 280.363 217.398 255.363 344.898 255.363 cv
344.898 258.668 li
217.398 258.668 217.398 283.668 89.8979 283.668 cv
89.8979 280.363 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 241.978 mo
482.398 241.978 482.398 122.23 609.898 122.23 cv
609.898 123.332 li
482.398 123.332 482.398 243.079 354.898 243.079 cv
354.898 241.978 li
f
354.898 261.202 mo
482.398 261.202 482.398 228.008 609.898 228.008 cv
609.898 229.109 li
482.398 229.109 482.398 262.304 354.898 262.304 cv
354.898 261.202 li
f
354.898 252.829 mo
482.398 252.829 482.398 184.798 609.898 184.798 cv
609.898 185.9 li
482.398 185.9 482.398 253.931 354.898 253.931 cv
354.898 252.829 li
f
89.8979 195.583 mo
217.398 195.583 217.398 195.583 344.898 195.583 cv
344.898 198.888 li
217.398 198.888 217.398 198.888 89.8979 198.888 cv
89.8979 195.583 li
cp
.48127 .12842 .425422 0 cmyk
f
354.898 185.668 mo
354.898 182.363 li
375.746 182.363 393.199 178.107 408.366 170.989 cv
409.547 171.504 410.711 172.034 411.865 172.581 cv
395.893 180.727 377.372 185.668 354.898 185.668 cv
354.898 185.668 li
416.396 170.148 mo
415.358 169.606 414.307 169.076 413.247 168.56 cv
414.321 167.995 415.38 167.417 416.431 166.823 cv
417.567 167.257 418.686 167.702 419.796 168.158 cv
418.679 168.835 417.539 169.503 416.396 170.148 cv
421.394 167.173 mo
420.327 166.72 419.234 166.271 418.144 165.838 cv
419.708 164.921 421.253 163.971 422.769 162.994 cv
423.961 163.306 425.132 163.623 426.295 163.948 cv
424.689 165.056 423.054 166.133 421.394 167.173 cv
428.185 162.622 mo
427.063 162.299 425.93 161.982 424.783 161.671 cv
426.72 160.374 428.615 159.032 430.479 157.643 cv
431.757 157.771 433.017 157.902 434.263 158.036 cv
432.278 159.614 430.251 161.146 428.185 162.622 cv
437.481 155.408 mo
436.301 155.275 435.111 155.144 433.904 155.016 cv
436.356 153.077 438.755 151.06 441.098 148.984 cv
441.647 149.585 442.202 150.199 442.746 150.809 cv
441.019 152.378 439.267 153.911 437.481 155.408 cv
445.148 148.589 mo
444.62 147.978 444.088 147.368 443.556 146.764 cv
444.997 145.439 446.417 144.093 447.822 142.723 cv
448.38 143.271 448.941 143.827 449.494 144.381 cv
448.059 145.81 446.619 147.206 445.148 148.589 cv
451.132 142.733 mo
450.589 142.177 450.043 141.625 449.494 141.076 cv
450.292 140.281 451.09 139.474 451.878 138.667 cv
453.374 138.221 454.844 137.771 456.307 137.313 cv
454.604 139.148 452.881 140.956 451.132 142.733 cv
457.382 132.844 mo
459.954 130.041 462.485 127.174 464.978 124.272 cv
465.613 124.629 466.251 124.989 466.881 125.347 cv
465.13 127.413 463.358 129.467 461.573 131.49 cv
460.189 131.946 458.791 132.397 457.382 132.844 cv
.0827039 .0118105 .0663462 0 cmyk
f
458.116 133.737 mo
457.819 133.494 457.525 133.255 457.226 133.013 cv
457.28 132.954 457.328 132.903 457.382 132.844 cv
458.791 132.397 460.189 131.946 461.573 131.49 cv
461.103 132.022 460.635 132.549 460.163 133.078 cv
459.482 133.299 458.803 133.518 458.116 133.737 cv
.449073 .761257 .0835584 .000976577 cmyk
f
436.26 156.421 mo
435.055 156.288 433.841 156.158 432.607 156.029 cv
433.04 155.694 433.474 155.355 433.904 155.016 cv
435.111 155.144 436.301 155.275 437.481 155.408 cv
437.075 155.748 436.669 156.085 436.26 156.421 cv
f
454.119 136.338 mo
454.568 135.866 455.023 135.383 455.469 134.907 cv
455.774 135.15 456.078 135.393 456.382 135.637 cv
455.632 135.872 454.878 136.106 454.119 136.338 cv
458.953 134.424 mo
458.677 134.197 458.393 133.964 458.116 133.737 cv
458.803 133.518 459.482 133.299 460.163 133.078 cv
459.76 133.528 459.358 133.976 458.953 134.424 cv
f
426.295 163.948 mo
425.132 163.623 423.961 163.306 422.769 162.994 cv
423.448 162.557 424.113 162.12 424.783 161.671 cv
425.93 161.982 427.063 162.299 428.185 162.622 cv
427.56 163.068 426.928 163.512 426.295 163.948 cv
f
434.263 158.036 mo
433.017 157.902 431.757 157.771 430.479 157.643 cv
431.192 157.113 431.904 156.572 432.607 156.029 cv
433.841 156.158 435.055 156.288 436.26 156.421 cv
435.598 156.966 434.934 157.502 434.263 158.036 cv
f
415.102 170.868 mo
414.033 170.322 412.958 169.794 411.865 169.276 cv
412.324 169.042 412.792 168.799 413.247 168.56 cv
414.307 169.076 415.358 169.606 416.396 170.148 cv
415.967 170.39 415.535 170.63 415.102 170.868 cv
f
473.376 117.541 mo
472.768 117.183 472.153 116.823 471.543 116.467 cv
477.68 109.034 483.677 101.447 489.768 93.9558 cv
490.582 94.0601 491.394 94.1636 492.212 94.2674 cv
485.89 101.976 479.695 109.828 473.376 117.541 cv
.0827039 .0118105 .0663462 0 cmyk
f
471.543 119.772 mo
470.928 119.413 470.31 119.054 469.693 118.697 cv
470.309 117.958 470.929 117.209 471.543 116.467 cv
472.153 116.823 472.768 117.183 473.376 117.541 cv
472.766 118.287 472.156 119.029 471.543 119.772 cv
.782193 .986114 .289006 .181125 cmyk
f
522.585 61.3318 mo
521.503 61.2301 520.423 61.1261 519.361 61.0216 cv
540.875 40.5817 566.478 25.2756 602.818 23.4119 cv
605.051 23.3951 607.332 23.3862 609.648 23.3856 cv
609.648 26.5274 li
571.512 26.7079 544.783 41.1837 522.585 61.3318 cv
.0827039 .0118105 .0663462 0 cmyk
f
519.361 64.3268 mo
518.322 64.2244 517.294 64.1211 516.274 64.0164 cv
517.291 63.0096 518.326 62.0055 519.361 61.0216 cv
520.423 61.1261 521.503 61.2301 522.585 61.3318 cv
521.497 62.319 520.428 63.3134 519.361 64.3268 cv
.782193 .986114 .289006 .181125 cmyk
f
89.8979 66.7754 mo
217.398 66.7754 217.398 41.7754 344.898 41.7754 cv
344.898 45.0805 li
217.398 45.0805 217.398 70.0805 89.8979 70.0805 cv
89.8979 66.7754 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 51.6907 mo
482.398 51.6907 482.398 68.2161 609.898 68.2161 cv
609.898 71.5211 li
482.398 71.5211 482.398 54.9957 354.898 54.9957 cv
354.898 51.6907 li
f
89.8979 283.668 mo
217.398 283.668 217.398 258.668 344.898 258.668 cv
344.898 261.973 li
217.398 261.973 217.398 286.973 89.8979 286.973 cv
89.8979 283.668 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 243.079 mo
482.398 243.079 482.398 123.332 609.898 123.332 cv
609.898 124.158 li
482.398 124.158 482.398 243.906 354.898 243.906 cv
354.898 243.079 li
f
354.898 243.079 mo
354.898 243.579 li
386.851 243.581 410.859 236.07 430.847 224.804 cv
460.829 207.903 481.766 182.611 507.121 161.606 cv
532.482 140.599 562.205 123.84 609.898 123.832 cv
609.898 123.332 li
609.398 123.332 li
609.398 124.158 li
609.898 124.158 li
609.898 123.658 li
577.945 123.656 553.937 131.168 533.949 142.433 cv
503.967 159.335 483.029 184.627 457.675 205.632 cv
432.314 226.638 402.59 243.398 354.898 243.406 cv
354.898 243.906 li
355.398 243.906 li
355.398 243.079 li
354.898 243.079 li
354.898 243.579 li
354.898 243.079 li
354.398 243.079 li
354.398 243.906 li
354.398 244.406 li
354.898 244.406 li
386.851 244.408 410.859 236.896 430.847 225.631 cv
460.829 208.729 481.766 183.437 507.121 162.432 cv
532.482 141.426 562.205 124.666 609.898 124.658 cv
610.398 124.658 li
610.398 123.332 li
610.398 122.832 li
609.898 122.832 li
577.945 122.83 553.937 130.341 533.949 141.607 cv
503.967 158.508 483.029 183.801 457.675 204.806 cv
432.314 225.812 402.59 242.571 354.898 242.579 cv
354.398 242.579 li
354.398 243.079 li
354.898 243.079 li
f
354.898 262.304 mo
482.398 262.304 482.398 229.109 609.898 229.109 cv
609.898 229.936 li
482.398 229.936 482.398 263.13 354.898 263.13 cv
354.898 262.304 li
f
354.898 262.304 mo
354.898 262.804 li
418.687 262.807 450.649 254.491 482.524 246.191 cv
514.398 237.894 546.187 229.612 609.898 229.609 cv
609.898 229.109 li
609.398 229.109 li
609.398 229.936 li
609.898 229.936 li
609.898 229.436 li
546.109 229.433 514.147 237.749 482.272 246.049 cv
450.397 254.346 418.609 262.627 354.898 262.63 cv
354.898 263.13 li
355.398 263.13 li
355.398 262.304 li
354.898 262.304 li
354.898 262.804 li
354.898 262.304 li
354.398 262.304 li
354.398 263.13 li
354.398 263.63 li
354.898 263.63 li
418.687 263.633 450.649 255.317 482.524 247.017 cv
514.398 238.72 546.187 230.438 609.898 230.435 cv
610.398 230.435 li
610.398 229.109 li
610.398 228.609 li
609.898 228.609 li
546.109 228.607 514.147 236.922 482.272 245.223 cv
450.397 253.52 418.609 261.801 354.898 261.804 cv
354.398 261.804 li
354.398 262.304 li
354.898 262.304 li
f
354.898 253.931 mo
482.398 253.931 482.398 185.9 609.898 185.9 cv
609.898 186.726 li
482.398 186.726 482.398 254.757 354.898 254.757 cv
354.898 253.931 li
f
354.898 253.931 mo
354.898 254.431 li
418.735 254.44 450.764 237.368 482.633 220.356 cv
514.513 203.352 546.235 186.408 609.898 186.4 cv
609.898 185.9 li
609.398 185.9 li
609.398 186.726 li
609.898 186.726 li
609.898 186.226 li
546.061 186.217 514.032 203.289 482.163 220.301 cv
450.282 237.305 418.561 254.248 354.898 254.257 cv
354.898 254.757 li
355.398 254.757 li
355.398 253.931 li
354.898 253.931 li
354.898 254.431 li
354.898 253.931 li
354.398 253.931 li
354.398 254.757 li
354.398 255.257 li
354.898 255.257 li
418.735 255.266 450.764 238.194 482.633 221.183 cv
514.513 204.178 546.235 187.235 609.898 187.226 cv
610.398 187.226 li
610.398 185.9 li
610.398 185.4 li
609.898 185.4 li
546.061 185.391 514.032 202.463 482.163 219.474 cv
450.282 236.479 418.561 253.422 354.898 253.431 cv
354.398 253.431 li
354.398 253.931 li
354.898 253.931 li
f
354.898 269.851 mo
482.398 269.851 482.398 270.81 609.898 270.81 cv
609.898 271.636 li
482.398 271.636 482.398 270.677 354.898 270.677 cv
354.898 269.851 li
f
354.898 269.851 mo
354.898 270.351 li
482.394 270.351 482.393 271.31 609.898 271.31 cv
609.898 270.81 li
609.398 270.81 li
609.398 271.636 li
609.898 271.636 li
609.898 271.136 li
482.402 271.136 482.402 270.177 354.898 270.177 cv
354.898 270.677 li
355.398 270.677 li
355.398 269.851 li
354.898 269.851 li
354.898 270.351 li
354.898 269.851 li
354.398 269.851 li
354.398 270.677 li
354.398 271.177 li
354.898 271.177 li
482.394 271.177 482.393 272.136 609.898 272.136 cv
610.398 272.136 li
610.398 270.81 li
610.398 270.31 li
609.898 270.31 li
482.402 270.31 482.402 269.351 354.898 269.351 cv
354.398 269.351 li
354.398 269.851 li
354.898 269.851 li
f
89.8979 70.0805 mo
217.398 70.0805 217.398 45.0805 344.898 45.0805 cv
344.898 48.3856 li
217.398 48.3856 217.398 73.3856 89.8979 73.3856 cv
89.8979 70.0805 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 54.9957 mo
482.398 54.9957 482.398 71.5211 609.898 71.5211 cv
609.898 73.1737 li
482.398 73.1737 482.398 56.6483 354.898 56.6483 cv
354.898 54.9957 li
f
354.898 88.0465 mo
482.398 88.0465 482.398 164.386 609.898 164.386 cv
609.898 166.038 li
482.398 166.038 482.398 89.6991 354.898 89.6991 cv
354.898 88.0465 li
f
89.8979 73.3856 mo
217.398 73.3856 217.398 48.3856 344.898 48.3856 cv
344.898 51.6907 li
217.398 51.6907 217.398 76.6907 89.8979 76.6907 cv
89.8979 73.3856 li
cp
f
354.898 89.6991 mo
482.398 89.6991 482.398 166.038 609.898 166.038 cv
609.898 167.691 li
482.398 167.691 482.398 91.3517 354.898 91.3517 cv
354.898 89.6991 li
f
354.898 99.6144 mo
482.398 99.6144 482.398 258.949 609.898 258.949 cv
609.898 260.602 li
482.398 260.602 482.398 101.267 354.898 101.267 cv
354.898 99.6144 li
f
89.8979 303.499 mo
217.398 303.499 217.398 303.499 344.898 303.499 cv
344.898 306.804 li
217.398 306.804 217.398 306.804 89.8979 306.804 cv
89.8979 303.499 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 314.516 mo
482.398 314.516 482.398 232.69 609.898 232.69 cv
609.898 234.342 li
482.398 234.342 482.398 316.168 354.898 316.168 cv
354.898 314.516 li
cp
f
354.898 321.677 mo
482.398 321.677 482.398 319.99 609.898 319.99 cv
609.898 321.642 li
482.398 321.642 482.398 323.329 354.898 323.329 cv
354.898 321.677 li
cp
f
89.8979 76.6907 mo
217.398 76.6907 217.398 51.6907 344.898 51.6907 cv
344.898 54.9958 li
217.398 54.9958 217.398 79.9958 89.8979 79.9958 cv
89.8979 76.6907 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 96.3093 mo
482.398 96.3093 482.398 214.284 609.898 214.284 cv
609.898 215.936 li
482.398 215.936 482.398 97.9618 354.898 97.9618 cv
354.898 96.3093 li
f
354.898 101.267 mo
482.398 101.267 482.398 260.602 609.898 260.602 cv
609.898 262.254 li
482.398 262.254 482.398 102.92 354.898 102.92 cv
354.898 101.267 li
f
89.8979 79.9958 mo
217.398 79.9958 217.398 54.9958 344.898 54.9958 cv
344.898 58.3008 li
217.398 58.3008 217.398 83.3008 89.8979 83.3008 cv
89.8979 79.9958 li
cp
f
354.898 56.6483 mo
482.398 56.6483 482.398 73.1737 609.898 73.1737 cv
609.898 74.8263 li
482.398 74.8263 482.398 58.3008 354.898 58.3008 cv
354.898 56.6483 li
f
354.898 91.3517 mo
482.398 91.3517 482.398 167.691 609.898 167.691 cv
609.898 169.343 li
482.398 169.343 482.398 93.0043 354.898 93.0043 cv
354.898 91.3517 li
f
89.8979 83.3008 mo
217.398 83.3008 217.398 58.3008 344.898 58.3008 cv
344.898 61.6059 li
217.398 61.6059 217.398 86.6059 89.8979 86.6059 cv
89.8979 83.3008 li
cp
f
354.898 38.4703 mo
354.898 35.1653 li
482.312 35.1653 482.405 10.1989 609.648 10.1653 cv
609.648 13.4703 li
482.405 13.5038 482.312 38.4703 354.898 38.4703 cv
.125002 .180667 .0336919 0 cmyk
f
89.8979 306.804 mo
217.398 306.804 217.398 306.804 344.898 306.804 cv
344.898 310.109 li
217.398 310.109 217.398 310.109 89.8979 310.109 cv
89.8979 306.804 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 303.499 mo
354.898 300.194 li
377.481 300.194 396.062 291.822 412.063 278.04 cv
413.141 278.185 414.209 278.333 415.264 278.485 cv
398.551 293.955 378.999 303.499 354.898 303.499 cv
418.271 275.609 mo
417.285 275.458 416.286 275.309 415.281 275.165 cv
416.641 273.906 417.972 272.616 419.295 271.281 cv
420.361 271.284 421.41 271.288 422.453 271.292 cv
421.081 272.77 419.683 274.214 418.271 275.609 cv
.118257 0 .0197147 0 cmyk
f
417.541 276.324 mo
416.538 276.173 415.526 276.025 414.502 275.88 cv
414.762 275.643 415.022 275.405 415.281 275.165 cv
416.286 275.309 417.285 275.458 418.271 275.609 cv
418.028 275.849 417.786 276.086 417.541 276.324 cv
.60058 .0573434 .119661 0 cmyk
f
416.949 276.896 mo
415.934 276.745 414.906 276.597 413.869 276.452 cv
414.076 276.266 414.296 276.068 414.502 275.88 cv
415.526 276.025 416.538 276.173 417.541 276.324 cv
417.345 276.515 417.147 276.707 416.949 276.896 cv
f
415.264 278.485 mo
414.209 278.333 413.141 278.185 412.063 278.04 cv
412.669 277.518 413.27 276.99 413.869 276.452 cv
414.906 276.597 415.934 276.745 416.949 276.896 cv
416.389 277.434 415.831 277.961 415.264 278.485 cv
f
427.13 266.019 mo
426.184 266.015 425.224 266.011 424.259 266.007 cv
426.432 263.583 428.556 261.06 430.637 258.444 cv
431.621 258.29 432.598 258.134 433.564 257.975 cv
431.465 260.751 429.321 263.437 427.13 266.019 cv
.118257 0 .0197147 0 cmyk
f
426.147 267.168 mo
425.18 267.163 424.207 267.16 423.22 267.156 cv
423.567 266.776 423.914 266.393 424.259 266.007 cv
425.224 266.011 426.184 266.015 427.13 266.019 cv
426.802 266.407 426.478 266.785 426.147 267.168 cv
.60058 .0573434 .119661 0 cmyk
f
425.431 267.991 mo
424.449 267.987 423.463 267.983 422.461 267.979 cv
422.713 267.708 422.969 267.43 423.22 267.156 cv
424.207 267.16 425.18 267.163 426.147 267.168 cv
425.912 267.44 425.667 267.721 425.431 267.991 cv
f
424.85 268.65 mo
423.859 268.646 422.857 268.642 421.845 268.638 cv
422.052 268.418 422.255 268.2 422.461 267.979 cv
423.463 267.983 424.449 267.987 425.431 267.991 cv
425.234 268.215 425.048 268.427 424.85 268.65 cv
f
424.116 269.473 mo
423.109 269.469 422.092 269.465 421.065 269.461 cv
421.325 269.189 421.587 268.912 421.845 268.638 cv
422.857 268.642 423.859 268.646 424.85 268.65 cv
424.608 268.923 424.359 269.202 424.116 269.473 cv
f
436.857 250.191 mo
438.892 247.348 440.878 244.434 442.837 241.432 cv
443.79 241.06 444.738 240.682 445.674 240.301 cv
443.655 243.521 441.599 246.666 439.502 249.722 cv
438.63 249.88 437.744 250.037 436.857 250.191 cv
.118257 0 .0197147 0 cmyk
f
434.526 253.387 mo
435.308 252.336 436.087 251.267 436.857 250.191 cv
437.744 250.037 438.63 249.88 439.502 249.722 cv
438.763 250.798 438.02 251.863 437.271 252.917 cv
436.365 253.075 435.448 253.233 434.526 253.387 cv
.60058 .0573434 .119661 0 cmyk
f
433.961 254.142 mo
434.147 253.895 434.341 253.635 434.526 253.387 cv
435.448 253.233 436.365 253.075 437.271 252.917 cv
437.094 253.166 436.909 253.424 436.731 253.672 cv
435.815 253.831 434.894 253.987 433.961 254.142 cv
f
432.807 255.664 mo
433.195 255.157 433.576 254.655 433.961 254.142 cv
434.894 253.987 435.815 253.831 436.731 253.672 cv
436.362 254.186 436.001 254.686 435.629 255.195 cv
434.698 255.353 433.756 255.51 432.807 255.664 cv
f
432.284 256.344 mo
432.457 256.12 432.635 255.889 432.807 255.664 cv
433.756 255.51 434.698 255.353 435.629 255.195 cv
435.465 255.42 435.296 255.65 435.131 255.874 cv
434.191 256.033 433.241 256.19 432.284 256.344 cv
f
445.905 236.626 mo
445.91 236.619 445.925 236.595 445.929 236.588 cv
445.939 236.594 445.948 236.599 445.958 236.605 cv
445.94 236.612 445.923 236.619 445.905 236.626 cv
f
445.432 237.381 mo
445.591 237.128 445.746 236.88 445.905 236.626 cv
445.923 236.619 445.94 236.612 445.958 236.605 cv
446.142 236.716 446.326 236.828 446.51 236.94 cv
446.153 237.087 445.791 237.235 445.432 237.381 cv
f
448.263 232.793 mo
449.847 230.178 451.408 227.518 452.951 224.818 cv
453.464 225.016 453.977 225.216 454.485 225.416 cv
453.304 227.52 452.111 229.601 450.906 231.658 cv
450.031 232.04 449.152 232.418 448.263 232.793 cv
.118257 0 .0197147 0 cmyk
f
448.831 233.379 mo
448.606 233.238 448.387 233.101 448.161 232.961 cv
448.196 232.904 448.228 232.851 448.263 232.793 cv
449.152 232.418 450.031 232.04 450.906 231.658 cv
450.688 232.031 450.473 232.397 450.254 232.768 cv
449.782 232.972 449.307 233.176 448.831 233.379 cv
.60058 .0573434 .119661 0 cmyk
f
449.458 233.772 mo
449.251 233.642 449.039 233.509 448.831 233.379 cv
449.307 233.176 449.782 232.972 450.254 232.768 cv
450.082 233.06 449.9 233.366 449.728 233.656 cv
449.637 233.695 449.548 233.733 449.458 233.772 cv
f
448.448 234.202 mo
448.196 234.046 447.943 233.89 447.69 233.735 cv
447.848 233.477 448.004 233.22 448.161 232.961 cv
448.387 233.101 448.606 233.238 448.831 233.379 cv
449.039 233.509 449.251 233.642 449.458 233.772 cv
449.122 233.916 448.786 234.059 448.448 234.202 cv
.515862 .108736 .365789 0 cmyk
f
449.143 234.636 mo
448.912 234.491 448.68 234.346 448.448 234.202 cv
448.786 234.059 449.122 233.916 449.458 233.772 cv
449.548 233.733 449.637 233.695 449.728 233.656 cv
449.534 233.983 449.338 234.31 449.143 234.636 cv
.60058 .0573434 .119661 0 cmyk
f
455.864 222.944 mo
455.363 222.744 454.857 222.545 454.352 222.347 cv
456.348 218.801 458.307 215.2 460.248 211.539 cv
460.793 211.606 461.337 211.674 461.88 211.742 cv
459.904 215.524 457.894 219.275 455.864 222.944 cv
.118257 0 .0197147 0 cmyk
f
455.357 223.858 mo
454.851 223.658 454.345 223.46 453.836 223.262 cv
454.005 222.964 454.184 222.646 454.352 222.347 cv
454.857 222.545 455.363 222.744 455.864 222.944 cv
455.692 223.253 455.528 223.549 455.357 223.858 cv
.515862 .108736 .365789 0 cmyk
f
463.733 208.167 mo
463.697 208.163 463.67 208.16 463.634 208.155 cv
463.293 207.789 462.954 207.428 462.611 207.064 cv
463.632 206.182 464.648 205.293 465.658 204.4 cv
465.02 205.656 464.375 206.92 463.733 208.167 cv
.118257 0 .0197147 0 cmyk
f
463.634 208.155 mo
463.134 208.091 462.63 208.027 462.126 207.964 cv
462.277 207.676 462.431 207.379 462.581 207.09 cv
462.589 207.083 462.603 207.071 462.611 207.064 cv
462.954 207.428 463.293 207.789 463.634 208.155 cv
.499031 .748196 .00274662 0 cmyk
f
463.184 209.231 mo
462.816 208.837 462.449 208.446 462.079 208.054 cv
462.095 208.023 462.11 207.995 462.126 207.964 cv
462.63 208.027 463.134 208.091 463.634 208.155 cv
463.67 208.16 463.697 208.163 463.733 208.167 cv
463.551 208.52 463.366 208.879 463.184 209.231 cv
.515862 .108736 .365789 0 cmyk
f
468.917 194.601 mo
468.953 194.529 468.994 194.446 469.03 194.374 cv
469.085 194.366 469.14 194.357 469.196 194.349 cv
469.105 194.431 469.008 194.518 468.917 194.601 cv
.60058 .0573434 .119661 0 cmyk
f
468.53 195.38 mo
468.661 195.116 468.786 194.864 468.917 194.601 cv
469.008 194.518 469.105 194.431 469.196 194.349 cv
469.386 194.32 469.574 194.291 469.764 194.262 cv
469.353 194.635 468.941 195.008 468.53 195.38 cv
f
471.043 190.298 mo
471.224 189.928 471.41 189.55 471.591 189.18 cv
471.8 189.492 472.008 189.803 472.216 190.115 cv
471.825 190.176 471.435 190.237 471.043 190.298 cv
.515862 .108736 .365789 0 cmyk
f
475.649 181.976 mo
475.501 181.902 475.352 181.828 475.203 181.754 cv
476.021 180.061 476.837 178.365 477.653 176.666 cv
477.984 177.079 478.314 177.489 478.645 177.902 cv
478.275 178.675 477.904 179.448 477.533 180.22 cv
476.905 180.807 476.279 181.391 475.649 181.976 cv
.118257 0 .0197147 0 cmyk
f
474.644 182.91 mo
474.832 182.522 475.015 182.143 475.203 181.754 cv
475.352 181.828 475.501 181.902 475.649 181.976 cv
475.313 182.289 474.98 182.598 474.644 182.91 cv
.499031 .748196 .00274662 0 cmyk
f
473.517 187.113 mo
473.344 186.853 473.162 186.578 472.989 186.318 cv
473.539 185.189 474.095 184.043 474.644 182.91 cv
474.98 182.598 475.313 182.289 475.649 181.976 cv
476.279 181.391 476.905 180.807 477.533 180.22 cv
476.569 182.227 475.611 184.217 474.644 186.215 cv
474.33 186.506 474.019 186.794 473.705 187.084 cv
473.642 187.094 473.58 187.104 473.517 187.113 cv
.60058 .0573434 .119661 0 cmyk
f
473.705 187.084 mo
474.019 186.794 474.33 186.506 474.644 186.215 cv
474.518 186.474 474.391 186.737 474.265 186.996 cv
474.077 187.026 473.893 187.055 473.705 187.084 cv
f
473.916 187.716 mo
473.783 187.514 473.651 187.315 473.517 187.113 cv
473.58 187.104 473.642 187.094 473.705 187.084 cv
473.705 187.084 li
473.893 187.055 474.077 187.026 474.265 186.996 cv
474.148 187.239 474.034 187.473 473.916 187.716 cv
.515862 .108736 .365789 0 cmyk
f
467.17 198.098 mo
467.246 197.947 467.33 197.781 467.405 197.63 cv
467.457 197.671 467.505 197.71 467.557 197.752 cv
467.426 197.869 467.302 197.98 467.17 198.098 cv
468.527 196.881 mo
468.348 196.736 468.174 196.596 467.995 196.452 cv
468.17 196.101 468.355 195.731 468.53 195.38 cv
468.941 195.008 469.353 194.635 469.764 194.262 cv
470.108 194.209 470.454 194.155 470.797 194.102 cv
470.584 194.536 470.368 194.975 470.154 195.408 cv
469.612 195.9 469.071 196.391 468.527 196.881 cv
.60058 .0573434 .119661 0 cmyk
f
430.637 258.444 mo
431.192 257.747 431.735 257.054 432.284 256.344 cv
433.241 256.19 434.191 256.033 435.131 255.874 cv
434.612 256.579 434.088 257.281 433.564 257.975 cv
432.598 258.134 431.621 258.29 430.637 258.444 cv
f
444.27 239.214 mo
444.657 238.608 445.047 237.993 445.432 237.381 cv
445.791 237.235 446.153 237.087 446.51 236.94 cv
446.811 237.124 447.113 237.308 447.413 237.493 cv
447.291 237.693 447.174 237.884 447.051 238.083 cv
446.132 238.464 445.205 238.841 444.27 239.214 cv
f
422.453 271.292 mo
421.41 271.288 420.361 271.284 419.295 271.281 cv
419.889 270.682 420.479 270.075 421.065 269.461 cv
422.092 269.465 423.109 269.469 424.116 269.473 cv
423.562 270.089 423.013 270.689 422.453 271.292 cv
f
479.636 175.832 mo
479.309 175.424 478.973 175.005 478.645 174.597 cv
480.157 171.441 481.664 168.286 483.174 165.125 cv
483.662 165.207 484.148 165.288 484.637 165.37 cv
482.97 168.854 481.303 172.349 479.636 175.832 cv
485.96 162.605 mo
485.469 162.523 484.986 162.442 484.495 162.36 cv
484.694 161.945 484.9 161.514 485.099 161.099 cv
485.465 161.437 485.83 161.775 486.196 162.112 cv
486.118 162.275 486.038 162.442 485.96 162.605 cv
.118257 0 .0197147 0 cmyk
f
485.452 163.666 mo
484.964 163.584 484.476 163.503 483.988 163.421 cv
484.16 163.063 484.324 162.719 484.495 162.36 cv
484.986 162.442 485.469 162.523 485.96 162.605 cv
485.792 162.955 485.62 163.316 485.452 163.666 cv
.499031 .748196 .00274662 0 cmyk
f
484.637 165.37 mo
484.148 165.288 483.662 165.207 483.174 165.125 cv
483.442 164.563 483.72 163.983 483.988 163.421 cv
484.476 163.503 484.964 163.584 485.452 163.666 cv
485.179 164.235 484.909 164.8 484.637 165.37 cv
f
487.296 159.82 mo
486.929 159.483 486.562 159.145 486.196 158.807 cv
487.361 156.375 488.531 153.943 489.701 151.521 cv
490.467 151.042 491.231 150.566 492 150.088 cv
490.424 153.322 488.86 156.562 487.296 159.82 cv
.118257 0 .0197147 0 cmyk
f
479.141 176.867 mo
478.81 176.454 478.48 176.044 478.149 175.632 cv
478.317 175.282 478.478 174.947 478.645 174.597 cv
478.973 175.005 479.309 175.424 479.636 175.832 cv
479.469 176.182 479.308 176.517 479.141 176.867 cv
.871 1 .229892 .104494 cmyk
f
486.746 160.966 mo
486.379 160.629 486.013 160.291 485.647 159.953 cv
485.83 159.571 486.013 159.19 486.196 158.807 cv
486.562 159.145 486.929 159.483 487.296 159.82 cv
487.112 160.202 486.929 160.584 486.746 160.966 cv
f
478.645 177.902 mo
478.314 177.489 477.984 177.079 477.653 176.666 cv
477.816 176.325 477.985 175.973 478.149 175.632 cv
478.48 176.044 478.81 176.454 479.141 176.867 cv
478.977 177.209 478.809 177.56 478.645 177.902 cv
f
508.116 115.336 mo
511.523 109.125 515.008 103.098 518.615 97.3038 cv
519.267 97.3686 519.919 97.4326 520.578 97.4964 cv
517.059 102.999 513.655 108.732 510.332 114.648 cv
509.592 114.875 508.848 115.106 508.116 115.336 cv
.118257 0 .0197147 0 cmyk
f
507.371 116.699 mo
507.616 116.249 507.87 115.784 508.116 115.336 cv
508.848 115.106 509.592 114.875 510.332 114.648 cv
510.076 115.104 509.825 115.553 509.569 116.011 cv
508.832 116.239 508.1 116.468 507.371 116.699 cv
.499031 .748196 .00274662 0 cmyk
f
506.486 118.331 mo
506.783 117.78 507.073 117.247 507.371 116.699 cv
508.1 116.468 508.832 116.239 509.569 116.011 cv
509.268 116.553 508.965 117.098 508.665 117.643 cv
507.931 117.872 507.213 118.099 506.486 118.331 cv
f
547.772 63.2595 mo
546.717 63.1966 545.678 63.1326 544.644 63.0669 cv
562.359 44.8557 583.275 33.3407 609.648 33.2597 cv
609.648 36.5649 li
584.813 36.6411 564.812 46.8612 547.772 63.2595 cv
.118257 0 .0197147 0 cmyk
f
544.644 66.372 mo
543.658 66.3093 542.673 66.2447 541.706 66.1794 cv
542.673 65.1246 543.658 64.081 544.644 63.0669 cv
545.678 63.1326 546.717 63.1966 547.772 63.2595 cv
546.717 64.2754 545.678 65.3096 544.644 66.372 cv
.871 1 .229892 .104494 cmyk
f
541.706 69.4844 mo
540.77 69.4212 539.848 69.3572 538.93 69.2918 cv
539.848 68.2338 540.77 67.2007 541.706 66.1794 cv
542.673 66.2447 543.658 66.3093 544.644 66.372 cv
543.658 67.3862 542.673 68.4296 541.706 69.4844 cv
f
493.765 143.175 mo
494.014 142.669 494.264 142.161 494.513 141.656 cv
494.809 141.828 495.107 142 495.404 142.171 cv
494.857 142.505 494.31 142.84 493.765 143.175 cv
.515862 .108736 .365789 0 cmyk
f
500.315 133.396 mo
499.876 133.151 499.443 132.907 499.006 132.661 cv
501.118 128.495 503.249 124.382 505.414 120.328 cv
506.129 120.097 506.848 119.868 507.57 119.64 cv
505.109 124.15 502.702 128.731 500.315 133.396 cv
.118257 0 .0197147 0 cmyk
f
499.006 135.966 mo
498.574 135.722 498.141 135.476 497.71 135.231 cv
498.141 134.373 498.574 133.515 499.006 132.661 cv
499.443 132.907 499.876 133.151 500.315 133.396 cv
499.88 134.246 499.439 135.112 499.006 135.966 cv
.871 1 .229892 .104494 cmyk
f
540.299 71.0406 mo
539.387 70.9773 538.491 70.9135 537.595 70.848 cv
538.038 70.3251 538.483 69.8063 538.93 69.2918 cv
539.848 69.3572 540.77 69.4212 541.706 69.4844 cv
541.235 69.9978 540.765 70.5179 540.299 71.0406 cv
f
498.357 137.251 mo
497.925 137.006 497.495 136.762 497.065 136.516 cv
497.28 136.086 497.494 135.66 497.71 135.231 cv
498.141 135.476 498.574 135.722 499.006 135.966 cv
498.79 136.393 498.573 136.823 498.357 137.251 cv
f
497.71 138.536 mo
497.279 138.291 496.853 138.047 496.424 137.801 cv
496.638 137.37 496.85 136.946 497.065 136.516 cv
497.495 136.762 497.925 137.006 498.357 137.251 cv
498.141 137.679 497.925 138.107 497.71 138.536 cv
f
538.93 72.5969 mo
538.046 72.5339 537.161 72.4693 536.293 72.4043 cv
536.722 71.8852 537.162 71.3592 537.595 70.848 cv
538.491 70.9135 539.387 70.9773 540.299 71.0406 cv
539.838 71.5578 539.386 72.0708 538.93 72.5969 cv
f
497.065 139.821 mo
496.636 139.575 496.213 139.333 495.785 139.086 cv
495.999 138.655 496.209 138.232 496.424 137.801 cv
496.853 138.047 497.279 138.291 497.71 138.536 cv
497.494 138.965 497.28 139.391 497.065 139.821 cv
f
89.8979 310.109 mo
217.398 310.109 217.398 310.109 344.898 310.109 cv
344.898 313.414 li
217.398 313.414 217.398 313.414 89.8979 313.414 cv
89.8979 310.109 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 306.804 mo
482.398 306.804 482.398 130.769 609.898 130.769 cv
609.898 131.87 li
482.398 131.87 482.398 307.906 354.898 307.906 cv
354.898 306.804 li
f
354.898 316.168 mo
482.398 316.168 482.398 234.342 609.898 234.342 cv
609.898 235.444 li
482.398 235.444 482.398 317.27 354.898 317.27 cv
354.898 316.168 li
cp
f
354.898 312.312 mo
482.398 312.312 482.398 188.378 609.898 188.378 cv
609.898 189.48 li
482.398 189.48 482.398 313.414 354.898 313.414 cv
354.898 312.312 li
cp
f
89.8979 198.888 mo
217.398 198.888 217.398 198.888 344.898 198.888 cv
344.898 202.193 li
217.398 202.193 217.398 202.193 89.8979 202.193 cv
89.8979 198.888 li
cp
.48127 .12842 .425422 0 cmyk
f
354.898 190.625 mo
482.398 190.625 482.398 109.972 609.898 109.972 cv
609.898 113.277 li
482.398 113.277 482.398 193.931 354.898 193.931 cv
354.898 190.625 li
f
89.8979 86.6059 mo
217.398 86.6059 217.398 61.6059 344.898 61.6059 cv
344.898 64.911 li
217.398 64.911 217.398 89.911 89.8979 89.911 cv
89.8979 86.6059 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 41.7754 mo
354.898 38.4703 li
482.312 38.4703 482.405 13.5038 609.648 13.4703 cv
609.648 16.7755 li
482.405 16.809 482.312 41.7754 354.898 41.7754 cv
.125002 .180667 .0336919 0 cmyk
f
89.8979 202.193 mo
217.398 202.193 217.398 202.193 344.898 202.193 cv
344.898 205.498 li
217.398 205.498 217.398 205.498 89.8979 205.498 cv
89.8979 202.193 li
cp
.48127 .12842 .425422 0 cmyk
f
354.898 203.571 mo
482.398 203.571 482.398 221.067 609.898 221.067 cv
609.898 221.893 li
482.398 221.893 482.398 204.397 354.898 204.397 cv
354.898 203.571 li
f
354.898 203.571 mo
354.898 204.07 li
418.628 204.071 450.456 208.44 482.33 212.814 cv
514.206 217.189 546.127 221.568 609.898 221.567 cv
609.898 221.067 li
609.398 221.067 li
609.398 221.893 li
609.898 221.893 li
609.898 221.393 li
546.168 221.392 514.34 217.023 482.466 212.65 cv
450.59 208.275 418.668 203.896 354.898 203.897 cv
354.898 204.397 li
355.398 204.397 li
355.398 203.571 li
354.898 203.571 li
354.898 204.07 li
354.898 203.571 li
354.398 203.571 li
354.398 204.397 li
354.398 204.897 li
354.898 204.897 li
418.628 204.898 450.456 209.267 482.33 213.64 cv
514.206 218.015 546.127 222.394 609.898 222.393 cv
610.398 222.393 li
610.398 221.067 li
610.398 220.567 li
609.898 220.567 li
546.168 220.566 514.34 216.197 482.466 211.823 cv
450.59 207.449 418.668 203.07 354.898 203.07 cv
354.398 203.07 li
354.398 203.571 li
354.898 203.571 li
f
354.898 199.164 mo
482.398 199.164 482.398 178.861 609.898 178.861 cv
609.898 179.688 li
482.398 179.688 482.398 199.99 354.898 199.99 cv
354.898 199.164 li
f
354.898 199.164 mo
354.898 199.664 li
418.671 199.665 450.601 194.583 482.477 189.506 cv
514.351 184.432 546.171 179.362 609.898 179.361 cv
609.898 178.861 li
609.398 178.861 li
609.398 179.688 li
609.898 179.688 li
609.898 179.188 li
546.124 179.187 514.195 184.269 482.319 189.345 cv
450.445 194.42 418.624 199.489 354.898 199.49 cv
354.898 199.99 li
355.398 199.99 li
355.398 199.164 li
354.898 199.164 li
354.898 199.664 li
354.898 199.164 li
354.398 199.164 li
354.398 199.99 li
354.398 200.49 li
354.898 200.49 li
418.671 200.491 450.601 195.409 482.477 190.333 cv
514.351 185.258 546.171 180.189 609.898 180.188 cv
610.398 180.188 li
610.398 178.861 li
610.398 178.361 li
609.898 178.361 li
546.124 178.36 514.195 183.442 482.319 188.519 cv
450.445 193.593 418.624 198.663 354.898 198.664 cv
354.398 198.664 li
354.398 199.164 li
354.898 199.164 li
f
354.898 209.354 mo
482.398 209.354 482.21 309.513 609.711 309.513 cv
609.711 310.339 li
482.21 310.339 482.398 210.181 354.898 210.181 cv
354.898 209.354 li
f
354.898 209.354 mo
354.898 209.854 li
386.708 209.856 410.516 216.097 430.358 225.456 cv
460.12 239.492 480.973 260.588 506.389 278.233 cv
531.801 295.877 561.8 310.019 609.711 310.013 cv
609.711 309.513 li
609.211 309.513 li
609.211 310.339 li
609.711 310.339 li
609.711 309.839 li
577.9 309.838 554.092 303.596 534.25 294.237 cv
504.489 280.202 483.635 259.106 458.219 241.461 cv
432.807 223.817 402.808 209.674 354.898 209.681 cv
354.898 210.181 li
355.398 210.181 li
355.398 209.354 li
354.898 209.354 li
354.898 209.854 li
354.898 209.354 li
354.398 209.354 li
354.398 210.181 li
354.398 210.681 li
354.898 210.681 li
386.708 210.682 410.516 216.924 430.358 226.283 cv
460.12 240.318 480.973 261.414 506.389 279.059 cv
531.801 296.703 561.8 310.846 609.711 310.839 cv
610.21 310.839 li
610.21 309.513 li
610.21 309.013 li
609.711 309.013 li
577.9 309.012 554.092 302.77 534.25 293.411 cv
504.489 279.375 483.635 258.28 458.219 240.634 cv
432.807 222.991 402.808 208.848 354.898 208.854 cv
354.398 208.854 li
354.398 209.354 li
354.898 209.354 li
f
354.898 206.876 mo
482.398 206.876 482.224 265.518 609.724 265.518 cv
609.724 266.344 li
482.224 266.344 482.398 207.702 354.898 207.702 cv
354.898 206.876 li
f
354.898 206.876 mo
354.898 207.376 li
418.575 207.383 450.267 221.994 482.102 236.651 cv
513.93 251.315 545.901 266.025 609.724 266.018 cv
609.724 265.518 li
609.224 265.518 li
609.224 266.344 li
609.724 266.344 li
609.724 265.844 li
546.047 265.837 514.355 251.226 482.52 236.569 cv
450.692 221.905 418.721 207.195 354.898 207.202 cv
354.898 207.702 li
355.398 207.702 li
355.398 206.876 li
354.898 206.876 li
354.898 207.376 li
354.898 206.876 li
354.398 206.876 li
354.398 207.702 li
354.398 208.202 li
354.898 208.202 li
418.575 208.209 450.267 222.82 482.102 237.477 cv
513.93 252.141 545.901 266.851 609.724 266.844 cv
610.224 266.844 li
610.224 265.518 li
610.224 265.018 li
609.724 265.018 li
546.047 265.011 514.355 250.4 482.52 235.743 cv
450.692 221.079 418.721 206.368 354.898 206.376 cv
354.398 206.376 li
354.398 206.876 li
354.898 206.876 li
f
89.8979 89.911 mo
217.398 89.911 217.398 64.911 344.898 64.911 cv
344.898 68.2161 li
217.398 68.2161 217.398 93.2161 89.8979 93.2161 cv
89.8979 89.911 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 58.3008 mo
482.398 58.3008 482.398 74.8263 609.898 74.8263 cv
609.898 76.4789 li
482.398 76.4789 482.398 59.9534 354.898 59.9534 cv
354.898 58.3008 li
f
354.898 93.0043 mo
482.398 93.0043 482.398 169.343 609.898 169.343 cv
609.898 170.996 li
482.398 170.996 482.398 94.6569 354.898 94.6569 cv
354.898 93.0043 li
f
89.8979 286.973 mo
217.398 286.973 217.398 261.973 344.898 261.973 cv
344.898 265.278 li
217.398 265.278 217.398 290.278 89.8979 290.278 cv
89.8979 286.973 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 243.906 mo
482.398 243.906 482.398 124.158 609.898 124.158 cv
609.898 125.811 li
482.398 125.811 482.398 245.558 354.898 245.558 cv
354.898 243.906 li
f
354.898 254.757 mo
482.398 254.757 482.398 186.726 609.898 186.726 cv
609.898 188.378 li
482.398 188.378 482.398 256.41 354.898 256.41 cv
354.898 254.757 li
f
89.8979 313.414 mo
217.398 313.414 217.398 313.414 344.898 313.414 cv
344.898 316.719 li
217.398 316.719 217.398 316.719 89.8979 316.719 cv
89.8979 313.414 li
cp
f
354.898 307.906 mo
482.398 307.906 482.398 131.87 609.898 131.87 cv
609.898 135.175 li
482.398 135.175 482.398 311.211 354.898 311.211 cv
354.898 307.906 li
cp
f
89.8979 290.278 mo
217.398 290.278 217.398 265.278 344.898 265.278 cv
344.898 268.584 li
217.398 268.584 217.398 293.584 89.8979 293.584 cv
89.8979 290.278 li
cp
f
354.898 245.558 mo
482.398 245.558 482.398 125.811 609.898 125.811 cv
609.898 129.116 li
482.398 129.116 482.398 248.863 354.898 248.863 cv
354.898 245.558 li
f
89.8979 205.498 mo
217.398 205.498 217.398 205.498 344.898 205.498 cv
344.898 208.804 li
217.398 208.804 217.398 208.804 89.8979 208.804 cv
89.8979 205.498 li
cp
.48127 .12842 .425422 0 cmyk
f
354.898 193.931 mo
482.398 193.931 482.398 113.277 609.898 113.277 cv
609.898 114.379 li
482.398 114.379 482.398 195.032 354.898 195.032 cv
354.898 193.931 li
f
354.898 199.99 mo
482.398 199.99 482.398 179.688 609.898 179.688 cv
609.898 180.789 li
482.398 180.789 482.398 201.092 354.898 201.092 cv
354.898 199.99 li
f
354.898 210.181 mo
482.398 210.181 482.21 310.339 609.711 310.339 cv
609.711 311.441 li
482.21 311.441 482.398 211.282 354.898 211.282 cv
354.898 210.181 li
f
89.8979 153.82 mo
217.398 153.82 217.398 153.82 344.898 153.82 cv
344.898 157.125 li
217.398 157.125 217.398 157.125 89.8979 157.125 cv
89.8979 153.82 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
354.898 149.689 mo
482.398 149.689 482.398 103.67 609.898 103.67 cv
609.898 105.322 li
482.398 105.322 482.398 151.341 354.898 151.341 cv
354.898 149.689 li
f
354.898 154.646 mo
482.398 154.646 482.491 262.271 609.991 262.271 cv
609.991 263.924 li
482.491 263.924 482.398 156.299 354.898 156.299 cv
354.898 154.646 li
f
89.8979 93.2161 mo
217.398 93.2161 217.398 68.2161 344.898 68.2161 cv
344.898 71.5212 li
217.398 71.5212 217.398 96.5212 89.8979 96.5212 cv
89.8979 93.2161 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 59.9534 mo
482.398 59.9534 482.398 76.4789 609.898 76.4789 cv
609.898 79.7838 li
482.398 79.7838 482.398 63.2584 354.898 63.2584 cv
354.898 59.9534 li
f
89.8979 96.5212 mo
217.398 96.5212 217.398 71.5212 344.898 71.5212 cv
344.898 74.8263 li
217.398 74.8263 217.398 99.8263 89.8979 99.8263 cv
89.8979 96.5212 li
cp
f
354.898 97.9618 mo
482.398 97.9618 482.398 215.936 609.898 215.936 cv
609.898 217.589 li
482.398 217.589 482.398 99.6144 354.898 99.6144 cv
354.898 97.9618 li
f
354.898 102.92 mo
482.398 102.92 482.398 298.381 609.898 298.381 cv
609.898 300.034 li
482.398 300.034 482.398 104.572 354.898 104.572 cv
354.898 102.92 li
f
89.8979 99.8263 mo
217.398 99.8263 217.398 74.8263 344.898 74.8263 cv
344.898 78.1314 li
217.398 78.1314 217.398 103.131 89.8979 103.131 cv
89.8979 99.8263 li
cp
f
354.898 45.0806 mo
354.898 41.7754 li
482.312 41.7754 482.405 16.809 609.648 16.7755 cv
609.648 20.0806 li
482.405 20.1142 482.312 45.0806 354.898 45.0806 cv
.125002 .180667 .0336919 0 cmyk
f
89.8979 103.131 mo
217.398 103.131 217.398 78.1314 344.898 78.1314 cv
344.898 81.4364 li
217.398 81.4364 217.398 106.436 89.8979 106.436 cv
89.8979 103.131 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 63.2584 mo
482.398 63.2584 482.398 79.7838 609.898 79.7838 cv
609.898 83.089 li
482.398 83.089 482.398 66.5636 354.898 66.5636 cv
354.898 63.2584 li
f
89.8979 106.436 mo
217.398 106.436 217.398 81.4364 344.898 81.4364 cv
344.898 84.7415 li
217.398 84.7415 217.398 109.742 89.8979 109.742 cv
89.8979 106.436 li
cp
f
354.898 66.5636 mo
482.398 66.5636 482.398 83.089 609.898 83.089 cv
609.898 84.7416 li
482.398 84.7416 482.398 68.2161 354.898 68.2161 cv
354.898 66.5636 li
f
354.898 104.572 mo
482.398 104.572 482.398 300.034 609.898 300.034 cv
609.898 301.686 li
482.398 301.686 482.398 106.225 354.898 106.225 cv
354.898 104.572 li
f
89.8979 109.742 mo
217.398 109.742 217.398 84.7415 344.898 84.7415 cv
344.898 88.0466 li
217.398 88.0466 217.398 113.047 89.8979 113.047 cv
89.8979 109.742 li
cp
f
354.898 68.2161 mo
482.398 68.2161 482.398 84.7416 609.898 84.7416 cv
609.898 86.3941 li
482.398 86.3941 482.398 69.8687 354.898 69.8687 cv
354.898 68.2161 li
f
354.898 94.6569 mo
482.398 94.6569 482.398 170.996 609.898 170.996 cv
609.898 172.648 li
482.398 172.648 482.398 96.3093 354.898 96.3093 cv
354.898 94.6569 li
f
89.8979 113.047 mo
217.398 113.047 217.398 88.0466 344.898 88.0466 cv
344.898 91.3517 li
217.398 91.3517 217.398 116.352 89.8979 116.352 cv
89.8979 113.047 li
cp
f
354.898 69.8687 mo
482.398 69.8687 482.398 86.3941 609.898 86.3941 cv
609.898 89.6991 li
482.398 89.6991 482.398 73.1737 354.898 73.1737 cv
354.898 69.8687 li
f
89.8979 116.352 mo
217.398 116.352 217.398 91.3517 344.898 91.3517 cv
344.898 94.6568 li
217.398 94.6568 217.398 119.657 89.8979 119.657 cv
89.8979 116.352 li
cp
f
354.898 73.1737 mo
482.398 73.1737 482.398 89.6991 609.898 89.6991 cv
609.898 93.0043 li
482.398 93.0043 482.398 76.4789 354.898 76.4789 cv
354.898 73.1737 li
f
89.8979 119.657 mo
217.398 119.657 217.398 94.6568 344.898 94.6568 cv
344.898 97.9619 li
217.398 97.9619 217.398 122.962 89.8979 122.962 cv
89.8979 119.657 li
cp
f
354.898 76.4789 mo
482.398 76.4789 482.398 93.0043 609.898 93.0043 cv
609.898 94.6569 li
482.398 94.6569 482.398 78.1314 354.898 78.1314 cv
354.898 76.4789 li
f
354.898 106.225 mo
482.398 106.225 482.398 301.686 609.898 301.686 cv
609.898 303.339 li
482.398 303.339 482.398 107.877 354.898 107.877 cv
354.898 106.225 li
f
89.8979 157.125 mo
217.398 157.125 217.398 157.125 344.898 157.125 cv
344.898 160.43 li
217.398 160.43 217.398 160.43 89.8979 160.43 cv
89.8979 157.125 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
354.898 157.125 mo
482.398 157.125 482.398 304.648 609.898 304.648 cv
609.898 307.953 li
482.398 307.953 482.398 160.43 354.898 160.43 cv
354.898 157.125 li
f
89.8979 122.962 mo
217.398 122.962 217.398 97.9619 344.898 97.9619 cv
344.898 101.267 li
217.398 101.267 217.398 126.267 89.8979 126.267 cv
89.8979 122.962 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 78.1314 mo
482.398 78.1314 482.398 94.6569 609.898 94.6569 cv
609.898 97.9618 li
482.398 97.9618 482.398 81.4364 354.898 81.4364 cv
354.898 78.1314 li
f
89.8979 208.804 mo
217.398 208.804 217.398 208.804 344.898 208.804 cv
344.898 212.109 li
217.398 212.109 217.398 212.109 89.8979 212.109 cv
89.8979 208.804 li
cp
.48127 .12842 .425422 0 cmyk
f
354.898 195.032 mo
482.398 195.032 482.398 114.379 609.898 114.379 cv
609.898 115.205 li
482.398 115.205 482.398 195.859 354.898 195.859 cv
354.898 195.032 li
f
354.898 195.032 mo
354.898 195.532 li
418.754 195.543 450.799 175.294 482.665 155.128 cv
514.549 134.968 546.254 114.89 609.898 114.879 cv
609.898 114.379 li
609.398 114.379 li
609.398 115.205 li
609.898 115.205 li
609.898 114.705 li
546.042 114.695 513.997 134.943 482.131 155.109 cv
450.247 175.27 418.542 195.348 354.898 195.359 cv
354.898 195.859 li
355.398 195.859 li
355.398 195.032 li
354.898 195.032 li
354.898 195.532 li
354.898 195.032 li
354.398 195.032 li
354.398 195.859 li
354.398 196.359 li
354.898 196.359 li
418.754 196.369 450.799 176.121 482.665 155.954 cv
514.549 135.794 546.254 115.716 609.898 115.705 cv
610.398 115.705 li
610.398 114.379 li
610.398 113.879 li
609.898 113.879 li
546.042 113.868 513.997 134.117 482.131 154.283 cv
450.247 174.444 418.542 194.521 354.898 194.532 cv
354.398 194.532 li
354.398 195.032 li
354.898 195.032 li
f
354.898 204.397 mo
482.398 204.397 482.398 221.893 609.898 221.893 cv
609.898 222.719 li
482.398 222.719 482.398 205.223 354.898 205.223 cv
354.898 204.397 li
f
354.898 204.397 mo
354.898 204.897 li
418.628 204.898 450.456 209.267 482.33 213.64 cv
514.206 218.015 546.127 222.394 609.898 222.393 cv
609.898 221.893 li
609.398 221.893 li
609.398 222.719 li
609.898 222.719 li
609.898 222.219 li
546.168 222.219 514.34 217.849 482.466 213.476 cv
450.59 209.101 418.668 204.722 354.898 204.723 cv
354.898 205.223 li
355.398 205.223 li
355.398 204.397 li
354.898 204.397 li
354.898 204.897 li
354.898 204.397 li
354.398 204.397 li
354.398 205.223 li
354.398 205.723 li
354.898 205.723 li
418.628 205.724 450.456 210.093 482.33 214.466 cv
514.206 218.841 546.127 223.22 609.898 223.219 cv
610.398 223.219 li
610.398 221.893 li
610.398 221.393 li
609.898 221.393 li
546.168 221.392 514.34 217.023 482.466 212.65 cv
450.59 208.275 418.668 203.896 354.898 203.897 cv
354.398 203.897 li
354.398 204.397 li
354.898 204.397 li
f
354.898 201.092 mo
482.398 201.092 482.398 180.789 609.898 180.789 cv
609.898 181.616 li
482.398 181.616 482.398 201.918 354.898 201.918 cv
354.898 201.092 li
f
354.898 201.092 mo
354.898 201.592 li
418.671 201.593 450.601 196.511 482.477 191.434 cv
514.351 186.36 546.171 181.29 609.898 181.289 cv
609.898 180.789 li
609.398 180.789 li
609.398 181.616 li
609.898 181.616 li
609.898 181.116 li
546.124 181.115 514.195 186.197 482.319 191.273 cv
450.445 196.348 418.624 201.417 354.898 201.418 cv
354.898 201.918 li
355.398 201.918 li
355.398 201.092 li
354.898 201.092 li
354.898 201.592 li
354.898 201.092 li
354.398 201.092 li
354.398 201.918 li
354.398 202.418 li
354.898 202.418 li
418.671 202.419 450.601 197.337 482.477 192.26 cv
514.351 187.186 546.171 182.117 609.898 182.116 cv
610.398 182.116 li
610.398 180.789 li
610.398 180.289 li
609.898 180.289 li
546.124 180.288 514.195 185.37 482.319 190.447 cv
450.445 195.521 418.624 200.591 354.898 200.592 cv
354.398 200.592 li
354.398 201.092 li
354.898 201.092 li
f
354.898 211.282 mo
482.398 211.282 482.21 311.441 609.711 311.441 cv
609.711 312.267 li
482.21 312.267 482.398 212.109 354.898 212.109 cv
354.898 211.282 li
f
354.898 211.282 mo
354.898 211.782 li
386.708 211.784 410.516 218.025 430.358 227.384 cv
460.12 241.42 480.973 262.516 506.389 280.161 cv
531.801 297.805 561.8 311.947 609.711 311.941 cv
609.711 311.441 li
609.211 311.441 li
609.211 312.267 li
609.711 312.267 li
609.711 311.767 li
577.9 311.766 554.092 305.525 534.25 296.165 cv
504.489 282.13 483.635 261.034 458.219 243.389 cv
432.807 225.745 402.808 211.602 354.898 211.609 cv
354.898 212.109 li
355.398 212.109 li
355.398 211.282 li
354.898 211.282 li
354.898 211.782 li
354.898 211.282 li
354.398 211.282 li
354.398 212.109 li
354.398 212.609 li
354.898 212.609 li
386.708 212.61 410.516 218.851 430.358 228.211 cv
460.12 242.246 480.973 263.342 506.389 280.987 cv
531.801 298.631 561.8 312.774 609.711 312.767 cv
610.21 312.767 li
610.21 311.441 li
610.21 310.941 li
609.711 310.941 li
577.9 310.94 554.092 304.698 534.25 295.339 cv
504.489 281.303 483.635 260.208 458.219 242.562 cv
432.807 224.918 402.808 210.776 354.898 210.782 cv
354.398 210.782 li
354.398 211.282 li
354.898 211.282 li
f
89.8979 126.267 mo
217.398 126.267 217.398 101.267 344.898 101.267 cv
344.898 104.572 li
217.398 104.572 217.398 129.572 89.8979 129.572 cv
89.8979 126.267 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 81.4364 mo
482.398 81.4364 482.398 97.9618 609.898 97.9618 cv
609.898 101.267 li
482.398 101.267 482.398 84.7416 354.898 84.7416 cv
354.898 81.4364 li
f
89.8979 316.719 mo
217.398 316.719 217.398 316.719 344.898 316.719 cv
344.898 320.024 li
217.398 320.024 217.398 320.024 89.8979 320.024 cv
89.8979 316.719 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 306.804 mo
354.898 303.499 li
378.999 303.499 398.551 293.955 415.264 278.485 cv
416.271 278.63 417.267 278.779 418.254 278.93 cv
400.888 296.08 380.454 306.804 354.898 306.804 cv
354.898 306.804 li
421.083 276.053 mo
420.152 275.902 419.219 275.754 418.271 275.609 cv
419.683 274.214 421.081 272.77 422.453 271.292 cv
423.45 271.296 424.446 271.3 425.423 271.304 cv
423.998 272.931 422.551 274.516 421.083 276.053 cv
.118257 0 .0197147 0 cmyk
f
420.395 276.768 mo
419.452 276.617 418.502 276.469 417.541 276.324 cv
417.786 276.086 418.028 275.849 418.271 275.609 cv
419.219 275.754 420.152 275.902 421.083 276.053 cv
420.854 276.292 420.624 276.531 420.395 276.768 cv
.60058 .0573434 .119661 0 cmyk
f
419.838 277.34 mo
418.884 277.189 417.922 277.041 416.949 276.896 cv
417.147 276.707 417.345 276.515 417.541 276.324 cv
418.502 276.469 419.452 276.617 420.395 276.768 cv
420.207 276.962 420.026 277.148 419.838 277.34 cv
f
418.254 278.93 mo
417.267 278.779 416.271 278.63 415.264 278.485 cv
415.831 277.961 416.389 277.434 416.949 276.896 cv
417.922 277.041 418.884 277.189 419.838 277.34 cv
419.314 277.874 418.783 278.408 418.254 278.93 cv
f
429.854 266.031 mo
428.955 266.027 428.046 266.023 427.13 266.019 cv
429.321 263.437 431.465 260.751 433.564 257.975 cv
434.502 257.821 435.429 257.665 436.35 257.507 cv
434.234 260.439 432.064 263.293 429.854 266.031 cv
.118257 0 .0197147 0 cmyk
f
428.92 267.179 mo
428.005 267.175 427.079 267.171 426.147 267.168 cv
426.478 266.785 426.802 266.407 427.13 266.019 cv
428.046 266.023 428.955 266.027 429.854 266.031 cv
429.542 266.419 429.235 266.796 428.92 267.179 cv
.60058 .0573434 .119661 0 cmyk
f
428.24 268.003 mo
427.316 267.999 426.372 267.995 425.431 267.991 cv
425.667 267.721 425.912 267.44 426.147 267.168 cv
427.079 267.171 428.005 267.175 428.92 267.179 cv
428.694 267.455 428.467 267.729 428.24 268.003 cv
f
427.69 268.661 mo
426.752 268.657 425.806 268.653 424.85 268.65 cv
425.048 268.427 425.234 268.215 425.431 267.991 cv
426.372 267.995 427.316 267.999 428.24 268.003 cv
428.057 268.223 427.873 268.443 427.69 268.661 cv
f
426.994 269.485 mo
426.042 269.481 425.086 269.477 424.116 269.473 cv
424.359 269.202 424.608 268.923 424.85 268.65 cv
425.806 268.653 426.752 268.657 427.69 268.661 cv
427.462 268.933 427.223 269.215 426.994 269.485 cv
f
439.502 249.722 mo
441.599 246.666 443.655 243.521 445.674 240.301 cv
446.593 239.928 447.5 239.552 448.404 239.17 cv
446.322 242.616 444.206 245.976 442.043 249.252 cv
441.203 249.41 440.356 249.567 439.502 249.722 cv
.118257 0 .0197147 0 cmyk
f
437.271 252.917 mo
438.02 251.863 438.763 250.798 439.502 249.722 cv
440.356 249.567 441.203 249.41 442.043 249.252 cv
441.334 250.326 440.618 251.393 439.899 252.446 cv
439.031 252.605 438.153 252.762 437.271 252.917 cv
.60058 .0573434 .119661 0 cmyk
f
436.731 253.672 mo
436.909 253.424 437.094 253.166 437.271 252.917 cv
438.153 252.762 439.031 252.605 439.899 252.446 cv
439.725 252.701 439.556 252.948 439.382 253.202 cv
438.507 253.36 437.622 253.517 436.731 253.672 cv
f
435.629 255.195 mo
436.001 254.686 436.362 254.186 436.731 253.672 cv
437.622 253.517 438.507 253.36 439.382 253.202 cv
439.033 253.709 438.677 254.222 438.326 254.725 cv
437.433 254.884 436.537 255.04 435.629 255.195 cv
f
435.131 255.874 mo
435.296 255.65 435.465 255.42 435.629 255.195 cv
436.537 255.04 437.433 254.884 438.326 254.725 cv
438.168 254.95 438.007 255.18 437.849 255.404 cv
436.951 255.563 436.045 255.719 435.131 255.874 cv
f
433.564 257.975 mo
434.088 257.281 434.612 256.579 435.131 255.874 cv
436.045 255.719 436.951 255.563 437.849 255.404 cv
437.349 256.115 436.856 256.806 436.35 257.507 cv
435.429 257.665 434.502 257.821 433.564 257.975 cv
f
425.423 271.304 mo
424.446 271.3 423.45 271.296 422.453 271.292 cv
423.013 270.689 423.562 270.089 424.116 269.473 cv
425.086 269.477 426.042 269.481 426.994 269.485 cv
426.471 270.1 425.952 270.701 425.423 271.304 cv
f
447.051 238.083 mo
447.174 237.884 447.291 237.693 447.413 237.493 cv
447.555 237.581 447.696 237.668 447.838 237.756 cv
447.576 237.865 447.314 237.974 447.051 238.083 cv
f
445.674 240.301 mo
446.133 239.568 446.596 238.824 447.051 238.083 cv
447.314 237.974 447.576 237.865 447.838 237.756 cv
448.183 237.969 448.526 238.183 448.869 238.399 cv
448.717 238.651 448.556 238.919 448.404 239.17 cv
447.5 239.552 446.593 239.928 445.674 240.301 cv
f
450.906 231.658 mo
452.111 229.601 453.304 227.52 454.485 225.416 cv
454.99 225.614 455.493 225.813 455.994 226.013 cv
455.155 227.531 454.317 229.028 453.467 230.524 cv
452.62 230.905 451.765 231.283 450.906 231.658 cv
.118257 0 .0197147 0 cmyk
f
450.254 232.768 mo
450.473 232.397 450.688 232.031 450.906 231.658 cv
451.765 231.283 452.62 230.905 453.467 230.524 cv
453.26 230.888 453.042 231.27 452.834 231.633 cv
451.98 232.015 451.12 232.393 450.254 232.768 cv
.60058 .0573434 .119661 0 cmyk
f
449.728 233.656 mo
449.9 233.366 450.082 233.06 450.254 232.768 cv
451.12 232.393 451.98 232.015 452.834 231.633 cv
452.664 231.93 452.494 232.226 452.324 232.522 cv
451.466 232.903 450.598 233.282 449.728 233.656 cv
f
449.75 235.017 mo
449.548 234.889 449.347 234.763 449.143 234.636 cv
449.338 234.31 449.534 233.983 449.728 233.656 cv
450.598 233.282 451.466 232.903 452.324 232.522 cv
451.967 233.142 451.616 233.749 451.256 234.365 cv
450.756 234.584 450.255 234.8 449.75 235.017 cv
f
450.274 235.348 mo
450.101 235.239 449.924 235.126 449.75 235.017 cv
450.255 234.8 450.756 234.584 451.256 234.365 cv
451.111 234.614 450.965 234.863 450.82 235.111 cv
450.638 235.191 450.456 235.27 450.274 235.348 cv
f
450.57 235.537 mo
450.471 235.474 450.373 235.411 450.274 235.348 cv
450.456 235.27 450.638 235.191 450.82 235.111 cv
450.738 235.25 450.652 235.398 450.57 235.537 cv
f
457.351 223.54 mo
456.854 223.339 456.364 223.143 455.864 222.944 cv
457.894 219.275 459.904 215.524 461.88 211.742 cv
462.093 211.769 462.302 211.795 462.515 211.822 cv
462.738 212.059 462.962 212.298 463.184 212.536 cv
461.263 216.253 459.321 219.925 457.351 223.54 cv
.118257 0 .0197147 0 cmyk
f
456.852 224.453 mo
456.355 224.253 455.858 224.055 455.357 223.858 cv
455.528 223.549 455.692 223.253 455.864 222.944 cv
456.364 223.143 456.854 223.339 457.351 223.54 cv
457.185 223.844 457.019 224.149 456.852 224.453 cv
.515862 .108736 .365789 0 cmyk
f
449.961 236.569 mo
449.483 236.266 449.006 235.966 448.524 235.666 cv
448.733 235.32 448.936 234.983 449.143 234.636 cv
449.347 234.763 449.548 234.889 449.75 235.017 cv
449.924 235.126 450.101 235.239 450.274 235.348 cv
450.373 235.411 450.471 235.474 450.57 235.537 cv
450.368 235.88 450.163 236.227 449.961 236.569 cv
f
455.994 226.013 mo
455.493 225.813 454.99 225.614 454.485 225.416 cv
454.776 224.899 455.068 224.377 455.357 223.858 cv
455.858 224.055 456.355 224.253 456.852 224.453 cv
456.566 224.976 456.282 225.492 455.994 226.013 cv
f
449.741 236.939 mo
449.263 236.637 448.782 236.337 448.299 236.038 cv
448.373 235.916 448.45 235.788 448.524 235.666 cv
449.006 235.966 449.483 236.266 449.961 236.569 cv
449.887 236.693 449.814 236.816 449.741 236.939 cv
f
463.184 212.536 mo
462.962 212.298 462.738 212.059 462.515 211.822 cv
462.839 211.863 463.166 211.905 463.489 211.946 cv
463.388 212.141 463.285 212.34 463.184 212.536 cv
.499031 .748196 .00274662 0 cmyk
f
465.32 208.371 mo
464.794 208.303 464.262 208.235 463.733 208.167 cv
464.375 206.92 465.02 205.656 465.658 204.4 cv
466.668 203.507 467.668 202.612 468.669 201.71 cv
467.557 203.945 466.443 206.161 465.32 208.371 cv
.118257 0 .0197147 0 cmyk
f
464.77 209.449 mo
464.249 209.382 463.724 209.315 463.2 209.248 cv
463.192 209.24 463.192 209.24 463.184 209.231 cv
463.366 208.879 463.551 208.52 463.733 208.167 cv
464.262 208.235 464.794 208.303 465.32 208.371 cv
465.139 208.726 464.951 209.094 464.77 209.449 cv
.515862 .108736 .365789 0 cmyk
f
464.374 210.224 mo
464.273 210.211 464.175 210.199 464.074 210.186 cv
463.784 209.873 463.492 209.56 463.2 209.248 cv
463.724 209.315 464.249 209.382 464.77 209.449 cv
464.638 209.708 464.507 209.965 464.374 210.224 cv
f
465.658 204.4 mo
466.64 202.464 467.609 200.533 468.582 198.579 cv
468.976 198.897 469.359 199.208 469.751 199.528 cv
469.391 200.256 469.03 200.984 468.669 201.71 cv
467.668 202.612 466.668 203.507 465.658 204.4 cv
.60058 .0573434 .119661 0 cmyk
f
470.154 195.408 mo
470.368 194.975 470.584 194.536 470.797 194.102 cv
471.113 194.053 471.43 194.004 471.745 193.955 cv
471.217 194.439 470.684 194.926 470.154 195.408 cv
f
469.49 197.663 mo
469.383 197.576 469.275 197.488 469.168 197.401 cv
469.497 196.737 469.826 196.073 470.154 195.408 cv
470.684 194.926 471.217 194.439 471.745 193.955 cv
472.013 193.914 472.282 193.872 472.549 193.83 cv
472.243 194.459 471.935 195.088 471.628 195.715 cv
470.919 196.365 470.203 197.017 469.49 197.663 cv
f
470.333 198.35 mo
470.052 198.12 469.772 197.892 469.49 197.663 cv
470.203 197.017 470.919 196.365 471.628 195.715 cv
471.198 196.592 470.764 197.476 470.333 198.35 cv
f
469.751 199.528 mo
469.359 199.208 468.976 198.897 468.582 198.579 cv
468.777 198.188 468.974 197.792 469.168 197.401 cv
469.275 197.488 469.383 197.576 469.49 197.663 cv
469.49 197.663 li
469.772 197.892 470.052 198.12 470.333 198.35 cv
470.139 198.743 469.945 199.136 469.751 199.528 cv
.499031 .748196 .00274662 0 cmyk
f
464.074 210.186 mo
463.642 210.131 463.209 210.076 462.776 210.021 cv
462.913 209.755 463.047 209.497 463.184 209.231 cv
463.192 209.24 463.192 209.24 463.2 209.248 cv
463.492 209.56 463.784 209.873 464.074 210.186 cv
f
472.089 191.468 mo
472.235 191.17 472.378 190.876 472.524 190.577 cv
472.689 190.825 472.855 191.074 473.02 191.323 cv
472.71 191.371 472.4 191.419 472.089 191.468 cv
.515862 .108736 .365789 0 cmyk
f
471.774 192.112 mo
471.876 191.903 471.987 191.677 472.089 191.468 cv
472.4 191.419 472.71 191.371 473.02 191.323 cv
473.142 191.506 473.257 191.679 473.378 191.862 cv
472.845 191.946 472.309 192.029 471.774 192.112 cv
f
477.533 180.22 mo
477.904 179.448 478.275 178.675 478.645 177.902 cv
478.84 178.145 479.036 178.389 479.231 178.632 cv
478.666 179.161 478.099 179.692 477.533 180.22 cv
.118257 0 .0197147 0 cmyk
f
474.644 186.215 mo
475.611 184.217 476.569 182.227 477.533 180.22 cv
478.099 179.692 478.666 179.161 479.231 178.632 cv
479.363 178.797 479.504 178.972 479.636 179.137 cv
478.935 180.603 478.235 182.063 477.533 183.526 cv
476.569 184.426 475.611 185.319 474.644 186.215 cv
.60058 .0573434 .119661 0 cmyk
f
474.265 186.996 mo
474.391 186.737 474.518 186.474 474.644 186.215 cv
475.611 185.319 476.569 184.426 477.533 183.526 cv
477.252 184.111 476.969 184.699 476.688 185.283 cv
476.115 185.819 475.542 186.352 474.967 186.886 cv
474.732 186.923 474.501 186.959 474.265 186.996 cv
f
474.967 186.886 mo
475.542 186.352 476.115 185.819 476.688 185.283 cv
476.454 185.77 476.229 186.237 475.994 186.724 cv
475.654 186.778 475.308 186.832 474.967 186.886 cv
f
474.841 189.113 mo
474.531 188.645 474.226 188.183 473.916 187.716 cv
474.034 187.473 474.148 187.239 474.265 186.996 cv
474.501 186.959 474.732 186.923 474.967 186.886 cv
475.308 186.832 475.654 186.778 475.994 186.724 cv
475.611 187.519 475.224 188.32 474.841 189.113 cv
.515862 .108736 .365789 0 cmyk
f
480.626 177.068 mo
480.295 176.655 479.967 176.245 479.636 175.832 cv
481.303 172.349 482.97 168.854 484.637 165.37 cv
485.125 165.451 485.613 165.533 486.102 165.614 cv
484.274 169.429 482.452 173.249 480.626 177.068 cv
486.901 162.762 mo
486.589 162.71 486.272 162.657 485.96 162.605 cv
486.038 162.442 486.118 162.275 486.196 162.112 cv
486.43 162.328 486.667 162.546 486.901 162.762 cv
.118257 0 .0197147 0 cmyk
f
486.919 163.91 mo
486.43 163.829 485.941 163.747 485.452 163.666 cv
485.62 163.316 485.792 162.955 485.96 162.605 cv
486.272 162.657 486.589 162.71 486.901 162.762 cv
487.033 162.884 487.163 163.003 487.296 163.125 cv
487.171 163.385 487.044 163.65 486.919 163.91 cv
.499031 .748196 .00274662 0 cmyk
f
486.102 165.614 mo
485.613 165.533 485.125 165.451 484.637 165.37 cv
484.909 164.8 485.179 164.235 485.452 163.666 cv
485.941 163.747 486.43 163.829 486.919 163.91 cv
486.646 164.479 486.374 165.045 486.102 165.614 cv
f
480.131 178.103 mo
479.8 177.69 479.472 177.28 479.141 176.867 cv
479.308 176.517 479.469 176.182 479.636 175.832 cv
479.967 176.245 480.295 176.655 480.626 177.068 cv
480.462 177.41 480.295 177.761 480.131 178.103 cv
.871 1 .229892 .104494 cmyk
f
479.636 179.137 mo
479.504 178.972 479.363 178.797 479.231 178.632 cv
479.036 178.389 478.84 178.145 478.645 177.902 cv
478.809 177.56 478.977 177.209 479.141 176.867 cv
479.472 177.28 479.8 177.69 480.131 178.103 cv
479.968 178.445 479.8 178.796 479.636 179.137 cv
f
488.398 160.833 mo
488.03 160.496 487.662 160.158 487.296 159.82 cv
488.86 156.562 490.424 153.322 492 150.088 cv
492.771 149.61 493.546 149.131 494.321 148.655 cv
492.334 152.689 490.363 156.752 488.398 160.833 cv
.118257 0 .0197147 0 cmyk
f
487.846 161.979 mo
487.479 161.642 487.112 161.304 486.746 160.966 cv
486.929 160.584 487.112 160.202 487.296 159.82 cv
487.662 160.158 488.03 160.496 488.398 160.833 cv
488.214 161.215 488.03 161.598 487.846 161.979 cv
.871 1 .229892 .104494 cmyk
f
487.296 163.125 mo
487.163 163.003 487.033 162.884 486.901 162.762 cv
486.667 162.546 486.43 162.328 486.196 162.112 cv
486.379 161.73 486.562 161.348 486.746 160.966 cv
487.112 161.304 487.479 161.642 487.846 161.979 cv
487.663 162.361 487.479 162.744 487.296 163.125 cv
f
474.379 190.067 mo
474.069 189.599 473.763 189.137 473.453 188.67 cv
473.606 188.355 473.763 188.031 473.916 187.716 cv
474.226 188.183 474.531 188.645 474.841 189.113 cv
474.688 189.429 474.532 189.751 474.379 190.067 cv
f
473.916 191.021 mo
473.611 190.559 473.295 190.084 472.989 189.623 cv
473.142 189.309 473.3 188.984 473.453 188.67 cv
473.763 189.137 474.069 189.599 474.379 190.067 cv
474.222 190.39 474.073 190.697 473.916 191.021 cv
f
493.765 146.48 mo
494.436 145.115 495.11 143.749 495.785 142.391 cv
496.213 142.638 496.635 142.88 497.065 143.126 cv
496.743 143.771 496.428 144.402 496.106 145.049 cv
495.324 145.524 494.543 146.002 493.765 146.48 cv
.515862 .108736 .365789 0 cmyk
f
493.405 147.215 mo
493.523 146.974 493.647 146.721 493.765 146.48 cv
494.543 146.002 495.324 145.524 496.106 145.049 cv
495.987 145.288 495.859 145.547 495.74 145.786 cv
494.959 146.261 494.181 146.737 493.405 147.215 cv
f
501.072 133.818 mo
500.822 133.679 500.565 133.535 500.315 133.396 cv
502.702 128.731 505.109 124.15 507.57 119.64 cv
508.3 119.409 509.035 119.179 509.773 118.951 cv
507.173 123.609 504.627 128.366 502.114 133.208 cv
501.766 133.411 501.419 133.614 501.072 133.818 cv
.118257 0 .0197147 0 cmyk
f
501.637 134.131 mo
501.447 134.026 501.262 133.923 501.072 133.818 cv
501.419 133.614 501.766 133.411 502.114 133.208 cv
501.956 133.513 501.794 133.826 501.637 134.131 cv
.515862 .108736 .365789 0 cmyk
f
500.315 136.701 mo
499.876 136.456 499.443 136.212 499.006 135.966 cv
499.439 135.112 499.88 134.246 500.315 133.396 cv
500.565 133.535 500.822 133.679 501.072 133.818 cv
501.262 133.923 501.447 134.026 501.637 134.131 cv
501.192 134.992 500.758 135.836 500.315 136.701 cv
.871 1 .229892 .104494 cmyk
f
499.659 137.986 mo
499.226 137.743 498.788 137.496 498.357 137.251 cv
498.573 136.823 498.79 136.393 499.006 135.966 cv
499.443 136.212 499.876 136.456 500.315 136.701 cv
500.098 137.126 499.876 137.56 499.659 137.986 cv
f
499.006 139.271 mo
498.574 139.027 498.141 138.781 497.71 138.536 cv
497.925 138.107 498.141 137.679 498.357 137.251 cv
498.788 137.496 499.226 137.743 499.659 137.986 cv
499.442 138.412 499.223 138.844 499.006 139.271 cv
f
498.211 140.474 mo
497.827 140.256 497.448 140.04 497.065 139.821 cv
497.28 139.391 497.494 138.965 497.71 138.536 cv
498.141 138.781 498.574 139.027 499.006 139.271 cv
498.83 139.619 498.655 139.964 498.479 140.313 cv
498.392 140.365 498.299 140.421 498.211 140.474 cv
f
498.357 140.556 mo
498.309 140.529 498.259 140.501 498.211 140.474 cv
498.211 140.474 li
498.299 140.421 498.392 140.365 498.479 140.313 cv
498.439 140.392 498.397 140.477 498.357 140.556 cv
.515862 .108736 .365789 0 cmyk
f
497.71 141.841 mo
497.279 141.596 496.853 141.352 496.424 141.106 cv
496.638 140.676 496.85 140.251 497.065 139.821 cv
497.448 140.04 497.827 140.256 498.211 140.474 cv
498.259 140.501 498.309 140.529 498.357 140.556 cv
498.141 140.984 497.925 141.412 497.71 141.841 cv
.871 1 .229892 .104494 cmyk
f
510.332 114.648 mo
513.655 108.732 517.059 102.999 520.578 97.4964 cv
521.247 97.5611 521.922 97.6255 522.598 97.6891 cv
519.165 102.901 515.844 108.341 512.604 113.959 cv
511.843 114.187 511.085 114.417 510.332 114.648 cv
.118257 0 .0197147 0 cmyk
f
509.569 116.011 mo
509.825 115.553 510.076 115.104 510.332 114.648 cv
511.085 114.417 511.843 114.187 512.604 113.959 cv
512.345 114.409 512.08 114.872 511.821 115.324 cv
511.067 115.552 510.315 115.781 509.569 116.011 cv
.499031 .748196 .00274662 0 cmyk
f
508.665 117.643 mo
508.965 117.098 509.268 116.553 509.569 116.011 cv
510.315 115.781 511.067 115.552 511.821 115.324 cv
511.512 115.866 511.203 116.41 510.895 116.954 cv
510.148 117.182 509.403 117.412 508.665 117.643 cv
f
507.57 119.64 mo
507.931 118.978 508.302 118.301 508.665 117.643 cv
509.403 117.412 510.148 117.182 510.895 116.954 cv
510.519 117.618 510.146 118.283 509.773 118.951 cv
509.035 119.179 508.3 119.409 507.57 119.64 cv
f
497.065 143.126 mo
496.635 142.88 496.213 142.638 495.785 142.391 cv
495.999 141.96 496.209 141.537 496.424 141.106 cv
496.853 141.352 497.279 141.596 497.71 141.841 cv
497.494 142.27 497.28 142.696 497.065 143.126 cv
.871 1 .229892 .104494 cmyk
f
473.378 191.862 mo
473.257 191.679 473.142 191.506 473.02 191.323 cv
472.855 191.074 472.689 190.825 472.524 190.577 cv
472.681 190.255 472.832 189.946 472.989 189.623 cv
473.295 190.084 473.611 190.559 473.916 191.021 cv
473.787 191.287 473.648 191.574 473.518 191.84 cv
473.471 191.848 473.426 191.855 473.378 191.862 cv
f
492 150.088 mo
492.468 149.128 492.936 148.172 493.405 147.215 cv
494.181 146.737 494.959 146.261 495.74 145.786 cv
495.264 146.745 494.796 147.692 494.321 148.655 cv
493.546 149.131 492.771 149.61 492 150.088 cv
.515862 .108736 .365789 0 cmyk
f
463.489 211.946 mo
463.166 211.905 462.839 211.863 462.515 211.822 cv
462.302 211.795 462.093 211.769 461.88 211.742 cv
462.18 211.166 462.476 210.599 462.776 210.021 cv
463.209 210.076 463.642 210.131 464.074 210.186 cv
464.175 210.199 464.273 210.211 464.374 210.224 cv
464.08 210.798 463.784 211.374 463.489 211.946 cv
f
470.797 194.102 mo
471.125 193.436 471.447 192.78 471.774 192.112 cv
472.309 192.029 472.845 191.946 473.378 191.862 cv
473.426 191.855 473.471 191.848 473.518 191.84 cv
473.193 192.511 472.876 193.161 472.549 193.83 cv
472.282 193.872 472.013 193.914 471.745 193.955 cv
471.43 194.004 471.113 194.053 470.797 194.102 cv
f
448.869 238.399 mo
448.526 238.183 448.183 237.969 447.838 237.756 cv
447.696 237.668 447.555 237.581 447.413 237.493 cv
447.711 237.008 448.004 236.527 448.299 236.038 cv
448.782 236.337 449.263 236.637 449.741 236.939 cv
449.448 237.433 449.164 237.908 448.869 238.399 cv
f
551.126 63.4521 mo
549.997 63.3897 548.876 63.3252 547.772 63.2595 cv
564.812 46.8612 584.813 36.6411 609.648 36.5649 cv
609.648 39.8699 li
586.422 39.9412 567.428 48.8801 551.126 63.4521 cv
.118257 0 .0197147 0 cmyk
f
547.772 66.5647 mo
546.716 66.5018 545.678 66.4378 544.644 66.372 cv
545.678 65.3096 546.717 64.2754 547.772 63.2595 cv
548.876 63.3252 549.997 63.3897 551.126 63.4521 cv
549.997 64.4613 548.876 65.5026 547.772 66.5647 cv
.871 1 .229892 .104494 cmyk
f
544.644 69.677 mo
543.658 69.6142 542.673 69.5497 541.706 69.4844 cv
542.673 68.4296 543.658 67.3862 544.644 66.372 cv
545.678 66.4378 546.716 66.5018 547.772 66.5647 cv
546.717 67.5806 545.678 68.6146 544.644 69.677 cv
f
543.153 71.2333 mo
542.192 71.1702 541.242 71.1061 540.299 71.0406 cv
540.765 70.5179 541.235 69.9978 541.706 69.4844 cv
542.673 69.5497 543.658 69.6142 544.644 69.677 cv
544.148 70.1868 543.644 70.7132 543.153 71.2333 cv
f
541.706 72.7895 mo
540.77 72.7263 539.848 72.6624 538.93 72.5969 cv
539.386 72.0708 539.838 71.5578 540.299 71.0406 cv
541.242 71.1061 542.192 71.1702 543.153 71.2333 cv
542.668 71.7479 542.187 72.2649 541.706 72.7895 cv
f
540.299 74.3458 mo
539.387 74.2825 538.491 74.2186 537.595 74.1532 cv
538.038 73.6302 538.483 73.1114 538.93 72.5969 cv
539.848 72.6624 540.77 72.7263 541.706 72.7895 cv
541.235 73.303 540.765 73.823 540.299 74.3458 cv
f
537.595 77.4582 mo
536.729 77.3949 535.872 77.3307 535.021 77.2655 cv
535.872 76.212 536.729 75.1755 537.595 74.1532 cv
538.491 74.2186 539.387 74.2825 540.299 74.3458 cv
539.387 75.3687 538.491 76.4006 537.595 77.4582 cv
f
535.021 80.5707 mo
534.195 80.5073 533.375 80.4431 532.562 80.378 cv
533.375 79.3266 534.195 78.2887 535.021 77.2655 cv
535.872 77.3307 536.729 77.3949 537.595 77.4582 cv
536.729 78.4805 535.872 79.5172 535.021 80.5707 cv
f
533.778 82.1269 mo
532.973 82.0638 532.163 81.999 531.371 81.9343 cv
531.767 81.4113 532.162 80.8944 532.562 80.378 cv
533.375 80.4431 534.195 80.5073 535.021 80.5707 cv
534.605 81.0853 534.19 81.6051 533.778 82.1269 cv
f
532.562 83.6832 mo
531.773 83.62 530.98 83.5553 530.203 83.4905 cv
530.587 82.974 530.984 82.4446 531.371 81.9343 cv
532.163 81.999 532.973 82.0638 533.778 82.1269 cv
533.37 82.6426 532.966 83.1606 532.562 83.6832 cv
f
530.203 86.7955 mo
529.441 86.732 528.686 86.6679 527.935 86.6029 cv
528.686 85.5527 529.441 84.5172 530.203 83.4905 cv
530.98 83.5553 531.773 83.62 532.562 83.6832 cv
531.773 84.7035 530.98 85.7497 530.203 86.7955 cv
f
527.935 89.908 mo
527.202 89.8446 526.469 89.7801 525.747 89.7154 cv
526.474 88.6631 527.198 87.6335 527.935 86.6029 cv
528.686 86.6679 529.441 86.732 530.203 86.7955 cv
529.441 87.8222 528.686 88.8578 527.935 89.908 cv
f
526.831 91.4643 mo
526.108 91.4006 525.393 91.3366 524.681 91.2716 cv
525.032 90.7538 525.393 90.2282 525.747 89.7154 cv
526.469 89.7801 527.202 89.8446 527.935 89.908 cv
527.566 90.4233 527.197 90.9435 526.831 91.4643 cv
f
524.681 94.5766 mo
523.981 94.5129 523.289 94.4488 522.599 94.3839 cv
523.289 93.336 523.981 92.3005 524.681 91.2716 cv
525.393 91.3366 526.108 91.4006 526.831 91.4643 cv
526.108 92.4926 525.393 93.5275 524.681 94.5766 cv
f
522.598 97.6891 mo
521.922 97.6255 521.247 97.5611 520.578 97.4964 cv
521.247 96.4516 521.922 95.4113 522.599 94.3839 cv
523.289 94.4488 523.981 94.5129 524.681 94.5766 cv
523.981 95.6055 523.289 96.6412 522.598 97.6891 cv
f
89.8979 129.572 mo
217.398 129.572 217.398 104.572 344.898 104.572 cv
344.898 107.877 li
217.398 107.877 217.398 132.877 89.8979 132.877 cv
89.8979 129.572 li
cp
.793973 1 .278019 .337499 cmyk
f
354.898 48.3856 mo
354.898 48.3856 li
354.898 45.0806 li
482.312 45.0806 482.405 20.1142 609.648 20.0806 cv
609.648 23.2223 li
607.33 23.2333 605.054 23.2973 602.818 23.4119 cv
482.353 24.3197 479.993 48.3856 354.898 48.3856 cv
.125002 .180667 .0336919 0 cmyk
f
602.818 23.4119 mo
605.054 23.2973 607.33 23.2333 609.648 23.2223 cv
609.648 23.3856 li
607.332 23.3862 605.051 23.3951 602.818 23.4119 cv
.213474 .210849 .105135 0 cmyk
f
89.8979 293.584 mo
217.398 293.584 217.398 268.584 344.898 268.584 cv
344.898 271.889 li
217.398 271.889 217.398 296.889 89.8979 296.889 cv
89.8979 293.584 li
cp
.60058 .0573434 .119661 0 cmyk
f
354.898 263.13 mo
482.398 263.13 482.398 229.936 609.898 229.936 cv
609.898 231.037 li
482.398 231.037 482.398 264.232 354.898 264.232 cv
354.898 263.13 li
cp
f
354.898 274.092 mo
482.398 274.092 482.398 315.583 609.898 315.583 cv
609.898 316.685 li
482.398 316.685 482.398 275.194 354.898 275.194 cv
354.898 274.092 li
cp
f
354.898 270.677 mo
482.398 270.677 482.398 271.636 609.898 271.636 cv
609.898 272.738 li
482.398 272.738 482.398 271.778 354.898 271.778 cv
354.898 270.677 li
cp
f
89.8979 320.024 mo
217.398 320.024 217.398 320.024 344.898 320.024 cv
344.898 323.329 li
217.398 323.329 217.398 323.329 89.8979 323.329 cv
89.8979 320.024 li
cp
f
354.898 311.211 mo
482.398 311.211 482.398 135.175 609.898 135.175 cv
609.898 136.277 li
482.398 136.277 482.398 312.312 354.898 312.312 cv
354.898 311.211 li
cp
f
354.898 313.414 mo
482.398 313.414 482.398 189.48 609.898 189.48 cv
609.898 190.582 li
482.398 190.582 482.398 314.516 354.898 314.516 cv
354.898 313.414 li
cp
f
354.898 317.27 mo
482.398 317.27 482.398 272.738 609.898 272.738 cv
609.898 273.84 li
482.398 273.84 482.398 318.372 354.898 318.372 cv
354.898 317.27 li
cp
f
89.8979 296.889 mo
217.398 296.889 217.398 271.889 344.898 271.889 cv
344.898 275.194 li
217.398 275.194 217.398 300.194 89.8979 300.194 cv
89.8979 296.889 li
cp
f
354.898 248.863 mo
482.398 248.863 482.398 129.116 609.898 129.116 cv
609.898 130.769 li
482.398 130.769 482.398 250.516 354.898 250.516 cv
354.898 248.863 li
cp
f
354.898 264.232 mo
482.398 264.232 482.398 231.037 609.898 231.037 cv
609.898 232.69 li
482.398 232.69 482.398 265.884 354.898 265.884 cv
354.898 264.232 li
cp
f
344.898 228.922 mo
354.898 228.922 li
354.898 275.194 li
344.898 275.194 li
344.898 228.922 li
cp
.694331 .632349 .621027 .583551 cmyk
f
344.898 228.922 mo
344.898 229.172 li
354.648 229.172 li
354.648 274.944 li
345.148 274.944 li
345.148 228.922 li
344.898 228.922 li
344.898 229.172 li
344.898 228.922 li
344.648 228.922 li
344.648 275.444 li
355.148 275.444 li
355.148 228.672 li
344.648 228.672 li
344.648 228.922 li
344.898 228.922 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 52 /four putdup 58 /colon putdup 98 /b putdup 99 /c putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 117 /u putdup 121 /y putdup 127 /arrowright putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings18 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/space <1C60D8A8C9B854D00D> |-/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-/colon <1C60D8A8C9B854D0F461D1A979903F917C33CF6EDB0A437B4DDC7150150B60E1> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-/arrowright <1C60D8A8C9B5EE310399AF160AA08C1C321D10C3F0AD881013B5ADBA9B20B06BB4138FD42C65B3A3B93467093B10C9EA63E98EF9BBE313278DE1582F2F86AE631D340607FB16DCF4682F4889> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EUYYDS+ArialMT /ArialMT findfont ct_VMDictPut/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 5{/.notdef}rp /four 5{/.notdef}rp /colon 39{/.notdef}rp /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u 3{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf198.415 225.873 mo(4. neuro: symbolic \177 neuro)sh344.898 300.193 mo
354.898 300.193 li
354.898 323.329 li
344.898 323.329 li
344.898 300.193 li
cp
f
344.898 300.193 mo
344.898 300.443 li
354.648 300.443 li
354.648 323.079 li
345.148 323.079 li
345.148 300.193 li
344.898 300.193 li
344.898 300.443 li
344.898 300.193 li
344.648 300.193 li
344.648 323.579 li
355.148 323.579 li
355.148 299.943 li
344.648 299.943 li
344.648 300.193 li
344.898 300.193 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001BCD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF200B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC49372EF96DD9EB13A793559C13CFDFE477> |-/underscore <1C60D8A8C9B7EF3224BB0E94C1F3EA8D5F87D58A9CCE> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 53 /five putdup 95 /underscore putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 5{/.notdef}rp /four /five 4{/.notdef}rp /colon 36{/.notdef}rp /underscore 2{/.notdef}rp /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u 3{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf251.881 295.797 mo(5. neuro_symbolic)sh344.898 182.363 mo
354.898 182.363 li
354.898 212.109 li
344.898 212.109 li
344.898 182.363 li
cp
f
344.898 182.363 mo
344.898 182.613 li
354.648 182.613 li
354.648 211.859 li
345.148 211.859 li
345.148 182.363 li
344.898 182.363 li
344.898 182.613 li
344.898 182.363 li
344.648 182.363 li
344.648 212.359 li
355.148 212.359 li
355.148 182.113 li
344.648 182.113 li
344.648 182.363 li
344.898 182.363 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368AFE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD10C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA7698FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C02C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-/semicolon <1C60D8A8C9B854D0F4620FFD744F34987594276956192930B54D01A23999FE9CFC4510916F2728422ECBB47E0AFFB25C438C959992A877A59E011B6098B561> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 51 /three putdup 59 /semicolon putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 4{/.notdef}rp /three /four /five 4{/.notdef}rp /colon /semicolon 35{/.notdef}rp /underscore 2{/.notdef}rp /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u 3{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf251.888 177.43 mo(3. neuro; symbolic)sh344.898 147.21 mo
354.898 147.21 li
354.898 160.431 li
344.898 160.431 li
344.898 147.21 li
cp
f
344.898 147.21 mo
344.898 147.46 li
354.648 147.46 li
354.648 160.181 li
345.148 160.181 li
345.148 147.21 li
344.898 147.21 li
344.898 147.46 li
344.898 147.21 li
344.648 147.21 li
344.648 160.681 li
355.148 160.681 li
355.148 146.96 li
344.648 146.96 li
344.648 147.21 li
344.898 147.21 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-/bracketleft <1C60D8A8C9B854D0F4A9CC5FDA760B15DDAEB4EC9E19B4B41AFD95C6BA37FE8A> |-/bracketright <1C60D8A8C9B854D0F45A7DCAA08E9F696D25732122263BE011EFF56C1115332A> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 50 /two putdup 91 /bracketleft putdup 93 /bracketright putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 3{/.notdef}rp /two /three /four /five 4{/.notdef}rp /colon /semicolon 31{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore 2{/.notdef}rp /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u 3{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf251.888 142.467 mo(2. symbolic[neuro])sh344.898 25.25 mo
354.898 25.25 li
354.898 107.877 li
344.898 107.877 li
344.898 25.25 li
cp
f
344.898 25.25 mo
344.898 25.5 li
354.648 25.5 li
354.648 107.627 li
345.148 107.627 li
345.148 25.25 li
344.898 25.25 li
344.898 25.5 li
344.898 25.25 li
344.648 25.25 li
344.648 108.127 li
355.148 108.127 li
355.148 25 li
344.648 25 li
344.648 25.25 li
344.898 25.25 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 31{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore 2{/.notdef}rp /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u 3{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf201.322 19.6328 mo(1. symbolic neuro symbolic)sh79.8979 253.922 mo
89.8979 253.922 li
89.8979 323.329 li
79.8979 323.329 li
79.8979 253.922 li
cp
f
79.8979 253.922 mo
79.8979 254.172 li
89.6479 254.172 li
89.6479 323.079 li
80.1479 323.079 li
80.1479 253.922 li
79.8979 253.922 li
79.8979 254.172 li
79.8979 253.922 li
79.6479 253.922 li
79.6479 323.579 li
90.1479 323.579 li
90.1479 253.672 li
79.6479 253.672 li
79.6479 253.922 li
79.8979 253.922 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDFA8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D314851DE59> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B96470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 67 /C putdup 100 /d putdup 112 /p putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C 23{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore 2{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /.notdef /u 3{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf15.1836 293.176 mo(Compiled)sh79.8979 182.363 mo
89.8979 182.363 li
89.8979 212.109 li
79.8979 212.109 li
79.8979 182.363 li
cp
f
79.8979 182.363 mo
79.8979 182.613 li
89.6479 182.613 li
89.6479 211.859 li
80.1479 211.859 li
80.1479 182.363 li
79.8979 182.363 li
79.8979 182.613 li
79.8979 182.363 li
79.6479 182.363 li
79.6479 212.359 li
90.1479 212.359 li
90.1479 182.113 li
79.6479 182.113 li
79.6479 182.363 li
79.8979 182.363 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-/v <1C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D9162B37724F74F272B140D258652D102C2EAC46833C73F9> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 97 /a putdup 116 /t putdup 118 /v putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C 23{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a /b /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf0 201.786 mo(Cooperative)sh79.8979 147.21 mo
89.8979 147.21 li
89.8979 160.431 li
79.8979 160.431 li
79.8979 147.21 li
cp
f
79.8979 147.21 mo
79.8979 147.46 li
89.6479 147.46 li
89.6479 160.181 li
80.1479 160.181 li
80.1479 147.21 li
79.8979 147.21 li
79.8979 147.46 li
79.8979 147.21 li
79.6479 147.21 li
79.6479 160.681 li
90.1479 160.681 li
90.1479 146.96 li
79.6479 146.96 li
79.6479 147.21 li
79.8979 147.21 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 78 /N putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C 10{/.notdef}rp /N 12{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a /b /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf28.9072 158.37 mo(Nested)sh79.8979 50.25 mo
89.8979 50.25 li
89.8979 132.877 li
79.8979 132.877 li
79.8979 50.25 li
cp
f
79.8979 50.25 mo
79.8979 50.5 li
89.6479 50.5 li
89.6479 132.627 li
80.1479 132.627 li
80.1479 50.25 li
79.8979 50.25 li
79.8979 50.5 li
79.8979 50.25 li
79.6479 50.25 li
79.6479 133.127 li
90.1479 133.127 li
90.1479 50 li
79.6479 50 li
79.6479 50.25 li
79.8979 50.25 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-/q <1C60D8A8C9B7EF322408646A760FED70F2D8214740020E61993A1FFE89574C96FDDD947618591671EEE89936F7D0F90E6B11CE96BDCBF7B2C20479CB610D934D0AFBB0721CA3EA49A2D6AB8F9A4A9273E60BD1ACDAB1F7447DBAAB4DD124EC36ECC57CEC13712AB1CAC8625150F69DBA3C4F574D88196863F5C61CC51A61AE68D44A27F86FFD139CDEF75DF80AB81E> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 83 /S putdup 113 /q putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C 10{/.notdef}rp /N 4{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a /b /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf8.6582 96.1133 mo(Sequential)sh609.898 64.911 mo
619.898 64.911 li
619.898 136.081 li
609.898 136.081 li
609.898 64.911 li
cp
f
609.898 64.911 mo
609.898 65.161 li
619.648 65.161 li
619.648 135.83 li
610.148 135.83 li
610.148 64.911 li
609.898 64.911 li
609.898 65.161 li
609.898 64.911 li
609.648 64.911 li
609.648 136.33 li
620.148 136.33 li
620.148 64.661 li
609.648 64.661 li
609.648 64.911 li
609.898 64.911 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F632B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2BA15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609FBC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D295257B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0B222> |-/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 82 /R putdup 103 /g putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C 10{/.notdef}rp /N 3{/.notdef}rp /R /S 7{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a /b /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf627.106 105.046 mo(Reasoning)sh609.898 214.284 mo
619.898 214.284 li
619.898 235.415 li
609.898 235.415 li
609.898 214.284 li
cp
f
609.898 214.284 mo
609.898 214.534 li
619.648 214.534 li
619.648 235.165 li
610.148 235.165 li
610.148 214.284 li
609.898 214.284 li
609.898 214.534 li
609.898 214.284 li
609.648 214.284 li
609.648 235.665 li
620.148 235.665 li
620.148 214.034 li
609.648 214.034 li
609.648 214.284 li
609.898 214.284 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-/O <1C60D8A8C9B6FF86E621E1FAD9CC02A23AF5AAF7451327A9277DAE8170AAC8E603A02E3EEFF561DDADE9FD6F6F16B77EE709DD797791A73F1C532C58482F9C51E1EAE7EA6E4D820E6AA1026E7BE345B1C97C5D9EBBEF4840C4188F96B5380E7625249BBAD172254404F6F1CB17CABA1F131B17AAAB56C5D3B94E3AC2C2E9F0A0D079C435D0249DF6C47E18FCF00E7FFE3C519BB35DF797EF47286BDCA762289BE1> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 68 /D putdup 79 /O putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C /D 9{/.notdef}rp /N /O 2{/.notdef}rp /R /S 7{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a /b /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf627.105 228.667 mo(OOD)sh609.898 161.081 mo
619.898 161.081 li
619.898 190.37 li
609.898 190.37 li
609.898 161.081 li
cp
f
609.898 161.081 mo
609.898 161.331 li
619.648 161.331 li
619.648 190.12 li
610.148 190.12 li
610.148 161.081 li
609.898 161.081 li
609.898 161.331 li
609.898 161.081 li
609.648 161.081 li
609.648 190.62 li
620.148 190.62 li
620.148 160.831 li
609.648 160.831 li
609.648 161.081 li
609.898 161.081 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 73 /I putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C /D 4{/.notdef}rp /I 4{/.notdef}rp /N /O 2{/.notdef}rp /R /S 7{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a /b /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf627.105 179.732 mo(Interpretability)sh609.898 298.625 mo
619.898 298.625 li
619.898 321.308 li
609.898 321.308 li
609.898 298.625 li
cp
f
609.898 298.625 mo
609.898 298.875 li
619.648 298.875 li
619.648 321.058 li
610.148 321.058 li
610.148 298.625 li
609.898 298.625 li
609.898 298.875 li
609.898 298.625 li
609.648 298.625 li
609.648 321.558 li
620.148 321.558 li
620.148 298.375 li
609.648 298.375 li
609.648 298.625 li
609.898 298.625 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
EUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf627.105 313.865 mo(Reduced data)sh609.898 259.112 mo
619.898 259.112 li
619.898 273.544 li
609.898 273.544 li
609.898 259.112 li
cp
f
609.898 259.112 mo
609.898 259.362 li
619.648 259.362 li
619.648 273.294 li
610.148 273.294 li
610.148 259.112 li
609.898 259.112 li
609.898 259.362 li
609.898 259.112 li
609.648 259.112 li
609.648 273.794 li
620.148 273.794 li
620.148 258.862 li
609.648 258.862 li
609.648 259.112 li
609.898 259.112 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginEUYYDS+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D3927> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-systemdict /gcheck known {setglobal} if end {end} ifendEUYYDS+ArialMT /Encoding getdup 84 /T putdup 102 /f putpop%ADOEndSubsetFont
/EUYYDS+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C /D 4{/.notdef}rp /I 4{/.notdef}rp /N /O 2{/.notdef}rp /R /S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a /b /c /d /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 5{/.notdef}rp /arrowright 128{/.notdef}rp]EUYYDS+ArialMT nfEUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf627.105 270.715 mo(Transferability)[7.4585 4.3291 7.22998 7.22998 6.5 3.61182 7.22998 4.3291 7.22998 7.22998 2.88818 2.88818 2.88818 3.61182 0 ]xsh619.648 39.661 mo
610.148 39.661 li
610.148 26.5259 li
610.226 26.5258 610.297 26.5257 610.375 26.5257 cv
610.375 23.2206 li
610.297 23.2206 610.226 23.2206 610.148 23.2207 cv
610.148 .499996 li
619.648 .499996 li
619.648 39.661 li
.148226 .112093 .11783 0 cmyk
f
610.148 26.5259 mo
610.148 23.2207 li
610.226 23.2206 610.297 23.2206 610.375 23.2206 cv
610.375 26.5257 li
610.297 26.5257 610.226 26.5258 610.148 26.5259 cv
.237156 .137118 .192264 0 cmyk
f
620.148 40.161 mo
609.648 40.161 li
609.648 39.8699 li
609.741 39.8696 609.826 39.8695 609.92 39.8695 cv
609.92 36.5645 li
609.826 36.5645 609.741 36.5646 609.648 36.5649 cv
609.648 36.5649 li
609.741 36.5646 609.826 36.5645 609.92 36.5645 cv
609.92 33.2593 li
609.826 33.2593 609.741 33.2595 609.648 33.2597 cv
609.648 33.2596 li
609.741 33.2594 609.826 33.2593 609.92 33.2593 cv
609.92 29.9544 li
609.826 29.9544 609.741 29.9544 609.648 29.9547 cv
609.648 29.9547 li
609.741 29.9544 609.826 29.9544 609.92 29.9544 cv
609.92 26.6492 li
609.826 26.6492 609.741 26.6493 609.648 26.6495 cv
609.648 26.5274 li
609.811 26.5267 609.985 26.5261 610.148 26.5259 cv
610.148 39.661 li
619.648 39.661 li
619.648 .499996 li
610.148 .499996 li
610.148 23.2207 li
610.07 23.2208 609.976 23.2211 609.898 23.2213 cv
609.898 20.0806 li
609.812 20.0806 609.733 20.0806 609.648 20.0806 cv
609.648 20.0806 li
609.733 20.0806 609.812 20.0806 609.898 20.0806 cv
609.898 16.7754 li
609.812 16.7754 609.733 16.7754 609.648 16.7755 cv
609.648 16.7755 li
609.733 16.7754 609.812 16.7754 609.898 16.7754 cv
609.898 13.4703 li
609.812 13.4703 609.733 13.4703 609.648 13.4703 cv
609.648 13.4703 li
609.733 13.4703 609.812 13.4703 609.898 13.4703 cv
609.898 10.1653 li
609.812 10.1653 609.733 10.1653 609.648 10.1653 cv
609.648 10.1653 li
609.733 10.1653 609.812 10.1653 609.898 10.1653 cv
609.898 6.86013 li
609.812 6.86013 609.733 6.86016 609.648 6.86018 cv
609.648 6.86018 li
609.733 6.86016 609.812 6.86013 609.898 6.86013 cv
609.898 3.55515 li
609.812 3.55515 609.733 3.55518 609.648 3.5552 cv
609.648 3.5552 li
609.733 3.55518 609.812 3.55515 609.898 3.55515 cv
609.898 .249998 li
609.812 .249998 609.733 .250023 609.648 .250046 cv
609.648 .249998 li
609.648 0 li
620.148 0 li
620.148 40.161 li
.132479 .102602 .106935 0 cmyk
f
609.648 29.9547 mo
609.648 26.6495 li
609.741 26.6493 609.826 26.6492 609.92 26.6492 cv
609.92 29.9544 li
609.826 29.9544 609.741 29.9544 609.648 29.9547 cv
.251286 .109773 .133883 0 cmyk
f
609.648 3.5552 mo
609.648 .249998 li
609.733 .250023 609.812 .249998 609.898 .249998 cv
609.898 3.55515 li
609.812 3.55515 609.733 3.55518 609.648 3.5552 cv
.265202 .277226 .152193 0 cmyk
f
609.648 6.86018 mo
609.648 3.5552 li
609.733 3.55518 609.812 3.55515 609.898 3.55515 cv
609.898 6.86013 li
609.812 6.86013 609.733 6.86016 609.648 6.86018 cv
f
609.648 10.1653 mo
609.648 6.86018 li
609.733 6.86016 609.812 6.86013 609.898 6.86013 cv
609.898 10.1653 li
609.812 10.1653 609.733 10.1653 609.648 10.1653 cv
f
609.648 33.2596 mo
609.648 29.9547 li
609.741 29.9544 609.826 29.9544 609.92 29.9544 cv
609.92 33.2593 li
609.826 33.2593 609.741 33.2594 609.648 33.2596 cv
.251286 .109773 .133883 0 cmyk
f
609.648 26.5274 mo
609.648 23.3856 li
609.733 23.3856 609.812 23.3856 609.898 23.3856 cv
609.898 23.2213 li
609.976 23.2211 610.07 23.2208 610.148 23.2207 cv
610.148 26.5259 li
609.985 26.5261 609.811 26.5267 609.648 26.5274 cv
.220462 .126772 .178836 0 cmyk
f
609.648 13.4703 mo
609.648 10.1653 li
609.733 10.1653 609.812 10.1653 609.898 10.1653 cv
609.898 13.4703 li
609.812 13.4703 609.733 13.4703 609.648 13.4703 cv
.265202 .277226 .152193 0 cmyk
f
609.648 36.5649 mo
609.648 33.2597 li
609.741 33.2595 609.826 33.2593 609.92 33.2593 cv
609.92 36.5645 li
609.826 36.5645 609.741 36.5646 609.648 36.5649 cv
.251286 .109773 .133883 0 cmyk
f
609.648 16.7755 mo
609.648 13.4703 li
609.733 13.4703 609.812 13.4703 609.898 13.4703 cv
609.898 16.7754 li
609.812 16.7754 609.733 16.7754 609.648 16.7755 cv
.265202 .277226 .152193 0 cmyk
f
609.648 20.0806 mo
609.648 16.7755 li
609.733 16.7754 609.812 16.7754 609.898 16.7754 cv
609.898 20.0806 li
609.812 20.0806 609.733 20.0806 609.648 20.0806 cv
f
609.648 39.8699 mo
609.648 36.5649 li
609.741 36.5646 609.826 36.5645 609.92 36.5645 cv
609.92 39.8695 li
609.826 39.8695 609.741 39.8696 609.648 39.8699 cv
.251286 .109773 .133883 0 cmyk
f
609.648 23.2223 mo
609.648 20.0806 li
609.733 20.0806 609.812 20.0806 609.898 20.0806 cv
609.898 23.2213 li
609.813 23.2216 609.733 23.2219 609.648 23.2223 cv
.265202 .277226 .152193 0 cmyk
f
609.648 23.3856 mo
609.648 23.2223 li
609.733 23.2219 609.813 23.2216 609.898 23.2213 cv
609.898 23.3856 li
609.812 23.3856 609.733 23.3856 609.648 23.3856 cv
.333898 .30219 .217807 0 cmyk
f
.694331 .632349 .621027 .583551 cmyk
EUYYDS+ArialMT*1 [13 0 0 -13 0 0 ]msf627.106 24.6309 mo(None)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/EUYYDS+ArialMT*1 uf/EUYYDS+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 24.0%%AI8_CreatorVersion: 26.3.1%%For: (kyle Hamilton) ()%%Title: (nesy_category-kautz_cat-goals.eps)%%CreationDate: 6/21/22 7:24 AM%%Canvassize: 16383%AI5_FileFormat 14.0%AI24_DataStream%.((`,!*HlR"J,\6q%"p96tDYq!+;D7dgpeQ8fW%ol&<^;d(15nBn&aOQd<\az&HDer,nF,i.1e?7gK2AFF"@\i^O#"9$3K9W%\!hUif/&F7e1-#g,/e(GX47n4C=)k'<6L&Bh@mN<"oibbWo+4rCYD3_YR?!4*K_IKK-Z#7S0YVKkiHhLD(Qm4>AY_JI?WV\L*/U:%chD9PhU8MAk^D2!NX*(8>j6C3c%Mc->!_#a:8qH7L6EqZ)9&lX'e=@f3.=jAbFR6*<^OcUJ=%P$o=7AFJ@==9qm$@6L05*(cS\F1%@J?m:0k"s(KZu)ucYZC_+$s5Y5/He)o,Fkug3m*>Mj6_,ZSBdk=^rJqF=3.jm,?aF/erpNk4jp;/>3K#(lC/$jj#JF!%YRM=db#t%\L*Q,mip8f(q,<1=So*(D9]dLm1K\p^U';#'BW>-AO78"mCo`\XTc'T65s<Ml#uJ+34Jg/J8=tPoHGrN"N1uS[-e4-N^*`.e^gep%D*bO_mr6a]ifsn05/Mmb?o+hiJ:2"_78\t6`1#@]<R2cR@-]m'p._P,X*/"oX-No0.Sl??[TnrrhV*k5mr/u=2)n]u"MQr'mZJj3%mVPa[*KJt0V;mSfJE!q3*.$@8%D-UmJ$to_*7*e;EEWGE/NSn@++`%G2A;#73`ZOui&Sk;\9g5jT'sCB\_Qln5QLaogWr@q7pg-t%qCimPEf[DmjT;)\c*J8:Y2#?GTLHaQb\CRepuSYn;n&Ef%1qG`cYS+3Nt.#c2*G0;BGdFnhj=DPB$p=;@k@Qa!28.nVK1k2B&RoF%^$]Y>U$EKD^+.^)f`7PE=Vb5N0m9/g-O3K"YiR*oZ^2,Oij8nudDf:uA]:mKA]=-X';-JX@!Ab>+(;u@-sBZaa_43GbcH_O-r,+#%5#fXU;\[m#?INeHda;)99cH>qFU4J@[C36mQgM$8'NJ=#a$3/mn5K;2fN*nG\Csdr,%IhX)Z[Z54]DG6"ME(/eVN>IEI`p3VBJ2d%"IdLbD-baE^g(qk!J%`sm&NHhR_f--=J@MQe#bd60dG=SWT-j1'jZsc/)@DA[*TEK%k,86-mYIm/E58nqPXa<5d2X&18/L*^qA=K%3#2lPWlL1m#NcFs`BX^&eY4-OK7"SqoH=gT`ZjbJ!C9**S,`Nj-QE[UiBl1#!$oG4=AnlOTaZ:Y3tK@PL7Sge:$?%WP+`shZ#AJf%D\Mn:MBqH,?%Te;dG"dWDXU*$GO@UrMVcoDK\a@_bQWDuK@%Wjbstl(kR-FGZ;O>/ee-gWrX/$YJ,p5!QqsL32h2fGcbFQ]_DZq6%Til@3;@"oe@F<6a$UeC=ZWN7,B3Vu(&7KHZYhOKSCkl!!0`-$.fOZip$aXbA6!24ugBN2WfGqA(1k8f6>+(u:Ne4KS_=!2O6NdR$%;6S[U'o0S>#Inh[YM.CHFl/NKgR3K?<NN=e!'oq`EpK.\`+YK<\XD'LAcVlUb]3$U;F3PHL$Z,%)onXurX-MoY^#1f7!R+cR6l/K%C^9+<F'I74LX<&1elQO)$b"-_G[=h121%D5ddfCmhInOoX^QGA_!qUDI],2+`<$%55-96ERJf%r$*=SQ#K6'9nkNTY[m`Nej9,MR%/BdB=QCRHM/!n6#?W_?.^q/5:k:9,!GhLd#f!,%^nlN#,XE^&G=DUHVXd7.V=gsu*q4#>e:3(2hCUTd>+&04_!4<3H/_L$?OV;&E%->VoarqshD>iZ&l.gHW#B6/mEJl@9JpD'>,%i=T<iY@ulE4d>Vg=V>oTe9aldbo@^=!+Mt@orTY1\QgQB%@.3?D"Z8l^7@Q!SU]L%_=>0IA)HItFSjWD9-b-i3#mk<dk$eArTX>=(<k45pf5YBgsW82DHEplSQko:<NN\&\ZJYck?5sQX\o-Nb73C8?55!AIP7.$_<n/.%nX":qs4S2<di[u*ZMV@Qh.kh.Nj\?Ac<QtG]6!nYl55!'Q0X=b)#LH=Zl]^,Qj(NJ9t)o]r3^>K]C0Q)ZSC#NIkC$(DQI][k'.[=%i&6*'m)J8B.r-f,I;-unriakXl594YfZ_?=(-C,TrGoGi!-5aK=RFnhT16RF(<je\f(H^eG':,H.t;^=^,+:Ea)8S*l-BOFn(cLd%=2XFjCYROmZG*kl\QIGLdq5r>(WUM8Ii@[bY1pDPVmS%@r<0KG.lLVVmY^sFp(MimkA+5(>Aq6aSupZ;A)GmL[B&n?_=%4cg83Q7%F]n_h4"%B9f\,qS-)#`mYY2HJ4Hk2if*X?[<js2Qr5Nf5Y2M8SMbgcn;&5[BS>N$WMK2JHC+!"V905[rrc`ASUaJefWa#[Vq9-%0%@JE3OUl^h&<5fFp5<=u-mueq\\9V3U&fo:R*E<hRJ,)Z9rTC,VP`o(s+,1aUaUaQ2&'M6eHe:XA6PT0dg-a;Dl,[R%m9AWq(iieN%Jn-q1nV<qg;`,Rq:'7t-L1)HZ+3/k_)cb(dDmAYB3i8Y_6*gFP(m8GIP!@`28GY+6@JPE:dkOii5PD@#;>oe[>V&6;91L*';#QW"%*6A_GAGJSFDNTjN%opcOWrM]78:on5[n-K>p(/K6Vi`@\d;b'eq8ogh<E9&0I7PO'^Vqth[.0@["@!3UAbsM#Ju%V>=G@qIVB`"(%s&<"&Iij7f8=#q[dnfrpK&dGB:'4EM<Dehda`KX2nqWh7+K'LjLLh@#UCSedq*X_N,=nga)Nn;ua)k!8D'[XRP21mXj>9m8-i&6O%No:Ml&1#<Q_[Vdomsc>!nrG"dp(/MH+%MUF3"6le\C#8JTDWC@rc!cZ*(O"/^F)0*Jfol0S-G/@*]L+!SE@rcK4I%BOAu)fb<M#_%:H8kQePCX:UHKU;Y,^RWi>+H@LEYnLnrs(VdujQ<fgALRHOkJUd=;-,,l@$P,e$><FS%#[Oe3or#?;Ka:Tt6j3HfKi.4<bF;!fZU%K&u/Pon0%f:N.<N07W/Tf#)K,2l`&$32RZqq[_)ZpG,^uY'uHX]+<GAK&lBJ6q:#4isCn6fMse.3N%S,We)KeDUF4^l,,]b.co_J%FJPGg8&sIFVkGJ.<KJd3(Ag<^+851,bHUa5X"*C#P-W%<,X_-X>MLEV<(#MBFR7n?rL]a_Sf:ZimIVetrc!d's1G8ikX0G;HiL,B%2l_HK-,GS@]r.FM[MWm:,_$Yo>:`!0VVdT//45LE5O(W,EuI*&IiM<c"Zo;U4l#$-5nY2(&fj,<L7\%5g4)/DA+0F#Gn9dBa)NC%%$)42pU)[0)+-N,uP+DeJ:QiJB;B3^h9h.tE?WDM8VL9H3EU<^d,MDhZr<1T3e&Ln\_f>;l+&Qtsq)FCBW2AS]NoLHB&DSMn4@D])%e&ZJJa"\U`O`G>=9uh87SWfVnc5rjX%oJGTiRlOtlsoMCk,:oO:AXG_8$\apkN&SA]p#!4qq/qap9=9)jChWFPbT_+V;jP0j#E'h%j><%KGX"8nrr2d:a)O4-'^XmOEnUh_kW!`b<@Q[X5!2+Qo!+6d+8a];W;_pSC-)'\NakRFP1*1q"NaE1+ST;*U16^:NN22%p6"^4%F4rUJ,Iou6<OMb)WfilA3QFm<P2mu]p(J]upRr,HZ%#ao4f\MRX6R2lE87DG5P`]Hm!J>!o$1s_o6u;)TAU$9j#HbZUEfTLWfilA%3Vu<:o(UY/C(J.?WakLkWffU%S;+&WM]5[D&_s<WIWPuWWqHuEa\Vo=Q6>?I<$hRsdBSJjLlOV,dBSHi7)p@K.QVSgfum0?<MaY6%75q5e)YmB5'fQJG<$ad)a\OoG-i$c-r2T$N<"6YWlli:oXf?`GkseNFgD%g0T-R!KO5g^;:>6o$Hfo`sc=rfgBr\1RReN=QQCOhP%W`k_OWN'O/WomNNkBWYhk5BS*C0?kaH)bU^E`uV;-`<6+WiE)!WiE(VU*tnn.#Ob!MP;MjV^RF3=`Tt2MB\sD^UL5CWqU)(WnrZ.%Wd:kKkNVqjSu;=Q<gMq5]dTJMWg9LUk?4,-QXs<G08a>_BrWY?hOg\oH=)u4ke/C%U8iP.rHW_XI9Cmb]dS3q4f<So]rJ*thIW[d%HZPW(Wp8HtX6SQAHCfJUkBZK$QKPff.%]VYhOiufW`k^8T4_<pc"U`lQ@"O!=mk[*=fSJMmX:\$\9D)5ingCXML0\'MO^QDhX=a9%hX<%RhXBjFpZK*]hIX7lhP.OShVR_72lG&?*<:d9TWJcKn!t+5CsA[oVicWa'$/?)O4RrO<G_@9JMc6?RM461[]\:bm3!cD/rjMr%bM>h:2sG;`\])t^,0QNYe/3N"+E[&m&(l$81T,B#*Gu!Fl]+;44$p41'EE!p_K/qr+#WU#,`#nWGYSmm%WVXFA%4t5'M%VO@j_T=%mlp=1GM#&2G*9'9HiuH4m_2'Vqt;uMoR2X-)#!A`Dr`(8gg_f(?%sUaH6q_a_P;6DE<pGn%Vg(.k;88#p.+L:_6HYZD#dPY7Fc?]%_srS8>usZbNLZTp!8't][NPqf3-OW@)q42PDI#%;ie1%Y"SPjQQ5+1-:3a-!])pAr!15oRf?@i'@(1MY'+#2\G%&eR^9c/B+NOkM%G(9t#kDos%T@6ci&ir+-#67pd5YLs8i5mR*?7a.FGAlOeJb0G(..Yf=U>LBWUF1*&l\8^PG!bE[d'kn0b-<k3G=WQ<^;o+)\:++a%*snF`H!-/9=DlF%dG*GBGgN[_NQL_'35Mk(ZZAjQY4bee+E/rZ*q#2P+inllD*f\+,oLl&'MECt,RB8N+$3TqEYQ2]#fRE-_,1>\%+%pSF2W939Bhj];2W6s6@(3:C;!VS#(=[$nS47b1/s[9H]]F4'hjb?$F/t2C2QYN$;,Eff5-&g5=e:12R[80[:O(5D*36:Yqbd\"%Lu5Zn&_J">?*&b\ZN6SL#<g+GI+!,KMW[_D\$=U97QF3O]=0^i#Y1&%E"#=!g`msVacJ'kEnmGRM'F21S/ca_qrSsUIbY:NBmbPd%EfU?C,](=b5YQ16/dn8i'TNQ)$mJe8;2:Y`.'2LhdT<;KU]E9<KL+\+9Pdfq)OJ?)A@4[L-m<`&8mp>(O9\N:L]WaADU[dA;B3@!%CmO*KJjpFW3">Sl'!1R'P3rhR,H=L9/N_4IQC;7=';D5b"EO]]1EO40&p,WqT.PrL'Hlo")K]tf8MjtLl&7)lRe;rqd%(@QgM1mf%1?1O%J2PS)nIsU&0kH$#^<L@E$I1Gul+Tka>eE8k&bg>Xeb9l&o(oYN_<2a[1G9f]C`8gCXHtM*/QQ4N?m;//U3tV9Q3A&0a_;%r%AkMm8Ti.?J)Od5034BGN+^!V&8sM-R3BbktIhU1",sWiH3a<OTN-K;B@c_B;RM9>A8`ohb;3fC?Ar7f62beo4ABpI\5UY3[dWX8,%Qrb;p`NnV.Q"$AHq*^MiMLG=SC$8Kn_,NZ7Ka]qj1Tdd#/oA>E_d`@q7f_U$c7S+aZ]hEUfHi@9a/Y>r%ES`/K)-f_.<otJP^A(K%?O9^6<0jQ@d$"rY-6C6$1`:kWdDR##RZD5m3g81-SBi%4l8e5S??Q0&L;s7D#N5,.38:8:;Y7Ae:(SVXTQh`K5[G(f!%g(!dt?*P%>kBuN[$6+uZA)7g-j@b@d7<^&,uj7&AJW2GP<h:#>e8,,cU5OC?P3O4hZB2^:GX>q*BXdW(?ZIQO3ca^m,J6B[[bY3dA/0!=nRN7%OT%?Z)Od5XP,dlnN-(R9>2aBrG`,=0$pNS.Zh[q6^)dq_K:uj96!95kSq"?Bf8(##6s?k)=kYHlNI2-LfNP^[8fa(>LrV_B!asW%%htH_9dX@SPgRi4+l,H\9G+;e9Vptk&&EfAJC?\gEas\(m#)G/(lb3R6(']=0-$4&#$3C@LBk@@f(:TsgOb&rk-Z:cLT&8Z3CDi4f%Ar;gmg1BSZ3J@NWA-6Ig=hn"MiW3Ds`3hN^ilM+"Y_a`*3)M.<n3u^KYo$#>&i4$n6EK:TdS"maJX;W4B\<+-&WHB,8m'$kOq2#m%$$9QXFi4AW94Trb>OW2L>fabb](6>W?_c9*GsPi!Ir-nLF.j-fNm$FoGPOf<es_^*33AIIi`dMGq6guh8>cpk"`+tYUDRe'.hCs]%eIYlb"V\'H3"9&2g8NkiX,i,mX#_KV8CcsP+=^1-11NV@#m!+ARRgPEb&UlkFb)gc`o/^2Z[ds5pEH_9,?IuDWCZ*D7#]MNBG#&#%","[H#3-Y[:Do6aFAb7[O;"N8][M$ZAX1A*i,Y`0>=B;S;e<`o0Q;;2!J>:[K$5Eu&]B`"Ld7,K4U>4D]+L.<i)EU2:2"?(Uq4uH%"*9SIMN1%b3)r@EC:<8U!_3k3Lg$rG^hFpIZ5>Pl&Zq28Htc&4@M"Q-OO,QL9L&`T#H!"q15o6BOfDEn66*t>',$C[aA?M!Ca")?%0`\1:h[0u>g(/9;D.4U/7ufdnJX:b-k>QaD@b:0i)Q+uDSjKNASltBdH"qsMeX;gNQB$NEohGRSauGA`Tn(V$!Qotl)NTN>"Cdj[%+WT,KUuL:E>[t7r+Hut&G=<\"8T@JLB]BKF6,DcM@Jg6V_eG?qMI]=8WQ<TWiIr`6p4F5#&4A3o!Cq\qgX5>-HA+VNcHr#H9qO!i%o3*2;c;fG:Ej/YnMhq`t/?Y<OX-i.0<.W:7ZuTWu?'uM"Ct5Vse&lC\AmngO84U0Z(6<=/CQ;"%_:jlP^-7?F*t0FE;N0S3Ikur0%"bWVHY)2pOO<u9Ks#"a^4caYMkm_8n=YnJ,*Nc?mH)YT+BkI3+4_*NCSCXfSR:98I#*aDV(eSW,.4GKUJHY)R-4YK?^btUe-!'lu%!nMkRa^G!$/B4,pS,tN=q!h.oQ1I^B<h:UN6Y.R7N6IESk)Cg@SIUDX+hP&%BqpC_AQfq<NHnEq&Tbsn%F^(K3J'8M:m':dh*`#0%L)E!E&k=39d#n\d9I),r=hQitm_Lmq#RuYC0X04KP.1q)+INl]K$Xf<KrF;D6K/f&J8cDF$+UTBeWq8WUi:Tq"nhETP[)5'+[F33%l-Q;"JQM+cjUm)BFtdbdqh/H-%ji-[gd"O7&u;$7;Q`t%a8q=@6%0Q,*Z=Ll)I_GAN?jJ!3c^\3>*PcfRM[9D<6E-\nZ"tkkS"Rp%+%6np.8Ga5$A0L^N.rn=0#oGHE'@.?S`^n,`donH)6b`h&"X!i6`C7T"+p^l]$^aMMujTq46mF<[*9I:J>=]:i$X<Nj=cb&j$fs:%oVi!BH5M;fI):u-ob#]ZqW]e+]ju(kqO>K:mh1c>^FS@@W)J7mHu]tj@k?W.c!'mX!K-AbZ/M5%1("E0@1EaZ6gmn>!Rs!\L/*0M%.N:u<bTQI\i%#LGA^HQf@H,Z1$n``Ucdr]QB2G"e?YEi0TBc#fHij:Fpg3adH5.$HoaV%kOZ/pM@6@:(jk%Ft<=%"$'Mpi/'=_Y7%f>iM(1]sV>_jeN*,At13a+/!t*T-B(*M(;4*3]uZE"'N]Yt""WX+p)58dtm9i\Xo*:)aAA6_L]hW4bJOTG.i1)aB%fo17+la3b(!%Rn9'"mR8(aY-h2AV^bXg*@`C_GB,8N>lcFX)$MB(`\=[$MIFlO,mG;54H0!l.h!7sOYC>08RrYF&0@U1Tc>:&?eL%[,U(WB@(&&&%(cX1E"UjI8(,RLF(ERE9=dYW$\EJ%t[og&&`1hdUe-^1o?:@>tYS8V=A5XO8E(FE3SOPnsW2ZL<%jHmd=GdG`g%#h]`(VR=9eq:M%$'Z_L96;JbQ-d0U"pnGk%O<<sWKU_@30j[a@jhWs_uiSUV\,:=IB=aQ(n_ItJV@Tgn-2]+;%U/g"R'_=TisS^Le%U[6GP:<#([YK%.tZ4ahjkksGisX.'LiWW`t0</_h'0G+NrIMYuOHZ3[rPZ-b9O6:'Q%S3)X$1E>*6nEJk)l_nA19PlnEPKej;[!Nu=-aMI4tF/HmW%j"_PdK&a5Z%'jm0>0D[=SUqkg(es<m@!Jo2cKI&)eqZ2'LsV.-+WT]&#KQS(6\;)r@?WG.6&%.[LR;`_%gNrm5.jpKmbg,FM*jqQ%.3)S75oX.n#<$PT!N$qU@N\`fR+Vsb.*1MlOB<>l#"R_sA,nciNZeHCa;ED9WYd^^%;I"Fpe2)J84pZ_ZSBnTGsl<g9:d(P,0410%:q6tO9*-:GLDa&FLn[:Ci%thpOUEPi&1bgo,.GoNOB/('A#]TF"/-'UpR;L$G*`Q0;(X95T(c.`2(VLR;__hjYN9:DJ/ABr!;a@R%Juge)$3G%\/=>?#UnC7paMR%Y&/I5WVW#5h@5YZYib1hj9?s[_,/"ZoKRn_'BIL0[0Ol\=U!anQ-6$(/[ajEVS#l7<D3^*2D)E9I%[Z&=CD$QKIg-D9mC28Kre7O"i#2:OMR5Rfe78O+kg5&=)iF"Rt7&2Eg5`GrS\R4IO/0^gp/NV!c6ZHpSq_JIh1WUQZAs0^I2N`.3%m4]d5%:pqI2jEj*C`S9YRk$7WCn-DtDW:^@Z>j']>!Y'!:%['fTNZ5>1Ej4F`Q-6=ck*[E!$^2ddEHNag>KG`V"s0;`:asd?/N)0%W4_L?2*&+-_5OV9$D)/,+;i*6K@7_>n4FDL\fZcgdm?e4Z#-\,gJhHCC`B`ifH)D.@7+kc[W.=EgBNbB"[2*Va+--WPHdG3CtlCh%'\e/T[P>o0A!<$5Mlgr-/.1.?D=p?'D<IF,)`W@cgHgNnfOCo-YW;KqYRMFWC,?XSRiF#ei&Sl^8t;*j1%W/gH:mF.gC3`79EXo?%T#.oF(iUs5*Oi-4mp#ECN[cZ/.K5mN'M_;'=;J9Z;`Z>_JLpFtL(`Xp)I&JI.^TAR&b1J*#^.fD#<UR#-5<jVOH'sb76T*6)`b$4%\_Iji1dM(\J]G;Z]+&h4I00\TAd9u,e4eSU.uA)Z1Rb[t<$L`j>%'g]@o3EZR4F;G)%=@@1sUUP""8%Y2JKB:0M4qo;-!lM7\gW`%M09(YQ`&cK!<YU)QVnA-f&qMg8sGTf)j;Wq+:i&]=;'ACib[?RGnaN9[VZ59`4!pW_mU$41fUr$)lI)r2Er8h@#UCbZ#'RI$lC[K%dlK;YqC%@Um0"_*89DBY;4Pi8))5O7LQ>@1;/ee4``pghg'kaV1iM;b(mM'H>%kb4TLquec=>9?PZ6aX=m1&L+2p#])=RMA.\IQ#%8<po"O['lt3OMU>(5eeW=O*pJVhF0?D6-'9VG`1?2RfTQElYV*[,^2?iV\CCpIr&5gGY%.g\_8qXe3J=D),VU[`8%S/#S(FMf%3P%#9E@C'Xhj/.(3uV]ncNda,1uriCG)eVa)l#<@U]g[V]6i:8:CjD;4bNXR1\HP(dc-4P[A^YNn%Ed'dfGI+Yle><MMQDqh]0i1ud&%jKucmZ#,0tA)#A[@bV(q(a*HlK_h.&391('7Wln#_Keg='bIY;JU-!.&>([j=s-FJk#`?r<]D2d9s_4#.$m[h9=JcuZj*3m6dfF(%62r/l#aG%Jh>3[Vg&NZ0Fu(\:-.Ho"ZIjG>>BAPE>6/Vs5hOo`h$O/A(CY%gm"SQc5V=(p/qFSOKMpkF_Y52ZBOBG@cVJLqpkq3:%iXeAGPXD[&6KaXV[pY+D^:Z,Bhg!,/j-H:k!:B-PiWGQr<O*"-4]QmV\mT]!?0qHoI-%)U:T.\<d^Cf?'r*?D'0T?C&@Z9IAU-/g%&mMKJeV\!?21)QpWs-,;Mj<I*ql3iPI9S;(Hb4H:<I>?C9ma+39AT\afUZUIS_F/6l?-m'26Yjq?F@3<!e<D.4^#Q/QJjC,mtuJJ%+c7Q^cdY:SX<5$.j-:U2Z2dpc`@Lq6ZokfKp-j<b!+o"Bi&t7mCHAV43M'O8/B`)R^n"=h!%J&NL##df.`sJpKqiBPHSsTIZ/h9i%B/pa24BdcI4B]JSZJl]oQG'c)pFOLl!+N!1*IG&V-OUdI)J2-8J2bYlk@.Z5Xqt<a1<Y#[=r%+UC]H7!];cT.CV;25DEW;Xc#a?F%m+\OEg7r61e\W@ZY?lKC^YUk6qg,X)C1"/eYqak"AXR@AG")!&0@(qkX>q7Sa"Q+o>97QdeSsj"Z,`;A/+uu^10r4C!'";1o=JJN%0lMMBMHK8GB\%%>)g8c6bOSX&JN(dC9'*&3KCA-5]5$NS3WcGC%'*CIdWG\-\N9$^[#RC,93OiY)NN?j"G5eP'A'QDTFJ"J&/mme%&ZDS[9HA%8!ionWnZ)P8E4fpO2*JROJ<g@C5]YrG8/Xk%eRj1^ajSpP3PKEYMVOBuEnm13OEA>,MfrNPe-9l-p2(g->D$27*Q`<b%AQ=B`Nd:6KFgX"k5l8^/GX[_MG=C,f43M[a+I;-!6YKclbQY>@(.6\jRmJ2tr)DsN^X7;3aea,D-D,@ZpngB0^5Qm$i\U+OE<7bn%3$lIDcCc#u%O7]O)cC(:iWua:U+?Y(HNlA6mqn$PrO7lQ.>70BeG$<M6GqiK"Xb,;](m8"a,@i+7Y>&OB)e_@`;QF"fpi7ErDEuu%\cRFjmE3AP;OO1U6r`)04!a0Uc=B_p2E4fQLAMD_!gm7RTU>[SXHsr3=`ADsA'K3_qrVs'5NC';V$;h.:*&,IHR/7\s+#7)l`gho%'M*An9NCe3i"k-8a-;WS:cq6H0RaJloD++:P>*smkOU(Zg?sQbCqbNfV!Y,HYiol`EUXB4BQjA"WGFo-j/Slk<OhNr%SA!=?Wblt%F5#VY(Q;(%FrZi=!#0"/Q"*.eP@.AKhAMOM@B$Rg)U7]fE)D6t\qkW8N2DE-OA3r2,k75.HSjLg;3Te=iLR*!g*VZJLeD@3aV(_h%W.\d7[0LQC;PQ?CrG;_jC%kj>c-@JBAIq4+ML:4I8?uoFS5spZ]'Y[U*1MOfZQP)iQ9Onj]T,fuBU;S$c8-HJoC_=c5:H\K50k2U%-So`b_`@*WNHG-d;?g@%#gPk`KkE9Tn._=^@?WAe,Y8+c+e!2?D^@jqVHo&,]rUQRVNcH-1Uq'g<VBKjJ"+mi1*,<sXeg<)J6`\=%!;iH"!n$AU<+pFi<@%+7O<?AA;U\PZF@ek'Pcj:&/92e6Y5"lY435b+HnDSX'>_E]EiI3)KJ"";=Ti?7?=G?oZf29>SH4Tn\mn]I%Gloq#]O=?2[eEXI46@\gRr)\8.8KK.d-TmH".?Zpe\Zi65j;jWe)16(6XRilY;6>JM#R4+Lr:nA5,E1]#4eU0)FkNLB5:r&6:amM%]Z2HeprVHbV=a//G?B*/8E*43Dpp96e@CH#p&4-&]+K@WcF7Er9BY&hn2#<5G068UCka*5fj1t6]8i-]hh@]=2eW*'bkg^0'M3BK%:33A75rVp_L/__;*p_*F$tcF*WTLZMc-/]k]eL+D(o3\lGUO9-I8YUX\,"(U-Uf(J]P1aRo.-V6g3o75oK;SY<'mp,'R5O5$-eJ2%UK^0]&q5R7A^dO'F;Ro@h*@)Nr=G8=M2j#eTN"kV^iG@0U/5K-"76L$"u)[p`3E*5l?4PtN;#q_eSQWDm+BP6?#0_$c`qWjGAIhX%fkhOmfkm6[?lb,a1n\QEB'P5h0^rcm*H:"K'WSm>6RJuU5*<9XBEHJ_#4(CR>t3N.djpk_6#8?T_"-sTc>$uaq#MZq3`8m\8T<B6%'K([ZN*&?E":B4OSV\@tVF&ash.W&s=?p2Jc#oDu^pXj6aXfN0?6G?ED'B(6@GHo6TYj,R-l"`/ql##Aa=)na.e4g!k,SVu9f!oT%GLB=o^iiu@!.?.migE2>-Y?^$YK*GX.XXJ@9SA27[H=j+':KrB4_u_b;Z?r:AfF);,orpDL_@(6X4O#sHtB"e_-Vr@$L2Sp(IB0&%X[D(ZN6Oe1)GODsVS]=:>XtOVo3?d\D_"B.C`^E?2FCpe4b)]YcQ7ce[1agXg9psRG)Km=YW2m;BeMj`JuokM#50TW0\UHY8"7t2%03Y_QXsLGJY6"#lqf9-G(!CFC`ff#8d^/A#)lrj_0^=*H%at:rV!3nJDQ#(6+9Ggt1EkR=Lj7[T@Z]5+K-rQFBB$@fm=[OI!6P70%T`-;+a/h@dAVUQHPr%&ZgKiF-q+B^6SBtMg-YmN@R]PiVm@?BmHA`BQ)mSLP48'@,3F\#:f.,bkO;=h</f@9RG<3BXj=).P)7>Vu%Us@;b<Uh2o<&2opOsO9edf;s>@/5X/Yl#I`2&7R;SY%9rjAK^A4ih:*7Qaj9(u6fPFN\>.g?kF:<l-LdC^VG<80CgsV(2A$F^c@"%L(d-@Vg47!&4q8do8m?j6RS%AbcX;GIu.Gr=aBLcG.GODQj\]=*X@bbOpe1ES-E.,^))4_((7.(FS''@\!;i/2X<uSeU,H3V`Hd#%.2[t2knTg/oGGt14/.@J.&%A@cNI@-UilV!p?B<t@l?8,O[MEU<KsA-K\;HZ$;"XpXQ!YWV9f[m)8qO87bo,d()Gh4+Aj[riJ\Te%4mX^X!LK^i,RgE'^p%]0Ws)Gd[.oRbK;`3pFn8+<2NnoQK(EDOaA-G[TKeSKM&+<'B;m4UBC-tCfVRRu#h2FBd%rUm".,'hEYo^P%<5Ltt!WS64Ktlem1H\rfZ:TaVFo8VbRZE!kBfJd$$7?&F9_AZ#IHhA)@nJb8<it9BSZPVecEdKq;+_&;jKofDBer@n=rde7..Gdf%Bn/&0.Br_,Xl]mD171aL,12Q">.\m6$D>^qdHu\9m=s$UN^kV/==bF$`ZeF9$P_>B:i*`uZ5.I)#tDoc4:_aQ)atD.Gt9V+q3t[b%-$GE9#=#h>aX*ea*s[:P?0IZMGT?W-`o+3bP,`=3Qt^E\!K';0'pl,63c1$.]cn[u3[](*Y99ghcE,9Ndi.-Fk#'JN<Fn1*8i^WY%\_JU0#&36KV$8Bd1o4I;T*$ZQTP/mcVT'>-oGO1i$9=p35\:SdfZ[_8@hG5h$JC.H)7AD97R`e#L`h+$kcrIM+RW-eUh4[^;%Ph1%bR3%;$oEdG+_fL7Fl<VQVSs&O9&8Om!hI5%c"9@0@%KB\I.RJB+_Qha1ZD5C]Q\hO`cglQh)79<27ClJX0Ir493PXARt:U"/N"A&%2O"GiCbE;g_KR3Q&D5i!DT+'+"548bK?lJ#cPPb$N5d'2Cn0qA1TNr&ko=31e"Gn%]TZB]80uSrgcI[IN*8fKmMo%c>)Ggc.ipL!%8>;_%dYHd@q/19XhV*!A0$0q%WDG@H-c_HtZ:'U*6]F-(4BbGk2p6RQ5Ln*<VZTDt>JsXZ+;hJ;<YNu680H>sP,dl4D)[>h2i;I#%XKur9jtSWhbpKaei3c3O0!2"P4S[T`9/'W10<n.N_e4"8nFVEUg;7&(?AVW)5q$JB+gE#_$Al`#dAL<Ec+6t+0&!DONiPa9IZW&+%%lMRkLO-q9d:PP&0PE>UFbM&sIOJW:a(]s5>pOQ"=XtLkBG.bZ3`TbA)6(EKgM1o3gaL:(;JL`N;GR%lEhej[8nR8NLsih2P##$!%iC:rE?@st"'bVP,/=V"k2fMq/d4mj*7>$5dB(Hes'NtTo2;:+#W5/it_P.ea,10fP%&,[c>kIsH/#sS:0[:ei.OT@WQWbf&5aa>\%@D"r'o4"&Gk_4C2*g/^(("/H2FUbh1TEK;(60*h9FZU"2dfP3iYJY&^<Fg`UYW-*H.#_Xt@:luk=K'4t>8/Ko&.@%@5R+"'`b>Ms%['=TVL9[ElUgqT`b\dM']GfOLpaES>b]n'.UqZ<I05#4B_.02HN"p5lD".I1j0C`JPKd/F`;W%T<qTf$61H_4.WpP6M;k'Xmqck0%S_K&jl">k6.$5o@0o@7Q8K*FAb0R"([436"\fd1"Vl+br'G!t)NWO.hXXUIXf$b>c!gf</PhF0cRKFgi/5org[D;?$Do`QnhU&o?%)NdLb&P9<r;LUN7M:Q:['!:!+k]TJ-q"8nBaCfGrj>4<$d@:u54RktL#X<qh3eFcc&1L!SOVS>NTeR7><+V\l`_gQaA"D//Fk0Z-%2*n%*,$!;D*E0P&+][2%cY8m3+i25:ORnt)+i26U778E;a;@Z.E08([)FiRCOi5kB8#H^mm(t'8=?Kd3m]pEc_.u@^M8."(j5@K/%&h=Y;#9R_"Q^B-VX_)4>A'0]nF\P#l0R/R,,aO'OU8q'QOm#mW/;BTWF\]7__"=V(CkB&H#A\$7BX9lQY-g)JMF?\MW^=aj$jLbA%("WMN.O8;r!$b?e`N.4cU@jDeJ4/WWZSoGP!"6HG7A+n48?tX!!(N%'K6FFL&W1G7i;eM(-1"MB:qAt.EBd4Q8m!BZ@/7rCX>DAh%kVEO/JKE*?RK_R$g7<iD0YOQg5V=oWL,(i5PuVd,6PE&``!g3+@:lF[\k;+lC0g-,qhaT]:M/+3+u$'a#@MYc;hMJ74c!3Q27jR]%FkY)S#"Jm8-!`PeV0/Pd=JQo_ZV0CL.J>ZtEE]?W>?`_^B#eVI%cV!<$rtt!cU6-SFA1pYmB^q!K?kHM_m1SFDEut.a._ndUWhn6%E6<rq2%;/qc-EZDVj*q[CMAsab2tMjOfIc.BJ%Isa6ZXJJ1BQ-*#DrT";E(AB'8u3WQHi,E)D6`67dh,EZ4&W^,*0TR8/AVL?%VO%^l/SQ4?2^.!l*Q9(u3H1kr^AMLC\1:-J]rnL2:"r2M3]>Thqh.:?sXB5SoYMdnGuD$mMTt@M"+9j/L^Z!.g#Z^q42b,`pJ)Uc0D-%XO=AN8g(%:)OJ>Z`/g`180otH"?=COe8SHMcI%IoH=?5(4=$I55(bLf&bk<BK1;N!nQs$Y0[DOQjP(!.e9hG'/2C0qqXY?V@!WCZ%D&F%V?&/5(-`<LcO)fOJ.01>:W<?mKP_@OB;1B7>(KQ^A7kD(>)hUQM9s:Dh3&=.rKb7ke<QP6X]:c1a@*AWLQ.$%:lH>_%$._9X%Nq:^"3>2H#Vb%AWf4V1a:aHhF:'p:oFd3N4GSi+Yl/o?FpfJO4p3AsP08NZ*q'go(Z62%n#,HiP*6A?\KaT%FZf;Hf'c-C;q?U,a%47rWP*C^,`'mZILJaHBU"!'FS5o5gM;;ePYLtdbY=e`;aN>;h"&/DLF=qs#Y(.XYS'"H,(g55mXJ&6_aOf8kdPGX,31Qi(u=>YgZ%N"2O@.2p.04_QdPEG('Z$mGcO$pN]LQ2MW?\>R8ZO4XFUWe;RRD*t9\/lXsZ6UH&<KJ]TD(BeNom@WPN!l#2FfQfYs!qV@2*s\Fl%J9'Zb3\XgUBk!b;l0?`+;%'b?R3HrpC]YAYU+?XRdq0.Q8KC+8oGg0$FpN6L#h]5n2E1VfOkL[O7:@N(V_Qg4_4j7K]F$NjB!^iT%@-uH`RVW/JL:kI[FGib][WN^1L)h%o-VI3.51jhCj/#P@1o[R\FC9Z>:8a;r!0s"A!f^Y7".N4*<n+'eOZ>!;0Mt9/cNqUZd9\sh%O:+gB2Q%u>"9k:'Jgi6IT^=/[*n4XYbpOX,cXoA.4CjcK`6`>M5\7c$K1LJ5Vm-@.R4XJ>>@E&tDf`sdf`D;HAr;*X8VL,'8s4q&%SkGiQ:&M[?kY\@bDRK\n1T-c^(rdF]olO(jVoLuVdA7U:]2X!R"Kj=&Z$:sK1I3rT0+qqPG"A(NkjCa_MbP;pC45+hj=p@6/5_4L%HrQliHqID2_;BADJVce84?Q@p(BgE!rYe5i9OJpiI%4%)R!="pIi5]gY;-qF%o(gfQ]N2YLZ7[uEia5tA'T&;C.<GE7f`OYAk=[W%DV8Qh:W*$BIdO.PpFPS<pJ@71D'Ap"V[_V;^=QY(Tl<H)Fs^2AC^a-(><=(Fp`AuX,[I%1?)Xo&>or66+mI&__:iD]7J0ggqd(O?%cYVD**Jc=&.u=A]LkUu*c"W(/T\YUQBq7cqZ,(-mCu@UAfFm,sD(W_=Cm#V5EjfWHgqVbQ+FMDHRST?Qm>elck4ALjr0dA2Errld%Q;A%:6s_e]c:<oljcous.;JAJ3%Zs7?<i4"&72VMJA*E1-m"L:)+moe+?+`S'l/1g6I_HG;KCe6'O3$ghfIM>iN6C+<bROB>-C^:%fFkKT5=gPu2gH4'(\P**)1:Kr&:T6PgtCU96^"s((>:K,[ce)h#TgJjcZg5g3K52T-uiGBM'RDBGGRX(1J6:$`+bKqK6"s8,\GIA%l#/=d%=9?`#\)=paGiqTWUL*/)F)+j+[!UlAJ5IHC%s6aI4pX/br=s9[+>Nq[(eEI'PSKa=6-]q$S=aG1R_56_e\(US-Dp"?k_!X%JEe@YqO!'kZ'@Ru%VSb)%nJ!3<C:Oe3Gi=^Qr?D@)=X4BFQ+(V\R'HJYb4&!BbL[QiRMtSWXF_UCkQ7h#6[.SID882f=+9[B'2I!%g35j%:6=k:dd@]r];+H.o?PjQJtQM&;@*\*#*1j%@b]]^*u)FL9QN7@(_UqBP'^b/Zj(UVJt+`.HY49+eBWunp[udfWoKV8GdsAA%A5Kr6L%RQlR%86j5t&G3.+(R#P!c3JF:X7T9P!grq6=kDq,!nsoc%VBrH4g(+,gVsYLqF7T+=:/8J#t`Dq/^o%+]tXl;QSJ;Vt,X%GpU/*_9idpj5L-WJu&8'+d2WI1?3bU6R3[T18TA6F@djq*sYSR?<$)E4s<2a6XNBq;?KL;c#lTJ(.sftE0NmEKkto:$e6U.%^^T]%H`bmYksCip3+o'[g#1iRXh%6EJ[g\-dtj"T5oZ;(,I#g$SG"GNGN(SI:co!Qn2_qM\0#.@]`("9RZB7B39RYCB9Z+A$uX$#1KZ$2%(l9R]j5KY9(i-k)6)=+9`+78,#=?>cPiK&F?=Ga:-"9tao5k`#g2/2Jm+>,[HItcFc`qc.<OWR%k[?R'hUk!sYK!FXN#LHn5ruGV%KXo?KFr4`amDS`:gn^lrSmq/V;d_UuAQFh"AQ0Wh9,B8N4j)\`g]Ss7%Bb!mkJP;+dZkO>[q/3`jWY"@7ef>XnAi@0>T0j<)8%XR%D-:AGO>L/;e11h>ZcbqMq%g/%K2]@eZnQJP]+G@a%6?\2?XW[i.of3dkX0p&EJhSHPh79Z$-eK<mE\&&9?)p(BK3,eo^*)UYY_Q!%j55A2;r"(n>kF*H4t999$X\+_M5c'Ff&/gKVI<&PD6[6$N?lmR66mqeG_V#8!S[$gTfSJP9b7o[U14>SQ,B`?1YKDBcGKjSk,[iN%]0R-kq\'C*l3g-#><np)b/BNb#,fuX7V?pG-</T]j6!+FP]2ec0A'g1@=Wf=PNY[UlO,UrH(EZ2XL`8Ep;WC9*P<<FJorIs(s'NX%C(d@Y?BX:oZ=C-GD%L#aTNXFoi@FAV97gC<otWn@#ufNpU'heTW46DJed>=)&KVP0b`6m2K:B+X_AaCLZP-c07$eluKV*5l8`raD%P`lI*dZd$%];@7Ynd4-uiE6P#-#kV:17Nk1LKIOCQHWYI$+h)"6gG=E+tr#a!tM#Dd*i9GBq8$+:_27u:eR['O<"OCTsV3fe+6?6%fXU:"J7\=T2OTG47L](4UtNQgW>M;c*R';;PlMmCfd'NgmVgIBc=]hUo5;Q5`E``W:104^q)Ial'K4jAQn6tEe!ag]bNZ)64>;st%_<>/V%W`j<(!_B[j,0*t:l8iYM6Wa)0T=JsBaGX4Q9GWkLt$)u"WbYMZ3r<i+RG9:67H#V:.$=AWadq3M5P;6%8J?^M_8Hs51RX>%<HuYu<;b_=16%C&8G/CF9=b['Y]_J\#g\W=dZ'U>i8R/1kU48fRP>?,<CPrs$Xi@^E&&p2*D"O0^cUrGAi.CE]K<)D^0o@1#HZa>%!cRIe@B=IKEuI&Z^e!?pX9FnC:i*`e$&e-`8bA1!JG%j-PMnJ7@HK.1^+Jr0(P\@VJU@uK,)Jg7<jUN_h`tjuhs!G=@l6kD:0[A:%i!(%PkblZkP4iQXDMkso#r\SG:;.TD?eC\cJoqoIa95O;pr[0Cd-Ne1ag"e%HX9B*q(@;bRh<W^$^/Wo>7WJ(s'ig%X.C3fl%2Fs%7AW\R'2st3#*sR/18tq','."]O"6U4f8uC:QhaFp3=YtX.ZR?g%!PW+G)3M7;U2pUC;K446Xra!U9O^901J74mH3A?n@5erM?]Eo%1X;>k8>9<N$ge_U`omqcT'BuTao+29'.UQ/rA"KpKTC?b<ZFg>Hr%I#M69EKKLa4;ZE$c,J-AMe:.mhfOtJMI,Tbt1Bh(G"U^LOl%7"5n9&H35a8N1\_WKWhU_Ul$7lp`[,pI#X$iN2If<rp?sMj_lAD)l\7J;fJ8*Y$D/M\!YXkJ<q$_&B-&'8+kbE.e%90ReEU!JB'J%R.)oAB/BB\+D'7TF^g\^ZnZAp,KsC6or3"9W@D)BZU-a_&>7lFBQd^XK(d1aN&=g]:?s&u.Xddt5soKu;J%uA.Ce8n2G@'N>>S9E%Jlk0)%])4h&-D*qck&H;&^KYTYS7^L'f"m^&r@kpBX;*nK%'>APq5)ZAO1$).IROCZV)-C-nLCG$5SEgTBTUhb#5TiK[[JJ::H13%j-m.n58p"%&XcoeV<.@o)srYnD+[18IbS8lBFF1n`CBpe6]aq?)?V@V<'H2)F..KrRLbXO&cVHEL49QZ4)ku6=ic[]NK#,d].N'X%UQj[nDmL-^#;`LLW.\c^GdJ0Md-Th]9NAt[f_go?.KYmXlp.aO@PcC9"2Se+&^9/O<h`rt[UbQ#8fQ/N6Bs#JFdGcJZg4ZTVQs^.%_H_sm1RP.j`NiE_@'gr<?rhD@S;-;GQo_*1WFGph3nqhl0@En1V%]t79CW8lO\CQ4)Vhc(T1oYbPWA^%NT?X$rYG9g!6]'Z*`k:^%JI^"V7;smS6fmJ47\SpkS'O-S1O=g(3[f6N$>)TgL2ng1cO(FihBOHPJZ%/,UAhS0e1eN5H)<%P?):tQ%b$[5^1itj_>o%sJuHmQ%!pP/jT?*iB+>s>XkF'VOkZ?Cj=Z/epd*3.5\cK>p/@:nq%_g"HT5>"aknK/@fl\20m8!g8Paoa-WeH<"O[(H'#,ac&H/;At_1=$,%3R,M;8ArP/0,uY8'3Q#cm\raufPch=e849S"8;[Cj+X2V5PjgkPo%J!-UO0fr^r#tZU"s$UN7>ChV:>r%&A2#U?]6;")5L%#h,2\%L@tGhaD%0aBq31W%+M:ug/^@TeSQ.jfkm.qkL`&!ag#sqK@:5qD!*sT['`K(8+iAWMZ6(ZfmK@4m,F.'l*=r%j.1R4#_.JnC_W>7%l,=65kn^9rW[367:"g2m6'*PW1f#R;Bq2&P,HZ#^I685:1-m5qe>dSY"D2i3G*%`d6")<,$UqL%MiHa>*?1g4l*cS\lF$^rf%@E_%T\D(M<+AkC\(`lZU*/[.:#^51rI["%db3RMAm+beW6f^K/;=-(\5`B:%qmmf_r_>h/hcW1fVJ?kEoAiD/\_LK9m/8"c9jA5SAo95%Q3ouY4\[sW$B3Ef&Ujq>22PY.9IZlZ)Q0-@PlON@^*iS:VdUJgd:@@7dX9^K"L]nIO6W-c9_3BnYsk!Z(USZm+D`Pfc1@%0U]Ycc%lHX+K?NIi.N?1P5ZP"/^+u>ZID=iVW[*So2L42V-`VG6\"/V=G8j&5u&u3R-:u-2uR1.Bf8"li1Qt5GkE]A$lb)dnFBEgUl_fX-G%'uT-TZ9F%A2+'a1*pWQjE'!=o4W(-SOJ=k].AoJm:i!@.M3U<p@V=m?`Jo?R3shp)4KC^"EoV(1P_$2[O)e8(6q40eoSVdl$C((Q%5"57*"G-7u+k(fIJ][[;WBt65#Y_2BBa@I$\+tAQ_eCP%,r.Ii[7[^'$9e@*+<t'g8&AE&*S,2:Ma8^[%lM00)!*kkK?.a4'-cDB%&*s@cn5G<E#6[."m/qbX(kqsI_!P%Ri-gInV1/;(`SC/"5EV<-M0,p&M]h[*/=U68("ik^b8);nB^!>Xl\_.X!sZ%SAnG*m1Z$m5%/kY(UWmYe/K)Y5^-J[uf;NF-FUUY1;R!^Y"K@lmIDoXK23Q'Y<PD,SX&XX7H1XNmm"Vt'W!"&VP-S_'c4rHKA1g$2UdtpaUV0l-t%I(P;Yg5Qrc8Dd1<[`6mckJ^IFBc7r6J&c0tn(9m?Det5]VqXClc`qJY`F.3J*ZK[L7dZ1piiTeo,hOY+Z0nWTk$QOneIa/:m4l,Z%]61\K?YGaMEL7ui\P0c:/rLb[5-Sg%BM(7gbC6DQauLH)GY3Mm`IsF-i`5cm&OZ69#(^r>Fa^tk_12!D^uY0pK'>r[])_4E<$ih%%5kkXUJ_=?<p+)Z^$B9r*-Sbe]f;;J+R;EU:LM*pT97.)NICWHjPJTZW:.UV+l$e+uBtdF+R%9N^UO*7V>Z94J44*]oAP/T[WmKEX%"7GoC!rJA#]T_J6)!#Z,U1o7PRq9RrSuOb^J'cJTOHKTH:0.:RSTZM/#.%N*M?_D6h![C6MKAQ&1jC@`lF>'FCqe)aXS>)d8!B<*%C[#0H1B((fC_Eq:UB_Rg*@CX4c-tdip;df?4`Pa)T@5\B:?O-]7;!g*Z0(A>UW;G;9[N25bu@2D]ER[6Q=J=UM*YoM3eR<t&;[,L%@+I"6]57?%Ci+k,aQmb[p9.VipeTFBo51B\SCA^DV)qRN2BgEe`YC`"Zb[Xt!jm$;lS>O9"c^KMJU=MHB"8gbFVJfoTR/MfmT,!B%KQ9%LBL81fkHr]6.brK$KSNRKjtg*gKEjg"f8n!/c?!1E86)1?`1#$4qXbk^j3H^@JE]`=kOo1B11VnZSDoE-8=-1Id&Q[@&sE,@%"pPO>`j;cB/-Y]X+*d,C0anc&8K$tspii8ZkHk?Bl[R!DjtB3&qr^[tkno#hpN%m$^/52SIQGku-40jZm/n2["mluWZ07^t!$-tm%iIpW3p)/20i%K*c]Y6q&_S>5>c)1r4fB4t-N&;]'5dbe3a[D=(UYnoaa6X)$BrD8;)k5HXo[>\'<0ED:+b[qXN50,%,a/j+:adG)%&r^G_i@9$R'EA84?n>h\81ZA(8S!rC(`!:,+::CK`)4T(`Y`1+MQd)]8^-4D6t9_1U'[h8B04>C9<8t_M)fEgZQ&2RK:q_"NI/O\%JG*p7*9S?,9r(?h,.q!RK!_oH[F#46OUq!>!K[?[UC*HU%Z?0[dlqiQ[X2DQ'hu/uN*@PW2pL6lcZ7*Xbd^m<`/)MuM9DS3K,VVn%8@q5_6:21@aam59mf4'9Sf&(NGrn9:3?JL)aQ%/IR4qO[`c(c,BUb?:RdiJF*a$#;)Yu&G"<6fFdp]AVCV5<0<FpFUgGLVZOp<m5%/apiGBe\q=(X7Mmjln^Q81e(6LqT=X=aS+kGZ&nDq'__2&fKf-$NNcjeR(lL@=?,2H6r+5&Uj!SC@qAS=p'7[L/D,ZYJ2l!]]SV.%'8K*pWb!R2],NM#"Gqd>A>&+t$#8ZNeKdTqA_`$<7A^I351O5?BH?lc8!&EYO$r/2;"QtlP[+T]k^0)g*a#(rC)4s=YN5B#,<a&C%F72LE?p(ZFX;Flqc`mF)%e:D1)`i*af>K<0@;Db!P>P&,TYIV1^^XnA55/p"`9=H[DEE'NDZXa2oYo_UOH:@glt@X(Q;Sh!`p2U-%;M1P&iI;tnrLU>*!@S&`GS_;Gi<tmTE-OrjCOG[@'\XVIdu_T7$PM'Np_g+mcmKQ"mhWQJK]ih[:csQ\kt!>ZBiB.#e)X[g?<=i_%SlrN&jcTj]_)]0#P2+[>2XV]0Ks!:%TB0MM2+!XZ_D4a8+`FtA37hFjV*UWdG^:8*4()=R]-j\SPm`MsOq(]AZ;X*qU^JW?mp=dN%P>7/+<CtfG!$+JUOc@j%QKM33q%b2:H]SZpSl=.N5+GfWoH5QST*"Q#l;Y]IIa/mTo4t*eA>tCR!.05$`2uFTWrWJt#\)UdlPicd%cF?aiM@\F7e1.Bg^'0X5biV.8ab<W3M9)+7kT-H(?9^1-dAEf8T(.L"NOWVIce0BRZ:@UeXWVq]dbo?Rp?A8/ds'["&Z[rV4dc*#%%/gd0pS9FT^APIsGmQVk8((%NXNRG1Hp"/JfEtC:9n?@m]u@^/kWGFu;\5srl,!!C6U*5+Do][kTqn2^>-`LG?k"A<$\ct/^7/&(%B`n6&EBmT&(Rg,3?1Xn6q1+ahi#M.2!a5IJTVY9*ftk"Igu_#a6,[._h@.bl2B5*(Neih(F.uVLFem$-[0uW;FtD,GCiN3_:G3f`%2"T=9L6"[b!J4h8#12_#Sg,OmaGEj>8/.BC1$1=j.&agAM<-==>G$.*o,LOE3/4=88fo:!%(u7G2bifX<["B;Ne3Q0d>T)j<oZ?j%/#Xf@ej3/\ise/3$4/]$4jde@)I-<U'V=<,>YKO]\%[LCf5`i^6sL&#,_!_`0<s>JjrNY4s&bp\&>#]\0]`d0']a2>1G4,T6g-@;%#?/?IEWEe=mC9hhIW,B&Mr<nXKfaGGaTH-m+,qGK5mqruqmK*]LSS>tM!IpnD9A)t0=F/[b\l/i6,8Aqp*!!VgY/LK/OJlXn#M@/%\WAo9")2tJUs=sB^\"lb&Xuoh!)90=dmTABW$0n\-q'[+,4^dYE,r)+q"ON@'r!gKZ`)jlU9d#/[!6B?:1nnt'O$N"k3-q8UAu'&%7"QEgi\\#L[(2Xda.;PA()(0Dr00GN&-!)5BZ8kBNV=sQSW/Mc0d`Q;hT\P.iqY6[rBaHHmhsZ<TD4nD#<.;ma(ikf^;"i0Lk0q!%2b)CG:]]-r!12$^^.4#G&0tVemj.ggU1AU"$'ts-iQAumhsMo4U^jY%c4>Eio8qY7Hc-Kfh.u%q4+!:WRsn)kb"+PPesNYUYuS18%[Xd<S4$W?B+:=%CBlP3dVZabKpA>h]"0L?nO^uPXQRZAPmr[Z6K:W81I.R**7DqNGGIlfo7h<.rYn:,t='+Vm?MHV0HkCk'9D"j<%ohCXL[Wfh9YqI=?nnCseeYn[Jo=ucB68"/-R#]b)^QH5h5,/BKM.M%lU2*'/kQh3N11p)T:$QgJ,o&qP+8b(p-nr7m4>bb;F-.%0%Xr2X1#ncF=;+@N5o+b`4&J\N2mSAJM0lf_Ej32iQraH8oF(Ga-^n#,a$)qo/L)p%k9%%S0T?_K)D:aFH@#g+rg`;L(_[Dh300#hF%'GS`AAl/_R_"eZ6.;ZotKg!<n!H\E$+ni]/D\,Y^n8.66N*?rKn_G=[,d7#t+6&u`mQuEA`SZ4KN\/Gn6<0POLcK^u?FL6Z3^B6Y%Ba4<k7:[Gtg^>Xk'IC<%G29126`Ne=@@'lGfL@N2pI&HH4q`rM^#tMC8r<KiW6rkjI]2^.<B<*SjtnlSLnr;J!3J=%,4^%@+%Yc[%`-#X\$AU3)ahVu95\s0u56O<p8NME!U:k?_8/Jq'51%#AHES;(g,X+B>d^4V1K/L%!/G-)kb?BZ3#:$IFso?VoKojp:BI.MP[rSG%(0LQ1i,mu=o/<%kb#3LSTm_!?)<[+P,U6EtgS9V8abpkH00mC\ZR>R6@%tj\6s^6'd=\<Ljf&"tT3KAG/ZV=^')Pg3Nf-+ViC1#o%[Uq^)Yla$k#aV]p>QU57LT;Ao:jFGs@7Ur;)+k2$>,ZgX2#6mm$1^bl9t3.Tg7=FJ.O5_W91d5qcbT-h($;MQ2ruiH+c-dV/5(n$%bp!8iO6-'+qAD-Z%4$Hm=pVSlG5`#^?0s3(OQ1H_dfcOV]iat]SMh[pTm$2EWT@F-Un$3M]q4_h2UZ0@ZtjuX[NVBI+i\G]XO5PK%KLiU2^3Ckf5_l1Q*K3u0;Z6mD9*sK]-MD[9&A@[0!F@.X`)s9*@o9Y='DDa+ibMep)5pMlY5@;'R*!Q`U>5hQ]ZQ==T)0H<%H/NH%P;f+W-0G6`$j^n'JB0?_LR9I)5>Gm#=:>sM+oIhdFL'Q<9`dOd_#"=s&@`,nQl+F4#-es<b]+F5bT/EN(a*H8m*Pfg@LHK'=%E3F%?5!NrNK\X,<aO?Blph%S'to7+/fW'_MeaU58R:-'B4[P?1lb1(7#2c?M^!Pi;;!a!m'ZL;JW?9]VI36%l_7>kfBBTd#pOJ))lh(q%YViuqPL<R=Mr*Vh?$Bl4)^Y<iT=O\E\EOYm1Ze+r:O50!oZ[,7cC9Vbrl406%;9b>OpEIlEiu+%&TZT8=0AJE2*X#h&Za[*5)Wpg%obX&=-nSorqQI8+3KL/"QrVGD@*o].RuO"mdelO+E+79I,c..F(Y!](_"RgES1Gup;6'.C\1V)obP15$n0]?f4hYh-Ou(rRj1?Ht%5)(n.&1>U>m`gg=9@&14^Z"^K`M+0)]o(18S!Eo.>#Wst1'Z(JjI.IXLnMdd%NnQo\$%+8hG<'l5j..gnY!m<Gn=M_>c;E:\bq?B%UeX$s';WuDBp`_&lV#%9>`,I;Qc698?u&_%9XQ9cpZfI_'tjdBq,GDNf'Qd[q!l+)Ro1LtR^jN)T.b[<q_INXZErc:*)?PSKQt)k%UEC1BGN`HuRts=>K%/S7ShWTT>M[i;>KpTAWO4*#.NoOk08eg.#$+2XDpZmbr1pOn%i0u*!C:2#CK,;Y(cY(gDcC*rFn?]4qW:]K%l.5asY,BatnE%%PA_"E<E+!]oam^pFoM@_DR11&X&^fs-7SDWWNQ_eW+/]LZ&.lCZOf=Bf^F8W,>cV%r18)C#7$C]W@8,s-UZ>E+%F"FoaQ&73N+'oKcM"6-)PH3lEBhEXspBoO0-dGPmn%Ut8>qK*d$k8a%i(KM`>69-HA:%5LjYNjlOV2u1AUj\%KZN:O9-F)*B7P:r%11UI9a.=n51f.F$e:&M`s3&Hqc`i6^RNCM>+uunN"Y3V/@Z:[.^Y2BL8&1EfJC4fgANt%.UO3,6fEc:HTS.UHcufj6hfhORTO(3.%5="!^\*F#s;ioL7.>r'cBTL)pJ,f&sC;6Mbpd1]h"`=AP:/D7"dp*m8qFtX=eCLeXCi$I"Ag??0V]WL!P\3f!8`Gn0;A"rQdS58;%fh<U]=.6%;<@9PMVS@DNA+YpU6If8JpTi01_NZ,oBWnRI@@8I9b5LT)[KdDEEVhI6U!i$?-jXqX*j-"AB)ue$,/*#k1;#u<Vp:9o%-H"l/ns7HgE6pikQJi]Z-h57c#8.2U5nL?r;E:!#;3`(2D0n-b\$AZ:)m`fFDDLU^)cL&IkR!/a:eXS^]S.,.31TOYpi$"JBuIB9%QJoh?%h&g!jS;"+3cdIB#tf94!F[;iiJ:?V-J*pE$Ti6O$ccM1PThFf.Qu,_.U4AXE,nVOf;;o";YHqOLrn7uIc9f\LNYq+EU<K@%nT$0"Q=nGuH@g2?VtOX<hCt_h3lDXi:kLt9?9b:R[+Z?<>&D=Tl!%0*1\g$XmZ0KBI`Sc1_Oa%:%;.S80SY4-O'$ktkCluI8(+;7%n,>([.OI4@!VeHJ#h/Z01VUL<p#:74HmB`2fr`!KRbX0s6L(Sk>NrMtn(l?bTQ7&:cWQ=:p[51p0Bfk"o`F3U9[aECINQ1rZM,ui%HsF]eTGkAO8TRa2o!HrZpW5aC&%$\jNR^o+3!Q,SU5I%?>@5GL=?i_rI.GNo1>sUm$0nRdO%U;r"9@_+:Q8a#;ZTgWN`JJ4?#rX&%q>7U8S<o;*U,^3cl>SB[TN&JLK+q%@o_&Ah=3."[fA^;E&XYDD.LhMsPq!ZuqLK`Z`[h\Fe5m/\'3#%\lICMJlX5E%riZ7!'TjiR%\,7ITX".#CH?+R"CY0&ok3hn!*L:d'"ZTi4K0-SIj<rjbN"\9AMgCfJ5F?2]%nmMOgbFq8IkgT@8pY9(^E3^\KfWk[cgsNX&Z5Tq%V"b+3:lIud'G4`IY2Q)*B8PimlFH!l=M6n]+TR^THGSM9@i_>^RT\tX:qOL#YX]9CH(?kPM`?B.-A4iL&19IpdTqM[[N$u$R<WWi%Ss_^F.VQ7p7X)o^mZ]mf"VYH7^>T-$&]JI'e'=]0_X>Sp++H[CdZlX$=qhs6<`Ff_od&K2GB0j#*`sj1KLc/dH@DfhFZX%<-pbc+%&@ZVs8k&".JRK99+P)Po9VSW#EZk\l'j`-.GZ5lMk0D^QXmVu;0013>''*%,G1YANp>:1*g%A:Kk7Q#A/#;uR"Egb:170#J3N)CB%-DB3aY'4e-^q^h7$kRIah-m`_S#U[4E%h<!=$6C^g-m$.5c?;h+$im@s3k)"gs5&J]7Km8_\6dYKRGm'b>m5pnN\h4Xea?9.?u3D%5*(<;'V"9`cpJTt%<s'XZuV$AAa*SH.o+.U[(Ys>N?L`uCV>V@E*p)L>ZqgKA"pGdAJVcf\g[%$,oq-TA=l*OK3YIPf;)!2ChKoB%Z=):Y6!Ee6kAZd'c6.,a-Wk^B=q+r6'o37k)9A-@Fp*[V;gDcj?hilE]fc@2>f#.ln>S-Sp6,o>g"K(5KCb)a_4)nl7uX#0^R()h%Qf*0sqPJ))$s[Gl%OSZ5"fM-`c_X&+@mTp!G4WC2HIoP0-(LA_lVGPr`JQN*E^79&/e\hnL*i]g?1RVBY@-U^l-aslX3$Hrkd_Br%&5UqK7i.*T5@k7^2jYj8em=sP0_0*U2a64-Rma-'aKHMjKQoP]c.f_l4cO2MEg>Io@^0T+!0p.u<<MNeh"5`N4.q0/3&K>V=f"h0%RGV.Ohri@6@[QY9$h^f5FbKoj"&R4?WE5I],fRJd9kOE!'dcl"poq;?:_:sc?-%M^:s45!\kbTl7FSoa:r>]d*]SC?()'AOhCARX%QHOYkE;R0fi3\a.-,_Rker48A;LIaEMMN,ccj3XqQt6#lE:jT@lj_&iC7<cs*E2Us"#$]#@h<\o@]F+'Kh4CBa<Xkh:)u&9*\D>;%0_pECH:U`tbHs/LBO1*ks8:CKV+m-X%WL0QT<CLbe1ptT[ctiBM!8'=r)V_0*[Y-=m^GkT"#J0;VG^_f@0K*=D*L,5!Y&C@_b(Eo%[K+cqa;d8lFS)qp-,#I/Z3U;57<fH;]Fes^"%e.uMA\AP#AO5gNaQtKcm^;ngoab<ZHQY4V$,H)lZ52VGR9&_]1:O$ipTb";'/S_%chi"l*leN(?ILCe4/pOjSh;P-Bm!YL)Gd,A.+XW-4?:B)eoF>e&!<^WZ2?/4-Z]ge$[b(]rh$hI3-C<XX0r=Y4n9n1fm#8+(f,L'%bm`khdbua@lanR/JD%sV;<p'kW4WE(&S1.2L-W?L1o"K#U(K,1rn#-cG*;ZM2tq)Dj["P%WPEP`j?1`"=*4fE8B=(08Uj]-d!R::%iZo'EXGLrF<dVeWCse6"0noIn,1=bc"QBY>0j+MgI+=SDPXM7/8@93*"muA1qVFtG8>-Tlg%"ma$<ZNg1c[o=:V84ZDqk,6f5V"=%Ri<dX.)c;704?8._lR$_bY'6/BBk;?>r<eF2S.M'i#+X;&C\<4Jo[W+"B8:g,q?=Y6%Pfa+Jpa16h.V%n$&BE0t<t3[70?nZVH78%Ga(*T'Ad&u9F`XiD,WSn"JO];n>R<B!o=sU+LhAunNjp^N60M5/1dU"^mCN5bHtDs8oC^Q;]dMgZ(!J!gC)J>YBT&Zr't>=Ge\o`%be-98Z9LA''lutE;(<!3/Q?=E]G6-ZWs`m;*\i(/F==d'=hX10S5KX5ZY,9ZAZI)t4SqL>&rN1QN+r-8e@aDbN:5WZeLD;jUF]1!%Ph82;[`b]5?cnQ?6T7qfMnliP=gu^JEd6/9B)!;ORk:/L:fFff1'.PrQ?pU4b-#,`qRP":(I_24F]o#hb+>ed?`>GA=U*Njmm2G`%A`/to;jNC=cNI.MjAu+AQ(hN5pq:O8[dWo2:hO'54gE"INq`65#jpsB\i2)lnXf<8(54(L_erWl\mV2+Tr!sjO,$sb+e-U^q)BN"%GWI4%LL:<X(qISZq+]Qn8auFr*MdhZS=?*MZh4o9_r?TKM>CPI)4;4<AaZ[mI6ho00)^Dg%de\j,$?gGi\*0p',I6W0+2oC\caYG%1nLL$jb+edW;glRZ,90D*UGWr:s2+9TcPj<7SP*13f!ql@O_9lrVo8('I#(W2;f_=eP5uaQAr0L>UH,ikk)6XIpoXm\,pS`0KZ$N%Nb4SaV"N_%TWZG>':sGpAoj0NoR,onmga!lfol3#;"63M&#WY3enGG5-R6*MMf/L*<\q2EnZR/M+r[OW9C_oNn?51Z&V*FPY$.h4%iElhf\Oip]K[9ijIk.Jq#mM.(C7:V9rIS7+Ir,PAYn#(_KbstM8Fr#ea+]$)[3k#RUJUt+RBAYRQk:&)hYJ7[S$7>Z$QT1-"]mqt%[H[Q(n?8W5A70merEIPMcY=9;7NAe;4:qHQbg)c$2\fl1B\\?@[Pm@lrfrl3Ce22;AY++u=("#XDfBK,Qn(R@#m1)`&r8#nk[Wo8%!GdS]4Pqu9O$P8H2mp-9Ic=]G9E2.lGhCK0\5,B7>h^K>%fQTX5f.I="t_P"[P0?]0;[:.T$WB!Ya>js4#Fs^SJq#6b4kmhRLC/+%N\UHQgY;cZ(coL-cHLXkb3$p42uV7TX6I+H,O_SE&k.`1$\k^kMkkPfr>(TA[)eC\/R_2ZE,$bo]T5M+7%H*T,&8ADL/O\4\bDC@%-m:G]ZI`c[8\t26dMr5d:e;>QfZTjhRVfj@_orM2DjXs?/\0Xb&Q6iap_GnGjS1T(3I`>Nd]3YKY]@>AcF7o8>65>e=Gm*RqkOYt%TP6G:IZ$OP]I>i%7f%%M)TOLiI^8.1?qgb+LNSj'=66PiaLqLMHa@):jtZ+_BMi*-i\:;.\[La_;cg-'0)eaSiD"jaY[!tCr8*N9%LofX55p:(hA6PF4hYd/hAnZq9a29WoK(rB#d9.sZM[F5DG;htU`"?23Y&A6sI6euAY1G0Y`&XE2"KZ#R%>SZI#QU*$K%*np%!m^\%Fc7PDEu/g8f[]-[Dq!g:N#kaOXe!HAcl\'iMa)WTj!H>P1:R8W,\1TcTE2YBQAnG6QgGF<'27^L%B'=#2KJPuk>trK<&:S+H::H/%fT(k_8\OJ.R@ONSV?Md</O^j>\"MThFjDaP;F3IP>-aeIoc:.M*$;@9omZO*?qdLX`9_'g\CDZ'O;@,Pg:!B#Y[EFG:eW"_8/flm%rde_t!u,(BiYl3WEHR.4_)IM_3t.%<-DoH0a<Pn,0)DCUB$SJ8@/K!T-)m5g?[u!W``MQI9h-c[^X)ApaY^.>)kb8HE&"`V$Xu%Y%b]:'Q9>".\N4@'H?fW:@Ke;doh"f!.TZ)pU<e)#8P7EST2gu`rF;`H*$kTU11$)'<:,\A!NOusY/RCS+/:rX*ShIpOgV<B9i567A%lEaE<$Gc-5WVIo/D8mY1RWfW;>bSpnNPR-&:QC+bHf[pbQ3(lN>Rj0#bFjnUG4]&`;F7H(e#Jo.,45h8E-os8YdYIU%AF[d-WCTf%%IutTa55_o2A,6i17%;$QRSL^@i=#O/JPQjSo)uGWIXniVmEu6m<MKHdo08%W9ch+kGinCW5EPbD4'g.QBXK#/G-qUl5X_kKrSI+%Y?i!Jpcs,s.D4tUeLT3GCYA@uHh4:EK3k43hu,h\mLKgP=1qEaIr\c.F7hjU.rp%"*B/!$R"C&e+3@Tf%l/286_`r\O<c#3XJOMC%FCU_TDTQ;%eJn//>$N8OU<FPj]%0Q$rZ9"M6)]+YQ1;H!H4/%rkp#,aX*VBt0l!>KG?&SO,8Q;@n'*P[,32S'C!NrpUu(ne*D+Zf%X3D4U7^Rm[/YfUe1;&5V.H;BW9(t:SXjttu=Q-Ad0n^cq^;PT:*8Y.P8'^2nq$ti@pcPOQGi$=rcVf)GYBRumK!tckT?W;Eq#Q_t%9gjdrI%!2j^o,k<=/Z3/_Ck!!eIK(iU`,a>#]sn(O>*]Q/T6iE:7@IdR.s.>;#fV(6iZ.2!nc/o`u*EbLqaK:5In7`E4+&.UON:Q%1\R4/<^Yh5?Ph/P)LH7V,b?aBAocKo^`B6J6/\%p@3h:<_LRi'O@tbh+hsE#<"l+0BZ21Q/u*Tl\#Cr^J]*oDH3,lQ2F8WXTnqPY%+hCsB3-B3\%+&<+],q+S@faI6"=DOd2,_IV6K"(L#'".0#p8iTV\00a\A;G15up]oaeI9\.NfJpYss_M!#fmi?*!=,GopPUSNr8J%^50#kSot(K"FsU_ee8(.5\;_/Bm&K3[(MuLT);(XmWr9o/k+O((_CD#L(C`EPdoU19'6186mMqSQ&U!GIeO-IQ&tB.U$%CmFt_@h%\X!dPAVbO:^Vm@GL.J6Eb-EM[bMQUU_IhYN5rUmh!^8<'#G"=7qL6*>n#h0PL_6su3CYLK]M71t]DG0KiElKQ/iiOZ0@6%u:&bPJ%mr"&&f:L_a]LsCX\no3T;+5i^Ri't;GP+78?14@D5eZ]-@"@dModmUk]t:T8ZDGY2PVr-GqlYbCh6MgYHbBN#($%.)\#DDVl#[F"%c0&KTV4$oX`L!_9f>]"a+[glWF!+M`r.INZ\UiFS92e?nJK4d[Ads-7!(["6r;%/T2':VpN"/&\m("AQ#9W*/OY:W);oN?Yb1%dG%IU!8(pL_QLeWRgg6?&(qG$7IAhbFr38&Nb):/5EXg?3>'<WHU#Ic[dr@6Pi@oYfY)[IA%C3VcS+9k+!*bi@MMECTXN2(oR$O5Htq%TMp$#U=\rCU07ao?74Of7S=J<k/V5D7W>KF*b5*Q_3?9(5Om`j'RBPA4=^C]#bj.?e.Cpe,Lpdas00s8L/=1?i"ui7ooK0S/!IMi%h:%;eF]YIWg=,f-s7]Y/p9T=>2KNFpm:[0;)9\V<b)$Q5s4jb34`[]f^eQdL]1;9,nIc\o]dMJb\Io!r)IHA&X$*%A92+4Er4%+@%p]Mq^^ekf]2S>*%YPg:<^[kD</k6^.p'J'$HMdhn+ZiWQ!>k\%K+7<B*Q\>=$8:R>(fiO+ig3%hQfHHNqgo]n,Pd[PrY57cDmTjV%!A?5;kYU`"fnT#jbq?hq5%at(GtCX5MO0KjQJ%=JNLi."&40V,]/0FN\[6kMj&tj@,!aT=$:OS3VC".9.M11*)'`/cH2%u2Jq+?K%N91N7.\HqMW@=)78ierE_8\^Z!l-a?)fW!:lrWdNC(iH-D_kaaiGt)s%Y8R88RQe3,(0/4*N@O"]]G#2K]ta_c/8n&f5K(GX7.[?%L?=dh>:M%jD%Bn7)4oZMNtp[O*]>95"B/%>@M7Dt:X$>f=s:]g-Pt:Y<)`PbMUUMlh9b'7X8?PhVkcA13Z55a8Ckk1#asGJa&i@q%ZsrnfkTGnhf[N$p,%s=fYC8gr/H+di94:IUktH3t3`!dNqmj`KB-<q;L3dsrrW4Jq\NROAoIseEK+I]1-_BIoNQRY'bEa2T>GimC%U,r\B8,$2$1RlfA`)00/p7kiY.?gP%lbTa(kY<qV5)ucs%Ob5DWSX/I*)5WP+3TX<.r-lX;M__Q^?Te#[4"k#`k`]>'\QqHiX.Z]%<lN-KeBQ)V*mjs&Dbbhd!Ge4')M"96eLYD-^j_1`o<V%s2AFIc<ck]H<^nOXH$Am`MVg:g'cFlEa5&-L*!fW:Z30VoIYBK``DFmm%+\E>!V6Z@q-A5+EV;4g4Z'V@aMlR[),1fLB3H%7JO1kHX4FY4LLb6d0S$69TQp_7&_N@9UYfd;X?sn:S4F*9FRo7G0g-"6TNsBdW%iT3;SNA;qk*=uU.7;LEi^[uaWV^<6a@tkO4)Wa7%q=;aWo@.tIHLcE^LLc]uM>n4?,6<MBCW]B3\`p]<9#!\2OIga`,1$bD=P.Wg%j`0G';b7]e`lmb[P<[<*Z;&)sgpG?<Zb*TbP"pZm>ua.--UrR'F:La49X5!&Mf^N<.l0GR8l60dMrX7PJH.c^UcL^/NMOO<0#p2S%N=URjWT;8Q?mp_>0<l<U/Rk_Wk5;0pqsh%-S4DqN5A?^Zn(pl()^%&g;``FE)oAnK/f&T)h!gBL$8JJ^10mt&8jCcDdq`K_kuOIA%B;UC-SAK4RN9Ro%YP5:h]>Rt=6B!T%(1Fe\NZ%bX/Y^%&c`MD]<ME^^2AeN+@_.:4L==)=W1$t0JMQ&L!F"0hiHi;[OZS/g6H?)3%$3mg\5l0??n-&LM`oN^3ap1YDV7^$,b'8^=UktYJYZ5dR;(8$<)C#Yu2mY]]8S.hZVlP2C)/^WOXVKRQr%E<sHr,o5'eWelFQc]D%Q`1Cb65P^qmL34)?!!nYV>uObG2m-fpZ>F^EW.\_L-Ou6-&)979)W;nYbaF!'*t;'j\.nb(A4lh(o[BM0\f8P^amLm8u3J]IASLu%rHfnB(=e*K:+HA%Ah\B+J*d,ABrI`Y_M=87=2@mlfI1j@$Oi(0@l:TYmHiD`:`!r6'P#.[[gPsZiQNfXdM>Z_H7D4L3gG2Bg5?EI%IX:t_&eRiX_Ba[j&-^?,<"9Q3=.Nn%5uX67^F/=kZKgoj8L]%uc-q(p3%R_'9_G(4:Ts-YKikAfE.d]7Og%8,]+1K!/jN:UY$i%:%:eid#l.<\gE"$L9JS1b7o4.:U\CssKZSm\7fM:Rh-jo+&'^VgpK;"Y]cb4M/P:6%/`hel+Q<ckQW71PD,NIh6%cE!_R;cZ42l]<$%a\:lo%XBPjTp6bIjHGIVMkh,`"JP`ohAoir.hmi9Lk-ttg@7=0:sCBLmOtL>QSFiUXCmM@iJ6kl1.Wm(b5/S7b_lVLHTC\':7nDd%YDo(okbZL/W`<Mi&\J$rF9EjL[\XP)U[_G<m4kJuA_C?R%ZQ$24)V8NY9-[J62h-nCj1RKUt/J+F""N14Kfk)!g0%A`'#1`\mKS*%^f8;Vc*Ak=8`B?_$4=d0Hji!d?Q-qGX!0pr3e7,8/fjnmo"jp6<_ZcHe&-RZWn@!o#_c\LUW6[m62'4a36G-j96uaIh<Yjl?;5&I%Cc.00nW<a"R&oRdfq?<'iJn%:ZT_D$`U[.K[7At\2l;e,#_D3Lmt7coOFSj>pLf![MHZ(7dE8+e>6s'XR/n$t'=i9fb*3rl"Tk4l%<Z[`K-M)+\(='+8@88^^<:g*ET6E#mZV;dIrs$Mj=$"@rZY\@Z[nJtd)"!?ZPm-^eOr64_:9'`Q1&4M3W"iB4Y%qf08O>ks&S)Hd%pmAME!W!M@hQdDl=?KAon:hAflLC7'F=2EQA^+T,-Msg<g$9D'A\[])/"U]r]8.bl*_Si8C;)&/VB3(:IiS2efRABs\jEdJMsE1T%?5IOKc_/2Xm*;Ei?0QP.Z#i8AV*+`f_Lo(j=MLglX"Q7\?+6eE^]G!pon%MWj7l3!]uqD^;P;N>i;KkFnR.:\<n+!Q=#Bd0>%<^9%2_C?$>NTK(G3Y9o+N<=GL$lYh*Yp<4PZLE$!NtZ$$!_i_%<+lcq.;$[_rXG;^_X4PJ'\*g#,'"^GY-W!<DT-;3Mjj#F?ti;85RGq%Wh*%i>AX$P>;E*T'76UR=,hY1J]_],`TZ<u.PP/($D#aS&M#t@^;^T,-r<,%$5'0BFL\&L2kSPqf6O,<AQrr!*)iO"NQ.2WAh&lJ%R'?s8,Jn);Eo6e4!:BmDlIUbhXl4F?W0N*_)3Fs=:j90(p5>;k6<<r9Z#2%\10,X&I2H?u7m^AKLfZ/6?<3mN.uTL=(5`G:KcM''%Wan&ZUh"`h7cFX3a#K[N^@<h58rN/Be<5'bAphQU'rn;ja3G-h-%bC%6ujpT+?CJanbS+\bkj`d%kgl]Yn*0o`1q[edO#"T+)jg"%8be0_\5`iiMPthp^L`h@Y^/BAdW+Id/\(?mK"(i[pR)-X&ctVEEm>?<QBCmD@%W&a\J;rYViN4!^3BCV*Q1/RfHfAO&_5&!?T2ZC%ellf;bZ9`23C&66kjr>GB<:msb"e2X:Ytcb?81!U3Xl4Kp\?N"&V]6E+gjQfI(:URL*/0l9(pG<P:#2`CMb>r-1(kfpL4)l2,Z*!%nO=cHSFJsarsN#_E5'q[RoT(=<)<s@aHm+W1DtMF\%sTFk_JQVBp_t3HD++[.+D(g*jR^k\%_U`r%l@=(iB)4=0M;??4@oc7Qmbc%I*>fLb1Fcp1sQdY+(:8f'SlZg":l3)Y.V:q&b.RU-Q!:GFG@mkbgbdM_ONhBnT$GFA.,HiSF2pb>M@9@RoA"gQhAO?ph;incW/00%KamQ)m0NL^k?(3+n/^oETO`Cp[E03QF_J2+YDh8e:W4%</1D)^/=u--]VUgBeWo$a2Iq&D6Kb![fPfHb,Ra'fSZf>>Pi]0aSZVhJ%d+sRr8k!(:KC=O0Rd%25iDMs)X#(Z"=l,/Sf$GM0nYo>h.q@)hJYE0G6HrR,dV0^g>qi@U:&!3^]W2RPb]G`OXcW[9E\KjUZ6c)[%eYc>Ja*eApafP*i:Xr%:F:nVe6k4[47Q;'T3u/&%ga_34q>Op[bMektPg+6.KIhsM4[gMmJM&KHZ17ta:Tp*p[k+hPF\eYC)[?Nh%;AH0%B;P?6$rEE:7nA\d*!mB6F8@67P'IIed3+D:AS0']'h0m5:JnNK,<V/FmDXS*"*JWW6<J.iO&7O!XINN'gbFlD(.?.g=3WW4%2ja?X0`dfor8.m@0J&1F%b$=W[RF*KntXfR(lkgd%/ul*')"`h&"fQ2pQ9G)U<Il=SJ<8dH4iK>nP2mF%>C44OnV6CH?cA`^6V&d%8(2[kN34N^*eU1BQc3:F?1hSB#lM5*$!:G%3s)N!+uPL3_nl956P%3[C9Y?n;Wps;7[\=5JYh"h?b4=DSOkIUE2'c:+<*?<Z0bQK%aJ<CQ9/<]?*=DHFJGtCp-uMOi=6%PKdM-H4c>R#Y":eNV6_)1uY0fCcNQ1.C$]Qj<.e^"eZ`'(%ps&c[<gL0oEcK8*Mdu27Ya4tO%D-"ZBeWW/os'8#^C5%rW>DW[TNYl6N#N]RQ'6GW\=ToNdToLpFS^_OGY+PEX.gP"@7YgUi*cq83!sHs@^PkS0pE$%hQ>OZP\"[AK%M_G>e0q8r+\-__+=>5>Pi/CpWk0O)Pi7P%t/*O1_e:']Yo/:4/[\l5@oB]O7lC@dl,`'Wl%5ifjp(q;.XX^n"jQNhD#W]oeg3Sa-%$^]a62QD^Vi3eoV;KbZs*NsM.P.tC[8?+$[4%>f94b>@)?^ooq1e>9dS:?9hnh:p&D[dK.c6b>7n@B9\KLe9`,M.l4jb`VhUZS$(%Vpbp6$^s5[0/Q9?&4+TK=?jG>aorUbHh9_NLtDsmca8*rCj-KQlXM!K70JS\)JYYkq6q.#0ZP0`@WQ2&2\pVSKH;'^GQ$0!NjI,[%B[#\5(fCd3clK)q="T"UZ^a9=!5E0K?)Bct'H#<O1++A4Dtmdr$Qr"pL2XE:gNV'ZmHPFXAHC[\Hlk*s=Enr/R8=J(G08f!+t0`q%Pr0jZm\`FKMIc8OAPWM^/(pbeqp!d4B>t$67+:$@3%G!lK*,r.f.ZFP7HT\[qD"=^)_omMLT^LK-3(St$ad?eBuos]a#nEUG.8H/%K5Sf:@Yp).B./epGMZu'T8O,oO]suaFdJ<<p.jTg^b?mrN`_fHg*YYCJA'E+BV&%EF\Y&IH<F`mUJg-0UfO*eLWAN"buSr9`Dp\9%59kI\%ZTAV-^(k:&"!"PJZ4R%nf$f^Q!aan`\=\eDjI.:%S_L9M@sC<*f`:4M>8KUKX'_B>7R.1oaNhN+KKS`)Af).54BGSs7q[&%J[HM)L30*=fKYh%rt(KU>.WcY2%tRFo]65e]t1U=g3oH"XNaP$pAdGIa]KDBUmu_Xfo"ffV)4FY*]uD)U6P`2PtQPp=N#p\g5[3Y%5"L?JHe*8OFX@:E>MB6?%dMM8!d@$9Sa,CmJr_ZdlY<O($,CAlE>%@iANFdcG@'VbgJiEa!l[`.+%T(6M&U_C((&^`=-Mc=?^Ko&%Uqq@XW4<=hrD79L"=`-jT]4rAM=)>pE.T+^j7%N&o`:V#ZA5X,9lb#j5HD_=5Gu1Zqoj4gdkq[SlMi9e:[n_IJ.jc"h@73]oI[Rk%N1I'H5=8>026i64C)pEH5WD#\:i6EC\Xi-E%3[>B.]X7=00Mo(XE\IP%6D0sK,g"l;[4"dU^95)7iO[08Zp-rSVgP^062u\f(nY,%[AXDL:h_icmrCZfeqRL]BXem`Q]S:#HAOK0)tsHH*\CDpfr;gp8M$u&Le'cEeirsU1o;d#)eI^S]g\V;gHU+,L)CGQBAi`7"BpK&%G4Ra/iSQfs89gLi;B3ZaiA_G:F1k6;SdV#39_/mt(@$>,V:Ps`p#%b*G]*G0YN?n,4^X8?=tf5Z7*po>%g79c\b'\G[Q@]'^u!#\%Lc*`j,Jl*kB-o;HRa]eOq)P)q'L]Ei)1<bokmJHU#Ah%/X\0qta*C^[-,jM;[mT]k,M-sj`^DRlK7N=]#o141j@j#mk5rLn8f8P0%iZ+iDX+am<X]Zc=,J9FcAVU0ZZ]sG-,*J8S:+e5HJtnQt=tCWaHf1l71(V#,jh,7Gq_>qS6JiO.+ZY*S&)$<sM"O/-/rl-TH(hsH%M5^KOdqg0!MUJ'&:tbK)VZ!r<9!7#b9XeX,?#*FD34'k-R3On&@ni2[jH:c$ce"_/aTse\.?39r2CR]e1fBNGT9>*i6N.!W=(fKn%BXm'h_eS?I7mp"W?*HW?0sOaH*tl/M%>A[F@$0?=!AqPOq]p>Y%EL1/>e)A]-f1,De_CH/:]Z_AiG*W%Af\Fc,.6X#aZfQu^C^r2%W&"O=5QNQa\5_uolXE%#gVVadXdKAY,c1_RdE^jZaq<!L[tZe(o-&g2<fB-;+2*#'ZrP(;cD-jamIHk-n!gSdMQ,HQ/ntgC[3@\*%El%4@MZ.f,dTrRg'kefpgnTJD?,V<$6=N70rlUof!tVX7#ACfM&&eP/&AIg=3`<f:(X)Cjc?<El:!%t*4/a]e:Z@lh1QDkI+s[@(%!9b3fWH1u_akT76E.AOm,*&95/tLr6lLA<(,MEXiRU33V`6_-$nBg.Y1'fmL&.'5p@taM3P%YJt"e,-.+UTZ1jm\bP&mn"[nJJ($%?h.q5j/aS0k\P^r^X/:hU7a`0!c=44RNP4<0E,alH3S'BZ]lrRA=c$d-J?'4)=mEOXXj+0JJVCF6L:<af,=K1Qb"<*I^i7^:`7Ng%46g[3W>oIG;?Rg6Q;;anka6TcVK:EBfJ-1cR)Eb_DNd^r3_cKI[$2_C#WsR]Qju0pY0hbgR2l"S=jJ<Eo?Vrf+*D5U04AKi]]rj*%)^_S^)TMkpRNm3)DLCZ3l<eo"U'W'O;f#=HJY$"UmTlY]U(K,koM)ri0kR*a&1qk4JKriQHPF5]%-7Wp!$)@^"V*F7I8O0Jgaqc.%3m$TG7"2KEWHq#\MX6O!BaFceh4(KB['LAeniQaSWeXb5++9),8,J6&b_\A6##N3JL"QagF$%`4E"^8fbor17qlu\+BdWi5BH-7;%,O[.aQ.]RC=s(rGkE,ZBeL.K&7^D]#kg8<AGXF9T2AX(iGB3&I)_fg1<u^A1O/&dF^nq[h(P$CEhiHXA=AOhVH(B66"\A6#(JA-f%)_b%!(&O85GF/lcThD).0um(Re>Cjq=]mKh#`itJ"IaXG7,kMHd#A66H/J.mN.ZK(?d'Z[roT6X+<;Grf4k>/&Z#X9=:m!(".)g,%$VP-MU(da*Rtk]#?qs&h&slq?&XLb&F)cNmC8tNpK[lpTb_*dFP[/W^c."kb1:K7J><R7bJ3!6k$!F5V/b7ucPf!/"1;M.D)q?b=%'s;JT2HF82qUK@jmGL"1rX5Z'^3ed0&.+?'#LI?j*'ADqL_g%:;$;gpO>78Nd.X#j(Oa"B-eDfU3\kcm`@rFbo2`dO&UI2c$?]Bh%=V-R%Mtd?XalXZUil9Kmq9VD)Ss<+m=$8tPPf6,R#pj"93j2']otl>#i+28=5dP\Z^D-7Y-UE!)"BD7=[fA^F7Bj=Aql?_?p_Dg4%<E5'2g*lQsm?\5?K9*%SO-d>-U<6!tDkWt2CC7*8DmkI*LNS&?+JGcV2"SCs9Q<!^)RNpF:+7eA>nkS:GEOdU<r/7?pOt>,cqD(5%#;]m!+VtR:&;om!;(;:idbtjGl(P:)lo>spCGraFN8+&i'IJt>8Sk<lBTmE-c<41G5c%C=3"#F?Rm1CTj1U#WOHto`N*&:OR#!j@%NDl:TT\_YhJHH6YBXumJCmlPO,2EFiFZ/HVbW%II&X,mWL!B[c6NlAR_DI!u^IVbkX&orJO^Yo_@G)hjb9Ol1h+fuk8J\hG\POJo%VQ`EL+^IrBrr$?hdkV+eT,u*]b;$3L_OAUGEc_,t7&UM<"UG=l_^Vld!t1L;@f_:70'j#_I12?)iJWQX-qK7dV4mNWTAX<2[rO-[%s1+rQ`i%,+^EO"mHml&P1<dKKN>SceC9]AH^XJTsf5=9LCo/*[YN[q#ZAHig6>8M$NPW#q4d*kQ@hGQ)MaX9>POF9SE)kW#aH^"q%\l[.VR?t:3b4IomWY-"c!oEue>5lRU.0aZMH6*''I!mW3*t"F[^f1gTlmRE`M%N6_673%Z3VZ63-Nn^fq4?p<1Z[W&_@&E>>:lgT%kIsK)?6gpb+s_RPi--Q_YQEr&H_;NUeQ)lqa,J(9<-0H#*k1PrehTqN;!-+@@P%t'pat$.BADup9+DjKGj.8)V@.f!is[W/'%DD\%#le]@+oMnQNt]ab6?C]BKN0-,G&Tq9@Y>lbd'fh+Sj0VlF?8/#l!3NP`olF<Yu1oX+9[&U^_V_u_PJ<:`rk+Q[_"&R?8aHq>i7pb%1`s;K-kjX&du/(,`)`Y%QWqN`LnL]X)W+tZ\m1Z7%]/f"82'Cn^%J.IAWHN9O7/>oeltA9=6@T\qQX@p@sV9Lp:_d;AKB6XHfSKR%].deq5;4.Lrb)0'N4[[oIg&(HI6.L'8NjN=c_pVO!ess<&2n6RYP,r`+JXlZdF\aOOTJPW5"._Jq$3sQ$*c.1g/"([BssiF48@.*%,R^<3DZW*</#Sn;8#pP<0HTf3>Ve2"R=g\C^k7<D8!#,M,-=%urT@g?/^)@h/&c4\/G\J7$YKGa[;Ji0F\[=\=0RXJb/MhcBg:^0%D=GC*+;IZB-S_b#=u<6'Yi/#[Xff-L1609$f-$^Y$)-f"A"tP#"Zt?@TZ8h2IfQ('%g6oaIJ=:4!TXNHjgS8<f']%!%XN,4(6U[;%I_`BbYC<h7@mb6/7Oens:gI/^+0OVZ?V"si'FPWta+^PqO(!W>csb$Y)*TAM!)H/0[6:ha8;%7Q?>/"0>Jf%HD:Q]m.GRopN7_W5%gHM(;Q3#dV*6_e$@902@J3-rmgAmt>:c(t]acUeUaP(M_0YJA#$Oa'!(f]]7(5DC@@dqQ1H&'EF@CW1Wh-c9nKW?-h#GGM_pV;Fm%SVSC#"W.E:a4K0(+K0j3m0kj=A]CIudj_%C*?]A5Y<4e7rb7GY:p[sd`]I9^H7!?L)6b`a[tc'Von9)iPnE'*Us>-/\ScWnSA//9%a<pE-P-n9hCQ[rPL]9@ObQ:pj&:]Q7+;Ne_hSg9Ape('LFKH;H/-Zo=/'+7>&?<[>RB(2DQDn((FkNO*ij5Xh"<rg)hAo1I#Zp<(%F:4j"#sEhe.[/HZTmQZ%%HJt"[P,9dDek`"?eYL/2B7[9DlqB8PK#fhn#'4+#U313'6fe6YA:H,G2m9WAT5Rf7[+fgW@@H9$tQ1u%(/oBZ5hs^$G2u9Y]9/[]X4+*OS;tP\pr)J>EQT=TUlr*aY/6RU%VT`Hg[.;^7:*!@r,+DR*no_7$E*h]g4Q_")8J)/.DJ<(HO(Xa%GHU&$.(73e1M&J&__t=Z"iafCn\8:\BM>96#K3E]LN0P^J*KjaNim+)0B`4g'ph!aeHm63*I]<,d2.:5+&Xni98[`Oqa1=4r\bko%P7WF^I'g9H#_nE6_/jeA7qq;")4sb8'eU#g4Tqq=E2D:"H8a);IJS%7rl&(g+CU=EKsa6Zn`LT1]i70KhAWf^j5R)MPD6aA\6Nsn%H4+V]16Q&h^B2Dr-JXSW*r*MGa^V)oD!h8!6n;rAMlVkK&MAgEP9<jf@#;7Le#:YWOMC?jYgaA8EG^8hO3IJskG;k)b^=3j;N)DH%\2;dgJl_$O8:dO/MWoR"1)sfsF.D9J#tJTmG(K'*bs<89L:0hGR/3n_=&X2L_s4,RUU4p=$ZA]#?g0KZiCPBiBtb+D-RLoM!8i[+%_V'#IHfsF-570[Ymk/0eic7"ABN8!_7;2%'`XqY6<rFBM-UGCND>cXH&8!`'^;doi%fi&-[ue$g=j^Z"5-(KSl_tS,^m-,#O,/%=%O6Q'm0JnnupBn0(ctW)kca(#EXgEeMYU8T(3<m]TM^:j!ig;2A'4'O_VD7E2=KYARahQ.R:eB.V,f;fm`.[qfmGFS3LAnSXR4JGd%E689ljeG7m:GY9@m*[G`rH<o_L("Z2S*QZpRdOAhXA&raB*'XV:?!7uT#($X/B#;)Ye`dQlPf*`75T5<3@n'+Mt^qNAjc=]"9T1s%-s?C]<;Q\]-ldj/)G#(bi!8_WKV,il3;ND!++tk,&N+&N,GV>J6tjH1k;Hs2!1VD3@qk<gB1V!5W4AuplXj-]dQm9Gnr")K?/'`Y%d@=6l"6\U`<juGuHm%3Tb9"C\ADVt'IMb@H0E&\lSI8ZTaU4'gM(Y:ecImWtC,\f[fjCKJq<-.k?C,c[C8;U/0ho_%TBCXb<@bYn%[WBT`^JK=5WBOaF'n(BDhBPl`,$k1^o&Q1$s#VM=lIfQ-CWVic*aNp()dNLMd^J>i,(Y]=C.a$5KFLJjB3nV-(17Y8^/'p#LeXl%%"ge.M>JJXtQ3Do_K,O8k>du/?E<*B_>X$[ih"ZH/8Ih!6K&GZ.8pC0qnM-FEVZ5gYk-p<c*c$&@2&J3H@)%6HFXr5?*9>r#4u6CT%QuEUMA\ZuuIXM-l(@1Z=4bI=#g1AWV-@&U]RUjZE'YQ.?gj0diZH3SVT@r?H3_:Oc>5TOlAfJWJ"W\cr[@&%!6'kP._NjQ/8Ng7D%CSM([M+<fm,\J5^\F`_UKtFRWX>L9C_f/=G!+hT,E5Q">+5P&*,-(tG%sUbA7cF]2T5W+`Miu@6%:h0R;<,Cr7jC[dS@/>b:4hq?%ZD,5^%bOAkE2O?c23p".K!se@HJK:)I&[bF.;N=@k!+X88#.!!-u<fC6A:?Tdmop8EA^kor9n6,%+be>2XU[]YUSA[>K][/9@"/s%&Dme7V0*?)Zl6fU-o!SFFhM6+JH4%j`/g*Yn)Pb@MPkS/j56_kdoOG75:CQ[O_q-l`LB/YVVQE2a]E#\cK;;5E9&iDZgs.']Jj%_%jfcS.^4L<0qX=55Pn_:dFqlbmd'r#;P]pg&F(V''pOBtbiU;<`$b-cJ^rh9'bUkd/b1P^l;t$#rX1-@di+uFMZK$;P`KKFuQB(Mf%RnsKW1T(cB>Fp2'M)@63GO#:nUfJq)J,=Q3*.Gm2,WtaVIa1?o1^<))=lI%'?A2$Car\#Y75D*g85m;Y&r44=Rc>+/96_0)'5rNZ%jt-JFV8fDKLOKX&R$C5%OtO`2>!/PK<fg8Vm\E\,Ga>/?A$;=V.P`+C2,=:QT@7@'5Rg2IW-<[Y*K3)n6rH"FF'S<P_pahH5<mF^%3LO5a2^)M&/$"e4+\TK=HTPUSd(XhB#u&C1&!=3hA>a6Ue8Q,5kiD07Q\>6q8<Rc13,>.dh]f.)rdbJ?]e;EZ3f0>g/hb=mouU].%TQB/g"9oKU'plkEC52c?I;:uDgDo'=rpnN9p"2k6J3s'l.9FOABKI[!'eujcAfj-lI"o!j9cR:c%^gan1/-qn/iURn>VY#@ha%l[%-ImM;Vrf>^Vl!Mfe@$jpk=gm4=.sZ`V`BCEAh;(e)/jZ;NFrX@FpEq^`daVNF13TSQghon'O7*hUW7%T/6i28iTeI9(K1+\^C'\m%F"=B@TAK`c((V7&^ha<oO'@A7B;c8V;%,I9[8_@+IdHS'YMD0>=1K)UF++X@+d0RuI!@;@o&8;aJ5Zh,)Z#L:5W88NW0FSC<Hhh.%c#OiUbO$>e+=Z\KX1tL[Lj0[jQG0\gYSc!c_lurqEGR5Z,O96D0n5Y5KkAi4Y\T*<_\%MoC#@s;?$[g>R2c<1DM?FRN,iS"C$\oY%("n<^G3JC#_B_cFU33c4VT@52U-fGmLqaQ$Fd5]":eeNCrGFu9+-[.NLbK]YeY&ObgW#@Hb%*_PB1d^@[+%]G=Q\B-=XA2jp?n*d%SrFuVan00jn5]#@F4r^Oe3_1=Go%Qob3]ogTGEY*F*Fn^.l9`E-N&DE`Om/iXPG"d)GU\XRulSXV.hM$s(t0g@7Qk;1nsG0.&=X,%'=Fk1UIah)1O8g14[=C"p/h&!_I'hinA0%tg]bT.-PXM8.tKU!CG,/86U9YsA,sPA(s+*Ge@uWR1QR3E4I.eo7]?2BP.q=*HSoP+%aI*K-JppnRN8bZ5`n>(:D1DHA]@$2aF.2"Ja:3g"NLPtK`#aI;4sJHVik>m`i@JuDbZf]:-3))c1pK<NT`^S#e2K*bY"+fnB:M%m%*1:_L0H-e[TlE4p=6uZ+7-%_Xlhs-[cmIEep9<e7D5UaEVHHrr=\tqX2gUa>Q/>/%Gm>0c&r78*M%laF"+(%K6q/f/Y-:+'@BqN2%^g7>(fS2-3FD,`BcmQkO'VDVXfOGK\5(C*,J'f"]Y/?'dnn,m[%3*-8=Eo=?mKZ513[a2M&ND"N/oJ1]XS&4V:.eRD3t?Gk4NAUd%DrVaVA,O-FZk17a?^Nf"&!p?=pAf[]Q??.*";a8l^eM#R6,Me8jA)fmhNC!Zr,)oK[=`Z"KePcqM<0"="5a#9Uj8![!',]2X^MRQ%-'M^G%s';22\%6(:6knZms^7:6K/)kXan,EO,6hp'C_5kIgQ<$I$/r@Y*QfS/e1g-8ROgmB0aGemGLW/<5Iu<_@#FT]V/c95Jq&:%?;4`mZ?DXDR0@Bk]Bn8-n>7bUKi53f%RT^@:Z9<rSe"EUV*LFnnQ(qWY1!s;(0Zf+?q36oXk,gnCOZA`)]`jo`hnboOrG":k.""4%"Da92<Ag7`TVTG3hO3jq[#D81ogd<#s)g*a1@`kQkS?Gg0f*O*O5;6:P3gX3)>l09/hBmA/O.s-\6tA5iJDL"+ert,>Zm"mq1T?l%%SJ'#)@T1dC&dWBR;'>i*O#POej3(aO@1Wm3WK0"K9adT*9;IkH3d2CDi!%M5@M$dA2i2RYlmX:Ys\Ql!.Y=T!'GH0"9lRC]ZGt[%KLdXJ@S?hU6r"UE(GQ[Er]ngqY^m3%Q0;[$N-JIE!L+<+R#DeX[FRZr,S2rGbMWREA0?1A_=,1#Pq-G`;uuUt"[j*LM.7t]<4I&*%8dT.L-s#PB*[M%<pgCo?"(C_.!?$D:H'lGPMPs,ITrLWi.OPnbA3q7N.hiUGO9.m:`PCa!P0m`J#oSipB[f-8)$!392^P9c@#`oO%$re5j,JB0]PnC$t47G[--QWrTTa4ZL=m-,3a+2;:!sN,P=pPhPW$G8'a0D73"&fNG5t$)9"-EqtNNFt%,:)7\qTlJ"as`7lZgr.B%:$09&FKuLuJr-i<5oc`l6@oar%i3QFJ2PHI/2n^c=^mQmFLDi4@(d/CA;D!L"[1e]J]LXfZha[!Z3_X"du@`b.tK.+^i4slbllFN%8Lft#Br*R_a\$+R<^]t<UHhl0PTs(;/\(<m/0S#:%7lb(2EFCLdK3)b1g$t5N:&d3iM;*WJ->c6j9brcPmoo"0'&c_L']%=Q,cDV%*Vc@(Oq=9i\U_crW6BqSj$5qr`B8Ag6&pJU"-Epq)kdn*7ArTu<*@=gJ5QS*A@:qNTe&AQ*Jk;`D(J@K#`:?5e3aAVH8()-Ptt#0%k9M0`q(OPF@).L!,nqXR[`O1:2B:L_*-d]#Yjr?_oKiU&!HR`A.S9hO"cu<67-T5RP+Tb6)M:G";A%=gZ-YjhdNF@!aiFXOP6d&2%NC0t1'*0;=KT/`a7n.qq0WBRh=u'.F6%YhQ&JCnb$$ZdZeU`ZOjV1g%67<g5Op,CSE%)PZA;jcXA5"8ifTH@a)Z1V:"IB=Q9dWRN%#hnJb?$eJ9+ulY*U48lRM22Ym\.D%rW5/RnKd:>N0SX&#kt'H;(((>O2?b!,#a?Z(<88h\1'/=Z"=+R!'GZl8!=ToE5QL@;/0lW5%A,sRULo>\t-u:Fo6'qlj-J/t=LoLUa%QN*$&eIkDQ7VYVfar^D9I`4S1b;F!!_)<`'WXZ%\Zdba!P+;6$K*7pT`B+a$p$/jUQD-:%_'WZC%jEuLPECqL'sJGY$ktNh:8JsZ(+Mn$^s-^O*X3f'\B/iG9On5T`oA9o)']qK*67j&l3U]/M?&3%k.j^tTm4A0!u)#',:]@R%"Klbu'+5^ViC&2%FRd1tT\<pc=B[m:?pG;2(h0+,<KRY1Q093T1h]_/K98k83/%c?$OTcmNYE$:BRsSJJO2bVhuXQO<2@$#$t$i$%K)eI,0K<<&3RNss915Fh(k<2G#mXGfE2^T`&h/Wf%L+=435Go<;5l2?6Ak7EMXV5SCbhL(b@Ulc$]HbP8;&+I+95F.+aK:95[\;^%i2d+cM?4>^itNIqGRbuBK#997/3&SW!Qfol>"$p'_nZs)%NlQi+U^^IJfYcI+Qu,M6$+^nJVIu,i:'#EA'lL#+@mFWdV*nt\HJE/%"K`#bcqt?/R<W++-3o_@::s8bNlhY<.!D:4.THa!4!9nubQDHf68YLVqD_VjPApbq9EgVf,&req=`Amf=>7RFUEDl`V*M?M1ank>%Lf0&u?k="QPm@]t$PsdpZ10PFM2YE"U?,lNkVa:i!s)4fL^9P&7K^In2o0/6&V)/2`5/)Z\epS4'DstcLoSUK5pnZ61_>3d*ZV[T%MN!>;FU4cog]2b5N'[t]$CF6h<Ot+c_&sC02aM$:dog)4&8XmoN0"$>DM-%hR8%:WiG:8ND+2Ai"#=nS)5,@g6?4XuP89"4iMGL&%#2#U^*<U>JU1$\=d"KG,kTG,GJ5e68;Fh#n!b91b'N@CI((;UJ5TGSS"rfH=e=d=$[gmq=J/4FP-q/:\;B[a@TQCnU-D;Xq&ct?`%CkU;H;Tak&#q6ss-9.Zc"%VD1[^+?aMiSO2(kn'.A-jL^.LcFo&Mu*OK41Ns,S+9VP3"t1"*o7sW'h:1'.\YX,>827O?nDOgggO1%:3=ur@<<ZTomu&LOIM1s`5ftd3Z_$,:+In/#HB-(:PY3W1(tg2<eZVt8<o0V`8K\hm&+>8V@a4;(h+&,;I#sV!!a/W&934\E8a[P%8/X95S5?&B63.UR#)/7o:e-(*7"D$d;DRd$?I6Y[^l$28dKiG.`:*f6'a#j239UCD%mSB>'+[;`IlT!YSa)[8o#L_k_ad)cV7Q$;%D4A.2h/5HHq6=#p-#t3e[\g1p;ms@u5#YgfRFdLgGAXg:4]DC0np4_.Y%_e9p:<@r2"rk5RA\hUke!?X1Ndp;\(C(k*oEQqmJ:G=%buWE9:Q:d2Br5b$Z_k<?pYP6-]$B)+gU'\74^P.th<?/ZV^nM?CM0e#46N5]j"eknE<"@h)>j#Pp"HEPn)L]tqe#jdj-?/RmdEe<%5;`758+bpB_p`aUgXr"1\'A&ND,4/7Q[6"83VN,D50[tKUb_?YF!B=Y^?aPAeBGmX)Z,IaA!c&lJ+gJ+ful4@bL-r/nX0>oR:a_:%lqC?af9U.+pCR<#Hd-e<s8Hmp/)EnQmbUSn?Mj\XC\YT'](e.@RI+qh[_MBuI;dfnmQ6EW?dj7:Y-RlbhW?k'G-'YOI'rS6>Nhtf%[s-WJHr?gd3E>b>Nd'/<-N65un)B9sUDZnb\bC).lJbk%_aWV)eV\dUSpHj?2Il:CNA[]M^Wu2X)GtRgGi*FdqX2)]lh8NP6F4r*%RATA^DEB\4G+6UsVQ2KgG-!^EAR2oT>Q<oUM6L\,;Le`ndpZ\BTm:04@s-%&Y8I_m?%&)sTM`C&[/<^(\Yuc'k<8a^:\2'G7`K#.%gdLnE<pi&pbL>9o50h.8[q2!l`mjqI`GT%[nQ5[;IE0CX(Q_*B0pr\GA!m?c1mS/V/7Z!-$j_E(!L]=0F!d=]c,E-XN!lR>fjld%%)U#@,BK2o8aH/G>VQn[=Af&5.jWo@RLPZ1EZcSS:0MLmiT)lT$"s*o+CbdQ9rG46Yb\!'lA<t1YYW/&`:c+OJ2jk!hjhVGhIU"oL%+plf@C6QK7:,L1pl@c/ueOO2e&R'Dk_!'H^bYrdL-:T^B%hAmn;T3^O@31KMj4Rtg31NES17J]-F7R,G2OS=A)04eYd2e8P0b+c-%>]`:V*KgU?&"F6M!Xa]W`^'T`8Xd;R/-R44=G]X:\&ikI(.NKW"uIS_^]DG@#X&G)!e#l\A7R7(=I`&->!`mpKnX(,%u;sV@*ue%%^r'%=d]sQ?G^pr'672m4ku86-6K`CZ@%a<*!(%kd;8=_.G]%M;HlaPL/3Lsm_IB++n::USBWt*=A<hgc9mDDgd+D.7'So_]K?jW(%NU&t`8!eO9pfJ*cV51FAddk4o8?`Mt6A&\rMG<6N"TkTrJ>coX`^>Xh8Hd$5PmE6VaN;=^6lN"S*$uR\8<gp+-9#6VLoO("3["\.%&.XGj1f+3M&LR\e0I0/M::A8\"IR=GLbLS>38V3M@%cF'j+*<ZVkY]8L;Y=i:Zl-eK29NYp<t`,:.$Xs'$bhX2@(EJO6hLaau1,l%Q&?V2_%RfnOcbe5NpN[]&I)X9/nfNEWT`DprH)3Ygk,KH3$]co&dnaY)B>j2FJ+j^5ar0Mb(<FjP$gKp8gt6f>YHt0j?Vr>m&/k_%';_`>m&+n;<9Z:YOXHk@8tH.^l)[Vekq[n>329m.\7O*QcttNZ"/L\`L^=fi9<jT:\VfFs-(^l(SW:u$juFD2%\C!V@iZiGU%dLc%elDubZCan0nj#/h@1ebYOJpBs=#qT1ec7]A;#hd3@HeUH:m)M#0KrM?I)Z0891?*nZ7lj(J'Q*YCWladrOJ78p:@$am^95[F>N[O%c<lQF^5<<SNV1nN.:;)@gRk,2G:mP+p+uY0fCb(@qp/>:eGN$Jm$n$U]?VqopW\0;cVAE3YP0&alH7<2C]<G+C$`LfX16m[\C]6"%m?]--UV:4cl<6m3FYgb]1](EiCRM4F:RTg^HiI116H`BjFkk6bV4Q8hYA_Y"G'inP9n/ukIpT-`ro-DeB'X?pj_[Z(\aA#>h7o\p%TCK)H>IW4LO.5IhC?`M2d?W>Hn_Q=$\ll2bj8XPb9jX-HB&8jQ^>/Q%1!p_YrUP.)rmbk0fju3d3r9pM9iP%Sj6&4)WHl1#NSLr\%e"/99&JNh.2ij:Mk+eb1^96!Z?%,`-Q%s$rAr?S3X7LSn>#4g3=WaZIUT%u\7c.8-]skt+a1g]UgpfJm'6S;sVW[X6\RR9_b;@^i%gW`F2?CC(nIY[c5X#i1PpU4\crN17Xg;ga!IBUuS0,LZ:5N6k?k0cV%emG!DCjPFD<q#EcDPm1,io[kcG/WS8?)Qk$LhOp(^R4Eg%[')D#o66PegAbe=bk+h(5(Cm`S,'_2Cq&W=fVl6lg:D[`Y"dN>'<gqm^O'8L9#&t?_sF45YO'i@T$"U9LVK3iC]DtmY>p_:>B6=k%.<jgXp@g[BBBH%Fq<Z\8s1'\-boYL6;qL's/Uk]M[Urk2m)[D*])).#qq#e0Xf(o&Hah`*]MI\Y:/kJcGg*)>`dWE\oeN:$G;T4k%_hFFk`kF@u*EcaADg`gA064,JY.ZYd]khP.>K_;,VJ_d7b<+T$[i^TLR2bbkGqSPX^O/Pk7rMbtRbb>0283_dk?ZWM7UB;2O7-kV%c]>Z(M<OE=S5ZboLV/E,BDLj73DWYEE>-qfVJUD>rUmA&rd7r,pLTbNg#nm=b`B1'4Vthes*:_fnZii&]DGiWi?-hGn*W+fraYUj%B=me?hktXrn&h-6bV+&5hu.WV3dkpa`FQH#L?[upXR)PEd/WpoZL`>jRe"4_hWIeCcW,(/6f4_qQ>=asm]-kdHeJ6Fo<I\V0'].@%iW#n;/^s>ERX4BXT'N\im6t:3II1dn\1GsUEFS(r>/fUGY+Fm;M[tkIop8D-f0:nZZEp\"CL"TcL7F\/B?M53cPcU[T3p4;o%nCG%]<=lrs4(Ilr+1/CX1T@sY#G'1qsPT+C9mXgp9_0u`4aa`aKF.,hoP/?YPJ!PcYr7kH+=$F$kJ<AB!]UL;FV9'BMj'&S6T6*?;<+%%RT%@"_?jhM3<<O[P*0fF5nIGbP(98f6Hka,$-c=<Is5XbO7\[%;CP[(arG\;_Db4Gou2De^,S0YRdPIn7]i"JPc7BV-/",!0q,<;%\[hBB4QgPY2pY^+G]nB3Gfq1+7X.7a'?NtH''7qFq5BSLe>#k<OV:Bip<NGgHhtoIffWE&(&?b8Qgpn*j3pnqpe0+NK_!W*8L_U+%LcUsJ8To.?:>T"Mp@["QXiY1$W/&JB23H[IZ6L"4Cep$e:m;ms4&n=Ql10MuDQ3'*ktASIq>3"nN`l1FQa/"5F;g;<:<TV0fohpn%FJ\J+HA^0JXE<a>Zh-\nID2P:*QXWSRPnu+ITm?IX[sj%Q+fnURnuT(O%N$48F7,&QdWA(7WK+j7pe<A6oh+Qq'd8^;P_a_7/_pP%Z6nfsj'2DOHAP&c.A'5].>9O'V7tiOIja^Se_>GB^<u7[muoT&dc;XQ1a4Bf.!\dkPh/.B4O8+k7.@UOVPdL<)jQNU6[:0;Pk*:Z%6t+f?nuVGpg![ML>CN$t%duuc':#%4b#DiHqQr_W9WBIae?nRJoY+W0D-Te>\<^_VRIiU58S.Hk8Qqri)20R!U>2K5cB7^=0?n[p%p:oM6cuAGa<n\2/W0qrFP:2[D8?"s*.:ns9h2%M9O8bQ%ah8Gi!F0#%U(aNF"T!U;?4SBP$jZA\Ap0VuQN8]j-l`JO]J.ZAp>Fj3%1P5+(ZH7cY?q(q7N'LbPE(Zd#g]0(Ok/a#A.EYSJdRs2RQa5$':<ENt)3FB%5VN3u-)`XK!1+H<"I4]t*_cW0-C0WiKTSdR@U]X(%SQmp"NFa:j[_D(\&OGI0X-s&G]<F0ia4pRKLRYkKUW]$_R+oZqb;B67rqNM^WnG)OcO3,tS-KL99HkA_3OMN18$bBl?>l=6a5-LB%^QQu.<P-r^DHGlcodQK)/PaR1_tACkBA'hba131N4.@1+\W>9'QeA:I24j")UAsL_<Ai=fjbK>Wb%nPgqq-CH<R"ig\R.8/^[#38%5;%>1\'*"Q5@:&IB]"i@$h"m][jCl0U?AgU[U!6cftOCt9-<oRH'<IJYMFXW40M?M]hUdR^=AR2`gc/70?q6R;m03SmhRr;-@[tX%I6:bHSXR(Tm-Dm@Nd7=jEAM>WmenfaHo#8<L7+@_gl78pR[C/<hJI2fgPru?/bkYok-M\qEl:DtoY'pXmEKIKlVC;RZ+1Csl=I<)%Fc0>>HtCiN\!D<0T6]akm>O8pRFgQR5I+XFg3R-'m:1!;bP'eBB!uTf/"N$pn_U/rD1&s&Rb)=,1\FNcd;`=`b-k5,gKscBD#Ks;%G/)o.9_6mFJ,cU>'7#pQDC6>Xk5*e-bgUWThHUPb\_=a+^%AMQp=[nI4o]Q-+keD!p+Ho;@Am.M@l;>I#U*[lEm+L`'uL^c!'h8-%%7\i0e+Ak0'EA@rL4HL9?o0,K(a^aQ@N<BA!!%O(_uKcC!5nkJ*pj0Q4F<N0=#;e]CKE[ahmB!#FXXOD0^`=!]r8^Brp.T[8)A+>%+*)2P7-^A6a.E.p9OX.C:?T>MF*]hI/UFC&CAi=!Xf#qlH`U_Q7Z#+p$E%/b83,lc^GH`1R-kr`-.Sh=Va7&lE4rBP3KiYV`G&6g%,YFX#>q4*'[YLV*1cL5Il#F8cC?[N_al\U(lMMt3?(P)838kMgVqipqg%'"6='6rs>R-8Qo4Y&Jrj*)18nudf2G)C]F=TD4;SAp:%Ca=YK+ag`bYQSOuR2@lF4nuntWe&kDC\E()_;@,I9SDak22C+e]>;+k(+b:4\,YVsTK*6'=pr6bPF1OscLp[V=(''OQY.:)KF>:U%DbI&ua(Lp-DLrRh[kCS9RM:)lB-$)q:XT_B!joNF#b_n8*I<^=-nQiT[9IKCla6-mjKlb7[3\mlnVk=0.@RgJ_V.FJO,h*h;6G'L%Y]dXHZm>V7)>"F7d)h%+8OmhA)ra=*P1h%b`@FdrE(-Kc7[JU?gt:FbcT>7"4]?6l[aINX#Mh\)$%]!Z2QIEU%`:[931Q"T37gXU%Z0m3bMZ5bZ7#-^!h&/<"U&6ru&C^V_Hpg7Dp7o&Q=ik.7lE)T#99,`m8GUscK9Sa:c`S*0=Fs3]<2k<'\XBG7&_Ubf,51?`Cp=$e%,sBg+MUPlfOAWCDZ-AIJb`rXIUI(K1SU<t9e`Q(]iJI^aV(`$BdG%K&G0_k"Gs=/:8/CO]\/PO(6`&$;q?14-m@bVT)5=&4547Zu%,F$bcM[4t7pgG$9C*uul7_pML"?L:EFD8sJU`%t+fg-%D%]M\c"\a&RF;0sDHD9!t<7a*Ve-2SOqXed31]<*@%lQP[&5a.uF/?Ld%(DSMod^@+8N4\-K,->C;9NBTKrZ\u)nq^s;HWb09d**)TV\Z8S+ZW_k^pC3jmPaHr^M=6S..^B9@:78<22pkIg`]-FI5O"Kau?DI%eB']O1S`a^YWS=kfNMs<ST5r_feU]i-)TncPhbA-RiM#jOD3c9Uk@3LV=50K\r:mM!cEh.d-/"NjV?S$CUcKd_EQh(H^3C"XjEBc%V:,G/YcqUS$&:(/&O(LcA.?C,.R:rq^Oq5q?;K<VPbpgG4<Q<a&CE\TX<Z[9U4%h(#Z=KgO7CA+,X:06m&JC"3!58`oT5o2'B:bG%@BYMOcX0*:B&0R!PE/*q6]$7-im:e@KL#N!/8GG_m1cY':u0(O<5E:,;bs0W&3Fg/2IIl4o2Q$mk"9e3ib1XY`$=7]0R)GASVN[W%l>UA9TR2_FAN5pLp^0B>!\tT.5drI[;cjs/;a#+>PG"jcd7FHP6lK#*@tLQ]eHQ2\*Z^rO6F/EP$NN?a1;02odf9gl4X>3L)P06%%-N/K"3fPmc0<0?UdH](M*bW:Qh]:Sl,=k@,[EL1A7[<R5Fr"+.m$JPK8_h6d`GK0]:uqD6J,Fr<YG;_-Aqa&*XIb,^L=;\o'$PO?%ijD&D*l!Qe3eq+(D*j8fZ@]X@;T+Mbk8eG!Waq%1YpR*"O1!=7F@jk<$Z`R!Hrbu>!>'TNiscXi#GX_o.:*#68#.1MQr0f.\0)3?%J\o0jAIGohNl7-Yh_-`L1MdIL69lm#mNZaK,=P-<]5Fl>)Phs)o.=*4r)Dpg`C?#3]-oL28)cmpbLqE\d/qfdA%MK;V3>V5G61(1%`J=&AU<e@0`tGka@GE%`G;d3hfeRf_Lhe63_J%k-p7d)Wk!RY[O3p=,m#2`LK`eET01`Rg$RZ?1kN,BeM<qse!kai_\\0bsOlQj*%SuDo+.tW0^%F\tC,244;n&kK[X,bdGo#ucc9mZ<_(0?#B!R<WWl$X^Tj$I#m(Bh/k$VNo!71me?Kmpal%<J-Q%g2H[LuL=QGjl\\%J<M9(>8X:%n+)-7\\UfB;c$U;'oB+K/C&!tbJVmr:+S1gehjWF,-4i84Soj+.2S+<4B=8m+]n#3)<9)6Eku/Z#Gup%(,HKJ-*YY3%AdMq"U<6XJ0+064*Jc7g76oidPrp>36]jO/\Qf]uh=A5lGOX!R!da'<(m?0ak%lGi:%VEtQ/]61\>;*(k2;A[:7Z4eWuEpn6'cud%!C@;E^C_hQ=(H>@k7oLRmJ+OtPji2)f8nP!XL&L94!:77%21_e;E#ES+JWpI7b=R#,tq!GT^<@Tc[H;2OA"r!0oJ(NP'I2%!]Y2c%/-#bUnTb>aj,\ZYJd*LC!sPM2*\ZLkQ(8=<Yr8?p';^bJq]hI[kZ_tgDT[e,e#O0E3d>>/;LqsiW'meI"H`TF+5K43[XYSo;1YL$%k&'XYhoFf1WcPjukY#Q]'R=p()cf33"oMeM$R\7.kJm$m]c\PHMaLgk9FU22D!I<Cd&:Cqj-W5%MVu`6[^rm!%aEUH2JR\nG'si,%@cu66rakSoor'OZFKXi2AldLC^(<K3G'b0YNi[:<+BV/EQ?m>j$>B^Omm'7]n'U;pQ-AjGm1!cHEf7aphVAAG-qEeDD&8*O>i.Q\%TKkFVPkSM/23_N5kNRms&]W5KCAC&L3aU!\ioj[4ZD/4r$"JGQ*jXSuW_d3YEBDXn>"e^G%GI(9O=Khd#QUeZ.m_DkqA^SCEOLL,%@0ZH<O+4tm*eJBFd,2lo?'uj(\io^))d.V&2*jQ(Rqmk;nAj)X1!U%C,QnpPSD&&!MC)150u33KfYRH`AuP%r`j?:81sr*bVh]=h%4UXS4kAI=UL5I&se%&C7$[mRUaI1kC?`MZ#?FhL@5Z6Z;4-bjM=icdIIB90G+r<,,kO]sBGaAtWU'!Q!NfW-gc%PNqZ3\3*kD8]<%-%HSl@)](k=TgJYdsq]ONm.^o[KgGVWC01B'rIYhj6=Gj/^e)!P[%TE+ZAFTJjQ0jUnp+KJs9N>c67F>-di76#1,FW`uI3mIX`QQ%F>jsK&D.*lbf?#h)PPe#]gHi:]8aanm&](1!5.mCNEm1J3l>2ik##Nl-6]o#_6S!YO76JCUa!l/f]+Ft`EhT*eqTD#"YjKi\fB;a%+>Eu8X`l(CZ7,Vl)e^0u9cOUOg(>+rLX"%>p//Uk0[p1>)NnsDbp1qLXmR9M?Je"5gefV>?VT3;TEB:p)7u@peBC#DBiHWGSQ32X%_AeZIXJ"Fr]:9Fi[#+KqoEKIAhMm'p"Bc7lrAes65=>"JQbOpOhC3jWF!j9/+D>;:pWb#*>'!bm&iG0KP"0$Y4$9=(FUS&CA2HQ6%Y],$P,`-05Z2MsQEKPS$"CX5)ZB(KMV1k^CpF;9WT/o!4/#<QD_&dXQ+WK(:.)aK/>Y=*+HXbCnYn9tu[e>rb`T,>A9M8]naKMQB%7%1AcR*u,d9)Bb*)"CFZW9LV50%n9f?3[t^=h;Y&-]-D2'Ai\$+lf#bGXUPf1M@S^4G1+<LDFC)k28b*&+23GCbCCrVj,GS'jTi.%C*0g#0OWm[SI'XC"qKC$fFH>eIh'CrTj`,abFPH=+sLR5l,3_Hqq;BETWoR1P1@.fhLDj/jqu^Q;+k"V`Ws''E[H!m*4M\?2#:[^%@"JF#,4Z^2dKmlJ3D1@H*:DB+^MA=F]O/A>(d>"Ka$M?L<UUOe%X?dD6u:O]SWL+#$jT7WL@H@airFI^[HNu3Nr^I>nJW(^rE)_2%mNRDb0q/Sb&F!dNa[,ocW;OP1#`:[?%IXgqN&?h)8X12OQoJpWQM>YHfYo;KeU&"kUu-Qr`T@HPqA;7t`E_lO*0$]"W%etV66$R\%NLoZWi4UoFHcZFl.S_Y)'gCl.]u?fP:Ep&]qrl_+c5&&8pRn6*,Z6daR:#f:b:0>W4'PMp.fZ`6BhHg'+<G'+Bo[3c*e@OLU'<&%%Rh^V?F(G6L:u[/=@=*uoC)9ACU$Hm>:Y-nR]qTFc`;D-eiJ=po<XOUsa.U*S]3Q"/K\l%mgiE\P$>jb7(@;:S<T7/#!qu;n'!"]r%>pMs!Ia?XrO*R6Wi/,s77c_=rl+uL3,<!kUY*[F!L,7HrUK[Bq21nS(`16YKeE-1>d-R-:R]/uF6+A/ZUG`:@!]M$H%-of9M2+(a%cT[&I^b%onJR*P+:2*[QghT1D5l%PjoT%^#!!k?E9%H*fOdF3r?<TsYbQDC!`;/16`m#DhE=Q(C=,:<QSk(0kSFguC@[EJGD=m'S%h`V!_l,X^&QTT(>-Z1S?cE*ZO/dSr<kr5`dF%F%I\HZ"Ym'mCRa@V8]i6icVai7D64(qqMT".6a*+*/"h-q.khImUtW&f`HXG*\4%;JB@2_fsUk]#)YRMEJY\5`Jo,MHjsIZ;m?[>^1@E+)ufT@H"fF`)*8&(_67L5#&Z_%IgU0::uj7%&*IonqA1oi<9Z(#"!cD$H1#F%j-%?@>7j*<g5Be&,9CeE<,"j_"8TU:_[X,@3uak`I6so8[nJ(nUH"o*E'pogLH8:EOK<M'#bO*;@;qJ5]>'/*=#G1VFUiNVZXu!^%mZ/<`FC+n%='.4GR]fY$g58#eEi-ru*D4RapNu+paFa:%rBEeJnK$n<j;klC'\R^fZnFgQ1bG^BnLAR3q73C>&VT8Lbm=Ej7[`V%%,5l3*>9Ra/6tqb@=Y/?DQpte+mMh6t+^0<(SZ+sV\=c95TXU!sd`Z+GgL5,=LsrmTAst-%>We+`CdfQd9r9El98O-j.\.-E+s3+1%Cq`"oUCoRK5*FoG%Tu`YK\.ar6P"a@%3pE7TJ6n3:5K1k4\K_1?MR.?2]!3gkqW*lEH23OpK`;/J3u8NZ>5/kGR$[DH_Z-U1S,p'%CeOIYHSN1p6eOk5A5a%Q,FSiQ^l!pB/.WrpQt2==+s9EumdQb+`GuI0+Q+P9lFK(73ZO,=Gl'V*];@q6G,odf:.S7dRf"7r!@CAH%LMM5ei[4AkNZm4e9rGDjKk/*emTEBJTh7io)8NQ-XumMIfT8+8Lg5^kClQXi$)a1_M,g<!L-OH7)V2&d==-$%RgMP&g2R9i\A@I.%E:QMb=us37U'5a0mRM(?6.<rd26i4rVJMAe22VSq^6\K-):/!O`ZR'"<jjb[g^3MPq*3M9-M(f4-ICC<!31hnYAD:h6^NqWE8)UG%4oW)f27:eDb:hoJT$Zt:gFPqFXp3TSI<T4aUdFLP6f+IY1^Zj;aQi+h)8l6b6'\AZOpRAg8bEh8p]R.(J0b+^%Dc2?'Ik:q!k9eC%N/]"#(g[XZ%7>l-jDClS/m$3NN9aZ(Z.@\F3g83Z"hBQlS+,1[DQ1.H('bj9?[OE:nbR,<!e8rGh^)g>=d@&r+jE:NQLENJ>:1D2%MA++B<.WkI.-;q%/6j6i>q$M$hAr\s"R=n(QC\:6d%`oPDfB,Ul1#JIFGY8>.g=1I%YR6kMl=WkBYLp+081L\j:jdaa<_nJ7$G=G%ZPpJY2L6#oG@E'<0.JGrKq>#U3p7I>?tU1T-X,C.KdYuu.C/hC"c6a6#Jm?RN'lSB(tXd;">1O+)e&\?-K)XB7?f2IOEQc!fZ5'B%+lXKO=B1?`qn1JuV6dbF%8U7iGS#4;Yju7*lZ^+3H83\K1jVY!!71:WJj03Pk?GPFbl`C<MM_-g(7DJ5"?6kRar)V3^uj5PZZZoB%8Cu2,meK(TB:>FUB7`D&C*%I&]QuQp9-f2GV_Of06VKUg5khU,3<u[b]<M<PW7[J?1*REf=`kZ#/*a$:0H/GA8-)r&rF?Ij92&e+%]b%nlY3H3B-KD"V#7"^Xq$u0J'#bV[nDL&J(,`FeW(Po8'O1jGitFudP\tL:/+Q#SAWr&m+\;&D""T.0&lkbK9[rCW#]]""0Q8;3%ArM2-M79>P6rS_=]$-[\(]Y^OUk"05TG?#tr/1-_2_MJ-ZSt!cO%RNM?pN,7P4(C'ag[*mr4Df+h9*Af+4>'d"V2M-6Eci'(iLGu%+^>07;D=29U^"SG0+B=1QAJ,n>:OrU2VHlQOd[Lc]7S0o=&9X!-GCK>T`7+'M)nj$NT#VV*Fln)`erQ%$6#AQjohU77h!MCLej8M%E=c3_U@#jOl,F`9,GpmB@7$rkn#8h/25i4%)rFU3YeQ>^2YhPX]iI4%QR/#+]$?m&DT#c\,?>FK*guX"c%j9K:#glj%YkN[`"/6t%!b\?/>/h[)@dm8D<MliE.aqo#31j][o>EfadN\LcIX]X]qIDE4:Dk4"a]%=tENTn>BZKYPd)ACB+ce"8pG`:Ena[Ulo*9pXB<Er2%LZL"Pk(AS];"LnHEaGF^Ilu0=U)cjFYqEsT&;bpk%%$rro:\1]e;s/MGU8[(.XiHq%m>Jk[^T)jGrd"'=?rJ7qX8]40fH[SX`lV5%iUIjV?N,^hX9ccE++_?pE6*6VI%i.@D?4pSY`I:CnL0kli1(Xhfea*gBlh[Fm"%KM+9Bo'=cj$pd^9^hSB#IT(3]M)IY;T@X-`$F%C43ctTV6rRC(BMQ.hbM1HA$1+q=cA2I5g5WaNK^0fpSkP+r1Fah-fWjOC_iAk4qJSXT8st48=qSF!3Mqk!6bP$cnsS9kXRQNm&-t%3LE[CemWW_8=g=AEOXLp&VtTP6.;&/n;/CJB0'?@B^%9npD]:e*5+?u-Ma3m:GVS:$/@r.?(rm<iKu@<K5NIfDA154r.:m/A;Ks$%Qp85*L#]&^.H!Hi"?D:JBA)u4CkfW*[pWDi[<KiVj%lFMUj(@`M&^jJSl$IL:6U@2"2t*WnMjF8(*8d*YN9X9*CBIs,%&KXj&W<e%!K,PDTEjQdN4=i]NoZq\\]6rNElO-T*8j5#5b]%LT9,*u%NnP00Q5h3i#S'4;*OoQ,GejX)F1+V[UCP-1r*4.le&[1OjSdqLEs2f%>V87a1^3]/$M/?uPE6C\M^;%<e>9nV[d*hncoHhRXgmNFlF4WS3i2\m5dhqSLh%WA4^Di'=u]+)29U0aWAW"T9$N<B/O%P"5RV!=%oW[720gc4q*[;mn`*X9$Z;SF<>#<0eO^1pGJAG293iFr-S=Lj03PB"eIqh/e)As%mQ-K5ka%,6&BQ6$l;d/QD,Nl%IOuYGt]L%\+%7OpX4\I,?W$^\(Kbqs.%.3FXK:hnrFs.G:A^P4?9r+Q">jeEqE#Mee*1liCW:()026(<n1KW4':6).t6gt6>_3`o\W!H[CESkW^=%":*F&bUWHeF:P4pH<+^^'1FVI"jS="mQe9QRI[a@joD-@'05<])__>S5EVOmr`kHG>D=NDYL/E+"';B&rPU4]Ej9ta+4B:@8ng.N%NfRZkN^G,5?W(#C2Z=m/IkXb_PMst9[8g`t8`['r>SPunMPU":=T2<6pWWIW_O0hD+<>W]F4T&RgA<,5f(h"6ir2p*c2V/Oi\)>8%/b87!BbefA(kb5W3a!8Q)@JW%\sr_n$T]p\?s<dk7[tc(Wb)Go;K;1UWCL"4;pJaHN='f%Ln,N2)EuiVjdVXZ,Na43L`?bLAOmOq%CuaqioGitl8d>%c)V=k$8%@jY@i-4KRcTPUfB9`R/"_+'FiMQ?d'TZ"Ekm;e;]Q/Xrqmm-6^V1bl.uIt*4VBt&emV)Mh?)2IA@"4%FktB1Bf%jW]f/8MclkV74'I(]fp+sHATY[02<dVSom_6I8s*oK"!lJBgAQ^mV=-IMlFgo7Z!S9]Zgf=*LDg/`L?Z`7Z_i]Ga*9<[%Ehp+89S%Y'(]t(F*M-*4FRtcLQspA@\pl$k9Tr8W`;K8IXY,pZ?E&<M/9PmZ]ool]Q>C8+bgr2[Tc6Y_5Jg'9q"Q&D;(S]EN6a"7%2oUsMR!u5,>`Y^r_"=_3`;5N@T*=>N=)sph-%hWC>^@^\&PJRt4Sj7/A"fp.5%MRVT>E60_b>0=(W&j?('Pk+fj'l1jHRuF>62$q%[g^iB7Ye<8nd2aikK<5k6\^GP[0*g+'7W"l'_="b2?7&,4VIK5:7aF0$#r+@nro30loP<R5f1D"^U(YB@+Z$R-n`Q#6bD]NJa-c5%Y+Zl!&=tO8A:WcS#"hn[Q3p;$$M!3oHZ3k\?0N$n!H7r3a]t3nAVI"d89#Ud1/_66`SJ3/FnW8I/HSLi9ol,1W=?[NLAZd[S%^X^%iIOs_o*n@RYmfr=UMGSiL4s%>;j?ak2T&Jc=;IcQAA]5:WlH`sB_;dR@s^4U.NT>MNVa0Y'Ptrf5f:'t:*inN\>1qfegEe`MGXid%'TSekaR@YidpqQ/*:sYfMau>4Ve.N6jC4\7*&R!5)n=MQ13@KBFIm#WVJ;)0/KN!?YaeGOSY1J?6E+L(1oH_ui(YB5acm.c)EUH^%V(M]$Gb',r2([L9G`I;&SqcFA#TNGP=^U@eW6475Q.a`@g5pWsb'%*+m"os\jm;=\MS/\+[SMcg[BRf,EZ/TCI9_G^qP`Wu9k'6Y%'6G99[;.8]`Eh%&?P;B"YFm871]LE+=ZBJ8DUJiD_'3'#+fXX'0aorZ3#7nd%3j"P0VSZQIDD&k-DrV-GAY>$#'@%5VGKc\[k-0a%8<p%,4c?"_kbft3oN@F.&i4bshdL(@3pQ"8rl.4s4e(Ep'N%t1pF3.mR3>]epQlX'D,eal18_"+jU9.AB<C,Jkr70LGWhFi1b4>C%RI!B&'[_-qC$KlO/u#4/N#I@+")<gFiQ%)N@Kt)].0M7IIq\%-Oi\;u,GUbRWBC=gZ(<<rac_[\F<':8pC/iq2'uB5Q&Pe9-Ii#i%f!0SXB,[6WM&h_`mArMGg`Z4ccXt@m2KYg%K#;qTR7T>TJHd/">um)4=C"s3;^VUG3./MOB.*,_?UsY9]6=c:2$6Cm+n_dN\W__*%s"ID4(Aogue?UR<KMY/"'Oa`bX"E:NDh3oY$EuEE>&Q!7pp&Ba8'BjWEmWcDF[IG&pEW,OYbV*LX,*>:k'Sp6N7A>fUE41m0Ys]Z%UAC7qZ-+ZiAN@i*dCDq54imaP8kl7@mT;PC4?tU,hG,WnA=/0p$'#?D>R9,G_u$<qg%\j974.3=D*O+Wd(\SP=`:SnX[mk'&H6Ya%4'MqY6+R+3@`9HW&\Z=9BS3+YrEl'_H'KcCpeS3DgCkQfZ/A%+TkUbH372,or@0T-6?)L,@#_.&=)5?N->6$b$6\q?]'!/*#p/&U%.jQO$ISKa+Ki+*G10D,K#V6doIb.!rgYRXWU^D$XR%F=_^=/+(elX2b,E/m"M!GA#PC1aDpfpXd+^WPu/n82K!@j'e#tRn2Z]-is%1;9r@H<+JnB-CY0:S'S1)420P-Gh)(,u*QTR[!9&M2\^T[V5bGr/\H*WS]%Po"@spA>a.D5lp,<<cemhG'29`*[0_KVurZBC7g/s%^DDtR9mH[SP#CY"n`3qkjr5k`lM"[)%'+r[n)^73oGB#Alr"[qSEB)sVLOj!Y32Wb*Uktq"P5_Y7[LE*kd!&]FjRX&F6+J_lc9o&%HA:tAB>kF`7bF;@m]Z(H^NHu0D3(o?X$uC6W#LTcM0J\`$bS:Of2jYS9/5_s8V!,U1/kudCQ9W=NJ=-%CM:ORV(_*Ba,>&g=`&[e%UMZ28lcd$5@&a@=rV4#;OC1L.ZG]<nfq4<KaiN3Erd?^h%N=R=#T0pj)`I9H.uGeSAk&aDLt)jaKZ5RH=2&s([%U%*1Sa#3S.@Y"%C[;B81U.?O7rN5$<,RiD%E@]%.`e5cC(S`uIhPZ*>fnH\AXWm/:Tr4$@^?CDe^^KjM$N']*SRM\qqsO5_:WlgDGQo9Fc]C[b$hEF%2?!@'V4,gT=n^mW+NBZud'DJ[7p9u&<@.)1g;."^Wj!M1L15Ktc4./O!UE_%"B+;Ie0To>,ogED'Hm6eL7in9j/%;k^R?\?;:JDr%?XRAcICGYc/TM"D[F_YmbQS?j-/fJk++8j^A_G:=q:'EQ5FBG,f3Ag<f(-&l[9/`nY2G_>JDA%unI6cD$I&;;(fmrp7\7.p"%d1?%:^8E5`/_q9*0iFQqqn'I>cU_d$KoG4eDnFUe0nsl$_ZCoI;+IPI$b=iiESk),%?&lSJ5Eq=gE'`\RPNn7K=bHi7c)"@)c\PJpu-[%cPs-"R.#.Z+'EEC!<X]_$>VP96MWap:86I"&sX1q2%CO)EoZV4LXE'd]sSZ.D?[h?)tJm*Z]LjQBbL$(W9c#U:Qu@q;Kc'HAI%PV%(-j*f?ao+0m(N>D#\ne$?+P`[U(LYShnkcnb56.s67FjT#`_C$phm^H>O@u!DJ6?-.[qYFIpD+?%d-tG6dT*K<7s0[g)OW548M><%NKQn?60L"a0pZWV>^@ao4C)9qlsn.qST6t)p+M1_m`0&aE7k!I7M@oW:6K!<XP31O!mB/]4.Q%I%ihn[k3r?(^Z+#*GdA>bq(IN;%(2poR;6\TI_t21Vqg314qg99F?Y$nK29Y"]kV=0WF0/1m:X$cRCBJOjVEi/FP)K(8^G4:ac9@1WL=QHr=2/-/m('+dX@9<=^ZcKk%6PGmtl)TTMdT:KS[=Io^;9Dg`j[F^-f>"[U7h!U-l*]MjY2^7C``Je$_]5cI&NSWrU&@TcNSA%$;T#f#+K^O*k@@VTQ?2GiQug"W%RNBETbu\>OA$"N<hQ`S52,fqG'$d*p"@6U5;(Vj`Gn_IMj9qkkG5Tm;,c%_p$2oQHo#pT&jXnkeo8m^8nnVgQW+:CkM!(!G\QNg@%[rB*s:roBu_uEI,8F0WubG?X_RFYpDXWRo5bZA3m'bnCiTFfmu.Y=90HmJ[i'?:CrGUdONbA8?$E3rBqG!mNNd0-S']Sg4(XoM"C%"_chs%6.l;4Ko&mQT^T9?a\S*Rt^5DZ.gh87E].WDB(E\)\kf3$*>)@#GPln%YI!>q-STo'-[sqLOS=-n,q]Ch]c]^K:d"u';.m)%@ik#pU@r'#1)[kNDVdVAq(9uWmk;Hllg.!\dR4`H$",Bhlg/n`5gH!p_B:`.YCU)p_/%X_Su2)Q3IbVQmN1&_QQ7XRC)CgB@j/^q%kS$?V[0UK2Q*VSZa1)sMG3NC&=t8kspgSBR=)qKKjjq:knY""r&/*qC$u(U=3%G,bFB*?$QPk4^63=@;U3]!EmC;:rB/p*r-EL:e%4Uf]VFi=\+cd0=A:lue(#LSP1(0`93Qe4:)aQ[c*=6`es^[7Q&>90I21)W@Fo)TX^'$2]b$$7V=^k(>Lic;^]Dl6f;<8mQ[#T2(X%j;VSC('=~>%AI9_PrivateDataEnd