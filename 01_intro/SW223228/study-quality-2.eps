%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.2)
%%For: (kyle Hamilton)
%%CreationDate: 6/4/22
%%BoundingBox: 0 0 644 244
%%HiResBoundingBox: 0 0 643.2000 243.0275
%%CropBox: 0 0 643.2000 243.0275
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.2.1 x197 R agm 5.5 ct 6.4%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 4328 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD62FF7D52A8FD7DFF5252A8FD7CFFA8FFA8FFA8FD79FFA8212121%2221214CFD78FFA822214C224C2177FD78FFA82122212821214CFD78FFA2%282128214C2177FD78FFA82122212221224CFD78FFA84C224C214C2177FD%78FFA82122212221224CFD78FFA822214C22282177FD78FFA82122212221%214CFD78FFA822214C224C2177FD78FFA82122212821214CFD78FFA22821%28214C2177FD78FFA82122212221224CFD78FFA84C224C214C2177FD78FF%A82122212221224CFD78FFA822214C22282177FD78FFA82122212221214C%FD6EFF7DFD09FFA822214C224C2177FD6DFFA82752FD08FFA82122212821%214CFD6EFF7DA8FD08FFA2282128214C2177FD6BFF7777537E777753FD06%FFA82122212221224CFD6BFF4C21222122214CFD06FFA84C224C214C2177%FD6BFF4C222128212221FD06FFA82122212221224CFD6BFF4D2128214C21%4CFD04FFA8A97D22214C22282177FD6BFF28222122212221FFFFFFA8A2FF%A82122212221214CFD6BFF4D214C214C214CFFFFA8A8FFFFA822214C224C%2177FD6BFF28222122212221FFA8A8FFFFFFA82122212821214CFD09FF7D%7DFD60FF4C214C2228214CCBA8FD04FFA2282128214C2177FD09FFA87DFD%60FF28212122212221A2CBFD04FFA82122212221224CFD05FFCBFFFFFFA8%FD56FFA87DFD09FF4D214C224C214CCBFD05FFA84C224C214C2153FD06FF%A24D4C774C774CA8FD52FFA852FD09FF4C222128212221FD06FFA8212221%22212228A8FD05FF7D00212122212177FD5DFF4D2128214C214CFD06FFA8%22214C22282177A8A8FD04FF77222228214C217EFD4FFF774C284C4C4C21%A8FD04FFA8A822222122212221FD06FFA82122212221214CFFA8A2A8FFFF%7D00222122212177FFFFA8A8FD4BFF772128212221227EFFFFCBA2A9A84D%214C214C214CFD06FFA822214C224C2177FFFFFFCBA8FF7722224C214C21%7EFFFF52FD4CFF53212128212221A2A8A2A8FFFFFF28222122212222FD06%FFA82122212821214CFD05FFCB7721282122212177FFA87DA8FFA8FD49FF%7D2128214C222277FD06FF4C214C2228214CFD06FFA2282128214C2177FD%06FF7D21214C2228214C284C4C4C284C7EFD44FFA8CBA8A84C2221222122%21A2FD06FF28212122212221FD06FFA82122212221224CFD06FF7D002221%22212221222122212200A2FD41FFA9CBA8A9A8FFFF7D214C214C22227EFD%06FF4D214C224C214CFD06FFA84C224C214C2177FD06FF7D22214C224C21%4C224C214C222277FFA8FD36FFA8FFA8CBA8CBA8A8A2A9A8FD05FF4CFD04%2122007EFD06FF22212122212121FD06FFA80022FD04214CFD06FF7D0021%21222121212221212122007EFFCBA8FD2AFFA8A9A8A8A8A9A8A8A8A9A8CB%A8CBA8FFA8FD0AFFA8537DFD0477A8FD06FF7E7777777D777DFD06FFA877%537D777753A2FD06FFA2FD04777D7777777DFD0477A8FD5EFFA8FFFFFFCB%FD21FF7D7D7DA8FD06FFA87D7D7DA8FD08FFFD047DA8FD07FF7DA87D7DA8%FD07FFA8A87D7D7DFD07FFA8FD047DA8FD07FFA8FD047DFD08FFFD047DA8%FD07FF7DA87D7D7DFD07FFA8FD047DFD07FF7DA8FD047DA8527D277DFD06%FF7D7D527D27A8FD06FF7D52527D277DFD06FFA87D27525252A8FD06FF52%277D52277DFD06FFA82752525227FD07FF5227527D27A8FD06FFA852527D%5252FD06FFA852277D52277DFD06FF7DF8FD0452FD06FF7D5252527D5252%A8FFA87DFD07FFA8A8FFA8A8FD06FFFD05A87DFD07FF7DA8A8FF7DFD07FF%A8A8A8FFA8A8FD07FFA8A8FFA8A8A8FD07FFA8A8FFA8A8FD07FFA8A8A8FF%7DFD07FF7DA8A8FF7DA8FD06FFA8A8A8FFA8A8FD08FFA8A8A8FF7DFD10FF%A8FD6EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.b0f8be9, 2021/12/08-19:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator 26.2 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-06-01T07:44:14+01:00</xmp:CreateDate>
         <xmp:MetadataDate>2022-06-01T07:44:14+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2022-06-01T07:44:14+01:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>100</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAZAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp3VzDa20tzO3CCBGklehNEQcmNBU9BiArwf8A&#xA;Mf8AMv8AKHzgunLF5utbP9H/AFwj61ot3fcmu7SS0GzJFRUExcruGYLXYb5H5XJ3NvgT7noXkX81&#xA;fy612Wz8u6DrP1/UIbYBYxb3kQZYEAZuVwn/ABJyfc5CeCcRZCJYpAWWdZU1uxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpb5m/5RvVv+YO4/wCTTZKH&#xA;MJjzfndm8do9b/5xd/8AJrW//MHc/wDERmNq/oaNR9L7IzVOC7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlvmb/AJRvVv8AmDuP+TTZKHMJjzfndm8d&#xA;o9b/AOcXf/JrW/8AzB3P/ERmNq/oaNR9L7IzVOC7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlvmb/lG9W/5g7j/AJNNkocwmPN+d2bx2j1v/nF3/wAm&#xA;tb/8wdz/AMRGY2r+ho1H0vsjNU4LsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdiqW+Zv8AlG9W/wCYO4/5NNkocwmPN+d2bx2j1v8A5xd/8mtb/wDMHc/8&#xA;RGY2r+ho1H0vsjNU4LsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirDNH8yebZfzAvtC1Czpo8MdxJbXqWF3FGwBtzb/wCmPJJbuzCWZGRQDWPlsDxxVmeKpb5m&#xA;/wCUb1b/AJg7j/k02ShzCY8353ZvHaPW/wDnF3/ya1v/AMwdz/xEZjav6GjUfS+yM1TguxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4H/zlhres6Xp/lttMv7mx&#xA;aWW6EptpnhLBVipy4Fa0rmbo4gk25OnANvnP/HPnb/qYNS/6TJ/+a8zvDj3ByuAdz7G/IC+vb/8A&#xA;KPQbu+uJbq6k+t+pPO7SSNxvZlHJmJJoABmr1IAmacHMKkWT+cdT0+z8vajHdXMcMk9pcLBG7AO5&#xA;9I1CL1br2yuAJIYRG78983bs3rf/ADi7/wCTWt/+YO5/4iMxtX9DRqPpfZGapwXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+d/+cwv+Ob5Y/4zXf8AxGLM7Rcy&#xA;5Wm6vmTNg5b7M/InUzZfkt5ajgj9e/umvI7K2rTk/wBenJZj+zHGPiduw6VYgHVagXkLgZh6yzbU&#xA;9Jjs/Lms3EzC41K4sp/rd4RRnpE1FUb8I1r8CV292JJpBshrB3D8/c3bs3rf/OLv/k1rf/mDuf8A&#xA;iIzG1f0NGo+l9kZqnBdiqVaD5gj1h9SVLSe1OmXslg5n9EiVolVjLE0MkwMZ9SnxUYEFWUEEYqmu&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD6lPcQaddT20fq3EUMjwxUZuTqp&#xA;KrRfiNT4b4qgPKOpanqfljTNQ1SB7bUbq3SS7t5IHtGSRhVlMDyTvHQ9i5xVN8VfO/8AzmF/xzfL&#xA;H/Ga7/4jFmdouZcrTdXzJmwct9of8426bBH+VWjX7M0tzOLpFZ6H0olvZv3cdAKKWBdu5J3NAoGq&#xA;1R9ZDgZz6i9B8zf8o3q3/MHcf8mmyiHMNUeb87s3jtHqX/ONt9HY/mfb3Myt9XW0uPXkUV9NCorI&#xA;wG/FT9o9hudgcx9ULg05x6X2grKyhlIKkVBG4IOalwHin52/nr5i8gearTR9N0+0uoLixjvGkufV&#xA;5h3mljKjg6ilIhmXg04nGy5GLCJC3nNt/wA5Yea7WMxWugaTBE0kkzJEkyKZJnaWVyFkHxPI7Ox7&#xA;sSTvl/5KPeWz8sO99O+UtXn1ryro2sTosc+pWNteSxx14K88KyMq1JNAW2rmvnGpEOLIUSE1yLF2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8QecPzT/ADHtfNut21v5l1GK3gv7qOGJ&#xA;LiQKqJMyqqgHYADNvDDDhGwdhHHGhsjPy4/NTz5cefdAg1TzNevpsl9Ct4lxct6RiLjn6nI8eNOt&#xA;cGXDHhNBE8ceE0H15+mru9JXR7QzR/8ALfc8obeh7x7GSXxHFeDfz5q+GubhV3vAv+cs7W/i07y2&#xA;97em6kea6+BY0ihSixf3ajlJv/lyNmboyLLk6bq+cMz3KfbX/OOf/kmvL3/R5/1HT5qdV/eF1+f6&#xA;yzfzN/yjerf8wdx/yabKYcw1x5vzuzeO0et/84u/+TWt/wDmDuf+IjMbV/Q0aj6X1iujXWnknRJU&#xA;it+p0yYE29ev7ll+KCvsGQdkrvms4r5uHd83yv8A85Uz3k35h6ebu2+qzJpMKlQ6yowFzcHmjCh4&#xA;70+JVPtmy0f0/FzNP9LxvMpvfZVp5ztbb8kNNg8v61Zp5oi0KyisIReWEcqXQt41HMXhMQCN9sOK&#xA;0BA+KmafLCXEdurrpxPEdnoVt5w8pXM8dvb63p89xKQkcUV1Czux2AVQ5JJ8MrMJdzHhPcm+RYux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuJABJNANyTiqEk1fSY0LyXsCIvVmlQAfSTh4Smihz5n8vnaG&#xA;+iun/wB9Wp+syeH93D6j/hh4CvCVv6YvpzSw0ud1P2Z7oraxfSr8rgf8iceEdStNi28xzms15BZx&#xA;tuYraIySL7CeZuDfP0BjYXZ8E+dVZPOWvKzmRl1G7BkanJiJ33PEKKn2GbrH9I9zsocgmn5SAH8z&#xA;/K9f+rnbf8nBkM30H3IyfSX3tmmda+d/+cwv+Ob5Y/4zXf8AxGLM7Rcy5Wm6vmTNg5b7a/5xz/8A&#xA;JNeXv+jz/qOnzU6r+8Lr8/1lm/mb/lG9W/5g7j/k02Uw5hrjzfndm8do9b/5xd/8mtb/APMHc/8A&#xA;ERmNq/oaNR9L7IzVOC+Sf+ct/wDyY+m/9seH/qKuc2ei+g+9zdN9PxeJZluQ7FWVflU0q/mT5ZaF&#xA;BJKNRtykZbiGPqDblQ0+7K830H3MMn0l922d7eTSmO4sJbXitfWZ4XjJrSi8HL++6DNMQ64h5/pn&#xA;522l3dWMdzpE1laX/D0795VeBS6xTcXdFYArbzqzfyv8B/mwIemYqx/zn5uXyvZQXstjLd2ztKJ3&#xA;iZF9JYreSetGPJi3pcVAHzIxVj2k/m7Bd65Z6VfaXJp/124ltIbuSVXgeSCWa3f0pEXi/KeFUQVD&#xA;EMSQtN1XoOKpJ5t8zDy9YW919Va9kuLhLWK1jdVld3VmCxKamRzw2VR7mihmCrDrL87rKaSza70q&#xA;Sxsb0xBNQlmQwKZoobmjOgYApa3Ad69H+AV3YKvTMVSrzTr36B0K61X6u12bZQwtkYK71IHFNmLN&#xA;/KoBJOwxVgr/AJ5WglJXRbhrEzPCl8JFaMEPLFEZAqsy+pJbSbCpVBz9sVZ8dI8u6gFvmsbS6+sK&#xA;si3DRRuXVgCrciDXbCJHvTZQOt2Pk7RtIu9VvtMtFtLKJppitvEW4qK0UUG56DDxnvXiLzdfzW8m&#xA;tp8epw+UYZbHjayTSRC2keJLiFJHLhFZQUknjiWrfGx7bVeM968Req6M+kX+n2upWcMBSdFkSSJQ&#xA;QCRuA3FTsdugPtgsraNu7lLW1muZASkEbSMBuaICxp92BDzCP89oXgeVdAuXaCB57uJJKvCYn/eq&#xA;6sikKkVWL/ZrtWlWCrP/ACv5gtvMOhWmr26hEuV5GHkHaNq0KORtyXvTbwJG+KrJfJfk6aV5ptC0&#xA;6SWRi8kj2kDMzMalmJSpJOT45d5ZcR73l9n+YfkoXzHRvI8L6hazyRwrHbwwXPNIDcQPEhhWRuaq&#xA;SeFePUcsBnLvXiPe9J8k+cLDzbog1ayQxR+rJE0LMGdSh25cdgWWjUBNK0O9QIsUy1LRNG1RY11O&#xA;wtr5YiTELmFJgpbrx5hqVphEiOSQSOTzTWNZ8n6ZrlxpbeRbG49C7is1niitKSPMYFCqrxr+8H12&#xA;3PD+ViQfgYZLxJd5TxnvZX+XXmvRtc0+5tdOsI9JbS5BFNpaAIYi4LMTGEj4AyiQCqgnjyoK5Em+&#xA;bEm2WSRpIjRyKHjcFXRhUEHYgg4FeQ+afNf5daDr1/ox8mWdzcWKSSGUW1rHG4t7Rb64Cs6U5JA6&#xA;0XryIDcQys0/El3llxnvZD5C1fynf63e2dr5ct9B1rT0/exehFHPxZ2RqFI0+EL6dSDQliBULyIM&#xA;yeZQZEs+yKHnH5h+avKum+ZrHTNU8tQavf3sdvFaXdxHCUDXM0kccbSyo/BFZGZzXblsp3pISI5F&#xA;IkQgvJ2ufl15j1ZdMfyhZaXcyxC4tY7q2tucsUkSTQlAqEEvGXcgN8KqD3+E+JLvKeM97Of8DeSR&#xA;/wBM/pv/AEhwf80Y+JLvK8Z72H+ata8neTtRmKeT7YzWUMd5BeRQ2kPIcZpZDGwBZGjS1anLjyYq&#xA;o61wGcu9eI963/ld9nHKjXOkTQWD3gsvr7Sq0Ss4jkQvwVuD+jIXaM/EKUHKtRFizCT/AAN9Ui9T&#xA;9F/VOb+jy+r+nz9dPU41+Gv1j0+VP2+P7VMVT3FVG6+p8F+tenwr8Pq8acqHpy78a4qlcf8AgvhZ&#xA;en+jeFYP0dx9ClayfV/Qp7+p6fH/ACqd8VTrFUBrH6B9CL9M/VfQ9Qej9c9Ph6tDTj6m3Klem+Ko&#xA;KX/BH1Qer+jPqnJ6c/q/p8vXj9Tr8NfrHpcv8vj+1TFU8xVB6x+hv0bN+mvq/wCjPh+sfXOHoU5D&#xA;jz9T4PtUpXviqBn/AMF/V7v1/wBG/VvUf69z9Dh6voH1PVrtz+r15ct+Fe2KpvB6HoR+hx9DiPS4&#xA;U4cKfDxptSnSmKr8VScf4QrNT9H142/1j+5+zT/ReftT+7r/ALHFUfpn6N/R1t+i/R/Rvpr9T+rc&#xA;PQ9Knwelw+DhTpx2xVEmlDXp3r0piqR2f+B/ST6n+jPS+rn0/R+r8fqvq78eO3pet/seXviqYaR+&#xA;hvqf+4f6v9T9ST/eTh6Xq8z6v938PL1OXLvyrXfFUZiqTj/CH1g0/R/1nlccqejz5cR9a968ePqe&#xA;1OWKorSf0FwuP0R9V4esfrf1T06evxXl6np/t8ONa70piqOxVLpv8O+vF631P1/rX7jn6XP63w/Y&#xA;rv63Dw+KmKtaV/hz17j9E/U/X4Q/Wvqnpc/T4n0PU9Pfjxrwr26YqmWKpJef4J/SNz9d/Rv6S/cf&#xA;W/W9D16cv9G9Tl8f2/7uvfpiqJtP8OfpR/qn1P8ASvpv6npel9Y9L1m9Tlx+Pj6/Ll25174qmWKp&#xA;Vqv+FfrP+5b6j9Z+rvX636PP6tyHqf3m/pcuPLtWmKtp/hb9KRen9R/StZPQ4+j9Y5ejF6nCnx19&#xA;D0uVP2OFdqYqmmKoDVP0DwP6V+q8P3fL616dK+p+6r6n/Fn2f8rpviqBuv8AA31K4+t/ov6j6k31&#xA;r1fq/peryH1j1OXw8+VOdd69cVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1071.000000</stDim:w>
            <stDim:h>619.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.106;PS 2.000;hotconv 1.0.70;makeotf.lib2.5.58329</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1808b015-62f5-4817-819b-3234db9cad7b</stEvt:instanceID>
                  <stEvt:when>2022-06-01T07:44:14+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 26.2 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:1808b015-62f5-4817-819b-3234db9cad7b</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:5bfc3397-6721-4764-a94e-3fa8a4b9711a</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:1808b015-62f5-4817-819b-3234db9cad7b</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -243.027 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 243.027 li
643.2 243.027 li
643.2 0 li
cp
clp
16.7 238.327 mo
16.4 238.327 16.1 238.427 15.9 238.727 cv
15.7 239.027 15.6 239.527 15.6 240.227 cv
15.6 240.827 15.7 241.327 15.9 241.627 cv
16.1 241.927 16.4 242.027 16.7 242.027 cv
17 242.027 17.3 241.927 17.5 241.627 cv
17.7 241.327 17.8 240.927 17.8 240.227 cv
17.8 239.627 17.7 239.127 17.5 238.827 cv
17.3 238.527 17 238.327 16.7 238.327 cv
cp
14.5 240.127 mo
14.5 239.427 14.7 238.827 15 238.327 cv
15.4 237.827 15.9 237.627 16.6 237.627 cv
17.2 237.627 17.7 237.827 18.2 238.327 cv
18.6 238.727 18.8 239.427 18.8 240.327 cv
18.8 241.127 18.6 241.827 18.2 242.327 cv
17.8 242.827 17.3 243.027 16.7 243.027 cv
16.1 243.027 15.6 242.827 15.2 242.327 cv
14.7 241.627 14.5 241.027 14.5 240.127 cv
cp
10.2 242.827 mo
15.7 232.227 li
16.7 232.227 li
11.2 242.827 li
10.2 242.827 li
cp
10.2 233.127 mo
9.9 233.127 9.6 233.227 9.4 233.527 cv
9.2 233.827 9.1 234.327 9.1 235.027 cv
9.1 235.627 9.2 236.127 9.4 236.427 cv
9.6 236.727 9.9 236.827 10.2 236.827 cv
10.5 236.827 10.8 236.727 11 236.427 cv
11.2 236.127 11.3 235.727 11.3 235.027 cv
11.3 234.427 11.2 233.927 11 233.627 cv
10.8 233.227 10.5 233.127 10.2 233.127 cv
cp
8.1 234.827 mo
8.1 234.127 8.3 233.527 8.6 233.027 cv
8.9 232.527 9.5 232.227 10.2 232.227 cv
10.8 232.227 11.3 232.427 11.8 232.927 cv
12.2 233.327 12.4 234.027 12.4 234.927 cv
12.4 235.727 12.2 236.427 11.8 236.927 cv
11.4 237.427 10.9 237.627 10.3 237.627 cv
9.7 237.627 9.2 237.427 8.8 236.927 cv
8.4 236.427 8.1 235.727 8.1 234.827 cv
cp
1.3 237.527 mo
1.3 239.127 1.5 240.227 1.9 240.827 cv
2.3 241.327 2.8 241.627 3.3 241.627 cv
3.8 241.627 4.3 241.327 4.7 240.827 cv
5.1 240.327 5.3 239.227 5.3 237.527 cv
5.3 235.927 5.1 234.827 4.7 234.227 cv
4.3 233.627 3.8 233.427 3.3 233.427 cv
2.7 233.427 2.3 233.627 1.9 234.127 cv
1.5 234.727 1.3 235.827 1.3 237.527 cv
cp
0 237.527 mo
0 236.327 .0999985 235.427 .400002 234.627 cv
.600002 233.927 1 233.327 1.5 232.927 cv
2 232.527 2.6 232.327 3.3 232.327 cv
3.8 232.327 4.3 232.427 4.7 232.627 cv
5.1 232.827 5.4 233.127 5.7 233.527 cv
6 233.927 6.2 234.427 6.3 235.027 cv
6.5 235.627 6.5 236.427 6.5 237.427 cv
6.5 238.627 6.4 239.527 6.1 240.227 cv
5.9 240.927 5.5 241.527 5 241.927 cv
4.5 242.327 3.9 242.527 3.2 242.527 cv
2.2 242.527 1.5 242.227 .900002 241.527 cv
.400002 240.727 0 239.327 0 237.527 cv
cp
75.1 238.327 mo
74.8 238.327 74.5 238.427 74.3 238.727 cv
74.1 239.027 74 239.527 74 240.227 cv
74 240.827 74.1 241.327 74.3 241.627 cv
74.5 241.927 74.8 242.027 75.1 242.027 cv
75.4 242.027 75.7 241.927 75.9 241.627 cv
76.1 241.327 76.2 240.927 76.2 240.227 cv
76.2 239.627 76.1 239.127 75.9 238.827 cv
75.7 238.527 75.4 238.327 75.1 238.327 cv
cp
73 240.127 mo
73 239.427 73.2 238.827 73.5 238.327 cv
73.9 237.827 74.4 237.627 75.1 237.627 cv
75.7 237.627 76.2 237.827 76.7 238.327 cv
77.1 238.727 77.3 239.427 77.3 240.327 cv
77.3 241.127 77.1 241.827 76.7 242.327 cv
76.3 242.827 75.8 243.027 75.2 243.027 cv
74.6 243.027 74.1 242.827 73.7 242.327 cv
73.2 241.627 73 241.027 73 240.127 cv
cp
68.7 242.827 mo
74.2 232.227 li
75.2 232.227 li
69.7 242.827 li
68.7 242.827 li
cp
68.6 233.127 mo
68.3 233.127 68 233.227 67.8 233.527 cv
67.6 233.827 67.5 234.327 67.5 235.027 cv
67.5 235.627 67.6 236.127 67.8 236.427 cv
68 236.727 68.3 236.827 68.6 236.827 cv
68.9 236.827 69.2 236.727 69.4 236.427 cv
69.6 236.127 69.7 235.727 69.7 235.027 cv
69.7 234.427 69.6 233.927 69.4 233.627 cv
69.2 233.227 68.9 233.127 68.6 233.127 cv
cp
66.5 234.827 mo
66.5 234.127 66.7 233.527 67 233.027 cv
67.3 232.527 67.9 232.227 68.6 232.227 cv
69.2 232.227 69.7 232.427 70.2 232.927 cv
70.6 233.327 70.8 234.027 70.8 234.927 cv
70.8 235.727 70.6 236.427 70.2 236.927 cv
69.8 237.427 69.3 237.627 68.7 237.627 cv
68.1 237.627 67.6 237.427 67.2 236.927 cv
66.8 236.427 66.5 235.727 66.5 234.827 cv
cp
59.8 237.527 mo
59.8 239.127 60 240.227 60.4 240.827 cv
60.8 241.327 61.3 241.627 61.8 241.627 cv
62.3 241.627 62.8 241.327 63.2 240.827 cv
63.6 240.327 63.8 239.227 63.8 237.527 cv
63.8 235.927 63.6 234.827 63.2 234.227 cv
62.8 233.627 62.3 233.427 61.8 233.427 cv
61.2 233.427 60.8 233.627 60.4 234.127 cv
60 234.727 59.8 235.827 59.8 237.527 cv
cp
58.5 237.527 mo
58.5 236.327 58.6 235.427 58.9 234.627 cv
59.1 233.927 59.5 233.327 60 232.927 cv
60.5 232.527 61.1 232.327 61.8 232.327 cv
62.3 232.327 62.8 232.427 63.2 232.627 cv
63.6 232.827 63.9 233.127 64.2 233.527 cv
64.5 233.927 64.7 234.427 64.8 235.027 cv
65 235.627 65 236.427 65 237.427 cv
65 238.627 64.9 239.527 64.6 240.227 cv
64.4 240.927 64 241.527 63.5 241.927 cv
63 242.327 62.4 242.527 61.7 242.527 cv
60.7 242.527 60 242.227 59.4 241.527 cv
58.8 240.727 58.5 239.327 58.5 237.527 cv
cp
55.3 242.427 mo
54.1 242.427 li
54.1 234.627 li
53.8 234.927 53.4 235.227 52.9 235.427 cv
52.4 235.627 52 235.927 51.6 236.027 cv
51.6 234.827 li
52.3 234.527 52.9 234.127 53.4 233.627 cv
53.9 233.127 54.3 232.727 54.5 232.327 cv
55.3 232.327 li
55.3 232.327 55.3 242.427 55.3 242.427 cv
cp
137.6 238.327 mo
137.3 238.327 137 238.427 136.8 238.727 cv
136.6 239.027 136.5 239.527 136.5 240.227 cv
136.5 240.827 136.6 241.327 136.8 241.627 cv
137 241.927 137.3 242.027 137.6 242.027 cv
137.9 242.027 138.2 241.927 138.4 241.627 cv
138.6 241.327 138.7 240.927 138.7 240.227 cv
138.7 239.627 138.6 239.127 138.4 238.827 cv
138.1 238.527 137.9 238.327 137.6 238.327 cv
cp
135.4 240.127 mo
135.4 239.427 135.6 238.827 135.9 238.327 cv
136.3 237.827 136.8 237.627 137.5 237.627 cv
138.1 237.627 138.6 237.827 139.1 238.327 cv
139.5 238.727 139.7 239.427 139.7 240.327 cv
139.7 241.127 139.5 241.827 139.1 242.327 cv
138.7 242.827 138.2 243.027 137.6 243.027 cv
137 243.027 136.5 242.827 136.1 242.327 cv
135.6 241.627 135.4 241.027 135.4 240.127 cv
cp
131.1 242.827 mo
136.6 232.227 li
137.6 232.227 li
132.1 242.827 li
131.1 242.827 li
cp
131.1 233.127 mo
130.8 233.127 130.5 233.227 130.3 233.527 cv
130.1 233.827 130 234.327 130 235.027 cv
130 235.627 130.1 236.127 130.3 236.427 cv
130.5 236.727 130.8 236.827 131.1 236.827 cv
131.4 236.827 131.7 236.727 131.9 236.427 cv
132.1 236.127 132.2 235.727 132.2 235.027 cv
132.2 234.427 132.1 233.927 131.9 233.627 cv
131.7 233.227 131.4 233.127 131.1 233.127 cv
cp
129 234.827 mo
129 234.127 129.2 233.527 129.5 233.027 cv
129.8 232.527 130.4 232.227 131.1 232.227 cv
131.7 232.227 132.2 232.427 132.7 232.927 cv
133.1 233.327 133.3 234.027 133.3 234.927 cv
133.3 235.727 133.1 236.427 132.7 236.927 cv
132.3 237.427 131.8 237.627 131.2 237.627 cv
130.6 237.627 130.1 237.427 129.7 236.927 cv
129.3 236.427 129 235.727 129 234.827 cv
cp
122.2 237.527 mo
122.2 239.127 122.4 240.227 122.8 240.827 cv
123.2 241.327 123.7 241.627 124.2 241.627 cv
124.7 241.627 125.2 241.327 125.6 240.827 cv
126 240.327 126.2 239.227 126.2 237.527 cv
126.2 235.927 126 234.827 125.6 234.227 cv
125.2 233.627 124.7 233.427 124.2 233.427 cv
123.6 233.427 123.2 233.627 122.8 234.127 cv
122.4 234.727 122.2 235.827 122.2 237.527 cv
cp
120.9 237.527 mo
120.9 236.327 121 235.427 121.3 234.627 cv
121.5 233.927 121.9 233.327 122.4 232.927 cv
122.9 232.527 123.5 232.327 124.2 232.327 cv
124.7 232.327 125.2 232.427 125.6 232.627 cv
126 232.827 126.3 233.127 126.6 233.527 cv
126.9 233.927 127.1 234.427 127.2 235.027 cv
127.4 235.627 127.4 236.427 127.4 237.427 cv
127.4 238.627 127.3 239.527 127 240.227 cv
126.8 240.927 126.4 241.527 125.9 241.927 cv
125.4 242.327 124.8 242.527 124.1 242.527 cv
123.1 242.527 122.4 242.227 121.8 241.527 cv
121.3 240.727 120.9 239.327 120.9 237.527 cv
cp
119.6 241.227 mo
119.6 242.427 li
113 242.427 li
113 242.127 113 241.827 113.1 241.527 cv
113.3 241.027 113.5 240.627 113.9 240.227 cv
114.3 239.827 114.8 239.327 115.5 238.727 cv
116.6 237.827 117.3 237.127 117.7 236.627 cv
118.1 236.127 118.3 235.627 118.3 235.127 cv
118.3 234.627 118.1 234.227 117.8 233.927 cv
117.5 233.627 117 233.427 116.4 233.427 cv
115.8 233.427 115.3 233.627 115 233.927 cv
114.7 234.227 114.5 234.727 114.5 235.427 cv
113.2 235.327 li
113.3 234.427 113.6 233.627 114.2 233.127 cv
114.8 232.627 115.5 232.427 116.5 232.427 cv
117.5 232.427 118.2 232.727 118.8 233.227 cv
119.4 233.727 119.6 234.427 119.6 235.227 cv
119.6 235.627 119.5 236.027 119.4 236.427 cv
119.3 236.827 119 237.227 118.6 237.627 cv
118.2 238.027 117.6 238.627 116.7 239.427 cv
116 240.027 115.5 240.427 115.3 240.727 cv
115.1 240.927 114.9 241.127 114.8 241.427 cv
119.6 241.427 li
119.6 241.227 li
cp
200 238.327 mo
199.7 238.327 199.4 238.427 199.2 238.727 cv
199 239.027 198.9 239.527 198.9 240.227 cv
198.9 240.827 199 241.327 199.2 241.627 cv
199.4 241.927 199.7 242.027 200 242.027 cv
200.3 242.027 200.6 241.927 200.8 241.627 cv
201 241.327 201.1 240.927 201.1 240.227 cv
201.1 239.627 201 239.127 200.8 238.827 cv
200.6 238.527 200.3 238.327 200 238.327 cv
cp
197.9 240.127 mo
197.9 239.427 198.1 238.827 198.4 238.327 cv
198.8 237.827 199.3 237.627 200 237.627 cv
200.6 237.627 201.1 237.827 201.6 238.327 cv
202 238.727 202.2 239.427 202.2 240.327 cv
202.2 241.127 202 241.827 201.6 242.327 cv
201.2 242.827 200.7 243.027 200.1 243.027 cv
199.5 243.027 199 242.827 198.6 242.327 cv
198.1 241.627 197.9 241.027 197.9 240.127 cv
cp
193.5 242.827 mo
199 232.227 li
200 232.227 li
194.5 242.827 li
193.5 242.827 li
cp
193.5 233.127 mo
193.2 233.127 192.9 233.227 192.7 233.527 cv
192.5 233.827 192.4 234.327 192.4 235.027 cv
192.4 235.627 192.5 236.127 192.7 236.427 cv
192.9 236.727 193.2 236.827 193.5 236.827 cv
193.8 236.827 194.1 236.727 194.3 236.427 cv
194.5 236.127 194.6 235.727 194.6 235.027 cv
194.6 234.427 194.5 233.927 194.3 233.627 cv
194.1 233.227 193.8 233.127 193.5 233.127 cv
cp
191.4 234.827 mo
191.4 234.127 191.6 233.527 191.9 233.027 cv
192.2 232.527 192.8 232.227 193.5 232.227 cv
194.1 232.227 194.6 232.427 195.1 232.927 cv
195.5 233.327 195.7 234.027 195.7 234.927 cv
195.7 235.727 195.5 236.427 195.1 236.927 cv
194.7 237.427 194.2 237.627 193.6 237.627 cv
193 237.627 192.5 237.427 192.1 236.927 cv
191.7 236.427 191.4 235.727 191.4 234.827 cv
cp
184.6 237.527 mo
184.6 239.127 184.8 240.227 185.2 240.827 cv
185.6 241.327 186.1 241.627 186.6 241.627 cv
187.1 241.627 187.6 241.327 188 240.827 cv
188.4 240.327 188.6 239.227 188.6 237.527 cv
188.6 235.927 188.4 234.827 188 234.227 cv
187.6 233.627 187.1 233.427 186.6 233.427 cv
186 233.427 185.6 233.627 185.2 234.127 cv
184.9 234.727 184.6 235.827 184.6 237.527 cv
cp
183.4 237.527 mo
183.4 236.327 183.5 235.427 183.8 234.627 cv
184 233.927 184.4 233.327 184.9 232.927 cv
185.4 232.527 186 232.327 186.7 232.327 cv
187.2 232.327 187.7 232.427 188.1 232.627 cv
188.5 232.827 188.8 233.127 189.1 233.527 cv
189.4 233.927 189.6 234.427 189.7 235.027 cv
189.9 235.627 189.9 236.427 189.9 237.427 cv
189.9 238.627 189.8 239.527 189.5 240.227 cv
189.3 240.927 188.9 241.527 188.4 241.927 cv
187.9 242.327 187.3 242.527 186.6 242.527 cv
185.6 242.527 184.9 242.227 184.3 241.527 cv
183.7 240.727 183.4 239.327 183.4 237.527 cv
cp
175.6 239.827 mo
176.8 239.627 li
176.9 240.327 177.2 240.827 177.5 241.127 cv
177.8 241.427 178.3 241.627 178.7 241.627 cv
179.3 241.627 179.8 241.427 180.2 241.027 cv
180.6 240.627 180.8 240.127 180.8 239.527 cv
180.8 238.927 180.6 238.527 180.2 238.127 cv
179.8 237.727 179.4 237.527 178.8 237.527 cv
178.6 237.527 178.3 237.527 177.9 237.627 cv
178 236.527 li
178.1 236.527 178.1 236.527 178.2 236.527 cv
178.7 236.527 179.2 236.427 179.6 236.127 cv
180 235.827 180.2 235.427 180.2 234.827 cv
180.2 234.327 180 234.027 179.7 233.727 cv
179.4 233.427 179 233.327 178.5 233.327 cv
178 233.327 177.6 233.527 177.3 233.827 cv
177 234.127 176.8 234.627 176.7 235.227 cv
175.5 235.027 li
175.7 234.227 176 233.527 176.5 233.127 cv
177 232.627 177.7 232.427 178.5 232.427 cv
179 232.427 179.6 232.527 180 232.827 cv
180.5 233.027 180.8 233.427 181.1 233.827 cv
181.4 234.227 181.5 234.627 181.5 235.127 cv
181.5 235.527 181.4 235.927 181.2 236.327 cv
181 236.727 180.6 236.927 180.2 237.127 cv
180.8 237.227 181.3 237.527 181.6 238.027 cv
181.9 238.427 182.1 239.027 182.1 239.627 cv
182.1 240.527 181.8 241.227 181.1 241.827 cv
180.5 242.427 179.7 242.727 178.7 242.727 cv
177.8 242.727 177.1 242.427 176.5 241.927 cv
175.9 241.427 175.7 240.627 175.6 239.827 cv
cp
262.5 238.327 mo
262.2 238.327 261.9 238.427 261.7 238.727 cv
261.5 239.027 261.4 239.527 261.4 240.227 cv
261.4 240.827 261.5 241.327 261.7 241.627 cv
261.9 241.927 262.2 242.027 262.5 242.027 cv
262.8 242.027 263.1 241.927 263.3 241.627 cv
263.5 241.327 263.6 240.927 263.6 240.227 cv
263.6 239.627 263.5 239.127 263.3 238.827 cv
263 238.527 262.8 238.327 262.5 238.327 cv
cp
260.3 240.127 mo
260.3 239.427 260.5 238.827 260.8 238.327 cv
261.2 237.827 261.7 237.627 262.4 237.627 cv
263 237.627 263.5 237.827 264 238.327 cv
264.4 238.727 264.6 239.427 264.6 240.327 cv
264.6 241.127 264.4 241.827 264 242.327 cv
263.6 242.827 263.1 243.027 262.5 243.027 cv
261.9 243.027 261.4 242.827 261 242.327 cv
260.5 241.627 260.3 241.027 260.3 240.127 cv
cp
256 242.827 mo
261.5 232.227 li
262.5 232.227 li
257 242.827 li
256 242.827 li
cp
256 233.127 mo
255.7 233.127 255.4 233.227 255.2 233.527 cv
255 233.827 254.9 234.327 254.9 235.027 cv
254.9 235.627 255 236.127 255.2 236.427 cv
255.4 236.727 255.7 236.827 256 236.827 cv
256.3 236.827 256.6 236.727 256.8 236.427 cv
257 236.127 257.1 235.727 257.1 235.027 cv
257.1 234.427 257 233.927 256.8 233.627 cv
256.5 233.227 256.3 233.127 256 233.127 cv
cp
253.8 234.827 mo
253.8 234.127 254 233.527 254.3 233.027 cv
254.6 232.527 255.2 232.227 255.9 232.227 cv
256.5 232.227 257 232.427 257.5 232.927 cv
257.9 233.327 258.1 234.027 258.1 234.927 cv
258.1 235.727 257.9 236.427 257.5 236.927 cv
257.1 237.427 256.6 237.627 256 237.627 cv
255.4 237.627 254.9 237.427 254.5 236.927 cv
254.1 236.427 253.8 235.727 253.8 234.827 cv
cp
247.1 237.527 mo
247.1 239.127 247.3 240.227 247.7 240.827 cv
248.1 241.327 248.6 241.627 249.1 241.627 cv
249.6 241.627 250.1 241.327 250.5 240.827 cv
250.9 240.327 251.1 239.227 251.1 237.527 cv
251.1 235.927 250.9 234.827 250.5 234.227 cv
250.1 233.627 249.6 233.427 249.1 233.427 cv
248.5 233.427 248.1 233.627 247.7 234.127 cv
247.3 234.727 247.1 235.827 247.1 237.527 cv
cp
245.8 237.527 mo
245.8 236.327 245.9 235.427 246.2 234.627 cv
246.4 233.927 246.8 233.327 247.3 232.927 cv
247.8 232.527 248.4 232.327 249.1 232.327 cv
249.6 232.327 250.1 232.427 250.5 232.627 cv
250.9 232.827 251.2 233.127 251.5 233.527 cv
251.8 233.927 252 234.427 252.1 235.027 cv
252.3 235.627 252.3 236.427 252.3 237.427 cv
252.3 238.627 252.2 239.527 251.9 240.227 cv
251.7 240.927 251.3 241.527 250.8 241.927 cv
250.3 242.327 249.7 242.527 249 242.527 cv
248 242.527 247.3 242.227 246.7 241.527 cv
246.2 240.727 245.8 239.327 245.8 237.527 cv
cp
242 238.927 mo
242 234.427 li
238.9 238.927 li
242 238.927 li
cp
242 242.427 mo
242 240.027 li
237.7 240.027 li
237.7 238.927 li
242.3 232.427 li
243.3 232.427 li
243.3 238.927 li
244.7 238.927 li
244.7 240.027 li
243.2 240.027 li
243.2 242.427 li
242 242.427 li
cp
641.1 238.327 mo
640.8 238.327 640.5 238.427 640.3 238.727 cv
640.1 239.027 640 239.527 640 240.227 cv
640 240.827 640.1 241.327 640.3 241.627 cv
640.5 241.927 640.8 242.027 641.1 242.027 cv
641.4 242.027 641.7 241.927 641.9 241.627 cv
642.1 241.327 642.2 240.927 642.2 240.227 cv
642.2 239.627 642.1 239.127 641.9 238.827 cv
641.6 238.527 641.4 238.327 641.1 238.327 cv
cp
638.9 240.127 mo
638.9 239.427 639.1 238.827 639.4 238.327 cv
639.8 237.827 640.3 237.627 641 237.627 cv
641.6 237.627 642.1 237.827 642.6 238.327 cv
643 238.727 643.2 239.427 643.2 240.327 cv
643.2 241.127 643 241.827 642.6 242.327 cv
642.2 242.827 641.7 243.027 641.1 243.027 cv
640.5 243.027 640 242.827 639.6 242.327 cv
639.1 241.627 638.9 241.027 638.9 240.127 cv
cp
634.6 242.827 mo
640.1 232.227 li
641.1 232.227 li
635.6 242.827 li
634.6 242.827 li
cp
634.6 233.127 mo
634.3 233.127 634 233.227 633.8 233.527 cv
633.6 233.827 633.5 234.327 633.5 235.027 cv
633.5 235.627 633.6 236.127 633.8 236.427 cv
634 236.727 634.3 236.827 634.6 236.827 cv
634.9 236.827 635.2 236.727 635.4 236.427 cv
635.6 236.127 635.7 235.727 635.7 235.027 cv
635.7 234.427 635.6 233.927 635.4 233.627 cv
635.1 233.227 634.9 233.127 634.6 233.127 cv
cp
632.4 234.827 mo
632.4 234.127 632.6 233.527 632.9 233.027 cv
633.3 232.527 633.8 232.227 634.5 232.227 cv
635.1 232.227 635.6 232.427 636.1 232.927 cv
636.5 233.327 636.7 234.027 636.7 234.927 cv
636.7 235.727 636.5 236.427 636.1 236.927 cv
635.7 237.427 635.2 237.627 634.6 237.627 cv
634 237.627 633.5 237.427 633.1 236.927 cv
632.7 236.427 632.4 235.727 632.4 234.827 cv
cp
625.7 237.527 mo
625.7 239.127 625.9 240.227 626.3 240.827 cv
626.7 241.327 627.2 241.627 627.7 241.627 cv
628.3 241.627 628.7 241.327 629.1 240.827 cv
629.5 240.327 629.7 239.227 629.7 237.527 cv
629.7 235.927 629.5 234.827 629.1 234.227 cv
628.7 233.727 628.2 233.427 627.7 233.427 cv
627.1 233.427 626.7 233.627 626.3 234.127 cv
625.9 234.727 625.7 235.827 625.7 237.527 cv
cp
624.4 237.527 mo
624.4 236.327 624.5 235.427 624.8 234.627 cv
625 233.927 625.4 233.327 625.9 232.927 cv
626.4 232.527 627 232.327 627.7 232.327 cv
628.2 232.327 628.7 232.427 629.1 232.627 cv
629.5 232.827 629.8 233.127 630.1 233.527 cv
630.4 233.927 630.6 234.427 630.7 235.027 cv
630.9 235.627 630.9 236.427 630.9 237.427 cv
630.9 238.627 630.8 239.527 630.5 240.227 cv
630.3 240.927 629.9 241.527 629.4 241.927 cv
628.9 242.327 628.3 242.527 627.6 242.527 cv
626.6 242.527 625.9 242.227 625.3 241.527 cv
624.7 240.727 624.4 239.327 624.4 237.527 cv
cp
617.9 237.527 mo
617.9 239.127 618.1 240.227 618.5 240.827 cv
618.9 241.327 619.4 241.627 619.9 241.627 cv
620.5 241.627 620.9 241.327 621.3 240.827 cv
621.7 240.327 621.9 239.227 621.9 237.527 cv
621.9 235.927 621.7 234.827 621.3 234.227 cv
620.9 233.727 620.4 233.427 619.9 233.427 cv
619.3 233.427 618.9 233.627 618.5 234.127 cv
618.1 234.727 617.9 235.827 617.9 237.527 cv
cp
616.6 237.527 mo
616.6 236.327 616.7 235.427 617 234.627 cv
617.2 233.927 617.6 233.327 618.1 232.927 cv
618.6 232.527 619.2 232.327 619.9 232.327 cv
620.4 232.327 620.9 232.427 621.3 232.627 cv
621.7 232.827 622 233.127 622.3 233.527 cv
622.6 233.927 622.8 234.427 622.9 235.027 cv
623.1 235.627 623.1 236.427 623.1 237.427 cv
623.1 238.627 623 239.527 622.7 240.227 cv
622.5 240.927 622.1 241.527 621.6 241.927 cv
621.1 242.327 620.5 242.527 619.8 242.527 cv
618.8 242.527 618.1 242.227 617.5 241.527 cv
616.9 240.727 616.6 239.327 616.6 237.527 cv
cp
613.5 242.427 mo
612.2 242.427 li
612.2 234.627 li
611.9 234.927 611.5 235.227 611 235.427 cv
610.5 235.727 610.1 235.927 609.7 236.027 cv
609.7 234.827 li
610.4 234.527 611 234.127 611.5 233.627 cv
612 233.127 612.4 232.727 612.6 232.327 cv
613.4 232.327 li
613.4 242.427 li
613.5 242.427 li
cp
574.7 238.327 mo
574.4 238.327 574.1 238.427 573.9 238.727 cv
573.7 239.027 573.6 239.527 573.6 240.227 cv
573.6 240.827 573.7 241.327 573.9 241.627 cv
574.1 241.927 574.4 242.027 574.7 242.027 cv
575 242.027 575.3 241.927 575.5 241.627 cv
575.7 241.327 575.8 240.927 575.8 240.227 cv
575.8 239.627 575.7 239.127 575.5 238.827 cv
575.3 238.527 575 238.327 574.7 238.327 cv
cp
572.6 240.127 mo
572.6 239.427 572.8 238.827 573.1 238.327 cv
573.5 237.827 574 237.627 574.7 237.627 cv
575.3 237.627 575.8 237.827 576.3 238.327 cv
576.7 238.727 576.9 239.427 576.9 240.327 cv
576.9 241.127 576.7 241.827 576.3 242.327 cv
575.9 242.827 575.4 243.027 574.8 243.027 cv
574.2 243.027 573.7 242.827 573.3 242.327 cv
572.8 241.627 572.6 241.027 572.6 240.127 cv
cp
568.2 242.827 mo
573.7 232.227 li
574.7 232.227 li
569.2 242.827 li
568.2 242.827 li
cp
568.2 233.127 mo
567.9 233.127 567.6 233.227 567.4 233.527 cv
567.2 233.827 567.1 234.327 567.1 235.027 cv
567.1 235.627 567.2 236.127 567.4 236.427 cv
567.6 236.727 567.9 236.827 568.2 236.827 cv
568.5 236.827 568.8 236.727 569 236.427 cv
569.2 236.127 569.3 235.727 569.3 235.027 cv
569.3 234.427 569.2 233.927 569 233.627 cv
568.8 233.227 568.5 233.127 568.2 233.127 cv
cp
566.1 234.827 mo
566.1 234.127 566.3 233.527 566.6 233.027 cv
567 232.527 567.5 232.227 568.2 232.227 cv
568.8 232.227 569.3 232.427 569.8 232.927 cv
570.2 233.327 570.4 234.027 570.4 234.927 cv
570.4 235.727 570.2 236.427 569.8 236.927 cv
569.4 237.427 568.9 237.627 568.3 237.627 cv
567.7 237.627 567.2 237.427 566.8 236.927 cv
566.4 236.427 566.1 235.727 566.1 234.827 cv
cp
559.3 237.527 mo
559.3 239.127 559.5 240.227 559.9 240.827 cv
560.3 241.327 560.8 241.627 561.3 241.627 cv
561.9 241.627 562.3 241.327 562.7 240.827 cv
563.1 240.327 563.3 239.227 563.3 237.527 cv
563.3 235.927 563.1 234.827 562.7 234.227 cv
562.3 233.727 561.8 233.427 561.3 233.427 cv
560.7 233.427 560.3 233.627 559.9 234.127 cv
559.5 234.727 559.3 235.827 559.3 237.527 cv
cp
558.1 237.527 mo
558.1 236.327 558.2 235.427 558.5 234.627 cv
558.7 233.927 559.1 233.327 559.6 232.927 cv
560.1 232.527 560.7 232.327 561.4 232.327 cv
561.9 232.327 562.4 232.427 562.8 232.627 cv
563.2 232.827 563.5 233.127 563.8 233.527 cv
564.1 233.927 564.3 234.427 564.4 235.027 cv
564.6 235.627 564.6 236.427 564.6 237.427 cv
564.6 238.627 564.5 239.527 564.2 240.227 cv
564 240.927 563.6 241.527 563.1 241.927 cv
562.6 242.327 562 242.527 561.3 242.527 cv
560.3 242.527 559.6 242.227 559 241.527 cv
558.4 240.727 558.1 239.327 558.1 237.527 cv
cp
555.5 235.727 mo
555.5 235.027 555.3 234.427 554.9 234.027 cv
554.5 233.627 554.1 233.427 553.5 233.427 cv
553 233.427 552.5 233.627 552.1 234.127 cv
551.7 234.527 551.5 235.127 551.5 235.827 cv
551.5 236.427 551.7 237.027 552.1 237.427 cv
552.5 237.827 553 238.027 553.5 238.027 cv
554.1 238.027 554.5 237.827 554.9 237.427 cv
555.3 236.927 555.5 236.427 555.5 235.727 cv
cp
550.5 240.127 mo
551.7 240.027 li
551.8 240.627 552 241.027 552.3 241.227 cv
552.6 241.527 552.9 241.627 553.4 241.627 cv
553.8 241.627 554.1 241.527 554.4 241.327 cv
554.7 241.127 554.9 240.927 555.1 240.627 cv
555.3 240.327 555.4 239.927 555.6 239.427 cv
555.8 238.927 555.8 238.427 555.8 237.927 cv
555.8 237.827 555.8 237.827 555.8 237.727 cv
555.6 238.127 555.2 238.427 554.8 238.727 cv
554.4 238.927 553.9 239.127 553.4 239.127 cv
552.6 239.127 551.9 238.827 551.3 238.227 cv
550.7 237.627 550.4 236.827 550.4 235.827 cv
550.4 234.827 550.7 234.027 551.3 233.327 cv
551.9 232.727 552.6 232.427 553.6 232.427 cv
554.3 232.427 554.8 232.627 555.4 232.927 cv
556 233.227 556.4 233.827 556.6 234.427 cv
556.9 235.027 557 236.027 557 237.227 cv
557 238.527 556.9 239.527 556.6 240.327 cv
556.3 241.127 555.9 241.627 555.4 242.027 cv
554.9 242.427 554.2 242.627 553.5 242.627 cv
552.7 242.627 552.1 242.427 551.6 241.927 cv
550.9 241.527 550.6 240.927 550.5 240.127 cv
cp
512.3 238.327 mo
512 238.327 511.7 238.427 511.5 238.727 cv
511.3 239.027 511.2 239.527 511.2 240.227 cv
511.2 240.827 511.3 241.327 511.5 241.627 cv
511.7 241.927 512 242.027 512.3 242.027 cv
512.6 242.027 512.9 241.927 513.1 241.627 cv
513.3 241.327 513.4 240.927 513.4 240.227 cv
513.4 239.627 513.3 239.127 513.1 238.827 cv
512.8 238.527 512.6 238.327 512.3 238.327 cv
cp
510.1 240.127 mo
510.1 239.427 510.3 238.827 510.6 238.327 cv
511 237.827 511.5 237.627 512.2 237.627 cv
512.8 237.627 513.3 237.827 513.8 238.327 cv
514.2 238.727 514.4 239.427 514.4 240.327 cv
514.4 241.127 514.2 241.827 513.8 242.327 cv
513.4 242.827 512.9 243.027 512.3 243.027 cv
511.7 243.027 511.2 242.827 510.8 242.327 cv
510.3 241.627 510.1 241.027 510.1 240.127 cv
cp
505.8 242.827 mo
511.3 232.227 li
512.3 232.227 li
506.8 242.827 li
505.8 242.827 li
cp
505.8 233.127 mo
505.5 233.127 505.2 233.227 505 233.527 cv
504.8 233.827 504.7 234.327 504.7 235.027 cv
504.7 235.627 504.8 236.127 505 236.427 cv
505.2 236.727 505.5 236.827 505.8 236.827 cv
506.1 236.827 506.4 236.727 506.6 236.427 cv
506.8 236.127 506.9 235.727 506.9 235.027 cv
506.9 234.427 506.8 233.927 506.6 233.627 cv
506.3 233.227 506.1 233.127 505.8 233.127 cv
cp
503.6 234.827 mo
503.6 234.127 503.8 233.527 504.1 233.027 cv
504.5 232.527 505 232.227 505.7 232.227 cv
506.3 232.227 506.8 232.427 507.3 232.927 cv
507.7 233.327 507.9 234.027 507.9 234.927 cv
507.9 235.727 507.7 236.427 507.3 236.927 cv
506.9 237.427 506.4 237.627 505.8 237.627 cv
505.2 237.627 504.7 237.427 504.3 236.927 cv
503.9 236.427 503.6 235.727 503.6 234.827 cv
cp
496.9 237.527 mo
496.9 239.127 497.1 240.227 497.5 240.827 cv
497.9 241.327 498.4 241.627 498.9 241.627 cv
499.5 241.627 499.9 241.327 500.3 240.827 cv
500.7 240.327 500.9 239.227 500.9 237.527 cv
500.9 235.927 500.7 234.827 500.3 234.227 cv
499.9 233.727 499.4 233.427 498.9 233.427 cv
498.3 233.427 497.9 233.627 497.5 234.127 cv
497.1 234.727 496.9 235.827 496.9 237.527 cv
cp
495.6 237.527 mo
495.6 236.327 495.7 235.427 496 234.627 cv
496.2 233.927 496.6 233.327 497.1 232.927 cv
497.6 232.527 498.2 232.327 498.9 232.327 cv
499.4 232.327 499.9 232.427 500.3 232.627 cv
500.7 232.827 501 233.127 501.3 233.527 cv
501.6 233.927 501.8 234.427 501.9 235.027 cv
502.1 235.627 502.1 236.427 502.1 237.427 cv
502.1 238.627 502 239.527 501.7 240.227 cv
501.5 240.927 501.1 241.527 500.6 241.927 cv
500.1 242.327 499.5 242.527 498.8 242.527 cv
497.8 242.527 497.1 242.227 496.5 241.527 cv
495.9 240.727 495.6 239.327 495.6 237.527 cv
cp
489.5 234.927 mo
489.5 235.427 489.7 235.827 490 236.127 cv
490.3 236.427 490.7 236.627 491.2 236.627 cv
491.7 236.627 492.1 236.527 492.4 236.227 cv
492.7 235.927 492.9 235.527 492.9 235.127 cv
492.9 234.627 492.7 234.327 492.4 234.027 cv
492.1 233.727 491.7 233.527 491.2 233.527 cv
490.7 233.527 490.3 233.727 490 234.027 cv
489.6 234.127 489.5 234.527 489.5 234.927 cv
cp
489.1 239.527 mo
489.1 239.927 489.2 240.227 489.3 240.527 cv
489.5 240.827 489.7 241.127 490 241.327 cv
490.3 241.527 490.7 241.627 491.1 241.627 cv
491.7 241.627 492.2 241.427 492.6 241.027 cv
493 240.627 493.2 240.127 493.2 239.627 cv
493.2 239.027 493 238.527 492.6 238.127 cv
492.2 237.727 491.7 237.527 491.1 237.527 cv
490.5 237.527 490 237.727 489.7 238.127 cv
489.3 238.527 489.1 238.927 489.1 239.527 cv
cp
489.7 237.027 mo
489.2 236.827 488.8 236.527 488.6 236.227 cv
488.4 235.927 488.2 235.427 488.2 235.027 cv
488.2 234.327 488.5 233.727 489 233.227 cv
489.5 232.727 490.2 232.527 491.1 232.527 cv
492 232.527 492.7 232.827 493.2 233.327 cv
493.7 233.827 494 234.427 494 235.227 cv
494 235.727 493.9 236.127 493.6 236.427 cv
493.4 236.727 493 237.027 492.5 237.227 cv
493.1 237.427 493.6 237.727 493.9 238.227 cv
494.2 238.727 494.4 239.227 494.4 239.827 cv
494.4 240.727 494.1 241.427 493.5 242.027 cv
492.9 242.627 492.1 242.927 491.1 242.927 cv
490.1 242.927 489.3 242.627 488.7 242.027 cv
488.1 241.427 487.8 240.727 487.8 239.827 cv
487.8 239.127 488 238.627 488.3 238.227 cv
488.6 237.427 489.1 237.127 489.7 237.027 cv
cp
449.8 238.327 mo
449.5 238.327 449.2 238.427 449 238.727 cv
448.8 239.027 448.7 239.527 448.7 240.227 cv
448.7 240.827 448.8 241.327 449 241.627 cv
449.2 241.927 449.5 242.027 449.8 242.027 cv
450.1 242.027 450.4 241.927 450.6 241.627 cv
450.8 241.327 450.9 240.927 450.9 240.227 cv
450.9 239.627 450.8 239.127 450.6 238.827 cv
450.4 238.527 450.1 238.327 449.8 238.327 cv
cp
447.7 240.127 mo
447.7 239.427 447.9 238.827 448.2 238.327 cv
448.6 237.827 449.1 237.627 449.8 237.627 cv
450.4 237.627 450.9 237.827 451.4 238.327 cv
451.8 238.727 452 239.427 452 240.327 cv
452 241.127 451.8 241.827 451.4 242.327 cv
451 242.827 450.5 243.027 449.9 243.027 cv
449.3 243.027 448.8 242.827 448.4 242.327 cv
447.9 241.627 447.7 241.027 447.7 240.127 cv
cp
443.3 242.827 mo
448.8 232.227 li
449.8 232.227 li
444.3 242.827 li
443.3 242.827 li
cp
443.3 233.127 mo
443 233.127 442.7 233.227 442.5 233.527 cv
442.3 233.827 442.2 234.327 442.2 235.027 cv
442.2 235.627 442.3 236.127 442.5 236.427 cv
442.7 236.727 443 236.827 443.3 236.827 cv
443.6 236.827 443.9 236.727 444.1 236.427 cv
444.3 236.127 444.4 235.727 444.4 235.027 cv
444.4 234.427 444.3 233.927 444.1 233.627 cv
443.9 233.227 443.6 233.127 443.3 233.127 cv
cp
441.2 234.827 mo
441.2 234.127 441.4 233.527 441.7 233.027 cv
442 232.527 442.6 232.227 443.3 232.227 cv
443.9 232.227 444.4 232.427 444.9 232.927 cv
445.3 233.327 445.5 234.027 445.5 234.927 cv
445.5 235.727 445.3 236.427 444.9 236.927 cv
444.5 237.427 444 237.627 443.4 237.627 cv
442.8 237.627 442.3 237.427 441.9 236.927 cv
441.5 236.427 441.2 235.727 441.2 234.827 cv
cp
434.4 237.527 mo
434.4 239.127 434.6 240.227 435 240.827 cv
435.4 241.327 435.9 241.627 436.4 241.627 cv
436.9 241.627 437.4 241.327 437.8 240.827 cv
438.2 240.327 438.4 239.227 438.4 237.527 cv
438.4 235.927 438.2 234.827 437.8 234.227 cv
437.4 233.627 436.9 233.427 436.4 233.427 cv
435.8 233.427 435.4 233.627 435 234.127 cv
434.6 234.727 434.4 235.827 434.4 237.527 cv
cp
433.2 237.527 mo
433.2 236.327 433.3 235.427 433.6 234.627 cv
433.8 233.927 434.2 233.327 434.7 232.927 cv
435.2 232.527 435.8 232.327 436.5 232.327 cv
437 232.327 437.5 232.427 437.9 232.627 cv
438.3 232.827 438.6 233.127 438.9 233.527 cv
439.2 233.927 439.4 234.427 439.5 235.027 cv
439.7 235.627 439.7 236.427 439.7 237.427 cv
439.7 238.627 439.6 239.527 439.3 240.227 cv
439.1 240.927 438.7 241.527 438.2 241.927 cv
437.7 242.327 437.1 242.527 436.4 242.527 cv
435.4 242.527 434.7 242.227 434.1 241.527 cv
433.5 240.727 433.2 239.327 433.2 237.527 cv
cp
425.5 233.727 mo
425.5 232.527 li
432 232.527 li
432 233.527 li
431.4 234.227 430.7 235.127 430.1 236.227 cv
429.5 237.327 429 238.527 428.6 239.727 cv
428.4 240.527 428.2 241.527 428.1 242.527 cv
426.8 242.527 li
426.8 241.727 427 240.827 427.3 239.627 cv
427.6 238.427 428 237.427 428.6 236.427 cv
429.2 235.427 429.7 234.527 430.4 233.827 cv
425.5 233.827 li
425.5 233.727 li
cp
387.4 238.327 mo
387.1 238.327 386.8 238.427 386.6 238.727 cv
386.4 239.027 386.3 239.527 386.3 240.227 cv
386.3 240.827 386.4 241.327 386.6 241.627 cv
386.8 241.927 387.1 242.027 387.4 242.027 cv
387.7 242.027 388 241.927 388.2 241.627 cv
388.4 241.327 388.5 240.927 388.5 240.227 cv
388.5 239.627 388.4 239.127 388.2 238.827 cv
387.9 238.527 387.7 238.327 387.4 238.327 cv
cp
385.2 240.127 mo
385.2 239.427 385.4 238.827 385.7 238.327 cv
386.1 237.827 386.6 237.627 387.3 237.627 cv
387.9 237.627 388.4 237.827 388.9 238.327 cv
389.3 238.727 389.5 239.427 389.5 240.327 cv
389.5 241.127 389.3 241.827 388.9 242.327 cv
388.5 242.827 388 243.027 387.4 243.027 cv
386.8 243.027 386.3 242.827 385.9 242.327 cv
385.4 241.627 385.2 241.027 385.2 240.127 cv
cp
380.9 242.827 mo
386.4 232.227 li
387.4 232.227 li
381.9 242.827 li
380.9 242.827 li
cp
380.9 233.127 mo
380.6 233.127 380.3 233.227 380.1 233.527 cv
379.9 233.827 379.8 234.327 379.8 235.027 cv
379.8 235.627 379.9 236.127 380.1 236.427 cv
380.3 236.727 380.6 236.827 380.9 236.827 cv
381.2 236.827 381.5 236.727 381.7 236.427 cv
381.9 236.127 382 235.727 382 235.027 cv
382 234.427 381.9 233.927 381.7 233.627 cv
381.4 233.227 381.2 233.127 380.9 233.127 cv
cp
378.7 234.827 mo
378.7 234.127 378.9 233.527 379.2 233.027 cv
379.5 232.527 380.1 232.227 380.8 232.227 cv
381.4 232.227 381.9 232.427 382.4 232.927 cv
382.8 233.327 383 234.027 383 234.927 cv
383 235.727 382.8 236.427 382.4 236.927 cv
382 237.427 381.5 237.627 380.9 237.627 cv
380.3 237.627 379.8 237.427 379.4 236.927 cv
379 236.427 378.7 235.727 378.7 234.827 cv
cp
372 237.527 mo
372 239.127 372.2 240.227 372.6 240.827 cv
373 241.327 373.5 241.627 374 241.627 cv
374.5 241.627 375 241.327 375.4 240.827 cv
375.8 240.327 376 239.227 376 237.527 cv
376 235.927 375.8 234.827 375.4 234.227 cv
375 233.627 374.5 233.427 374 233.427 cv
373.4 233.427 373 233.627 372.6 234.127 cv
372.2 234.727 372 235.827 372 237.527 cv
cp
370.7 237.527 mo
370.7 236.327 370.8 235.427 371.1 234.627 cv
371.3 233.927 371.7 233.327 372.2 232.927 cv
372.7 232.527 373.3 232.327 374 232.327 cv
374.5 232.327 375 232.427 375.4 232.627 cv
375.8 232.827 376.1 233.127 376.4 233.527 cv
376.7 233.927 376.9 234.427 377 235.027 cv
377.2 235.627 377.2 236.427 377.2 237.427 cv
377.2 238.627 377.1 239.527 376.8 240.227 cv
376.6 240.927 376.2 241.527 375.7 241.927 cv
375.2 242.327 374.6 242.527 373.9 242.527 cv
372.9 242.527 372.2 242.227 371.6 241.527 cv
371.1 240.727 370.7 239.327 370.7 237.527 cv
cp
364.3 239.227 mo
364.3 239.627 364.4 240.027 364.6 240.427 cv
364.8 240.827 365 241.127 365.4 241.327 cv
365.7 241.527 366.1 241.627 366.4 241.627 cv
366.9 241.627 367.4 241.427 367.7 241.027 cv
368 240.627 368.3 240.027 368.3 239.327 cv
368.3 238.627 368.1 238.127 367.7 237.727 cv
367.3 237.327 366.9 237.127 366.3 237.127 cv
365.7 237.127 365.3 237.327 364.9 237.727 cv
364.5 238.027 364.3 238.527 364.3 239.227 cv
cp
369.3 234.827 mo
368.1 234.927 li
368 234.427 367.8 234.127 367.6 233.827 cv
367.3 233.427 366.9 233.327 366.4 233.327 cv
366 233.327 365.7 233.427 365.4 233.627 cv
365 233.927 364.7 234.327 364.5 234.827 cv
364.3 235.327 364.2 236.127 364.2 237.127 cv
364.5 236.627 364.9 236.327 365.3 236.127 cv
365.7 235.927 366.2 235.827 366.6 235.827 cv
367.4 235.827 368.1 236.127 368.7 236.727 cv
369.3 237.327 369.6 238.127 369.6 239.027 cv
369.6 239.627 369.5 240.227 369.2 240.827 cv
368.9 241.327 368.6 241.827 368.1 242.027 cv
367.6 242.227 367.1 242.427 366.5 242.427 cv
365.5 242.427 364.6 242.027 364 241.327 cv
363.4 240.527 363 239.327 363 237.627 cv
363 235.727 363.4 234.327 364.1 233.427 cv
364.7 232.627 365.6 232.327 366.6 232.327 cv
367.4 232.327 368 232.527 368.5 233.027 cv
369 233.527 369.2 234.127 369.3 234.827 cv
cp
324.9 238.327 mo
324.6 238.327 324.3 238.427 324.1 238.727 cv
323.9 239.027 323.8 239.527 323.8 240.227 cv
323.8 240.827 323.9 241.327 324.1 241.627 cv
324.3 241.927 324.6 242.027 324.9 242.027 cv
325.2 242.027 325.5 241.927 325.7 241.627 cv
325.9 241.327 326 240.927 326 240.227 cv
326 239.627 325.9 239.127 325.7 238.827 cv
325.5 238.527 325.2 238.327 324.9 238.327 cv
cp
322.8 240.127 mo
322.8 239.427 323 238.827 323.3 238.327 cv
323.7 237.827 324.2 237.627 324.9 237.627 cv
325.5 237.627 326 237.827 326.5 238.327 cv
326.9 238.727 327.1 239.427 327.1 240.327 cv
327.1 241.127 326.9 241.827 326.5 242.327 cv
326.1 242.827 325.6 243.027 325 243.027 cv
324.4 243.027 323.9 242.827 323.5 242.327 cv
323 241.627 322.8 241.027 322.8 240.127 cv
cp
318.4 242.827 mo
323.9 232.227 li
324.9 232.227 li
319.4 242.827 li
318.4 242.827 li
cp
318.4 233.127 mo
318.1 233.127 317.8 233.227 317.6 233.527 cv
317.4 233.827 317.3 234.327 317.3 235.027 cv
317.3 235.627 317.4 236.127 317.6 236.427 cv
317.8 236.727 318.1 236.827 318.4 236.827 cv
318.7 236.827 319 236.727 319.2 236.427 cv
319.4 236.127 319.5 235.727 319.5 235.027 cv
319.5 234.427 319.4 233.927 319.2 233.627 cv
319 233.227 318.7 233.127 318.4 233.127 cv
cp
316.3 234.827 mo
316.3 234.127 316.5 233.527 316.8 233.027 cv
317.1 232.527 317.7 232.227 318.4 232.227 cv
319 232.227 319.5 232.427 320 232.927 cv
320.4 233.327 320.6 234.027 320.6 234.927 cv
320.6 235.727 320.4 236.427 320 236.927 cv
319.6 237.427 319.1 237.627 318.5 237.627 cv
317.9 237.627 317.4 237.427 317 236.927 cv
316.6 236.427 316.3 235.727 316.3 234.827 cv
cp
309.5 237.527 mo
309.5 239.127 309.7 240.227 310.1 240.827 cv
310.5 241.327 311 241.627 311.5 241.627 cv
312 241.627 312.5 241.327 312.9 240.827 cv
313.3 240.327 313.5 239.227 313.5 237.527 cv
313.5 235.927 313.3 234.827 312.9 234.227 cv
312.5 233.627 312 233.427 311.5 233.427 cv
310.9 233.427 310.5 233.627 310.1 234.127 cv
309.8 234.727 309.5 235.827 309.5 237.527 cv
cp
308.3 237.527 mo
308.3 236.327 308.4 235.427 308.7 234.627 cv
308.9 233.927 309.3 233.327 309.8 232.927 cv
310.3 232.527 310.9 232.327 311.6 232.327 cv
312.1 232.327 312.6 232.427 313 232.627 cv
313.4 232.827 313.7 233.127 314 233.527 cv
314.3 233.927 314.5 234.427 314.6 235.027 cv
314.8 235.627 314.8 236.427 314.8 237.427 cv
314.8 238.627 314.7 239.527 314.4 240.227 cv
314.2 240.927 313.8 241.527 313.3 241.927 cv
312.8 242.327 312.2 242.527 311.5 242.527 cv
310.5 242.527 309.8 242.227 309.2 241.527 cv
308.6 240.727 308.3 239.327 308.3 237.527 cv
cp
300.5 239.827 mo
301.8 239.727 li
301.9 240.327 302.1 240.827 302.5 241.127 cv
302.8 241.427 303.3 241.627 303.8 241.627 cv
304.4 241.627 304.9 241.427 305.3 240.927 cv
305.7 240.427 305.9 239.927 305.9 239.127 cv
305.9 238.427 305.7 237.827 305.3 237.427 cv
304.9 237.027 304.4 236.827 303.8 236.827 cv
303.4 236.827 303 236.927 302.7 237.127 cv
302.4 237.327 302.1 237.527 301.9 237.827 cv
300.7 237.627 li
301.7 232.527 li
306.7 232.527 li
306.7 233.727 li
302.7 233.727 li
302.2 236.427 li
302.8 236.027 303.4 235.827 304.1 235.827 cv
305 235.827 305.7 236.127 306.3 236.727 cv
306.9 237.327 307.2 238.127 307.2 239.027 cv
307.2 239.927 306.9 240.727 306.4 241.427 cv
305.8 242.227 304.9 242.627 303.8 242.627 cv
302.9 242.627 302.1 242.327 301.6 241.827 cv
301.1 241.327 300.6 240.627 300.5 239.827 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.749721 .679194 .670497 .901457 cmyk
f
343.918 222.694 mo
378.347 222.694 li
378.347 184.345 li
343.918 184.345 li
343.918 222.694 li
cp
.793973 1 .278019 .337499 cmyk
f
412.775 222.694 mo
447.203 222.694 li
447.203 122.986 li
412.775 122.986 li
412.775 222.694 li
cp
f
481.631 222.694 mo
516.059 222.694 li
516.059 15.6082 li
481.631 15.6082 li
481.631 222.694 li
cp
f
550.487 222.694 mo
584.915 222.694 li
584.915 169.005 li
550.487 169.005 li
550.487 222.694 li
cp
f
584.915 222.694 mo
619.343 222.694 li
619.343 199.684 li
584.915 199.684 li
584.915 222.694 li
cp
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdup 51 /three putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-12 -0 484 496 650 662 674 686 710 722] def/OtherBlues [-210 -198 -121 -109] def/BlueScale 0.0625 def/BlueFuzz 0 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACA07CBB1A390893C6F8FDC203687F0DAB4019999EF2C31C2A8E2B5C18284C0FA933EB49F0D3AAC406EC417696890BDF0C7AE9B4C23364F4C649F84537FC> |-/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09FB3F0AFA0642F9B368E55CBEC860ACEDE00F619B43869FF145573EE19FF4FA261BF5938247732EEA9C997694C21F3826519E5860C319187A2BE7C4798BE40539D59DC5F8C368613E2EF361E84E1BE9A2B721FABB539C13C42CCE1FC716B22FBB381EE1131CEA0A76D50B43FAFEFB6984253871A40EF8DA774460484F> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SEJDTO+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/SEJDTO+MyriadPro-Regular*1 [50{/.notdef}rp /two /three 204{/.notdef}rp]SEJDTO+MyriadPro-Regular nfSEJDTO+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf492.282 10.0439 mo(32)[6.15625 0 ]xsh%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSEJDTO+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-/five <1C60D8A8C9B7BA8F622456C498CD57E93AA5454FC364F93ECEC83D3913500E43A82F14121F71966C4788C2353DA5A8BD5D8CFB5314B38B5B35B8DBF6E6B89948F26F660C16062F6C0ACEFA240305DC4EBB618986C70F22D9BDD5EF2FA4DDB132186E4364560E4CE6F0F405A0BF> |-/seven <1C60D8A8C9B7BA8F425ECEA3CCEB01EB08904B1DBA8C9FADA482DD5BD7B85932F4448BE6EA91291DDC2715CACD23> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTO+MyriadPro-Regular /Encoding getdup 49 /one putdup 53 /five putdup 55 /seven putpop%ADOEndSubsetFont
/SEJDTO+MyriadPro-Regular*1 [49{/.notdef}rp /one /two /three /.notdef /five /.notdef /seven 200{/.notdef}rp]SEJDTO+MyriadPro-Regular nfSEJDTO+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf423.778 117.122 mo(12)[6.15625 0 ]xsh360.596 178.31 mo(5)sh564.776 162.348 mo(7)sh597.365 195.602 mo(3)sh1 lw
2 lc
1 lj
4 ml
[] 0 dsh
true sadj
205.732 221.601 mo
256.408 221.492 li
267.976 221.246 li
276.238 220.857 li
282.848 220.336 li
288.907 219.64 li
294.415 218.794 li
299.924 217.733 li
305.983 216.33 li
313.694 214.275 li
328.567 210.236 li
334.626 208.893 li
340.134 207.918 li
346.193 207.1 li
363.82 204.936 li
368.227 204.035 li
372.082 203.023 li
375.938 201.785 li
380.345 200.105 li
385.302 197.936 li
395.217 193.212 li
401.276 190.491 li
406.234 188.545 li
411.191 186.887 li
417.25 185.146 li
424.411 183.065 li
428.267 181.679 li
431.572 180.213 li
434.326 178.74 li
437.08 177 li
440.385 174.531 li
443.69 171.636 li
446.995 168.338 li
451.402 163.416 li
458.563 154.753 li
464.071 148.343 li
467.376 144.965 li
470.13 142.567 li
472.333 140.983 li
474.537 139.738 li
476.74 138.861 li
478.393 138.459 li
480.045 138.284 li
481.698 138.34 li
483.35 138.625 li
485.003 139.14 li
486.655 139.877 li
488.858 141.193 li
491.062 142.864 li
493.816 145.403 li
497.121 149.001 li
500.977 153.761 li
508.137 163.33 li
514.197 171.174 li
518.052 175.672 li
521.908 179.64 li
525.213 182.58 li
528.518 185.095 li
531.823 187.215 li
535.128 188.991 li
538.984 190.713 li
543.391 192.362 li
551.102 194.897 li
558.814 197.518 li
565.975 200.238 li
581.398 206.241 li
586.355 207.853 li
591.313 209.193 li
595.719 210.149 li
600.677 210.984 li
606.736 211.742 li
618.854 212.928 li
627.117 213.872 li
634.828 214.981 li
.793973 1 .278019 .337499 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SEJDTO+MyriadPro-Regular*1 uf/SEJDTO+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 24.0%%AI8_CreatorVersion: 26.2.1%%For: (kyle Hamilton) ()%%Title: (study-quality-2.eps)%%CreationDate: 6/4/22 9:51 AM%%Canvassize: 16383%AI5_FileFormat 14.0%AI24_DataStream%.((`,!*E4H"29.N:_"q96q!IS!+;D7X,`WO&'GQ-%0Jk_LjOMP,:Slb)<.%rM#[ea!!!!"`XT<cJI[Z6!cDHHYIgW0/f>-QBAOJS%NTaFB^_?dmYKn0:n/]h1Dh.QQ[d'1m^B.fg[W.@WX1<bqD_,m@osJG7ef;`:/&QN-ZK<!^VSDo7j4gHqppOt,AplO2pX(75BSt^5%C1Ha7e$Kq5R\oC0!*lR/!3;+Pb&HZH!V"Vr4hn_"VSARsAJ]0tXD]s4XF(u!iK`6U10jG$>k$:Kb@eDH?+5ep?QJ%p$eGLGq*i2@%lXSK5a/WEH4hKu<DL2A$9ZsSSJ#q@`iVR-8mOQ(C[rM?NQp4X=#&r>pL@<YtJ9YWbDS7V$eS\$7?WTnP+"ZQSgXQOe\N"68DnKhu%nNGH1X#5C2QtpTiFNjT!\[@mZh^u=s2o$BaXUMC:f.4o&q3G[fZg!d9c#/S,S$$+!qm&GU^0gcDBtF;Ol_=X=oc$/fBfL9#>!NJQ%E]^n:4_)n27gl!QpP*#TYjJosl'_Lt!od31^TK]*D-:a@]4TTp3<ltTRf5EZ*6g[ECLr]'4>u34Ab_1oYQ//#l^kkY]?Mq<ZC3@L%*4PNTf5H2KNoSfHa_e\b@@6GFg\Q'#oXC7s5S1A:);\tN1OGI)+PAuLp%..D>6f$3(66cO^1DDeTUnln)q/br<m]+c$@:GYk+4Hg%`d1e\m(ON[F-NLkN!.?;HEL3;PDBiC^atn04r](n9=or3n'+`e,qO=bhiE;S-!/;sDIQ_2iR^._dPIip@SH?YiL6q,!&GY9D`[T!%DC*F%f7-oBm:m$EW-P"Df3<.phO'>JmRG+!b?Zn$Z=19Y]`I''NF.af\D-l_gTW)VpL<$`D52$^C@?JG"g$YL_CB#9cnf<]?1#i^%\!WN\Ai?uIp3T9dZd!)_;#[qnh:0mhS&)0b6\+Bs=c*o=*WXeJ7J*oHNT2tbYdqL8qYnG'N3/bWs7(%"L_c$*%DLqIr5A,pnh8q7%[o\=EHT#g8gY00ldMm3PrGT@d$!E.Z91E9tAae3.H0nXJ;pTO/]!2%NWtt?I>#!e`1WEHGom=jsG?40u'#,O,k*Xr+(Xr?H?+IXc%=EV_>!+&dGbOE1KXS9mAHUP.9O-_%ALZ6n@]'!tEQnO=AW4bDE(0jYPYjA3%]4WqDSRkpZ`@m*YrSD_`g#dX9DA<l%C?b9CD=!j.%qh&Su):*1+a)*qs_=gpEFA$Q7)m?^EDWBE)2f<Ob\9;]i\FNk5Zn8c[]pTVB^U7jbq5p7Kfki[SoV!'+^_QKr@sHP\!aa7I#,ko+%XZ9VS'bkNB)PuUXA\GSM`p^sNGYh00C*aQL>:(f-VWa%KaCpRgA@V%H143m8N:-Mb="KIBGmUP+9E8p'gT\gX05G`>3<X5V^9QsH%?JRJrkjf/>YW[%=>H6.71FR]8[g^TQdVkXE0\a3N[J(UB5g/T!>L2HXh0Lf\q7c%B4A3Jl#7s-<nksu<?]pA7$[uHdRfrm:DI3pa%rUQ$*Kk%^sTOn#trS6k>]j(/hku_^[!]0s8@e4H_glsB0hK[SfFW6u,=>.mh@sO@VRf!'5D1E,"lrYdmEZ>`HMq\4a)6WE=\0W,<%h$-F'Z2sLD!Sf>DQ>a;8DI.d-<Xcau[]WI]eS0pn@DDPQ"kWM)11&N_a"[UNc1/)O%44FLTPe0Q9QaNK"&gO>?;mO.rGBFh;o6pe%Ni!7.XZ5ct^N%G*afAoe]dgO+%T$Yt[_?n/6e]&igA$M4bA=h0!8.-KYjouDE@h1=`\j!VGrDh5UonPmrl0$grd`^3HXj/^g_-MH%T!b\%,sZ.'9a8Ba?U2kbirJMn?)&b0]Pj>;^3,*p5\M]orO)k(Eb@1A"1L\sZKf\8^TLUT1E1riI^[0f\$+,tP%QQkS(%+dB:l;T%=YecYh(=D(^N(97DAd=HFXsrk)Z[n1/GY8OgWNp>R$W0/!;P(8%C=V;!.;C3D:bs!_f=J/GE(H:qRTmk]TG5E4G2X=#&Q#?<_Kmt%^$jO#D``Kq)nYTF\"&fpdrYEkOOmSt[pBfS-+::#@l?Wjm>'=,/fAie)RR2\2HE+[M;*Fd<h#*A%Y3m@G$iXOd,pX!TkAF0O^Zim%k+p-,g1do`F33o'__jrU2(=Z?WH_ag!r/QVm>Yhk"aT=@f-S06jqnN=hqC/@<Nn=W-=Euj\ck[3DfP*[XL8=%ZYNe2H=Io@/Gg3l%[HkM;(kcVmG%[neVSQANAqR3$b_fX"Y$2g7`P>f'Xa]a4X^.T:^Ms64/Aj%W#"Pt;EBBAtpFLrhlrtPnJbILmJDSi#68t4C%Y-g+%+LO(31<c1mH%"dWZSgUlbQampiX4,p\Sb[ap<'^W#4G\6a(BJ[P%QFEF5)%RJT$(J?@hZP]57rZ@G?7kHY.suU!71JWIS0KZEEDK%Jf7:"mFhEKl^*(fFsXmUCPM/A#3-FKDLla7eE2(c[WSVb^rq<3^oVe"MS7rkDHZN<C@;S6)\`H_\#!rgL2@ihj7dH)nNFqL3/2&u%:m9jaNa)6/a/o`]juCr3Y(.=Q!ALk@)8>K^-C_i\I:YC0\TSp%eMI!CYRJS/(9=$>0i3<$R)s<kT#J)1ZJ4$gJ1Cu8?Ih9_*seq%%fZS$q)n]N1\.4%\?'+a1D[gH)]OK!"XF=I5Mf*<3>IQG6^MuA?Jas6,mV@G-)34%W[_Z0s?1<8Xf?46]fB$aM1JjRcB&Geto*f@h%%)_T3^7b22D$p\qj&U!Yf!*n\D$u(`D$.MR(qqlcHdCJj"ku"k=g+<H/fCfhd"^qsIUO!!QG.9UJ@9WPUUe(C98;j.SnBh*r#1,U%cgLPfRcCs@fXLdu@WU8[XicgYY1$L=pTi7IE?r6=WamQ)Z-u=0oNifV(KHXjS`WA,*OutXmmWL@8X8otl,=8]9=3/=Y-MkHU+3.*%.`o!PX)+\*dT$^j8:Ihm8<P5uOsF1R,g#P6..8ua>,%rsflABc%ls)/krUJ]UuPP0&nP.01ej3GH`44kjkQWeGFJ7P.S3!m?-+oS%<K^o`hJ"8"]f/<Am,"LEAD&e==YFre)O@=YH;q25hM8-"1lmr9M3_hQFe=D&R"hG56]tt_2H8@p,Y:lK3EJe<'he#?&nP3!WbdNT%A/_JA(VRp\;.Vg`P-V11-)jBr+$32.<AKf7Buif0<QS!78X;5ZVkmgYQ=uY?h4l:MIHam819..,Q70q2>\2Bge(!gaaAk,-=]R;$%g;m9;-,3!6,g!?Td?eOg<S!)(3gs;b<K^qF;.Vg@%D2'cQ7^5,qpK\W00@FFSKtgC6grL.HgaOk9uHD2pV,+fn%SZ3AQb3r99a!d%0=%ZOWbdN<;'fArO")Z7C$<N2j.'[@?WXD1S]2rgNhU)fQCK52.!?L>6gfBc]_>1eZqb+6[aY6E1t1eJQ=X4J9N.679pSLPdnJ4I%mBloBP\!S<1t.\#9s`;B1JKsU1g-,U=dEW%Fr\PB*63%==`te*0ho].*)3cg=EYZGm=3DaQ=^(T9pYa-**MubQ;,j.dkjf!mkiKe%e,RHC9j-%(s%cSBr;VhQBm(E<NoU.R3fa60juE?)NoS3ds8S^gs8R#+s8P<Ds8Utjs8UEN/BbS<Z7P102NB?3q>W"h3Qn9Kk@pB^%S==,ZE^#Ltb5)'OauRY6-Kf)XR[eSjBppC3j(OmOs)4>W4-#i/kr<^$RcDKb30#6Hs,UZfZ0_L\S*'a@O5p81s8RS;EmD40EmFJ?%EmFL\S9*P$p3R#ef`\sPXn4j5)XZ@\?)Nrl)/c;>>9el,Gnlg^5bH9@GpZ72q7Z5TApr<)Z&b\pHBW]^G@#`H1I[MgTkT[;,X4N!%i-LP1Hfu>OfKZ,S__/IU]WRRLOT9W7OiVi;.@.UJi4W@*Id\+JO^/C)ns=dj>jPZtL48Hapc/jTci%L2@C_YPr8m]H1CQK&r8kr-%Y`C+1^\jo&\bPi7r17uW/BuM_0+@k-RNtIZ+qOVg^Td'`Xms9&)'luh-H1<8mBgg?IH,LIj;GDl2aFAHVf)=DjZ-&WYj7RMaDTUJ%!%fNUe!+'(T&G#3ch?\8?WZ'8qSkJ.[4rW8X>seaXmsE5qm"lUEgseG]#CI3?U6bjg`#kqbG"clB-,@9Y]#MF!;sBC1aQ2L:1Mra%.-57S!5*9$G9$Q.IbcP6nMBuRCuRsB4bgrELOBiNEr>C^`cUPNQ)3A!ansZhB5Ds2fW_rHd;tj<aYS=RokhULf0b)@H67VQ\_0P/%m+hO6Ar`TgMEW"M1ZVs^L83Bm+.D"2a,b/uBSL+iNa_[X)3Q*!)OF>Km5g5F%GN2Hp\fPI<u\39a9pX8>N9k6Ft!#6BW$u)h\u1"%MTmuZ(nO;s^/n.^$cb(eqp]IFF1iX7>]X"!>R-AD)YPc//Bhs@aTd8UNo/:9hX]uI1Rm/(ODYN>T&Vi=mFRnEc7Qf9R6.HTVhsIF%^ZSrW_pL$MBq"0SQK)SCT9nAt,o?@nNh3M8I,sA_VJ2JGq:VqVVKAB[4_$"cE>(jgfYVTC#acnj).q!s=jhEn.5Ec]AISa"YDcD5%la-[[;d*Z"b!RK#qfK6iW2+[9rR0K>kQ22<[SOOmYq3.ZctO6Ik&`Y,:oX-3W#*O2DskFe,pJ9M$S?Z17+b?10`pu9`$Y[<<Tj$p%aTiD%0gMCW.@3=Ep#-=2:?2BG?N.e2nS%3>84-GB2"RNaE#$?t?mK/s#7*#R-Kg^NYWGS,)'jqE%'VG7C3kOO#c4oE&&BY[(50<K%8gNCZTR8L+W>60(QGPI'_`GYJK-,G$Z+SOD53=;U/p<oH-Hf&YE:QU2M3lk/]lY=^"m/5\;'a3U)Kq\0":h%>85;brr&ROS@\>t&%.jUu1$-u4cW_]0$:In;A.1Z[/=_O>j3Adu8i>0$i)GJ;l-Nq!!];@W"46jE+1*OYX^s%H<pLN2Vf:^e_Vfa7-QCCL?flE;\_C,EC%/2qh].n&>pc0A'!kJG%n$j9sOB82X7.dagr4JVS.X#+qA::7*VrJmh:Ti9c]YL2s']7Ip9%6k+']Lcf^4sA!'C>r3VCe%dcR$F[.%o91q>HTURN"#i6R=c)r]8C3gjfB@KnlrcZl80E]<Yc_i%#P%qQBQ:5m9)+gM`cR08%3t5XjT.U6G'-qXApN-Q&gLY^"cIX'o'e\W%<(T2(/WcW$_n&/L]q@VFcZgY**j(_:/<o[%RBsIb2*-`Y2]2@HfE!jm\]'C,Q48h54&XGL/>JBP3(R>QDi2D-eHQYT/kh1]%\G^Y%35LM:Lg_3a9Vfk)2*mN/_1!TU)$7O`,ZM)=;T:or::%i<J.7'+)jE-Q>%q:%SX5$5pPk1u\4J\1$BJ?.dpom/6sW&%(\6TD.LEr7%K;`'CUnAEa*Dg>5.Mb*_((OYgEurkQCmIR;-cuNd,iA)mb#`jYUb=bZYJS@'1jJuAU*tCNm'KM3j[>M)'ts9>"KNGB:?fe191Ze&%6Q@b83hVoZcD_uFZGD@[Q&O;7"Jde%U()Q*<BNF#77H/<NnnkF`Dl@O<>LJ-8;.SQl)5"T`\fI,Be\'O,I4bNqSQe/6p_8?1I`>"%q,u]/[=*9*'\L??WKJ2'q2Wa=F9Fq&nNd*B(W6D3*lu0_#i^srnaq.2TV-H9GX9#E:jY(s['[;NpT6FhdHA+tL@q]YlU:BEhogDn%:m->F1_JR7bYCQuQA[O2I8l:h&Ui^VB!q;b-+>XgO^50H\f]Js$B!IUWD5MW@(*Y"4WtQ>>'0Tbp%s0?*jh2p9KZ=OXOA_j2q+eV%LI2_5gsZ>fl8=Vd`A6<m\X4HYFCeB8XRa1q*+THC;6ebD+;-bGUd=A7ZVk%O<e7cW$Z$Z:WZi912OL^=`C1T]4O^4$ic<%j:-2i?%1/-%#F^R_V'Z+u%MdN1qaE]f,c@9i?%<J?ST8foBrHJ32$eCc/7[o\oU\pFuOiFS8i5'\-D@,2'JLJO<\_CO-\/$<iX^#J)T\CQt%dmU[BF?M-C^#FiMU(rIDEND3kb,kP\+p74''S3Wg<Me'R2ZZMSlZ0"o<PjF3H]d(tfb'M!)@CnlOFi-_XT<<l,)gAp,%JuI_L+D<%e#K*]S3"paS[d-?Y=teo\4]Pdqad+"'oGG1Er?As_JXJt9O`tjb`)d>!.oJR#$Puh%@!IB<*FuNC5FL?]TSb8\O[3`[ilKV-mNFh%>P2[VPlmdXbCts;/c8-PUOq%C&nT?i7arM.;$:rjl;/l!)$i)P"Hj<^j=3Ksf'NNU&.K+?!!4W9SnYukkem\u=a@g)-Y.J<O!UTY%Gp$KDnrO"sio(jgiCSu7X4(c'_VB5;1L#$7XV9<s;0RmR1I3K16Mp>D")O6>(:+%X`cIBUENkjLURD<p)@\tPBaE9%e\#._Vr8VY%JrGIPTM-hdc]!\GM+dr$k_2m,LC^92,X1n:Pj/m4\`(Ek@^`K',!l`$/iLNMEB.CRbAqo[4r04KSed<X,qS`-/?#?s6)[\C8>)7>%!a8Q.Yp)Xtf,'8FX#VXU]pP<f-Tp'-j*%=lVg4_!AV)BLioH58E"i-*XOn*NeZe0DFKfr)keNKn$@#!";eSlR9$%F4#&sNO<4%Os%7ORm+2AXioCe0gK,8F2*ACX:(p\dZZN(;@#d!TQ*H#?>L#SRM:;KM[YM9S)YU];`\OM':7!SSI&7]<B+>#CZ[r@%#ci_UO/@n!m;%nVJ5LM+5;&#)np$>sm*FgHmk:H361XRM,`q)%;=PL?Z%naNQp7X=,]io<_C;B761!c7`Aba/'nN4ks,>GpHLLo9#=]N/)/@,nih:%b#Y1p^,Q155oL=H#m`.;ipH+m=@OhHk+mSKp-D\!lm*#\F*oDr3_b$Qi!0.+98s6g?tjQ^[aF<'?q"QK:t"L*n>]05f@hrnO[3Gs%0!@3^A4&$Y+r@c=36m(1PbaY/VGIE<d3caZd1shO'm%VD@K$t'U^Lp(FrJOrR,f*Q'VqF5b/P81YK#)4!uaCsKH2MA?B,SR68=X\%KhUP[L+=T/?qBY4F<V49OX],oQm^UADhiM0oS.QU5mdj'aV#L_JOeq#2]-]Vhi%bJl,"/48ARE:MhL0hO@i3].M7\Jrht['+CJ`O%r4FRFq%P)]6DYJ?YOh"l_o$g8Q??NPTu_XWql5!`%eU6K/,bb.4?AkVo\O:!7&B3'7RlP"n#Z:TFbr)/F'CWYM@^7BKK^2;&I?*;%EFb_e.'u7(,r>W$]<MB6PZ\?N"BGi34<=\Tn1=_rQ7_Vs$!l8g+Fk&P,D>:OFW*id,%%u<N*h<)idH3i2.O9]+,l="R8f,`&k.bi%'jhe&R0I5qN!@DncAo_kJ`HiA"C&h\lW:WTcT.7+"P_``@+JX#">`DQTrG8F+X*WmMbYK[KA6:G9S(gKK@[(pR?8;d$]Wct.b.`4%-k7mfQejg7&daUA2;\am'+@g,g3BGZ]lQcmcA%A=/UWEW(/c7^R<fbd"9QK=n76:3&Be1AkVNS/KG,/><[C57Kp5u]5#/sqAWt&F%UEGC,K-:mJ0*N$W.lejZ(WhXR\KjXPBF>4,[O)[)n<$"m;tVmOP(R$PG?OE#1e)OSONc:2i#_%^d:n[Jloq3pR+T5*NNGS12+&Bt%"?\_1:(ug+qJ7X:E5"jQ-:c*rpeIRQ5QY<4JMFG>LJ`XX1OLEI2@t\Jb7MP'268-q!Q/DU!#];a.:]lD`egD<&1AMQ&9L[bi#%QL%JW:U36\bh,(rDTX).IKAmPq4G5rZXaXA/tX;'"mBPe+q+I_*JXP3H;Df;/;N\>21q)M-1$n$/'\:%(c2RFbk(,X^0tO-tXd^<'(c%B!r%IG[3),!Wf"B(-!Mb<1#MV;;kq:49]`cAI8k<;[S;_V?N!oS-<'<A/8Vt:+R)a*5(d0TY,k,>oX2'aC\7fTa%"U8j+r'dg@_A%J.VUf?:*Ig>/GeJ:P;)e:a.S7"X$.a0l[I0fEaiPq1h;h=>VL9TYM3aZlCOrK&+F=K(f]uTe-.;TSsrs@C1V"KGPmj&.8)C5SukD%HdHJlP!]aT1a+c=PsXuU<ue=C`Q)#3'_b0."u0j23*KW,J4+Tp+Eq;@+O%&JK+5eQ)8qe=AIr0Em,6oLV#sl"NXQ'E_`9Em%EAHg%d$+W*UHff@=tJ/&^sQch5h4PH!JdK-+@LN!"pT[t0ZZdu_I1qq\,jQ%DGE*1A_cA$babcaLiF,HJ8ocp^GsHZC2jEG`8Ws%d>D.a%+;JOH4"-*tO\B#X]cO-RDI(I3DGW##E?Pr*EFGa8iF$cXi@:UR_^.F$L.cY@L-oU4$V-jK(!]3k'J:TiY[!k[XB^WJOE.@q+lU'd%7l]*f"Q;8)oAmuTiPBZjmCEc;`J#3M-"Ka<B-JX'V`Mqn#`FhO#T,sI%*^t;\-\dS8\9$a:5j6)fEH:%`p2Rk<YL*!TgT8`1?`u<%kI;qMq6MD-Jf'*t-G4?V3_eBl$lo!c4)X0U!iJm3"Kl`"$oe@0EEpQB3,V"G9%X_/ArO_1]UTQbJ`A`XK]!%C3)3m?'V(,X8T9<G%+u/"8Nk6kSN_A]'j2-r$E<R'-J;^r\JRe<TJK$<$b[`!a2_eM$i+&#8lB"It7buH`bHDQI`Q^U1N*1O)94u%[!sY8hR+Ej+NW,4Q%P2rVVA''cVZ)#hY'imaLka2d8=!.U=/OJ]Rc5(f8DCB\IOU6/^(`@Y%$OA901a3R@26`5Tqc1D['I,^,B"?i!N\!A-_]k<;I<s\f%!WrZ9E+akhC08^FOY0$;l'T][2(/tp'tKZNgf.AVG356'W!m9GFkUHCJ,p:m,`=3U%@BO@RNrOMBf<%'fVs0FRHm4^g402I!F-oT%#g7jH#"k%Ms"pT[69ZCrl)>X^0"'XtcI!KE0TP0iQNP:YQ3,)9kd6SpESP.ki4*,1#%3<h.)Bm*"q2>&T[UP0p&ZNKDY4)X#&&+p%Q>ql5"kkY<J>\<)]Ko@jIHFU1s5F<_f4c?"B,@tN**OgXUTdotLeT,R'p=jLC`*N?0L3`]5VW4*B;tqni1SWsU;qh)^uNp:fpFaN%,,/5D?="hE*65Gmfr8-m+^+c@m+N<sa4UmIVi!>;ZJfoe30)H=30*kS=?#aY30'aK*60YXmkEu_cm-AH>cWBRU&kFWis#dLj65AL%;7GKoJ0GqgU\ka[V;eN+_h$jXK^9tAL`FHT0>lk181*GKj1%k)EEqikOXQ%G33FlQ*7l^33oW/[is'=#N*(8W^k1LS_*PnWW[bi)%!sT1,0bXZdR[#em!)nW+br`4F6p-^\_!t:HE>lm<&2LAKjAC+QlS'b,;#TQ[i_gBsa.07Oa*$*FHWd]PWa],1U`U<+!g21Xk^KGK%jI?66MLbsp9G/7cnn8`OU*H8dpHU.?e%/"2^!8A]SWsGbUnC,=pdAZpnjGM>3GLkq4e^5YVmgYg"N""_R<2WILo1KgX@1>g-OYX-%;Mp8m4n-leMgk1;k:&]g+Kn?OKnib9qRgK0ODe8BL$pl7n9:((E:KbVIc;OVJ!`m,k>=@pTp;:,Vrt_smt#MW`7+Sp2olRSkN-hX%4?\G#V*Bjc!sCn&$]`Z&H(<sr1-!4&-?6@1/WOel(#N^H(LHa$#^#sG!+1/'XLsQbN??N5:L[l(WA(!&Zu;%q175Zl3nWp6S]U,Q%-h6g7S9.%a&k!iDZFcD@;dojhlBNXo]5E^SRV+@WrBjFNrs1(]#758KN&PiL'D"=#*+W-g+OG]i@phF4;C.nUKag?I8fSC<YKZd,%%:,(BJAeX=$[\\'[NeU<M(3hD%,1]7?m(Ll'nqRK(!%m,Z]d&I&G/Qi!tqg44:[r+)ROpdRb#1qW$qT8X?bWVZ-U5Fm/jUlI?8]"%22?0>@$7!E.0q3U`-=?`aX@Fk0B=W`3=I&fD*1-0%tU;baL.1-`f^cm^=$$`ofC6&9)c:K3I7^h?DReq`)fM)_C'sYT>Uc@c*C-Z%YO%J9*Y-7U$jYiL7YLs8Knq4iQZC<^V/QT(7H$Ee!I:U!0sg@4&QNqeR=H9q9L)p>*X@a8YS36;R3W%f$;WK*S]3AreElh4-O+V\%MhjV#[<>!6JO$GaVk"CX$1\S7E%7PMODc%s/guE!>!;BP^2uXQ:N%uO/HnR*4U'&Y&JXb#&OD#+_JPK]1'f?:?_g4*?VoVr.$bnZ%Ij%@Y=Au<Jp.C$j?t\:^oh_F2"gp(+$nW]JB7@#(R6!*U4(C7dTaW&rj*[*-3FJc*=U$G[_3%3T"_kuJ']<@!UEKl]UP+ZCKhDoH%gM9fa&a?Zi\$5?3`UEn<d0US^'VHfGB$b_j"P4Wg_@CD51Te@+J0>f2l(oB>N55oEQ&k3,pf+S'Prfc%`!Wd`Omu+@jC/<+S`Y/3%Gir?h,>L&;O]kck]fokchZN!c_`DlTI0trG<>pB/(?IY6aW^1p+6\?rT^72TgLn?H12)P[/:+5=dQ%DiC_HVVWI!"'[e7@fSje*;%oOZPBq=DfB:QP/aGR";T-mrY>S3fIe's':t1TY\99L*8VF"lfc08!j,iH178;&2-ecCj*#""-sAASNV4$4CGcDI;#)-NlH(9[.=7%gh4$)2VBsteofe7A5p4j%]$;fp\1J.MhFFec!Y\RM9o^^,=IJ&T06!p*oC5@>;&(V7;rFKc(Fh$f,JY<WtiPAPbs&k%'qbK(jKXQ%g:=H#_'iDG=KnrUL;>"9dn1[:J7m#"LPHX-541j**B7$G&"LHlF^3aC5i--QG17^TK+ZaWhPh/91-hF%'FdbnTLY3uT@*m4\&8WR%+/G[gj]=0P`chOUq,:icqJjeeZWCfr!.nS3@XMmJIu$RPK;-EF6Sq=Zd]ZR_NbFMF#o291OT@kF,r<Y:,LU>RVU@bKn^/QZ<7@;5%LDHd\FD4(.-E!fk^bcM:lqU3hm$B6ZJhK!cG^B.A<;XZpSbDl@4s\%DU@:"ZRD_'jVd6Y^"SikF&VBpJVZH>_%>&t#9P,&hVcdIE%`2-\P7c@]8`:?n8?M;KB$7Z4_8u5FY+s;&=c7I8^rD$+K6F"k+6?.:.982pdhbd];@i]/1O.]MP=)[#qK9'bkO7X!L*pYsJ4J%#k%TpXAa:H6#kkAftpc\C#9M_:IH6R`6GS]P!$Uf=?@lj+h+i55&gAI#,$(_].GM3h<`aFikK:7:#C>i2Q%#Rq=lT4S>*;KtfYa?iA4%=l(*n6s(X()^hKCPXGZ/"4='"oAEcQM8XQUBAu5,d8S:#d)Ud;+3R;R7i"paG*iV_:dio^&gJV3n`YMF_WX-l?[mP8S4G3.1LPt-%\c"qP(7san@/Q+k:YoMi9P]uZ#/+#/dr2Gd=JmKYSZ5V[bV\j^_&2e[6Y77!7Ym1>d.UFNR[>EGK1KMqQqZh>F_De!>%s-<Zk'2#%*bN1"_sE_B0`0r<'ns[fM,a?n;XJh)03nkS5BieSM,"04FY4[PK)A@GEk0QTbgJ'tbEnWNRAF+sLp0a\`%6^6iI=L:B'GES@1"_@%?7AF-,bF#l+GJ7c8.sfO*#S#fc@CQ&kC%XZ?eUsQ$8@/-&8\D9eukIm:+o3ib#;#M?Vqf<[%\h;G#b%BOJ,JW]Lnis"GhBD`XjWL%oFa*Y'd]&R1K5R<)FtO+dX4?>;hQBS#L(3p]L]tf#jkP>7/<4JT])btW+L0$&U#'YX<9SRV<<7=m#OP5ZJ:\@)a9]k045%Y3Z'9!%K[G!K?GL&uW`a0U#ac&c#eP!+YL-i.R$doM*d,;%51eg="g8(7.X3PTP%e&n$\LfpPejIMd=P#6A-UY"0&(m%a_:WqilJ248U(QP%Y](@8d=C!ZYI_;oQ'[b>SB(oOXaW!TH$CUSVr3oM\@n>q&g^Fi@B]No[Wq%0OQmNO6o74u_]p'UeDie<.D.&b:!Sl1cs,A"[l@Zf%96?"C9hnR-[.^l=2l?83*EjXb_OEuX=Yu$`B;^G]%gH&+e7MQH:LWr9;Lmhhr98SUVtV@Z+t<pq;shb,mE8Gqb@deLj#RXj/0ZkX%IqIpV9?cC,B&V&e*FcR$9?]0$FNBD!$fAC7LmWG#m#t3b<Wp?k\5+.HW>)E>8EF(/-Vrt`qn,_.dr*7_6&X4X+A["1k?X8bq'/*6%^0nf)/.:N&]nnmFk0/K9YtNa6Fo6pSFW/H3m#3c7=)N&)m&(Yr'r@@"H;Ri`V+t5ll_6eFVH$re\4Z75RR/_gE"mEt<HJA=7#2^?%-c32U/.=)d_,@V.HY`m>@DeOJ(d57iK/uFU<7h@%&/kj%Y1!XlQX)QFAC-W'D']6lSVM7FY#6^MCK`HM-siVp'K\F>cA<45CJ+Cq%ojkp.DLs>M`m#o?3<R519Sj>C.BF(6Ob91P7W8F5q/L_O-DiC(/qoi;a'ke[gakaAi'=BnK);3/$Z>$&(L2/h'O6Mm1,o^/oXI]5%CVc,:%t_DHSAJVCNXPU*>+CEF,737A):.@91A/G>bj7XuL/t<N,f*O:%NZ%A:MZQ8.X?b78`IcDD/o)=>PrtbMgLR34tVm6-'H2j%P3?oTl%j#[Gc0)k3]/q`<2UlX/Ue?q%fSgP(5PG<G8au<HY1Xqbb32hg+P6q1P8^JFI?i`b"S\S3?lR!K=6,j6/)nXfqG6blffjR%6G&=">+[EA7&5Kl,U-5^CJSMs(0AQe/WPoD]EbcMrp]%d#_!0eWoscpWp&]&fe8sdZY1+K66pDcTSf<P;+1`'JH[6K8/(RtOV3LH%@sFQA5U9;CT(Z.\nec!Pj%R`8B6&Gl#Si&kp+/38<"sfF[*Nk5O:-KAB1^a0+C(gaTbEIujBq,-H$2=Rq1d)R?YBVpKcpEX1a&AY%PaR4iZZO8>R[fs<Ani3F#kE>;n2j%E`!h8aU[Z#E2DNPH<Y:ERPaNkr=*_%S&k0Q8"=--TGGUt\BnY5)q+<r)PO6iQ*a$'Q0JQ?m%iih_?:48!FnJ'Tn4?JOP.Eob.p_6fhZ6CD4AH3rHr*Q!9`D^"K)b#p7fm03]?\AN;7Z/NR[.o;#H4*'=p>qi7.)6l/0CcCPM`DpM%'@t)a&ZZ-FE[Im:(@/h9%Y_>e=;0-Ci$Fu'/n)&iZQ]+l(ABj!+^)naWa!f!Oj$RlD%V]Mj5:HS<5jN]*\6h4\p'UVR[fRgcuq*b%^H>uO'!Kb^PLBV6e(P7taeos/#\Li!72]R)am!s%CA9bAJPj9h3lG5kVU`IVc?iDD,ZGFHl1EP%M^S.k1k4;3.XGgU>?oQi"M-FH%HlS_fVFe`XdqM'0FlVF?ZbBNXVmfbi)%ZW[%QSccqS'a?PGG.O90DU3=`isiYto0(1mMHXStreNW$n/LR[E8hF*aiL90-psHGEq?%M&%`6[#pDX2K2Epj7-(_Jjg2%H3D/Qd&4h2`\[>\r.sldkYX$3YL>H;N%&jj>%>r&FAe,P(FTpubt@87b-r(j?8':u!mN:j0m6rk%_Rf.ldqk6\#brd0&FdE:RahS[5TlXX0J?<p.6kXV@$utq_!X$ZRt3L=@0Ba"J5ckg:7tOu`6?5DGb)k44:Zg:EuLUt?3dF'-WU`p%,\.$]R/[b;!d-XN4[=IXb7$oQdilTe'2Ga[r[.h/r=MiO]7?&$F[&Io$*44YW5K1E,n^8ge&)Va]'`ip=_+E)-lmjf5@CAuE+gUS%__,DO138-nQ\tt^fj*)sQOuK#0u\a7:8FBsG:C@Z`DZpbm<BE*-8GRP'GN3"0i<K)^9kj@%:XNH*^t/n)CWR7jV4t^.!Q6h",OF.%Rc.O`d++dC<=GAuo3'1Q7lj"UksS&)oK(LD_IB(eOa%Is6?DRH!f?2AO+qBfFW(Lf\rinJjH!jeC(,EH(H>eUABGB64!['G:eJmQ%*Gc^tbmNJSZA3E)$m%jFYHlVV*ec7AN=(Fd%:8U-_X*VA;S=%V,P`*sWFt,pUHq<`rRGVg:.=+p;64t6N>Z:5;8b3>^)Wqpk<Z"C%b-09E8/_Z+bus0FX_TPmg:AnU!hFL+)hkKDK_47M1+jS&%O_hU:)T>c'7u`96[%:"$VmAC9+mj>BMG!%\K?RZY3Ujo`BbqG2ol>(%Zb"U$T+L's6_WKV'*W@s]V<@R,Ud6`Y6*K1aoBE=6^ROD97,hV;ep*Hkl)WHm`TO7-HUUJo!%2Kk&MO:Ob[,_6QYqBriq6nLHX/8%Y`G5gL:njZkf4a)]S@csbL,FGa[;8I>0;3E6d>",(oF"qU"D_kn"CN_U"Qi>k&Sla]u`9+Eq5:Rka#`&Vrd]eCQ>$NT9#O"48Cb#%/31hoYIUV]No)+-XH3C:k4gf-3IWP<L0@5kIi=?@30KuW]-#)^a3`mWkXclmd>pNC8$_m;O5H"*F8op&^C3\S,Y+%T8'am^nk]0.%%so.>c?]2AUH!_I28es>j"J/3Ia&nJkf<_Z55macqT)0(m%5\`>ms)!*6h=8IMm<8QJCQ\pk>I)MP;MZ]G+Xl'Lb6`4s\;nQD+*L%(^n;iC+[]lUF/L9Mu3t%+,[`2npf]`)&k#fin%'mQN$3FBY*;mNi)S?d1erHr0eRjiX\]PJ+7==-cI`fboOPIMW37C5CT=$\+,sC%%(R71+o-PKS%nSA.>j_%M;K-Lp;q>#q)F[F$pQ,MpRQBn^FtbT/q2[SpVj>8)t0b_kgRu./r'CmY5dArrmC]+)#hsQ,T$FRa0^c>%NuQco*cdC0>Vu7iG4C'Km,BD3DLR`?UhH2D=cQ_TV'!`!Os2o@U\EdJ55Z>]O/_o>@TeFr)1&TT+rQOf)?)DhRTkrL(n.$1qu9t2%Hg`6sq,`G`.@-\WEplA&L??RrYIWfI\S-`4IqJI5[g`<3H2a)fhaGq_U+$#(MrEj@n8%8HqEKuc)4"OoT-qP6c'&!S*5hfkrl*58%a'P433FXlgQKD:uZM^S%MBZc'VYH/0f4%r5r_Ju[=E:\EpuiTb3L\eMajN"?s,#_/)rJ6<Fj3B7n$SQMHdRgg!$H,`6T;0E3mA8J%CGa#>6r.ZZ9s'*:(#?AHA%"e_&D@JtnVrGGhaGk]A?Xkj=q"&1;nZsZ!:3ImFP<(=,0&AGJ]60:'[907#<l,#%Q#:N(A=8@D+>!c%mQ8[C%.F!FT!ans*[0WtS`W#4U2U\A5R-G'*!M^9-3K_kqF.;rI'M<hg4bF$(Q67![HK`8BGI;`[n(V0QTuf]&7u],95Y#IVN7hd%a:%H)!($BMWu+88STZ.2WLpIlT84c_?j8LQS[M?"D=7T;_e1r&CI\q8'HU$]0ZkQ$3gNdi'?E0Nr/up+PSI(e]bOj!7.uA+`JEnC%Xj]NW?R:s,"s]\YWT/ZMP*(](`4S)ffL^cb$ZYG)cB<b+K0Vj@JXmVn?DhiK///YZ?`=De*Rtl],)?HCG?Une>,QMsMAn"CM'Rs+%Vi2L4TRLFYEaT$6Fg,[9116rIZ-u78aXLM./:pK?f`?5]G2l.["UJ'\U0/PNaCYV2nk*lrlD_#/)P])2W0UFZOO\Fu1i'oO,89)L%Led#00(4PLG(RUR%>"dhN1!.G2XpNiM3qCi!JI?JkG@sH[CbE(#_\=,-sLeN.:DoegQ_eX;o%ncmWu7hAd8*W3E/hg`uqC04Q="l%c-@k#jNnY]\;C6$B)q976kSC.I)^j_+4WN<=!O:XfUsV*<Y5n(iFs!e$*%o=ORlVjU37GNksYh--R*TZ?+T59Q-:$bEA=7'na&Mu%G^9H6C=5>7=niSdG^<U_P'GGY:nVp6+XY-("SjG!++bFk!uUq?0Tb$;%n<!JM$&Q#E)TUQ^.LY`nAiQ6j^RQ\Gq$n;/=S%N2(aYa%CaV?!Y)MfsIM,G;D\@g)S]%iWif49o@4p.!'9<6)!=UNpe3AKS.R,'HJH7\e+J.F,F0+=BM5N:nqFE`^`+a@?Hj#JF[%hrea<`"0%%m_:;l6,Wh3/9Aq_M-YJFd3',a]m]Y@])@CSV3=8Y`sg-GWM5gi@5WYdrIII_Y(k\O!=]tG`[/rN0$mM":1q"6QNX[`7$4e&@[94%nau[1iH@e)d3&hbU*H8dkIFWamt";!bFiqu.8]l=@>1k<Aq^Lb'Jde+]2BPp8JK)80OB*qMbZoM;Qn!4Esg!;W<i'`J0aZ,A^L,Q%.3c>/nkSL3d:2kd1$A1..63#14[=H=@:#itMTMOiL_(c1#cRqRKj-]ei#X$B#!!BL0]W[-'$`-a7!)Vl1p(%A6A27g4FjB)G8apZ%/`+`a'ek#r67f_11/dpf2/%?7>neQ\UUH*ZZ%P%JpW7J!,c.Dt'&j,kg2c`EoE[u$o;"T[-rta@>ej`sfd@::_(>N-4rI1Ii>FAa%mBl[F98LPS"LS@nBR;cj;9Y!?,B6ChPpDK4@Ns@:gi997RHJSZ---(eTs>pV"XW9S&_#IQJ_)0-'FY'soLBZPMW'Fa[q&;VYTaWu%H[S1E5J,G%#9ZCN&$/$CUuIr"\9-F*B"oW&Jd"K:g:*!=U<ah"KpD.AJ^o1se=aS*-itKe4'L2(dE2Lp09VSDRrj3>Z$K#R!J?eu%JDl9RW5Vg>(W)6+LNjWXWq)3Q8+idID<_EBKr_!k93^0`JU&:.qLq/HedLgI#Tb_j3\7iFjX!$c8=t!2J6I*%*gKK=6"+73[u]M5%jbZ9AEV,umbc6f,"aMP+^dt#.pdC2s]E][4]JSPo8e7#1(86Ju8IMeSnXg"Cl#k3r^U"H7T4/TY'Jl(2BYfO6iG<&MJ-U_*noF#j%H:$Ymr4i;,#@%eE"s7;XS3[b5%4SXA0XPZ4O]\Rd(Ff\%S1-O<H6ukPnqpt`@4P=U>05V9MI*DK0@>>,fq(GG(sKM$1m:S.)cj7O%V1JIpO\E&\.9/Dl5FY8_.7<(!;E1UJSMkOsSGU9nALXFJYhscGl*M.[2PE__=iBP]/gfAW]dfT:dO^i+,SS9b@##^\o)p@2?$G!0%c5_]3Ps$JhSYd!4#<FJuqG=8E1sm8C?P=glmfqjDen6&4+[=up'b%eijcY^MK#sFiB+b^.DNZg8WA4m0#[S`nONThGe)TA1Rb$n(%(8o249l'Kl"<jQX-jFS?fa+\W20p;Z5@>Vd5%MFBKrOWo#^H$;UM@XU'F-9E!$??S^>?]L>**s^_Qc^TR\O=gFIFGUCG*T#$:5lb%V!pVfBq8W?bQIqOVhd\JEY>.9eHKfKZAKKb@Su]k$rVN;Zl/,:n-"K]mBm>NibM&<rjfhD]NP;,q:)atJ1*q!?#`V=WIg7U>,QLH%Vhne,O<7HWJm6`IJtnD_$]amW#'YN\_0oG#i&F?9i#3Mb"NPt`lZ!`nl#E'maP]7_M8=Io,/JDjL@kpLo!ofS%VQL1G^J#LlCpZs%iC=arUN^F&rea&(!@9/GW`rZ2iQJ`ggMNFBn6La1M8[l<40?sWSJGAPSQ>;$6kL.^P9[;3eZKg!i:0sLZDC04)b.s-*.s81U1F^m%G8b/o\:'$jSVZZ9((PE`7@.E17A!Qs*XaWG#4IL>P'G<j6I9G6=@'qM+a)UTS-GdleUf2k;ECr/3mBLLefI1-iR_e!]@/h.FL))7%TcnoM$n=#l6BV/_Qu5RXMRQk>K\$oK)6hRJ+;k'Hcb_(8:/nsVA7#M6YfC:KRaf3nd:m;egB[:J:%A<3l*N:D3Q(4U#%e*kJ4\[C%D+$LR"sLt*/<eP%3[!:pK[nEOZT'0-FJmcR_"XgW<1mM(/hS"sj)Flje(ClSl*8CbE3,dW)@E4E8;B3ieV$O\BM)!K_^&G*O[:3S%boJ`?M!FJn/5Fg@5p9?*.EbXDfi'/`CuMP5aG/0he,jA"Mjr7r?6(l$("&sL$9EL@1R3aX"_nW4LrsHn/fN^@!nEM\UXes3P#B6K%d!0\"U+f%P1(HcRJQ:e\$A.]da>j?CNtoYpf&63>c\iGcYn0+<K"TRJ'FXJ3OU@YMf%D[pCVUij^I-bYSVHZ2A0e67?Um6lJ^E!K%m&`2)!th00!AR:t=4OH(2>mscD.omhQ)i;>W[W!W7QQ>L[=O%\8>jR3e(PJ3#KXR`#I8>L05&4E,sPRIXn$jSVkm]H7mrJ[IJ>P!%]p?8H./R,&5buj5LtN$@N!'k1;;_GJ.T'0u;hVK>a=:WV;6,HcB6Tg#BrQe_"ecb6f*3Nt(+Jsb)-&0l\l3G,E=kWGOj+afWp"Kc%i!Uk7G'Y-@PRMFQ;'`Z9oa=Od\R#=li,KN5C;I/`lu<WUJB)@6+G98,Fhta\c\(k0]q96PA5ED^,gf@S<)+<*.2Pb?D@<JBTL'M-%k*d$(N^ghR8[l7oPfWb(a`qiP(X@$ZSS"b"=(Or;h5)nW+*iYrLfjli5NJo15=q6o9@-$;,_k&</VE+7%QC7pb]VGZR#)%61iHuG%4"MjbS5R@9BZA6ZaFUro37@21XJ>VGe8`+>,JrC%:j':(JDp7T8EDKQ`1gW&=9_J+(^WF5mAU+H0ong0@f/PSNPOir^4oZB8@BkC%=+Mb.+!mU-^!eNdNm^.^Lb)GMN>dq*28$L),\<+*kg\"3NQVFL#>OY'M.6.T#UJA3$jQtsBQAD@!gigU_*H-R6CM5'8O59!,,3KE%C"R`_(5dY$hk$ga4)O)\PkTD]K6!B6#5".S:rH+A*p(`WN'c6Ml784)o'*8ZC_/0.+[lbDHYCe]oEkf73YeuWB8.'OHHLLGSqK6:%Su)=<8%=T-/bUa+>F\4h7IWW2KZ<3@'tib=WmM*@XJf+)VPKn8,oJIMA7e4`df^!K&caU./0:&!k(7Fd])r`I"@c39:-q?$/0YkQ%"L:QH$3W@%U*pAD(o3[2MD8`i!+Y[=8jHa!5Ui>Brbl78Wn6`On9:7m^KH@e5<`^D3qGDg1Wl(%r4mQ.,S:#K%nnjn$f`9^dA,u>%A@PWE\t!JBN\hQ*3X'Or5YoQtr'R?7RXfVg:%rc+?4@C02q[o+DRkOf7PadW$!<+Enu93HK[65>)B+I7"<n0_HbA8h:!h2D*E!Gl%cefNP4)\h\6#E=mN]6!7)VjoUa9Q[Y=/8Q[aXATh%3]3Ar#R'6J07;hO"#2g/CKX^mKoe83e1@dI^E6f0[1jeQ3(#QVq=KB>;HHj%o93B;JUE2cP_i?8(6(9,Ra\doD5X9,k1-pok@fsumC;"].)^/(Adsl^laX,LbPe*QNA5b;@k2e?0SgI<SERJYcn]/Bh1J0Z]QeKX%o2TBZbpjl^+.O_Voqlu0ocI[dSf@?tS_Ltbo':Eq+@=VCd;GbiE)f2$RCIZXTN5-cLoj`YNt?l(!0CX#C2&6(M1tiV?/69$?Da>;%pH+qtL(IbrF-N!c'E9ZjLNLdkNIl/fLCJt_VZ%FYQ/V[9LrX5RX-6%77PDT;gPu&(,pMjc7hI&7*M*s`b,\+7Qe)4W#VC(L0AFm0%i5QdF_p0C@C&#?d;*P"mP!a4,2nV\U];+^P6f3aYT*OpZ(1XM4nS?!"OX">aiIfDW$],a[0Nc4'n&[[_p-SM87iXdr4(CqMU9YCk%;mN)tDStiPeW'+r#VZ'GFilEGAZu?Bc9B`H!NLF-n&-CqDnbtPr40c_Q@'Lp.At9F#+C-DZOI<sfdaQX+u(pL<=:e<NG+;^pt[+g%e+@&(['t2U,VArQ+<_[6k'$85rtEg7\Jb,-Q6ZifO9^G)2jJR&P79s#D#1jg+8%$)Q=u:hG&Ba1.$k/2r`23OY)n[V[`lk'YR,\g%bTqA*pBU&h%h+>/XAPePZ)(aGD!#4?Zm->1qSEg$665.t)NbOVF3h2oD]fWR?ZbPhJX^\QTg[R;;>>"%_+C"EgJN_$k&_DklDa`_%+m;^OCqUJT$GUrR/(L?C4@c+.\P/YZ+*BT&!\-k/8iKa0BOY#f-rO#h$#Cdg6e6r*^8lF&Ec[j/9^,3R!GVADI.hE1BC#lN]NVZ.%T*&^nhj4):M-VW?aU[h`#SeDt/kg8m;.\rb0Jj)XO,-@P.O,"f%ou=?:5UrPVYDlnfQm>XLHU=SEbnfT%FBS]=cb;Vqp#V<?;h@[%J7Zs9%[*3.='QV\[QLq?Q#l(HY&Ss,3pdl[Kd.CZm"g$'9ra@NZEUD!"O0`_$jhQ*JnUsc:U+b!6M:"/&OeZ"](lmZe7X]mg.s@I%n]76eiC%Gtd?Z.3YE(*N&>GR)&iLT\[;1U>Cj?0$,EMg/L?VM7Ce-A`L)H\&!F"?]Ip%EYka]i'0KuHb=]BoR?8*gt_%m#,MYoj9%$5;j`?b.KFX`CrY&91\o[MuZ25SN>F$;IfWR3^-qdT[GuG,oZ!!jOo,fpdMb3C/LSCN0NS0^O+sS!\50_#'KERX[pNO)("lP&Iuq%0E[KDq"Y\iM:1c*K_t!54Sh<Nr`WjCm@am?_GFF=j@GakSIhN:+Fb"<6^[A]`d)Oa>6F5+7e(&,P2r<K"U7)mdU8CDZN,r.5T#gs%iBO"S!)I>SOeI0'\0q+iZX<GIJH-.\9dHVMqKO[QrRoSM+ARAd')hsahrh-2jOI'jN<Yrf.ufHDqp8oDJNa\NBQscnZ>\_>-V.;7%4rBN2p#@A!-Z+8DQ^`\2;\9Il(_L+ZJsmf;e@qKp3l8iV4-,iFpHKE7`99SL2]7BkNb6A],!'S'M!B)Q8;BIPNU*\KE@oDj4tsiQ%K!JFWhrZ?Q(HRb-je9H.+ht]I]-'uk1b*P)(ns\O$;Z7Z+4><T[t'S`+bQ07+j(&;]b@%#Zo`__h:gmU5'&TCqhnjZG:8Rc,c>;<%k%fDK2RKHAp0>:f'P-4OW5XTts"^g6,W3cep6bOlJ!'_`O,-,V=kB*+aDU\TTbb)i;Kur^h_=c>r:P3U/`!n(*uW/k:e*;1$b:>L%8bQ>dD"k,XZ+BfS-@;/=n^q\AmqHM"6:bI+i:r1rC1b0Q"hqj<M!dY=W-,p;Z.INTm<Xjla4J(e>%hF,F#;-/+Lqp9kg,/3:d>?B%eLW8_8"aT6\G;Ss7j-8/E9f[Om0LYI:oHtDDYS[A/Z+R;gk8H9;R6DlPUr\T%,AL.<3;&BZp)!BXGPrI@]K*7"#'.\X>qb+JQpFI%Y[1#"@Go_XrTb8C2JH9O.3J[NG+EZe9W&]U2%89IO3;j)G(:%#@d9&7`Im1qI\,0S!B>'kRA]HnHaa<>]Vs2r:aI=%`I`d1!l.pC%f)a6dhZTXqI5sP=((&MV]On%)]BbghE`.5V_VQWB2CFe-YVI2h=U(+'jro5CGeC#7mNmW`>ti&>CeM^c3r)"!JMXqrn3Oq/&Z]p*%IthD*8mSs1)f8`8\X07aY9u#X0neIhPRF'b\2G>9C$?&P@RXZ+Q@>q<e\J_Tjf3E,^p4OcSeBfA.i,5a:p`Q@Y5qb1BNk[GC37bg%k@Lk+$X/#qc$\@X(@hWo.1*6*^*Q/uP;K5"D.D^=Aq`Qj=.Pd-`of0pC]X!-d$+`"+QCjPaja/'_?4AIMZ&&jLN?9^,VA,t"E5#]%>KW>U*pM4-B#Z9V-WP1c.=FKJJDh5NQd\4*9/+R2eIW=o^Z"<U-2rPI/^%NWO)AEi.sUe)!Q(r#GRAEZs,75F4dQ1Tdkp9bW3K9K%.0sc:-GX^(c#?E%#dE*\i'k`Tl$tiYE'%4Dotk!XVCSMNhBW)k0C#)*f"XT/Vt(F@2`L1<hGY6BPSQ\"AP"spU]Cr4\tOmBP=g9f%E$HlP_=m7O;PUS3"8-ReBIBr1K8f(j-mUbt>Z:/Y_?AeJWn!oC4AtWf=M.)2Zc.q<ni^bL$p9;\m&%F:PN[5.%P##.DJ7",@*Mr\%XN#-]1cOB]7VG`qM\1"r?&@8>'>qaN\X]mD_BDZ8,f"X,oS49@`B6APW'B]_G5DnpJ,#BQTo;4kr]<1Bg)isE5PEq1"$smgW%9P"%^ni:U*s("9-!J@WO-F_'pP0:N,F%bS9,Z]V+'-B'Tua4Dc&W+h%nDG5+n1,6<g4#P9cH_X-]E3%O9Tu'FQT>OSXTE:@M0ZhT7KJ8%QdGJV%tZ?TD\u-YDfl&`8P"C)=\bnh]cu3.<HoKRLs-+[TOHF@]oDE=(XdFMnFVGRL&hHKi&?jt;VA%o73WN2=>6d+,T6r`]b]"a%Y+C9#--mEb^5.>X&$mmG3RGV?r#,*"mgA1'PUcE.nAphs5=*Dg4KF"=JtcVJAL&1u^+I5NQ]M*/J'Y[&QksW]\egLh,J0sObYb]@%Q?]>(cZeo'r2Q`fJ\UcWUM\0!5uPZ"cT=K-J"9'QG]Ge3:]Xua3Z7T.=<m*g<4Fpk'aoKONG=c6A<o+t<82hoF.rNAZcQW;,4#oT%(_d$E(4_-26$4Ce4h['o&[&:"i)P=lDEJZNa@nm;a[,X6*)_;3([=iVH*4*L<-.9?(1BQ:pXWB8jMQTX!<l)O?de@trEdF0W.dEk%)u)T^*6[mXiirf%P&D?m0e%SE-um1N7>48*+d7"-O;PAdL's9kgp0oZ$A5sqoA4ugdfhEDMm&Bg,4N]3'HKH!n%NW&S2DRp.MNfg%1m#&aMEu`5nj*RB`Zp'D+Yq1<GL(]<QDP5@eb[%@rCmh"MmH0782^FonZPDkP^1QtL3:e<42^LeBt`^*S`-mkTJu+,lYPqZCS7XF%@\iO9.r4Q(3QYoE]<qYHDd=Mbm?<fLT20&nMJX*!8=ssL((TsPJ/Cu(3RK&enWJs<Dq9)t[oB7;"hPPAHQcOHOsM74f2htLIZIf(%8!9VYMjgCh_K_.0l,UR8"/"4lLBh\iTYoF`A?]Ke3G(I<@*8$hb]_r0s#PGFgj_.NJ=reBX@eW)/&%5n!AdOTlm4d%.G,HD-PHKL%g)\nSmpg)am5MEI,E=gJD]U`$Req0)kQAh6Z-bI#qKKJ$1!`2N-b>4*;ZVhB,W1I3^o.=+5a5n&bN-2=FEX+LkQ[+U_BcO#^knb)%M-^k8J>XEum@Jrjj\rh4V"BZ$!+\73nHRiJ8AiQN[_FUN?g>MA(J0c?OmX9"^ZH^Vd+GkCO3"8dh1<XN!/:P-*hEnO&NInTa]^,W%d%7H$5ElPQ7X=Or1dVcGE?7#-FO"j[oE4;=_pAuIZ@dFAbqeXi*AI?g[GY%]<?uIf=YV80c9>1(>fTu/%6m+.s4k$W%PWoCgWbhH%Xo(9spZS`+gDfNF9t.,mQ\+r]F`l&_eWkKBi/a>'DUd8,dNQ.@23]]704.FqHme)T&?iqTN/UO$]^mR1WKcD9>gTNjl=p%?:W=O:%78h"%=(9D5>GVT+52[#fC,6MD<<V@mb\XM($5^t^ON*=OGTmid=Al/>8.a*HcPI3?9Zc06BOKt=dn)cu8bAHrL%9E,MIUcW;ZSRr%aYr1Ip&b^FKKB9V*%dOK0R&Ji`h^%Dn8rY+#*IO#GLA1o_?V)\`K1`@#DnYPj"VXTF/"ti>W>YqIlZWN4M6NKBH!<i\$$#]&HEbB%^^!i9>8\L'6cb5CE.KcH*"P9k+*?DN<euJh5XDX%U<:X&_31e.H[bHuqb.%tB-sBG$quV]>[Z6V0J?6iMbt9T;Sn]HaLlQnBFlrs%5PbY)TY\sR6jiIppj?/[:8F_F-TiV7=ZsmSP#g&,Y(Z#UaP$k_7(/3U$P$Hq:"afe6!6KH,D8UXleC?1Z5TAt7Y1hEL`>B`;Ii`7%8\[.o!S:nN#-U+&U;L,PZP[Ata!_r/nJe#[>#qPgkf0i'"60f9\Z>9R*T#r&j'0.JlG#Wt:ZgklbofKnK?q(sRk;f7eLgXZ$H8c*%&T;GF8iDPr*("YW]1]rOprK:"hEA"=US:MS.FWLTF5e%nYP&B0WOEurdEOG.;[6[E+>@BQ2&W5K0^0=nq@]Vt\nJYA@`kYoVIP$`%ILRLZ"IQu9qA>]rQg`=LYPY^pkpbTY.dF4E=RBoV9a6N]R^$i9;hfCj:tL>T`f+.h9r'tQ,lVb^3F(C,[a/=\EH$76CL^)(@D!i,%f.Y]d1*2bt<:u^Z_Mu+r9R<eThIh'ZE]d=hYC!RfR9A$03n#Ih%6:O.NtP>4`>$F,NG_Keg8'@_-NhOY]lHqJI^a'k/uTeF6p2P-%9eAY/.X4F+/?A?J+O9`h[5/0cVKt!qeNtC:'Wm;qe[bm:_Q/q%REO=UCIH>Gb$W)+h`,bbFt"Bc7i\Fjk?%C><.6#IG-A2O(AOLr%Ds6UA1[8<#996Pemo</\c=N6aZ:)U*Jc_De!M*I&ZkC?rT"Lii47n/I\@.'IG=eO#.IZ=+O-*gYe'MqT<k6b<AT%^NhB`e^7g6::%7-gK7*E^3/0OqXTPZ7KQg;k*,5,lBC-W0`@=:qd]'MphHKSFC[>?G7=[($CC7`FLOe+%upAfmKgi4,2![DWP)LmbBf=hknA0=,4J%#/j5RYh4G0!Ea5$L)=Q-B^;$ShEdtYbNcl'MS1-)9Ccb*Nd?9?Pij-m)+REh`Lqu^V[@l!pRBUQERmO.T]+:rfIm7%V$*6EN%jXY%Pj*Fb=e62,h;ePRF=l?Q!cfU]RGX[krBpQZFY0ukHE=<pXfLn@/=d^qgo`u-c_LZD+QP##(KZp0N#\:bV,AM/'Gu`6T-+[3S6Zc^%9(6-T470W1B^d+(99CrnK=(g?B.siqpdZqJ"01S:-L_)9I/rOO!)qg]ohbu0C\3qspH?=gIIZdj6a;+36HYMS+dC1b\j*<idSE]j%j<H>-S:Jnc<>eQQ?'%1<8T:3XW8\)e^'uc,5i(S$b=c3P6o.n27*Au4##qmf8a4H1o!_X%;&,M2e(MD\LnS!oT->7?[s/1/Q=la5%!+<Tg,Bd\e]7t1qlV<kq,H1<Or2Iem(atFt\$Hr%Y_?*f!d']/&o@*t3fF/fjrU1c&LQ]ZB&V8s\3'UH7jQsG4Y;c*HkhRookH&)%o`LS2o\2Pb*R-F:%XcMFd&5g?GK,Xjc:J3QiPb!kn5+BPcljYcRl0EQ`FZS[c`NW`*n7_R&IjM%fCr.g)lWp\I0JN^[oWio5rE3Y%XW1(?Xo\^T;di'N$DF6,FpIObk.3U:jELCX1#Epc3nTr@hZ`t7l]l"0rH0%(:4*8Qcfp7,'&G7`*'s!UW;#iW`ug+X=&NMqOVAtm%E6Q+!`:=^IHF#3J\>Rb2r_X_O@PY4EWChDLHB3R=Y?_NeD6ip&#1/!aL^Q[<cQjo_FL\iE.sNP7Lsl"6Z9Lj)08sQ\Yrd3TQ\#PX%rB<7ReTpg\j7ZP9E3t?,+`;UqS,_1dN,tG[5`t(CX3eVVs-.mCM^Y_q["<0!1:Y3kQBLtm2c==fg4%8+"Rg1!6=.OPQBA%5TWCl(%MI*aAaCtl#Q[,E"6BDU;<5g9&Eh(\Ln-H(L3_Z(4W\J``ZnP$LB;KF4]C39P\JhhtB,gTqII4Ze4Bj1@Z)4H3p)m+`?AAc/Cb]&<%KOUQK@%5BfIf+gV<@tO`<FsI,0?Q2VAc0NgdZWtoGZFl>]/[%^@=toX_)nrM8LEN-l:5QS(?6it99<ga'b`+C=pP8fI.B[:#iU.2%gSG.3k$E5LZ3lhNq.TDr(kNG5j2?^<:4s4#iQtuTSE[!'313Ib_7?>9K,*4UpBY1e#:i/f#7K/HrkG[:G282XN17\j/.Z\;iIRRB%)>Ue-)mkuXkPYN\L%RQHJh$i`]5h<lo*4TdnL<U]n`X]BS4\f++.D\k\'lQN9PqG"5*\0EnKpIr7F2!Zr,:G%@'399RPHY13g?Nq%[qkWdZiCm6;M/Z>>^Q\Kr(TG`W;5AVD/WCn0;6<-hGq+\Tg8kO+qW>-="YcRGI+cWT:.!Dg]BeBq>t!6F#^d66h:>`noiA/nmTcf%i``n_Dd)\>3dsB95+.CMT2t<c4$IHk-R@[u5tB,KIEk8-s,>?[*Tg3\(CVt70a%T1qFF\s7?s8Wn$RRC!g6[LT+ln]cbJM0WoS"9%ao=h8C*T``r\k0P`,lfE:EK]leNJ7f#&Q.LDn+\@<q1:j?Ll#$P;MblUZ?-t)'O2E9*j#bn*3eL/@!2K8AsspOhhumFf[`S&EgsN%'OBLRL#3*lWMt]2-bh[t6lh(2Zc8^f9%(ZIQ(!5ROkkBn32Uqp_<r+Uk?Sg]$TtNrZP?9ZYCh_-Lj7X60b('-]T>AjDjis$ABmXs%P/p4>!p<#B6up!NI,aL+-.#g-8#ngkk#GjMK$Yq[!o<5Snu`^UN@f2)8oI@5VE<O<7*f3,E-Q;\QAfJiLF/a`EZ!%S7ZkTkG_Epq%WJKerP7>;n9VKWWfgkSQ)b$g>`dT)!Y;V4\3i:$,5H&s%b^O$.'_ONB$dp'KjLkJ7b:Wg1@'kkW:]@n%?*2F'kiToE1<<+SL+u+I%4Q#B4%3V;3_W3H!rKl*d-Zi`KMoA+cJ!n0!?s[,"*g;pV^fjX5f;@Wu)7OS\[liF9JE#dXg6"4ejcfaY"d;YP1HEE@oKXUEA^^&[%!36hS"2o*j.J\&f9ZacgPmu7d5&=8Y9<lRWC*ERa`H1(1&p6sX9k2c:E8HJI$(cZAX9J,u6(iIn67-ZqFttl&Gk0EJDU1D`r:./=%!&,V$:g?!9N/O&Sh^^^q^TlYbNMg+KlLuPT3grM@h-Q3gH#\]i>%8;_`.2>8E4YT#I^iWFnp#3"r"iB!+_m-6Ok<*P4Q3LNT(NOM%2P+ZdIh*\b@@.JZ%3<5nU]nm:V/:2BPDV7"U/m$DC8tM-?QM.q9o,>:79)R:Af^`lo!R3qY[@DQ56sP!(M+<n.lVGJ*VGGG6$pS5%-le1l9tTE:WU[d1Z;k#p>?GP-B!5d_id,Q,`r[&eMGMr+`MFTtH)#2ag%3n5SC.-rcGer]NF6RVL5uH*s!D5Bf.^5JG!R6(.IS(:%E321+)`"s.fIZ,Ffa-`u^=klsNej@`.q<C_TpK[MD4R"G!n;R][+O90]TH`>fSV=1[:XkI<PQHD[A[[`1FEA[02ZG-DR:1DP5QI4%]7G(9[U4'R@na73\gi?ahnZ26(O5fR=2OF*6F4D*OOVeiR!cpH9C^0<H!/<*O`bA>$q/4tPAH":GXuD]h#!/UIt%9E<e0fU!PSc4%G1:)DI*Q`4r,!1J(h<kkY7DKo;4fI#&2%2!+^)>[GTNo0*IPqD'7VFZi@u&9P+eG+@%p;2&+md;;)GcA<qMq=!pJTeO_iQCY.l(5%TZa/r<lJM-0!$9H<?c^`GEG!6L-rO8>>M/DT%!!thW@o(9!u=1d@QY7W'rkuRSrqa]sFjuA#pA!Tsq,p"[aFpZ)C+&-AAq<49Pj*%fK3[%$LBMZ>SKA!772rjp&A4Led6U%GB=h;m$"_3LXdJZ`(EYa&;Xig1k6"Ynp;Ls_!`gORG0LrUfiUX^p9HL6c&8d=OgCQiGNfA%oM?j*S8^Pbm^*8mhPh.)Kd>a/?S<N=\fS4`,,`5iWLS47b[58A%%rqE0+LoiLEOMM_Y^-rGM6V_SPd7`g>uTZX!KI*!7eUaZ<m,q%DS1RNEVu>je&(X+92c;FEH8?B$G2XOJJjF/`u*PM_>!P_pl$").FkOXN+I95<7b(C;E]3A6tr!#g?qf?*$SC`b8Q[X]Djn.EkeFp%m"<lfl%=JDDYuMZ\]OB]!dSi[B/8RK7K7h?LKS%_'g[3_2$CdmmG_c5]]*mLol%(B=Qt1,jsKsf7;.:&LOu(Q>TH<6;oHF00VqYI%_q2XG.?NsQ?aJa^S@L's5_SZ*jX9T%ACSBmPn=Mr[OqUN<rWZkWdoGXOT%WIY(<,O'QFA>.K''2,XRQ3=;e`e^K`$%nCB7jJ&Q!s%*+;/^%.lqM;u]<&qL8Z18c>"QNK@&_MSl$<7[P=Dd7_Of'bC:lLr$pQg47Pb<@gSt-nT.]nj@QhD,*ul7a;2;^3W-!=T;\iAK2Kc%.Y+#qC03uKb;/qPhp>"`'86j9rHkEN.)BMY>lQE&A$?F%hp(m%I=<(s!?01]knDim.q77b:q&9aeF^3U</53TeE1LB8rm39'!lka%e;qL_rp+&'[kM9ipo^3b;NDjif4LV[Ppm]U*,h\b8cTU5<g2)-%Obu125CqC.lmQTRWqS(`%XDY3-PYqKmi2N[J^1#+@G$FXiXip%BN^W&c60V2ZM+ObIiJ9:]'tL3!3`,_b^@8\m=,PJ8Wsn:Idi64o>2oHH))KgI7AUAK[<-(&;h?spL2bO2eB0j%3m@HJ$VoV+'+%l%=FdMe)f_1_#8h'IU1jJUkm;`(boDfDfi9u5;3$p[jI<TJn2`'5,>M`$=)M'Jf((iEXlV"jIe!YL[c5uGdhLGOY+W0IFgo/,r^j.%%%"'G`c#rlYqE`TEB8T_/jsa%U33;mnV1:J7UGq83`GRV^+0,P1Ypp;`"I$SR*FnBVmR"^`<ZpnN*.0VN=MBqRqH6)PM3hn0fCQC`%U9mG89`t]M5k=+^N1h"N=iaVs]"AJ`KN`F!pe>"/b;PL#iti8kaInX6Kq>J$AO,cESV(ibVt-Z3`lXo(8\MT2C;uso^fXPaC8!++%An=.XrW:S"1EgWtiBko:PTB%SO;JfoR+%BHi`^t4>'d>K=crGr=mL;JMeIik1Cm4F-+KpYW0^t<i--X8mJdmYG#GMRZ7-p0CGCMD%"gDX9WNDh/1j"A&*o\Q<cZ^)\TrNp!'P?BnC<%7i7A&UnHq\qW_^n8DK3r'V_igiTLDnfS#4#EM>6&%d>'S*-[gbB5>JWoCG*db;%81+l:U898@IkH58KcVINb"`s#+*d1"mmGP.lcU\cU,W^B:2E4f2n[#1+LWM2+^r.<iUUBmL(YneNlh6-iJ[Fo-NTrDG,D/1Bq5#I%W<\;l,DlN@d/*%t;ei3l'(OPE.qh"$\J6dWek:Xh)#TuNbd`\6)Y:qe\.FN\8'X5[A)s8c=MusEFt0iM1F.?thQ#[n-dTrI-B@1r%/*p139?*;pLYt\)e1&9Y#ng)E9*O3bl3%L?CF8,["+c=RJraE(#0o0KP49UToC'q^P%"mW.Eg9r+.IN$[GU?87kK`9huX*VnM\j5%%fF*6<C^\#F6Ok`!LtHT%VNdmh*N[@PL4dB/0QFC89"PPVq*,+@L#]SWYb/tR)f=95$:.ShE^TC\5U(J9`bd"="c^d#<59)b6(45%k"-l/lA`_VaG!_8'3J5Ib=H4tr9SReEV64(+u]f;*'#gT=t3QfVo6YWqldlY"o.B5<G#D,L@<@9\TUZsH`>!&T3].KDEP,Z^uc/9%*UpTQ-DX4QTK,'i/laPlfR<[$SaG3X'W/hV$5ChqgBVmfKGbTjMYdiIFJB=J8W#">1d-pXnF8;!d_lo9V9lgFD25(6&XC7O]]%0'%qi\ef/KkeF/er<p0k=Tf#sERTPcnl,E]AL;k'(;Qg?nCO-U=(*XKHfB6/s)/$2+?1l:U,eKG*An+G1*EjUiFUEMYD$`d!Gj\b_G;%!ki%hN76OWc8@iY@YZb:1H^9V)70keaIp.L&9@k0:]@&19jcs7GQ/J7+rd\o=4'KpXItM8LJU"eg[sT#IT3Xk'*tVdkrgcQE&1^p%INCVm$kPGZpYpF8(HM.H]OpX4I*>QC;%E)tjZ?sXX"Voj:!f"/fpggj$8sUGnC:=N1<&plW!ld7G<U);jZ\\J#nu>Z4CN`D\"'C)%:]m@;ceDqVg^>QEn01kmoL!dZRH&[="W],I(.778#(^V]$Q96"W1i7pEqhrdqk]K%A4<T;p=g_Lh)c$!Wt?-Rl;RKio]%AXLgfI%%#>oJ!#u0M0*;(`lLCqP<W>E(-b.F,O1.t[;EI<%UkN\<QMR^RRCi?>pTCdZ#G*7?!D0iD"pJiOV&%g_)K>3>L"?V6",8n"2(6&:]%#!tRa'g0OK]J';>k]?^8Gdgf(%2m:[mK-&CUr5;ofXnCu]/*QiNlD@II_A$SIujJD8e*(.dDiFr6])V.d@EGiE::jE>6nebljUaj%M8-/N^`dp^eTf,lHXDr`>I4/cYu!-ISak0,fDGQU^qL\dEq\eOS-_?DPI&ttPLTiWn33Z,ci$BkZa"(_n$3mWLGemb4e1Uk]MUHM%&ml8qR>u7$A&;fh\R^`L79sq#MCUZhK`70$H94JIL(#0Xd:s,qV5H-A;m'1GibOEShoNUOJ[k%uOal#>/(E>\q,C0.<FF=#%Xj]c%a$CbU<IYF4Aatf(9nADn9nX4a2tll8*YrZl"Zu0qJ_Gb`<=]]pklg:4TUV\s#sk@%bE=3=agp11TPP'RcZ<%/E,!X\Q@P(/oWL>6%A!1\SkNu_,$e4gKNReIpCf)4en^]A`'AcHnVPFUZh1b1I`JJ(Y4%5Y6kq*^J%>Kro[J:9H!+G[cY_?AWTEuEMDQ6b$qhSlhAW9m.%lga+@7cu@ZfjQuPp$-b:P?"?^#56SFg:+&2fL6ZIIDMi!(B2\l<SS&b7:(,QDVtIlXt94.ESKsBK=E0Qm]d--6rGbrdjPbB"IS'Z%]i-1s*]m?"!K:H>p''R7#2r'4AY3jl@?;kn+Pah37h5r&[fKH-7==2O@V.-M6"HY(?HPVBp]"`=1Dk=7/(nYI5[jUP'U:n'Rli]_%T`Z<>;jt9M%!XJf^G"c3bVtAN$N5%Z7eNIl,^dkfD2pQVDZ0'J%BVrJ^5<qo5fq6jG&j!c'O<?1%oQ&8*$(F_79<jH<W9*Er>]*`%0nl)nbriT;66W6?(L?jro]WH8HT<?/H?=`<IEL54S3EWt[LP2fS%kOTSp5>lBZg1&n+3=Os"C]W=4fq0M_%.3"e4/+7q,MHB>ng$%&1E_]cKh0cf;b,Kq+CpH$l&:L?VJ_]7f6)6UU[VLs+iX/B_,:fZ&ngc/[>`9'J!%CRg3EJ7WEhNlWa[t9!=$TR<W(lVBUsMD6k\K%)Y/]`.D4Y59R\BA#o>>JNT,b;?LH'&c.ho,L3'<>TjYC!Q)#SN`NKo2R!5M#\J4dVMq;J97UAPUH^78NpCMX<H*bc6P/Tin'1e+C%n_"al/onD5;V5`/s7,)Cl"pm>#rs:oM_E&(BCkggrjkhM/;/t6.SN400^Y*H6[C_[4gM.kWA?S]g7q<4+@,K16iQYFVnGi.TP+o!%E$Ki<bo"k]=:2&Vlo.J*Pp]HO]bp+@[$>nLT3oIkKMdPNh^Tg-l0l]a=\k(^``/b$D&b-&dKo/l"leI>_Pu'0*00If3Cre`acVBJ%IAO\0fYh!:O$m\[q5^X3&/=[k*nB&uVgugL`/8_Bm)MYA!5F<0YUuNfn\"V=$?Tg\c9^qf/i2>R1Rcc\Jmu<6UEt,@C3/<N)X7I&%]8tjG>ln!:"Va;"0O:3u%S4&'cZa*daB)DM\qnt;'4i>8gj,aN:h#'uFLdtrH63lgNX+$]RJb*.`bqmraE0/nQfcV9Rs(2Xg\sr#%[CSp<bg=i8*m!b$[6O,dX*/_[ENP+SL=ra=Zec%@bgct_Qgbm8EFi[';>A22Z7?#O39_@OW>tmYELbBKR6^nr<%,<+Bn"juEb.M+%I_icAM4Lor4`^YI.jJ!MMO'4;=E'X5\P(G[h4J6X?s2.f?Ho942T<8Np<!B@YF',Gheab>8i-_^`7aFm^('UgEin`^ie']$/uTq=%aiWX0-/m$B-;*9#mkPd_lTN1[)b'f#Vl:9HmG=*gG:A/)b\nS-f;Y1@D`f0EY?R?8Ul]UgfBA<Y_t<YU(ECd"?L/r^Zg<0?,+AbF%`G'q>7RA.+lj=7Hj8ZBZ_`^MK.J5emAER;L+fiCO<^c-!29RVONUj^@hu]#EqiJn\p_cF,hmL!i^bMCYK0"r+SjHHfBlp_nnPLc?%EfGc`KjTII=6r^['4U"r!e$D&%n07hgegnd71%QS>Vun9Ttp.*iYS*e'%f*m(69nfR80W2Yd$\P9])%))U:'ap9(+9=$iPgnJ1%l%;B-D$Q;n!V-K\R5:c,o[\j>+cmOBRk/X-h5Aatc]h.Hm<R;indH$KmLWU8-!hkb!fVpD>s;KuoBhN6^_+p.TW$;n0WXPm?[Wis0F%Pb"sXD-42S$="PY<ZjMLpTj%B3!O4iq/I:fE>],5S$;=)V8-Lg/>pB<K.'(0pNq2HQHtMXH]A^Lls2+9l%2S-Ue*'?cY.J2lB?!:%0Vkh5[lE%!>Up\hN\]B,f'dBtSRZE2Z#%u>\o!uoAmuUI[J<M?JXaL5Vnp&BC$imXSJmU`/Ib'TY\AAeo.dDS*.E27i)qi?"`%9h%@ODYo)Vaii>,3Y9TXf+cM4jSTTu34AK8e&3.)M;JC,$3W;m^`GWDNApp38>^@N$UG:MiWjis7t<;(jn]B+l@ZCa7c$DU20=aE)^A%qSmTH'e,ZH?.Cgb8lqf*#YA)QnIUbLQLgkh8\"+H\<_=RCng8`D&$NYN+q`#/_+$Uh8Fiql=Q[c!=<^opH(%QbDrWU[Rmrg"HCJh%oC2,WhJ//l,(oNgmpUQd4V=UM/`M9:7jb#IN!oU'1<KjVs$B.Y>QO==Bi_8#YYCBO\6af??*$\Y\euYCC(D@n2qk=SQI2sHlP\^\%b-N.FDiEM_^om+kaKj.1@(KWmlP@3q([(H#>lWio7(lR$Y"RR8qP#RCH(X?@_PMqAcL*5GLnB?9\pXhUs,'sY5UkUrK)sBId=pln%^:DgAm-G.-[0I)Zj^n0\?%<dC5HMZ$)A_N!@N6+@?V!#[)_XWm6r#V<4+QY)At"TF@1>Mc]dsJUE]hUq)k;d5%Y##D5+rOuBT64N%3@1'L&0K^1X6[_$L5H\'Y;3isbq*Z(R_QP5G0/A'i.cFm*^/K:12)OdR)]ON/l_QPqQcrrm6%Jnf0JUO.B#*Pe&5-3*31d>0U(5q%_Z1\n1\90e89f@R^(&s7\-0RN5Z$A8.?=D.9n,/#@?qF;dldk%?0;\;:@9Aj#ZhEBMZs-K[Mn`RV'&G1NL752o.`_I>oCY2GjS6D%6KCAOc,6dr?R7L\!jY\i$cOHUAL'*ss7ej,=9oG0-eb0g*M5Kl;qbDq!DI$fLt1hgB_\HZ!6k41S;#$pluL*eCViE7,Y.AY`\3ZP%jW$0j)10^TDV:H!-rW7IdbTV!=CIU'^5AfEb8utP:OB=&YMAkJ_+P.4'D4?bPMjQ;.3O^rH3PTOAUR1Xbg_NZUr`>mFeR?7B+05C%$00??o<-R[VBNtSX=1COE@U'U);%Tm<"P)kK(kF`4\3`+OCdAOmcQkqkZ%7X$>Dl]@u3Ap?nn:dK%1!V^"ZCR0*B&q*rNde?4X^/%Ej-i'I<8Mbg&3k!]G2!Z)@aeloVi$q!>-BV0gAMm_1+c*[)>OThg]Ek/&tEk_W:VV0_`eU@?ii#LW3UPUC*fJc+ohB7;9RL*VA6>%`&f,:e<9,PE%#.@d9AY7fD7d(8Mpip9&:@[itgZL2Wfl/ORDC]YbkSV>h5cP7RrpO9Y7ie3:dJSCbsE".f=OtIq-@.+S1eSTqA.>%3sUCIdqCtjd$:V+?8WPg7Ugakg[9M]>?eJs&0S9Z*>$o^GW+.c$ll#?a,&PP<!+nQ9(2*#]`-dA8+%B/TJW.]oc)T?^7nnGqCEis%lrX!,b]Q(bbR9t@iDBBR5)P(l'p3@Q!#1cIKXGVu")F/M?cm($fkaA=1>+*$9&dC<fB+oTkBBh<I&c\-iqdHsY&SP<-BNFM*JsON%GIs0Y8q1t7@8gD0(O&)%bfWJp'/D`oLNN@:Xf4C8H*_+oSd;!2b1>H8r23+)c*/Gr(CgojkST+Yp;Sg$bJJD8;LV#Oq#$W%,p>[s%_+5-Iq=Qgqq\^,2XjI*s0[)#j0;PF>XV-XV.H]*lPjeHXM]7ueTsfd7R$^g$K2D/o4)1[UCZnghQVbqD_1om$\b/ipB6pdLMoUrN%!;#:dbEZ&-+><j`f`FiON+in>>%/n+/\,*Ni<Y1JU$FpC4%9ToTN%XU>\5BE^lI,ZMM@(.36>Hn]u3"(OWYHPXc)<A=1nA[`o(s4%[p\RA>kLb)SInps^cW)IQV0gG;+=h'=?P21K8"U)?9p>o=W&CT#kC'F3B<co+f'0##TI8q>mH[B0MZ0@&N0((C;7"k0;'[s<aT=(%;no\1m=iHo!V&_Ss6>]g1"emq&@2+f[-W7cC\38]&E-ZbbqSg;I65k7Q7%[#,5o/>PQ@-B6Eh>m>nWU9=oE"Skm<oAYPKjC-k+CV%ajE/Q`<<s5*QZ/mS^eMZ,]eLXeBI78/ToIW,Sm/\5@6L?C7n-*[&O/!a&0lRL2m6HS&KX)Xe7CSd9gX!AZd+INKUse=aT3LLkq\q%:k$pG'Ka<gS#(@hQVuLoFNf.=Z^.?!cs`gf@Edh,dk!OB3k#A)XWmHpENSL)b$8WdAHH_[A7`+!A\ueJ]PeBs^YO@fF^6nAG^Jrn%F;;h=!>u+'c'5[&Fl_#-fk:l-joB]S;q1mDHfF_)6oCr-;)2mVH4Q(Wd)P-_GC:",#ej?=*/r+is*1g3ff3R"^r)T4DIB=q-J[fH%;YZQhbfBNHJabpXT4JM`Pg'/?U)E(pE>%C)7^?Pg:_)t^+;iHI5hq=1&4r6N`(XTh<p14r_Kkld+T'IF'e\>VF^Wor10m3Pca`PA%+a3cWbCVn\!bO,0.@&C6Tf=3lgHV2FL/$'Xj*,-:EH1*WAM(s?ILu([35GSulBo3S=l^j1Lt%*o@sVL1f>Rj3L\8N^JfY6kYr#r%%5VZg4d'U9&,(^t&g*m=oBaHL9$JdW0#(!'oX+?[340g"J`5UdY'hdY;bBepq+(f1`_?B_@b_TJNic;!#BQ3_%c\e"BbcudsIJf5)%Q:$7_+"d<6Nl>kcl6X!cB[PC72;qeA9KU">8HEY;&.Tp^?d^(:UQ(0lmX(uC&6Ehh#"bGng[du4#@FElOED=SZ]ZK!)jGJIPf3?t%U9Xb(@8Vb0'(qCTI&RKbh5@^dghfql5kta_g#dqJI"fXOS[SXR-\rV?Dgj2bh4NrUPC;\^nk7g4RPpC6>gkT:QIE@%8Q;kD9<@QT%q]NS$6Xbed9T3A3XF=BkRXOJ6AY,=BHQLp$3nqX5<YI($a0G<9JdsHSYf\e^`#j0@4>haHR+!VD?#rkQf:t`15)H&?,]Y--6Q?3&%nsQtU9+mDnk&(uqpdNN.^hEd`VDeo35"plkAT`]D?k$>^[O*mBTj8r0Rt_T#qm^d<lK6BcQ+.Z7?-KTd,j]Tb$G1C9-RBUQL!*fe%.&L(f%1e6=,0,\,l$@X;mmIHL;RmWqX?bNh61p=jjQ13R,=/sVa$j-%\!C#NC$.8ET!rYYcFKhF-!h7'X1\m])!HLc5>.YT66Rj$%Y^F)XOh[I9$#!.@cW>_jn_T:m8baY#RgnDj;LNe1W..&[%,'RKgZ`B`h;X9OS5-p5g_gorXr=,f7/XmG2mIuhKdbtZ7mCK\a3.80%(U3-[M.mVaNpk*u]6AGW(5]0t9b==J[&@,K%7RJCHJSFVW2Wu0VYc?DAkK@0]pK8"58>^JhQH3JTm0BgXd97C>CpbI&EF_.L;B1E%k<CeV2VOg.P*Q]n!K$SW#dU/Z-=R3EdCPTmpelb'a_"@S_hk.FE3=Il!R5/A%oa,<C34]SFX"t2G,)!-eVJ_r9UJ+P>90cMend8^%(fS;o@e2;u#)&3hCd,?g#biY'PX[J^'1)r%UHOd>L;TV9OCCNp8nbSb9blBr[X0GXo'ID13AR=dKq+4r="7lB#s>o_VpjD%3RE*:%km=gOhPT;(;k;!2*fgapHP9)TV>V>>VADnN"h&>*qTM]_GM1!'N/^+\dKHhV%WjT1_n\9Nc;aF-n,US'r\88rTcYIS-)lt3(`k+N%B-o*J@0-6"[3[qPq5^!N04!KH9Ut*3bg5Cjk0iARqQ%pCI$,T#rAH\1q][L!`@9-c=Xtn2Y9DH<^g=K.Dhgo3":e%EG>F]hE(;9=%7c)'ncBt99aV">tQm4IF=!2.0n<?XG@_rpa,.LC1<"S@<-+QeqVjtMA9[)c`ra2H2$ep1J6UgY[?'Oq\^)K/.pMdFr^YXp<$5:t&%onP#)::>JbqJs\c$o+#a=!bg&"R2r1[6!A50Y#sS]K;"&Is@#d'Tu(M$Vl<EU*=^a:bkLL^`WZ?*6UOZdhFGGOA6[P?D.N'&-acc%S'\7[/&nA37'4C4#X/*0!.4KOjpXgoSS<!UOtB=3^%l,bk7\NYZj03@H<irM8=-f%)Z6T&qum<A$%Mc8]^hq''cucXb#g#K'tj9[%Sd7U)O]'9,7.c4?4!dT%Vs"F#bIj*=+nWA.^B+\q&$J#(7::,h9)/b[TJ/qTHMJ=H'sFRt^&V^s@nMP.`e(QP6de;*b^49,qi)ud%7hLl]J^_O%*I;$g-D^D^(Mt/;_>CU^Fk3`M2tBr_dQg&H'46PdO4:(NjeaAU1h,%Ji`eFl59`bFbh'a0'AlCsaf03kC38>G>^$#O%[e>?SjXRTB$##Xe?WS="&PDgWI]^^gmNR(#8AFLpg4l/LQG'h-FK[N`PN\DsgI2tBF:XLkA2i*SZq36aConQd2>LZ_DVOn7s4*-u%=tHcI5oDK&LuI2t6>"=M68OIO0VKp4S&btLicCV+Vp#+C%l\FXU)8)koO-WSrlj,SG7_C@cQ+QnD(ud0ok`7#+qlXO8GP!&p]q4N%Y!Ms?IuWH\[mjQ"!K9qPq"iffJI37>T@#r@`=t;Y(MX(RP>mX+OM*aXcRPk,g?n03kYek[n1S[+hjt%K5#8\,k?bCcL+&$T[K(K!%S"_(7M_Jq)c.H7TJPQhH@F35Gfp*etF-74A7GL;*J!B[oc(S'CRu&m;Ou>W^h.-?FFtjFc/Jm=&!ba5)b$R@L/?Ym5#lr5h`dUZN%,pVT>)POCmZq47=*/qD7@0SdFQtE#XC'OUihm3aJg*;V6oqkH&SU0),R+")obdNZH\PM2rgg:=D7%lGt2.rFZ&BSu?9P+Kf?bed?%M,^'<5UtnW,M`m@:A>J:&IIpr'VkDi9_AUu/,73G`%Wo2RK/k5RIUs8;T_9mn=lKr#X67BeRZ(hk*W-DXY2hBb)r`kC^$P\g1ek]%N];aH!^C9l#$Rn`)M]V^']bPrk#sRbMMu,Sh?H'#fJ.r[Vbr>Mi3PLqR*!LejAN$oR&HIkjb@mI4rRQHc9jE^D1$aZT4En..j'8!%J;<Y>S=VIf;s&RK?tbM[[I7n8Mgq/$.qXK6?XqP3f<jLCC%&7Sn1;s*<PnG3bti?\_sgbm>fA8RIB=]`kkOL\ZDAq$*#sZ3'3*SO%*.Um?1cC/8V$s,j\oi`7gX\E.;-Ri&!OsB#(p"_A_WrL9T=OG6FaG"6Zc2jPXl5c_$NE6c-L;R8L1ig<(UkBQ5oU5::?/+qMk%!I%GlVsBjZeY<d1Q#:'D-+0"Y[!["DuQ2:-VUEp.kk^QGth=V6oF!^hK4bU`@fq.uO-1+l+i@\OB69r4].sa/b4P002G>^Yea']-1-t%:0e1]E%Q=)c_8l.m,&E+&4e]"HWMSil.a=*i3;<A"2;^HC31J^:++#<b`[bo/];X]5g5$/q)3t/2P<bda82TU1D24oJX7O4YF3Ns%'MJMrTkp)a1KQf_&%a'JNS$.Mo8pb<lHZu&L2^uaTW+sq1Bq\EUQ<*KbCu$_)>!-5:>/i*W:`Kge_"N=^#NC@e?k"Sd/[lZMp^g2%Z<BNW%.hJM=L,LZ/:d&<mNGS=S;ZOH&5HJRZ)(bcd!nXMT`:d9g_K+l!qE\YSK/8LJ,;0NP,@!!n9hqtjfS:WnC8%0n,0qui<N:o%A+@$amhj9h$BBA19Kr++*<0j"U316aHU>hL)D9HbXT!V6MRtl&]g.mPF,r)9:>H&T8b,RgJ84q[]Jq%Y/#6q`oKbIRhl*>0J_jg,%lJ`SUQT8iZLU!7kMu\jZ,]4UGs&%mLHXURahooUW^Ld;0V2Tfo^btHYg9K1^iRXBG1]Eb<@geFdlkYt2#?A:TVdt<DiNEdsif`=$%>"i63L\sAIgQe/5EU-Wkq')g$n<tsZ%Uh^)YB2oBX_F$"$ODJaIi>h0BCE'(Fu/`2?r\T_I_%j[U'%9_7AKS(*<H"!git5Y$2''>%*rXCo,=H1&(PWrR$b.l3]c\S5@_NWHZ>JC[.*dLa!"I^;Pitrkn($B`l2V:cocLTER`2PITU8,ka&).Z:o*bIHaM#:=at>AC@iJ^%(oc/3_.3^rE-ejf.)WN$0l%p$p.B:E_8f<D4ni9p?K\eH")=a57f5NohQO5(b^UUZmh&>/,Pb$)TV,DVS!,N<?cNcTIO/;+Dk(\c%65)t3E4+&S8t4[:'DWJfk\Xisc:cM,",-:G&lXZph2SYuo_QljYJ'?,8UbXN4Nq5lK@?BcP`AuhPs`48mbu()W!1f!&JKsqHRpL8%.q:W2"NLg`1W<&SK\,Q:3BZ^qdW5YNB+tCB&#n=UA"2GMgNMdl>#VL&c3V=JK`P9#G@oB%=ar2C3VB'[o2h,$ltRR)GhJIG'mH]o%>PAc(3#4sgOI:.b!j(Qb.D=V088.XLMV:K+]<oW*J-^8THG;fp-:n3$87$(o@D!sF,,03hnEsu#S#m?(pE<Q(h)`E'5$H(R&Wl>T%?oHYh=jmG1PTDLY^(uqkS4jc#k6CP[B/\6$UQp`;DDj=lY+;/bVcHn5,g)SkZU=FOG?Cs]XtAgZZ4J9TpSmeq2l5C:6mFhSr_8nt%L>VDlJPIiM30`eOa$nfl:g)U:Jl.)h(tZ7irrN-3#(LRC5.mH_gV?Rs\)0fE,n/o-B$La0>c"Z2itik:7WT9J1EY2gXjIji^R@<q%af*TI9c9`?Ln"."$BcZ],KEW6\DA0m,'UEBM-.)5HXXm1HIXNac9,NE+aU@1L^Ol^J[(>="$oB'dY:eF;@Nm*XOSjp'm.\)`5$^_%^0p>VWipJhq47#%\+2Ja4fCNj'POKd>e:]7gKAT7&C6TJ*i#Si.X=8t.63s)mm'HLNMl<%SlAk@knB4RI.'BH>+X)_*Sf_g+=HcE%]ce35QAMgbKDC+Z]]i._/cFHilN+uK^/P#C=XB15o;k]LgN\,=3+:8AJjo[EX&R/A38GOr501@W.B(#L./ShTc*<4k*;r3h7H,kh%rK/t5(r]ffc,cIBeYlDJ!R1,h=,O:.p6bkZ^Y$XjMhWPAkgA@Jd'X"WqT%)Q['X3)`5sfH`)cmr4cjHfR"te'&%%O,Hh1e^f9d^T%CnEGK05:!,k8]Hlr+[9mM`]\EH]L[`s53/OaMS9r3rdp9Cs<kT]GUiM-Eg@u_)=5pb0_W/8&hjl?VpVu-*#_@4+/M9Hll>LK-OJ^%ic8Pj%lkKJb=/*!-2.?:mD&_$Ia5D47?>Gs57qbfLa&dZptf@A=l?ue4*ed@-$+\LRA3_Wb.SREML=oo$8O`lkl>GY\tU6\Jt<o_%Su??6m1E"`*trnRYDqR'M74qPpiOUWUQD4JIQUl3&V6RN]fpi'^O@R7!VlC2<@GN5E<BugH56?L7[m.YpE&,8A_il-^U+Vn(+*].%IN.lE-okdIk(NWO=9f<'Mo1tYVmaILl[H+6hq%QA_ZD&H._6.cpHd1N3ZEEnNh8ed>\3-KXLN^[G,J>`hU/u?Gud:]HRl8XN=I$=%98eTcmMCMr,/\\la?=K,I<`@Ur@o+nGXfJT.mm.Z4,Zk$]O)uNX=A>C&BYKCl$J-#C/$+;>pduOonLQ6fcn5Y+Csf&!hY[7X95!:%6hCinT\tPIg$p0P/5IQb3)FCA5FVTlMu*JrQRmV9#GQYar(_I^r[(kMV3"6:`rD[m6>XDh,s@t6FX%&?0bNd):[=]_aF=oRp@$7k%@<8P3\XNKIQ5I$Am.FD'j%AA&+p(*9;C?G$1TI(f7`tNA;...HOgKWO16L%;]^`?tkFWOVVl'E>%]sk'&"^q98)35K,W[;h(SU2%%r*7:3Gn2(Ejd);&\9-\O->V6U%Fk3s+Kl0L1N0.],a]#p)eSg9kZQ=GECFDd.V&]^mAD?h>01+o0(1Q0Lfas(]3[)1oF[X6YNYh6%OHk`i'goNpX_[C1AiG*@U!a>AYQ7?g!@oPu;j*pc5=Vsk;<s&;-Y=HQHLe/qa"gD6Dm%l`A=2b!9_ok-IsD'X!e:@/!on7q\\#Jc%41jB?0m@hcVu(n,]=WFhYQ(MmrqH._J,T)qs8W,tp](!Fs5/>+s8W,dJ,Q;Fp]'uChb_riMI@4m;>c00_`od+pBSk7p\h_tnbsrh%pO1p<WZMFT57Xl+rqe)aV=2HUg@t#2IJ).bIJ&"Qb2'NK7Gmi\Ru_U]q0ZN?q0Ys/q0YB@q>Bj[?fj>gq'b[n2RiL05,\3)N99a-%jX=hWQ$/N2q(t\o3qIWWK(JddCd'LG1E(u'daCTVHWjUMc2=e^jtiWjP1e&Q)^R(Q'W7de_O3:*e&EOKN+,5IR:3@QR@0HdRZ1cg%BP+$pbXQ#QFtgh%h99\!9$Ki)O((!W=0AiFbfjfXS'=E2Z^QkVQ=\_tXK2n67V/?n;IsEN/SeK</$#t]ZJm_K^9$[4AM:BqZEgbk%/#0DU;3[?.Q;*Vbb(^&;R$lXrcL-SVOB/\,T?PB8N,036U(M0QW2S6T'P+]-B?-HZ2)<B4@M^3#0rn@NacMGiPAHIO4L.g,fo]k7%e4Il#6"YncehZhU.\>I%82^em);-EK<+L-PbB,WLOe!(eO\LrI$&Ekq(!8jG=lYTHR?mZmbfgt/AKIA/PZX\#QAooeG?@u-J9Zm+%Ll%OU=JI!JNIlC7hC)K^0&g0n*?l[N+X,hnpd.A86:@R\ENns'nF5jB#")g#F]EWCb12ad=/2uM\uS\5j^!jdGIqTq%E%/)(knoE%C6V%B%RWZRAL]/Z.Olnt.OqGq:^ts+MQ0WUgiZ]/`dqAIQg699>j&]aY#/FVf-i6n>]$n&H>?c\W6:G0D\R?Ij`7n:Xk"mPlEs*l%em!&qb7<[Y.;/bRE>V-ur4P=P\^Ff^O5fo/o^e+fc-.jM+,?>F@V01O2@a=N)o^$56\^#XX_'Gs;2bucUL4\]Xt2)'<ENh-(s@N7%NM8<h<hl<gNRE,UNM<ZE?+G+FELXqUe83l:C:EUZc*eW]MsW4.j3Y4A=5-cZFk^5^cE"@JZoUh6Nacj@"`HFJ].E,A1G^i#/==m`%bd@.Zc:h.42k>sa[HT*gC%c5/1_To-F;0Ql%%3HW,lQ#'d`)<G;6VA5-nWD]YZPD?KZ+^b`F?)S//ETa]8g?%CTl@$f(F>0j]D?p%ms<Tt?E_se8$Qi8%la;j8%HA&.!iDtIGaeQ?@2@QfB]gb"^Odi."1"IIK."dHOVUUC.$mBAgWGqI7ni1\mA`nd9c"(EM8`U\(7hp%q,G[6%G%o\*MqWX4%fOe`FDE#moZ]eTXF/8XM]"%.;u=cWa%`8'N?]G;Is4gUDV/qV-GX>bN1LiQ"9HH9LnfImRKJ3-qHp$Q[!2P%:/*a4N9!jW7jas-%!`OBR66@boE"?daYoPL$5;)]2OR5cRr"9Y.FCsQD7%\[]@aULcJmp^2k*=:JuEK8C6*4d_ChsB0&*gOgMGG7%!uCSYA=(NCjc>F7O&B!O-tV/.fPXugIDbl\E3co81fTisDJ1#EL5:S?BP;(D+W;7;1(4U$c/EIY)J*RfO+p-od*U,f6g8\RD*f0f%mD=W82XO+$m7XA+[aVDO-oRtn8Z1$4V[YI"eAFNmL)rH&+K!++LE?\\a,e..Lj2>+`8a?R6prjSIN45B&<FRJHK?Gk%UXj5+6>\D%]&2IY'`=N*p\P%MQq0'0p8PC0C8<_'rJ%tj7EqQh8_"!]:1&cM9jcCV=qWBKQ&%O[&4\$&\jDb5<>Vp?`*@K7=rmp*kmii7FC^PN%HChg)<&K(lAOQ*T?fN<`&@7M>5kp0+Z;4,&G(HllgX.d'"7[o8XsKF-Ypbf0<a.pjfLga=J`tm"qCYB<BYQ\`X\$t),@-arUcn1I%@@Bd0"i<GV]>C0G*=W*:54kA&BjsJ4AuDX[Ji6YNk`Q[:o[W9KR-Snu.Be%[q++e:EpE(M,cPYpP1:h!#5]27A?^dmkPBRs7\hnt%8X<F*B?KS&QAmbi7mlQ(ZfUS@`bDb@imKLl-"gBS<[4ck_(dC8OU1pVM2UX_AB\Na6kL4X8go4o!??'4Q'I-tg55b\Wgd/F7uX[p%2Y/sS,%q.(?<8o>@jEQ4K<u;KJJDu2$ODJ`"Zo8Z6:jFqg(UJfZjWcW+;BW_%giS0<Cj=t#DE<e%#E%,g.;RZ+:"V<TJ4ZD![5&\%#b?XcPd:NbKb,&*_L]$u=s9dKKnE8<8g,GoRS\`)6"hW*BQ,*1#7_a#!!ET>+Nb!E!8ZcGBYf:i(Mj,hK#2au'sJ)SG@:"V"FpLk%J04jo"<\\9$8g,f!?aoua?Te>%L3(Y1k:[=#ndk#5QCh@)$M/FL>tPO\55F96kTJ3!!WF2(l8%E/)qLb)]G_D4`C;#cpK-q*Q5$#%8Uh^dKfRE<>p34F?TL1f=V;mHS[TOfEZ9:ekbr]k/Yi'(2.tI*<ZfZ5:p$62<AiEcH1q^^l0*7ZcDgo`#JpV"Ttl_,^9`,\/ST6;%/r:ol3Fk]?%0_[l'dsM$2B[PW&-2b2O^eH*Pn=a,`5_:$RbOlrVODq\o`u:EM6O3S&8;JiT(QW^O%P+]D5E5NBQGD,fooQ/A6?lN%G481[-t1<Io^5Ap,9<.:!/&*9mJ[#JIff]\3'[TY6kI1*T\s2[+4*7V3'\`gTRd:e8>q%?,(Y>u%4!bi+;-eU^]=d3"UQ$M^d/,8%-km(hoW-_PUfC4DBqIboRuHS9cc)'Z!+I!'$j>9tcL[JJV]tb)hNN[FOVH'R8U?&UKS]%gQf6j7PGR0*PEFS>H;j#BZ2/!;q+=9)%i`+LMeEtWYRLH_leB$n#4Lm[%k`W9JFK2mnR0p:@bEA@Jb0#$oqXr8$N_I^QD=a&*/EN+Re.\:[ki6Xq6PhoZ,[0.EOs(G&UpFs&%-&=s33mqKdlm+\[BUV$E</4.C<S*t/A<2OWJl<tfr64D$@S;_O8QIAS3ihSrBMN5G+DP$DO?#*Zjj8sc-Aus+[pd(OX;5VC[bE(Y%A`"GLcq[M-+sRV-OfXS+fQqU;+>B!aZD+/cOLZ-__R%E9*%,GXX\SPu5\/>T6Rs$LeIReh'CGJc8.=qo$U(\MhoV<9ZkL#2TC=t,%^RC=MXSL'YHHFSt8CGIF`;3iQ,95HRk\4XSR<D`o7_GEu>1$M(,\=mETs:icKV^b'aEB@?R.n*h7VYT.*;;tc/PIth6mORF''\6S%6'aAI,:Y^b\ubYT!ccL?.dTupW`a+,`$Arh9_80S>T3mA6Znjb-^&D!0Y1<p9b.Pj<RQ_0$UbY$Xn.CrfSPR,8O^e!j\KI.jB&E=%I<m)o/J+=p1o;jc1m>(FBA/3KB,[Md,)Fc0h3Ak_Ck9YDSpW:E1&R8VIe"&o)LiYF#,7Kfig"s<ZN]@6otp6)Ou.G`K6K*89]b`_%8*$"(5K)7ZicS8]gkX8,H#cH8$Ug::oB4[MIn7OMk=\!=6bfX0+L$^O,WDW5&i1L_G47tA&-J-WW2.tRRSoOk)429N!"@<i#XFb"%+;%4Vo!6=U'EAF`.NBQP&.T0k.YNUoEi@?P!<<ZB(l/_'!!#Old[u!?V*YE"2en^c5\!u6nU%JYg3=kP4Wd3%P/0!Y+b^l79E'E?%/pf>VdkC0JJ,"C=H"/g;/5[Uc4=nuohVrZ_^Gc@I'VbqtNkk&#63UOCQ75)OVT7[rH4U0S'#kH.j23Uic3MimS.Ks)3X"$\>KY$8%D9?8,/()JWJ5IQB?sZ1'gHd<)p0lPMGU'!WHCJB5,"=W`!$>:B"flMfYj6dQd[C(=cJ9>loT*s17gI]6Tj0/)f,=e6[*`,gZdR@A%f"a5T3cOrj#C=#W8FB1Tmdf6AoN:E$k^h4PgqXF]F'm,,c$3@ap6L,VXYB+OcduHhba,2s6lYXb!]AFC<U=E-bE!K8po/[8"jDO9%\!V3nJ0B$SOMQf>(GH;')ClRT`%V_8i10S7&3FE'kQ6dnclk#hl!`trR:R&"d4I;pRY&4=L`s\"._<P0hO=U[Xe5\R.@4_?qu?er%rm6"[`+fFkN=hFiJB(frTlKsumJX@&q+o'd^OuI`4otBsJ;_s__s<$7e$o5[Y*@^:s!;R2f*,End53GXojW=@SU>oubTX;*Lu85D%i&s1da^5mSiddW+jp;)eQ6k(dJV&A'FNOj"!g`m-(5D7N_fH?Hh$c=4,960\15Cp-,5Q4;afX!fg_sKJ1UOd)nC*-teu&ZLn5OS_%29]hggDfMA6H;>N>.F7)NAA,TWH4O:j@^'dk5WKa/@Zd$):m*cdIU3S#"+5";F2pPeHL@<FJJJMX9d@pEBha/c9j%1b5SEHl>Wrh%7L;6R["8:H.-=1+>0gf7<ZjaO5d?.`eut\b_),)hi"1p%_e=Kp%FMstej_5FTKdi?lh1[]-9MUO,nZ7jVc\E"r'P#1n!\`^/GNNB%&!7%1X8/g,QRl=-S4]7c5?jQA*j),Cd/90@?jF>cX&&$:T.@A`1gdIg`tQ1fk't%4S3VhLP!U:R%4pnS7=t5,,53MXW@X[bIE57d%E!bJ;2HYJ5BudLC#8Nt3622E?"A5i>jKhV*I$An`i@']!<*+R*:jbe8//jYfPj.tlJ80so-[hU%\$RQ&,d:d9Sf<fCi]f]Kb@,m2%h!e'U``?`kLgES00NN.jA%iJ,?T081.6)(X%YFieD7ht2/6L?W6]5jce@U9\,13l!l+o[`<#B-Ihuo/Q48LB4nctU=IJHh6Ljq0_%(Zh#:mFX[.q_jVL8KoEZZ!<S->G]4nJi5ZFr$pi2Tb_FMmZGJ#X\'Dq&#1rM<j]:-TKaJb:Y?`"Zd$\tclXP`l)!?9Z-c>ua?OD<%^SM7)oR[UFlV4W4BE0+tE`OYC3[H_)FoF_KLM'2?X!*G6XG548h?Lin*'J6K8SBQ(m"$M=&_);f$5b7D!GQfff&!At!L%kDiGX#I%F6>PrT#$L3?&Xo2"-48@32<EBkqS+1UFDsCE2.P7.hh6Q:Fa=1(Mn.E>@PKQ#EdOq)MZG'3&WmY7*]&=qEuZl:"`;lg-nO5X3%3#%f%`Wi&.FY9-2=OK39%N[Pn%o.!4,aj<$Qh$(^sJEDe*)hX:/">4"FJYYX>:QidH$*(QE7+_(oc($R#*Jr^l#t]F/@1nku#+D77$R%$ae<%nX/?7"(p4<k2l8,i.A&%&kNYUK!T_[pK5_SZ/09@+gdKdUS'8>=B&6bL:k7E(P)E5jXo8taoJ@jC3s_SM7'S'#I;\kHJ^$B%.E1(`e@c[M)^!5o!U($5,"u^q>];+`DtjcYD@WJ\FS\51*QR(>T/Y+4;p=BUI<c^:KS!p(;6t/K8q+nV"AG(b4Riat'c%#X?_4*h%jXg*)mZ`]`CIP=p,s's3'VnkX%K+nQr%d<L7#)DAnZ<9*]0#-l`\LtTp4tjKkkNW6<]u'5?+E*2lS\$[!2`J4mI(iK,h(/72"uIU%`B>CJr*5?p(H%YgSO^16Fo8#>6F)daH%QaaD2tMd1b]RJ6\Ss%:8#W#K[fWt-L(d%PSXq<IEYMZ[$7sO%;(c&$AYT^%#0I`V8J9m%j?kMm)2+&cL_-TrbI)a1Ysm`Y.OPfBDFILq@l4SH$'5hR>X#6X'.aeHn=d?=ppsjhh4&t'8M:olYgEn7QA_RcQG[q._RHI;:`*VD%+tWe:q.:(L.Yr2";<k,7hF*<g1GlKI](i(,J9Is@n\i47PI\p)LasET]"4I8En0XnU'Ikr7UcgiE-AC0r:DNJ#)*"U(eJp<%j8BL%l66ZL$fBN&IL/a)hLG3aNm*+l%UDDK\uDl.1cLO&c<f%C&uV;^k87f^IMfLmY!dmrOsRdI.Zqb9Gp[A((o#-FG:8X2d7@O>=>M2K%6HtFd/Sq79]F[jQ[@p^-=8VD?0dD^JD=Jhb,e=q`ORa?TJ-dpToJSauah!>jNCYe'W&Aku=E3.XnD)?oD[>)DM^(V$i'hG5,RuR3%1l\tj%^)L*M,i?___A@V&*mUR%R+-C+tTt1QPq8]"?MDceNUO`lnd%qir-.R`tmmp.Tlh?M^sJ&$Mih_nX7=d`X.J5pkk(T,+o(N%C:gR/=JsXaiD9f[0S/^P*/F-cL=h83D68eg1ng^NTE94K!j\>oOJAk-(A"GhfO;b=M8A_:hXKW=>q#T.G(lG4?@?kUZM03Bg;<pn%KBTT\:>I*M,O_U6A5kBIVH@M*-0*`3.Jf>B,`nsqj#^9Wd5ALAKN^jp7>CR\SEhUM<[]W1J5[+#cs_NXecSbhK6<_61]:mg20AIM%X&k&M!JN,teOsS#/Z8J\bgf3m1af$R5[QeA'J4m<['%O?O9orLkZ%$m1kc)1DVDkDe9+,6FMn(f)?AnJ,JiuX/MCt:CN)IKp/e6G%%hU2MQ7,;N9@t=qFsFP!1Ek"40*qU*dpW&Q`BlP!m#bL`42I0m.<5obo"KV[V^Xj\5(FL/,UYV&7VbU+^b[+H+s>\r.Y=]-GVG.6%PVR(l\uTk2(dd&;YF9-!YV+H48;7&TQKAH01n0ksUgg2WD5@HRb/DSQ38mHI8e!:"QS6iuBSbmgcME)X.]--H_.E4R%bbqHm!SOR%=pUBJhVJmPfrG;$6?-D0;-hNK%>'GUgn,u1iB3'D$:rU2dbr3<0V?\iK/$r9e70-Ab6u+L\S(sd=\P8m4OVqlGHlBJfd]b^5Sk#n%1DXc&F>n]6=]*^TU[dkk>F$A-)>[36@+j=3A9qFemZc6<0nm,2m>7/NCq@>SlI=2[mD7WopMd=_LA)mZlQg!0Lt1j-_J7Gg]W;\g%BFeH<-e1!j=O1N4K"D*<gEI&';"U+j-TNWRFF0<9nqF7T306@4[30g7'h,nWEG*WMQ^@oR68:PK2/X&$Uc>N**<<[XH3Xc$"udR,%$5L\R;^<*`$j[mP@c-e^DFfEeOB$7L.S@Wf)*3AX/EK-uV<sN*%cJ'4Y6C,g7rjOJW;1<Y;#g9`U`0a]X&.Dr.=BF3X]E0lTSn6j%d*cMdftGX96b,d$gN1bkPs)>Y<5EZ8po9aB0hPolb'X/":i@Pr:.J7cmJi]_\W8Q_T!)5TCouX"g".l>I@9'!r6il1Dp]8'kOPKe%3V1Gh!4k9cg[sGlE=*2O9rlm)e7$X301RNZO0"sk7L#C.0k,DR`4n,%)]#_f2s\SO&gY=]h.()CdZglt+QtIh"TY1Rk),di/"/&6%HqdKLZk6'VL4o3Phl^iNL>1k]X:u71&gJQ)cd\dP18p,=7g.>\^A=[&eBV#)5":0fV`:ki$.WZ)QY+)-'9LSu3?JJ;\lPOFDYSCS%^.[<I=jU=@?39^aQ"'ouc(b;'>4!$Pr'SWR::;3*PNo>1]XB'h]SJ]0'oL5qLEVAeVUOWZ:%dF.Erg>_g]sgB%@J0f(p"LrX?pP?%6=Y62rl<lD4bU!3dY#PC6om!.iGMLnmP&kn9jeKqQM=]$"HNok&mqb-+u)1j/W*Y=`>*%N$\<DS(FrU/`@,@\\%B)75YDcICBi&M%FkKS*8GEQOQl^cK9-T!DL5i;nC/OU(;?B4!7A`a=-(DYo`4,3VFt]KPU=+'<%Kn5E?-_GW!-_$ffnh/\Ra"\&oIAN6MH2mqpbNj4%mg1-7),bHbL;$W]+_PXiL+-YG4.G^%A8;GLF4cX'FJbI(jd!7,]/jXa1'1`qRCK8`;!`O^Zl2+4UuW8?j!M[m3$ODN7K!k)juDY=%W>VQ*-i`G4:[&1uoDuH*!+t*bZeptrk=(]lo`l/c@>()Q?3d$VOX"?9?8nW.Ffn\L\GUZ$:m01imP@1kKGB=,6+)VX]i^Brp9;\A%LOBQbn9Nd_1HH"tQ84OWi;/?m;!\Lh[D[SqHBOE4)Yql=@Y.Yu'oi0TB14Ug2?dOFA=m\j^&-KooNrCCVR9^d?3%>1o(NrNBTWR6%ei32O*M"#fYA>a;"W5g[JX1`BTZ:Z'&%i3"A-GD.PHc"jl5e]F>4fS3*lMZH1!R;imr*<<K/p,&Y1uIEp+]n'&'r0W#a!flB=fkr%7(Ensg_joSIYUfKdPZocV[-%.9o\$sr^lolkd],U$h,,m*3lEi\'E(DG8BY&'*A[To*p.*laO0Yb_X`FIV+W57;`LF7^VZ(52adu%4BfgC&072=a-SK!]Kn;SN66Z#mcOtgF.CYGr^F_+!?j2*Kq6BE)!ue2%nF-7E6hl=A2r,HH`2c*c7>k57`G8RHLMOge".B\"/=@?%j;39N:m=p3YH>qrgd&uqV<p4AS`Hf,jli6b&+aP@6`P7.E-\3*+:m#LOT.)ddW&nPNOZKN:S'#)Rs'Sk#>_Zg;Cg.l;-pL:g/9We%GZk/q(0\E8a@]jk6i=%6AY@>\K5RH?*D\1IfF.5?,K*0>5bQJ@C&5a9f-?K5Q9eEqY-beuHD,g>P(?ee5&lgO9^[QuCDsit'Z0RF%bjek:7(!t"Y9+J]`m2YMNPp#[pI9[P&kr*"_*4bUJ=[/i<.loF58<Y[1&OaL?I=*1R0qnKid\1[X7X?+hO4&0#NPY)!d.dMnJM0k%=?F:22e'BZ+pH`ejG9G#Tam:hG/?SfiEB+\h:fFUgSYQih?]L*MaP1e=_Tc.?ABSMd%[3@$gsWQg=c%D&<H!ANV,QL&QtUXDj]A:%#jlqE>%Cl.mA"Z="C*)h'`Qea,Ta8;(sUJ^&X(HL[KDRK)La/%$aZfCeA-#^<_q.l"M.m@eDS6M5'QS@LSLs@F9K:A_t_o8bP_X_%E%X:.aR`>'bW'9SXZalX4mAoDr"-?r;7AfrM1AD*."jKB";"48";n3]hJe4`-J/jfq*`,a\3^n+M_@bIYU@p<)UoEG0JNIH%$)"_%EJL@!MToTE,[Cbc3Zhk$b!Q.`-h\doaq[b_%!GJthu)e=4sWKu*U*Hb3$3_aBOe'D6@uga,<9>45cDrs`6ISlm-E#@=Hl#slc=%<%g;AB@mT;7m,R+]D^dWSR'='p.6fu?"Ak;8VPa-hC+hVh[ra)>>MZ=L^IaEL(EmcjYSD=Os)?7>V]5TQb.B*UM>BHFZA]"J\dLW$f%f&O8%E%Qi3&MY?h9$U]r8'5MaL&Jo@g#ut._&t.X9L#kYf4i0V\07U"a:2oS'>NEDXbRFk;'iI*a,'/K+=!_kW'O0?DU^m4Hj!Np%H4`fU"mX\XR^q^?p2M,cUnY3X2WE&n"4YP^eg.^RjG.usNnG"XPqKkHj(TWK^=7k*(`TCgM?KE]i%S?K0:ZcH^fP*.g0t2"/hC0E%LV6V;H_alF-P?C1Ni%8m.1JQ%&(F@g5oG82&D3ZH)()2_4T&"@]_-Uu1sfsJ%FiT8DUf_QAKeBjp>R(T&hdKJm1UflI>H*h8X!EJ%;)Uc)M!(fQ34gJgR<./D3Tt#_cG<59.XY4^7:*mS>q!huh$;"`1*rg@GX@P*$7Qm!%[C7mVWVJr4:\=j"K;OHk&[J]GJMna00)k3%@/%;>X9lc1&ocMLNmQr&Z.,"IYBuh<Zu/.j9VA<W,ttoA&[m%;S-9ab8WUi\!E7A4^1-D]JhWE2@F7?iZO^iZQGB*R$CVh$-CG#B%BcG?XG%]pg`AAiRZ&(,PAQ;sfaoS]1B#W7f[:=c$G92fF5hd(8B:&1jCGCKo!ML.]D1Utao?_-Wrb*h+-;B3pa<S)S#&bXcqW5JH%ENBGM\kc`bTd\ccW34DV7gl<:cQD4=[,TJe+8>XY0XAonW'C_^"',1=#iXl&mChDE6QDG<V-8tt@^FIe9mNtiKg)`%W%MuA%9tZS%5m3HUk/BbdR4sGZ>6)')G7@mZ#a3:/,Mu<3N]b^XE)BpdNuZ/uTZ*JG>f8oLH!TqqDk.Rs$KTFuUN&!u1,ED$#tjhm8p#t405E8u%T23@MYsLI2puSe-.r<gbC-Z:m!VCd526nNj6K`<2Jcf#WTpY/"C_"t]*.SN'o2</OSY&Wm,&m:m&OKu<;aYM8]S,ZVAqOK6B-r!g%_+<"$=k$q+Ze<KU[;T#[.0j]6ob6bRnBDdIX0Y"2!-R?<S=8a(=#2bYeTMTl\Qe>Df&V4LXbK7r#D;eQO#?7B(`I*I(5H/`k]sJF%ASA^i3I4pcdQM4:X*r*"XAT5ki_c3OT"PE0;bUEc_5NO-QOs,T7T>`ufUE_tJ/^Lu9e.bd<*_rdSMY@rf@_IF0Op0:+H4ZVPEt1]%'kt4I/\Bc^`JE]m8nB]jVr;,j'-1m=$)F1O]UC9b=HT$=mXkNJ'/=He!7ZD=ib&d'@*U_]keb1J=oMJjn3@1_'piI_lA.!O_R_(;%7OBc"J09K.&7L9PSK%D0^P_.t;<eo^-r[D,\U*)iQ&kghbCKFb3g=@8*\`<B\bV^!d^fQK!HV5=I#1LF.2le0`ki(Wd2b8J^7@[9%Z!_mb#/c?jAAK4=d;m-5Nr.KXO[(0M8!M)5j/Et2)DCB=qCQE>&^7LX5q>CtnpVh?WZAlSK%<Z#\.KteFKY+1'(YkA@51$$@:\7$%W#h4(HKPeQ$R>Lm6+l(V6/t>i"><4,5NsmX#5:Wh=i;HlBu@pd%2N*ne.pW$VBP/*,d8Df.E%98aY%jjNq?!Ba?:jta.P<?_D#^7%WS5EJ1LKS\aME(jNZHsK+d<#G:W,M:@Qb$jl3&hG6JU;[<m^&$*)Oh+06Xl,W$mBf?f51t!pT&"Eu2W)Ib%I(-/A%l`nHjWZu6&L%[@,dSFZAlHJ9[;$Yt2[&)&Us+/^VJui^+@LLYR;loiPK>Q4_=niY/VXWXQHQJL>THS%U//i?JAVnC!a26#ch.JnQ1g!P4'0$GmZ@%:EEM2>iVT\JTK1A>@gkNE$$4BP;@p\HjC*I+!&OA1ZgFM6=2+Qa0:t:!?u!uiI+^dN4nRreYg<cm(\sQCU-p>^KgN-WWHU`*cOIa%W]81E/"<mYd>#AjcbgbSJFGX<2"emFpfO94Z[4GM/?rH4$qRS%D)gjDbb3q\4C`Ya\]4WV2`fo`qK(hX-lq`<fP-q^M`rXTQO$dk%<cs1j/HhL"-)H+@ALK+/^/5A#7hh7&q0hJHs3R5[W:\t*7GV:AM8r,E0YASebuRsW<K,-pq-O;*g3Sq^9<J?L!q6*=W[dk/+-5?u%RFejZSpXn!EnjfZS`M<_B_"$]5"+WL#%<3,1kMcZgUR_(K#iB?-EBmS%.h-[$*FoG-dNXI75Z;D#Z5s+TO'1KBW*4\ZuVD-1GmZN%o$ZZC?AFL!kn$>1TY.GDK#Fud,8c1]]Q@A`_h8S.ilqB@^J!.F7\skb:#St+m8gOSL*!@J5\t7cc(\Bs!D#h;!bfq_F6!]?-E`MW%DH<,6`!%FR_@?!ZnVeuMSLND9M>01i(ndjp-=#_.p4#."Ro1Xo2@ZsBP!Mnt3`.i\F.lCn/$mlsVX9Pq?.$/=JQNkN":[57a;BE2%,EYUp&3^;U#N<s(Vr26<@4eCom%Q&J_s&=4fPrtC%JuTQ#R4o*cPP@P%RSX9aY!4$`@kF8[(W^&]7U%E>FVlpe_Uq)V[.,V6+;P[%7FIoF/!kHJ-E!?YXBT@aY_2ZB8-=Q$>U+3;n6#`*GuZ<oq2a#!Oml@urW(2Do.CO[MRfV0et59u5FpIGRjsA>3(k5>\8,Oqm-n5_%U+K;A=bnnIUrCukZh]Ll*$JL5)a[N-Gfdg7;"9m&?)dadRfLS>oW4Uu?uO'Ri!<!b#g=!FB/3_$'I?f;Q,0mjTOVBe<J_"Y(N^sB%8pimI%b#O=BeuFQJ.h_jgjWkiOf-45V"3!mYKZ^B-&uZZm"(]r[O@DG6*&'Y]Be/QMX7@M'"%`sq9T=LiV/qVM.6(q;Kp7WNPb`L%*,@3QW#c_R#Q/Po@).E3D%gkNCi.Nq])f'V;7*7YI4d4-ci=W;ha-cQ&_-kjL@9TLbo"\-O8I2c;+5&qR36Sb#*H.4Q$AB>T+ZTr%1jqL=.ASiU?kqnGQSXN7Q?4RIlYk]2+.2.1cj&ZcGr3aqJp_fUdlFBU>_LiWYak"h!ETFG.#mi]J.Xf\UVTsHBN^2XXg:pIB^@+3%W!';E_n$td*"!(mLeF3gZDNDm8?g$Ijd_>!L&5,:,G8PFn.,d1cL)4;UL%hd.pP>BDtgZ^9VRY6OBESp#[KP^Ep:kt"^Ch1LDr>^%'oWG=G9BL$>PP-Hr'TY@2rZ\;WPQ6B3W]uKKSk:(;Yd.^U7jkqdu/!?#u_MCHQl-U9&!5N2_!L%K-nTqe(*5eoe,kZqDES_oXu2V%Wh)?&%>9O'KaA>ZY>_,i%E]?1NZO!?G!i&a@oX0eXKa2tWA=TVTA,eUT[AAH!ORh8$%WO>G=TR'R%RJ&>\<taf'_B^Q&_Bk#i^Eb%K,oZ!0L7<<*b$9&/V><%Jtas@P&sX<:%h@;I&I-NKQo.D\BTc*"qe#4eYWZ:@O+ZWV8d8`+oYJ*l*J<t(8FSOU/OX/"O-d1jm1&+%1pVd;>ie$qHmac_Mhld##^1>$E?&/WGV9K+>EHaVJN4EXr/$(8mN>s?Ifq:T+K:\I(`!C&'14e!\PN>0e/F4ch5o'dMH_qYh*04<%C2se0$[n[AUnP]4<Z>qFX8<-BrWhYaAggj0'I?PjCra8HA5OQco?&3efnlg2H/I[YbR=We&;E\ZVP/[;WLW,kkI)V!6$R_#n?Q4d%BL/n8cCZS"B(d=sDDk=n;K`*JKnln)DT063+PL!G.*)D"h1.p_GAc$QakCpsd!ThZJQ+3?QsK8_33F:t"4b=ZU30>N@H&;f+9fIh%<'ZQn4h2j:c8H!)P8YgHjCQBGD63c'H@MG.)W;#Em:DSr2:k:-$miAjJH)9!kW_B97'Hl0E@h1,L_)\;QgSK?)P]#436?l)!_b=9%>m3djW2Y3NR?/qtcs(%aG?P4O"oA=m].k?q[D/St?_.l7SIM@Tj,NE,K6,\!2Zb?=gk<'*9K;mQ/oXNdoj8>eWKci-XX\m2;Re?1%:CZtL3^$cR]7ZasE<CeI+tp0+Z!i?7H7Z1qb$$]2_AgW=AYkg5Sk@!b]1!jl+Hp_0<O1i/F_`c1id#+<(bT]@_9^Jm7-*kjX2qE3%;U-=Ur3g,;OUcUgATd+-a`f/(.e=7)(+tC]9FOBM7h;99is&$tC5kR"/mNL=j!'$9fgQs&SrR<^lJsI>5^$h'AssY^[[;Y1+#]Hs%*j&,7H:^%/8_"Y=LdB]o(9["o91gps!g*PY*eL]'@kK"V28Md0Bu9&KDn:aH;%,Xo[o:9JV:QeO)Sd9.%#.okH]aLo;-\1<M"g?g%73!l5_8d!F"i4]m(=j"OMRqn@^'Ggj85H]WT=&?-8@VYf`c#G*\F-(RJ\R09D_6X05/+W:7';DX+jh=afMB86eKFZkeK\N]Zl%(3%MPfYCH7srsE;5lp!*tpm*arJHGjRT0d&S/F\reX`TS>t$k?Rul\(Ggg=FE)&Nus7LQVaD+%0C,gl(-ZE_<&m-Ma`pH&ufs/jSA%$%956YXK`IIG[5g&D3>,S0jd`PEJnh/Ff.^\!)ZV#"+Q#o:jUeIDQYr5-Ljd+McuKTu8rVd>P^Jc]WX%XA`A>PKWA!/HM!I5WT>]II%@2To@c@&iup=Ya"er^ou$<o"9q[s1ZC!':$<"m%X7-mGle$1`mPf&TiN8VW2Sa`O54=`FXHOGtd`u>gB68O?./X=ReG&RmKNJUF5%Z`s?hgD^T=enFh/IVM=Np";C!WX5P#EGe;9;iA8](_ph&jk7Fm\IH]X#Mp[/g`iae8cjr=7QuMZ!"&k7<Nq9'D$oCIEuB`f`o05e%ldiB&:M@T#dR+fE_%G5@Q#A?0hUnn#!SfU;`9KKa$PIM6#`u%:c0U-gJeK*R`csJT=b?lfWa0+J`9R&?nXt4'(JqhF>pbmlC]PHn%qkNR49RO\4V?48['ud*s`;O1sonnrI]e<dr"pB53nnj6s7m9;Zfs@Pnm^CV+<u*AZmYE*65oYZ4hMN;U[RF<5$nNqVXA%[s$*f_a%<i-FiJ2Pki^_Jd;0\&Jd)jY;%Cc'Sc@B]5=nd>>'W2P;DZO$eM<aJJ(gE0fi*@QN);`O&kRGge5&2gMLc/t*-1!jW1I?f(^(2XPj%OmDK^7^h6t3EVQ:2hsC#d7VCZn<g5g;J0FR=$$u<bDlLQ<3F:XXMoIL-OgWBQ.3S3:c'>qcE5'49<?24_]Db%0`K`+&oPOUGLl>^%+BU@\3NtSGZ[YNm@e-"#i5#k8hT<:cWY,KTa^:iR.\pV=#Oq5$1dm]uF6\Pb8ak2FVKHEYX4XmO[A^(PQ9"Hpk]_Gl5(l1^<!%g?%O7ii9T=.cYOLDLta2kr>KNEt!-9k2f87>?9p[?qZ5F>i(,J-D].$G=1`O/mF4DseqG(2Tbfjp[>,XW]=S@<](!*6QQn6H/!52,=)%44GIlKmL9f>L[k!i-o[,)nK#pQJk?o>XBA"?I6iT<];`qjDI6BX],mtkUGmBmT,PTmHU'O6J?RG.0'[6:eX>4%^_0TOIc0kZlCMb%#4]b7iS<dP6MKU:I4Q+u"<#M\BKgb<+N>m*)&^S2[IrhTe.C"nXU8->ar1jID_ALi/6!<?)p%N^HEk`B-BeT*l^FD/,R]'7GgH5W%P0W>j<c&P!D:T2>N2V+N>7hU,5WX]/>+bI`MPe`LRDP[n>3Vu/J<o'E%Os!iY71XGT7i>Q.2U<V8/;Yp_j#k!!8(gNan;;d_-\6I%nu<bu81%D[kKnKJXoB&XmjD*7qCd[VRpQ.-eb5>Z<ma#"9:+enB#ad^>+fQ,Cj^hn4JEGe/e"PJk`H6>a13'3f^B='-6GiVd1,9$%cum9+]JS!#6=11)GuM:3Q8$ZOjB@5/Q1GdIqq6!`ALKN]gmB-tC!b\k4*WE&'1k:-G!pLH.Z5+_W5?0D]3/9CJOXHc$-TFiFfRT1%q+h)iBfKn(#IoL]q.hP[1^@LkAR*G8/kT:.7A[CeqDMBOX\.W)3^+JHJLXG4f8l9Q[d#>ZY\pkq98uZ&^,.m8E642(2NPe?1]BXI%;A#-nFi6on4_YQCi*)Q+6oHHS-$aRCkP(q$i5/4rUPk'H="?V5U->Y;(FAtdjX_J[dE3'An1!r!j0%t)[-E8i]!h]Rm$C`GK+q!F%PJZb/%nP*)@[_g$*MrG6>1:sL9;40*`A(FW#U&H+DD]2G)6RN[[>HcH/3@+mkFj.t8**:c2IGf$><m`^6RP.+s"d$[\u-be)7mUB%P-,"ETJQC&BI#h^fn0p1I.6)>[,^S8LZ-bG\<A)foUNTJm(N#`k2RdPi%%B"7?or9B\-R)%jV4#9E3u&m\dQDqlHf1l3\+AQUk$,%")+<\[XnSh;iL/GUa[ie\-l\p_Q1[3A:@i;/"5<KJG2kn*B`g:gi=or7aFZRa>01geLcDg>KfqHLjAO?!(nELJ-)/WBb?3&QHMfS%9[6KrgmuisZ8$pmB4%kF,\@hPMGj;;n3NIudZ\!X9",`f,%)l!>aL)GG^PGg8cp60:HE84pXp0g>BPo#nk7\G2(Y?/\&^6Tm<P6,%j!l+J!(r>`/+]kbA8&W%+]7a#j)eDVfjbAq;j:pNfH?os.S'm#(5/t[,P2X-USi+s52+dP_Qk_1bE&eP@<1']1NUjjo4>c'8=$Zj%?$CRO.AQJ1aQ5H#I?E==HP4kuW5tFYdshe`8HVjAnLW1P?p78jrpLEm\4<75&lYXFqO/etFS*;umehsD?GNPWPVJU[qn\GIZDP#Q%!iiJ.Sp?$boNabYeaCgT/1idebjs:7hjQ>d?Q0'l5[:Xb-%-uG5;F6p[Smir;J6^6AR!B2`F0_U:bd_fGn@5Ybh+CF9Sq/mYgT['%1>D0!M9'H5<Fr%Arn=PeVXh+Bd14kA(A6%Vo`lMeHtV-He'Rls:@V6*U0gB'T%J8&!*aEe%q%#93]h<L2J:SZRtR.eGQ*gia-$6;%\UR)WA-+0/-;0,50[>LIa=K)+J[5'$eVX!fC.%!u.Ap'L4uP`K[_@TnSU>NFZtNar`PmW>5eMR`cTi,TdrZqfppJ*DBq$[em-6na%?M7Vo^/(PP@uQ+ea2mLjM!8iQ4VF6EjhJ$;3<M)b$R_8OODQs+P!Y(mZD^guNm+FC5TNGA#D=U*6gTk,ELs.=eBLk,!%[;p%.jtU%[&<WZ%>W^rNV[DfBn$n[lL\oc?drKs6*$T%YgtM&QbW9j^t(M)>YWb9A=&Hd'^N21!$/HV9<E:F]3[ea1ub-GoSLn<@+)Mp"W!-N%0r<i%;@Rb[$b10nCf6UsW\p1m>&&0XO8UuDK@*>uf(_1/rp*QjU>CBhn:BWL01#4kS=sQ4'*5CG_u_Be#c8/IO<K,2ETotApgl+Q%Z&?f&5lD)E]HPqKVdr73MA=]Q;,?7rN'1mq4!AQA>e?Bgi[l%_Un]i0be[YU,Ji:>-6a<Ii]`=K\Q9,iBunR%_SX<dDFQ45d3$/W%n3>PdIL.&<g^,R?YWroCO;dojrr_>K*4eW5B:"rN=+/sjaoo;GGi$W-Fh.M(Nk)F">h!n*hRS,4nV]&s""fJ:bKL1LF%Kr&rDmYK%Hr9F>Ler"<]0$UMP2gL[IpJ!9?Adp43]5fCXs;UsGKcV`$*Ma/cF##V:(s,(\1)#<OYuoa45I*`1lErbqKL2rO=NaSn-8;$q?!su%f3GV>`Tg0k_LTTMRaEE.FP^^g,uYf+K0&H.PV<2'`c4T%+_)r7\#Y!G0BK*8mUJj]!V&g3\Ff+u=+90Qo!?`;R1gPZq,Er(_sNkK%j_-<4Jbc&]#HQ4L]%Y#'.J"0bEh\.tjF##F7trsOT5q\i*&N4d-JDr@'qu+)qkWJ/cWV!Mmal!9!meGcB[@!:"p1pM_BeE&7YO]F%bbUtb:0k!&V=%@eLVY_$EFB)W\d:>Gcq&g5He:*h#'\t-?Va;:d49IR:P0ADi5obe'FZk4Md-1b<he+5&ltq:0$b0O&c!"&haT5T%PuubBKLtA?d]YaO]iIqm0E\NDbZ[OuRItH*H1n;.XKIrM^B(7;<sYPoG/]##h[u"4;Ia4XA2dfP70d3ZDqtjU855][Uc3<'btMM8%qGSqs4H!LG7sn_W&C-!64:=O]eI47D#m13gb!;>:\k5DOX@eJmVcp^*<H*O1Pkhr]+0tQ^.eHOL$0pVEFh62T`!bjCBr*dXI?M^V%^#%`f1!eA5pLWf`8QQHP9>JBjc9:WH&BlV=F1KTo-*umd`EY38*?oqU[\bq4N^6J1>$HIe!6HAqU+'$a?aHD;%=AgDKQ7LW2i4@@%nH^(J(Alj:(b+Ya/P$+6Ea*uSI0cCa!\tU&F^;5tRd6.>N(gBglf-,ghKq0j_S1mg6Apalj^Xr<JoL)mb`jQ4ji^)$=@O,iJt<G:%`qtsIAT;us/KB=>7`lig$7c-:-4Cc_%?).I?Wg_/fW80o,cELD9ZJ3`cZJ=/"9K&b<A7%5s"4Q(iaXuKO"pA?6>c2H9WR7uf5:W`%=q3\Ai<&4V]0dTFJ.L4fpXfD&nIPqr4f"nm>jYumCBr#b@ArNeo'3p`<;B9_p[F=667]J+HeE's8_`Q%,jR?k-kZ\EUOq,X&mg*-%3Ke28Gad]6#?.;.MY3tN``M`[qFX_ZDnB;_4eh'';;t7a(PsiTPsL/WRq8Q:Z>nE*G[:e)BuPBVCA:okpC57VLA0i;?;n]"g=<s"%KhJH[?4r'&K#SW^4>P)gZ`(h\<3GJ^MD0hYSOHORcnPo3~>%AI9_PrivateDataEnd