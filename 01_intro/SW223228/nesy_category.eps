%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.3)
%%For: (kyle Hamilton)
%%CreationDate: 6/21/22
%%BoundingBox: 0 0 406 235
%%HiResBoundingBox: 0 0 405.2838 234.0844
%%CropBox: 0 0 405.2838 234.0844
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.3.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.3.1 x1103 R agm 5.512 ct 6.513%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 7326 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD26FFA852A87DFFFFFFA8FFA87DA8FFA8FFA8FD04FF7D7DFFA8FF%7DFFFFFFA87D7DFFA8FFA8FFFFFFA8FFA8FFFFFF7D7DA8A8FFFF7D7DA8FF%FFFFA8FFFFFFA8A8FD08FFA8FD38FF7D2752527D7D2752527D527D7D2752%52A8A8527D52A8A8FD0452A87D7D527D52277D527DFF527D7D275252FF7D%27FD04527D7D5252A8A8527D7D27FD04527D527D527D5252527DFD36FFA8%7D27277D52527DA8527D7D52277D7DFF7D7D527DFFA8277D7D7D52527D7D%5252277D527DFF7D7D5227527DFF7D7D275227FD047D27A8FF52A8525252%7D277D527D527D7D52A8527DFD36FFA8FFA8A87D7D7DA8A8A87D7DA87DA8%A8FFFF52A8A8FFA87D7DA87D7DA87D7DFD04A87D7DFF527DA87DA8A8FFFD%06A87D7DA852FFFF7D7DA87DA87DA87D7DF87D7DA8A8FF52FD5DFFA8FD0E%FFA8FD0BFFA8A8FD04FFA8A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFD47FFFD11A8FD6FFF77214C2228214C2228214C2228214C%21A2FD6DFFA8FF532121222122212221222122212221217DFD61FF7DA8A8%A8FFA8A87DFFFFFF52FFFF77214C224C214C224C214C224C214C21A2FD61%FF27525227FD045227525252A8A84C222128212221282122212821222122%7DFF52FD5FFFA85252527D527D7D52527D52FFFF7D2128214C2228214C22%28214C222821A8A827A8FD5EFFA8FFA8FFA8A8A8FFA8FFA8A8FFFF522121%222122212221222122212221217DFFA8FD6DFF7721222122212221222122%2122212221A2FD6FFFFD04A8A2A8A8A8A2A8A8A8A2FD04A8FDFCFFFDFCFF%FDFCFFFD7BFFA85377537753775377537753775377537753775377537753%77537753775377537753774CA8FD5BFF4CFD042122212121222121212221%2121222121212221212122212121222121212221214CFD45FFA87DFD0DFF%A8FD06FF77214C2228214C2228214C2228214C2228214C2228214C222821%4C2228214C2228214C2177FD45FF52A8FD0C7D52527DA8527DFFFF4C2121%222122212221222122212221222122212221222122212221222122212221%22212153FF7DFD43FF7DFF7DFD065227527D7D277DFD045227FFA877214C%224C214C224C214C224C214C224C214C224C214C224C214C224C214C224C%214C217DA8527DFD42FF7D7DA87DA87D5252A8A87DA8FD057DA8A87DFFFF%532121282122212821222128212221282122212821222128212221282122%21282122212253FF52A8FD58FF7721222122212221222122212221222122%2122212221222122212221222122212221220077FD5BFF774D4C534C534C%534C534C534C534C534C534C534C534C534C534C534C534C534C534C4C77%FDFCFFFDFCFFFDFCFFFD67FFA24C534C534C534C534C534C534C534C534C%534C534C534C534C534C534C534C534C534C534C534C534C534C534C534C%534C534C534C534C534C534C534C534C534C534C534C534C534C534C534C%534C534C534C77FD2BFF4CFD042122212121222121212221212122212121%222121212221212122212121222121212221212122212121222121212221%212122212121222121212221212122212121222121212221212122212121%22212122FD19FFA87DFD09FFA8FFFFFFA8FFFF7D214C214C224C214C224C%214C224C214C224C214C224C214C224C214C224C214C224C214C224C214C%224C214C224C214C224C214C224C214C224C214C224C214C224C214C224C%214C224C214C224C214C224C214DFD19FF52A87D7D7D5252A8527D527D52%7D7D52A8AE4C222122212821222128212221282122212821222128212221%282122212821222128212221282122212821222128212221282122212821%222128212221282122212821222128212221282122212821222128212228%FF7D7D7DFD15FF7DA87D5252527DFD055227275252FFA877214C2228214C%2228214C2228214C2228214C2228214C2228214C2228214C2228214C2228%214C2228214C2228214C2228214C2228214C2228214C2228214C2228214C%2228214C2228214C2228214C2228214C214CFFA87D7DA8FD14FFA87DA87D%7DA8A8A827A8A8A87DA87D7DAEFF53212122212221222122212221222122%212221222122212221222122212221222122212221222122212221222122%212221222122212221222122212221222122212221222122212221222122%21222122212221224CFF52A87DFD27FF7700222122212221222122212221%222122212221222122212221222122212221222122212221222122212221%222122212221222122212221222122212221222122212221222122212221%222122212221222122214CFD2BFF7D775377537753775377537753775377%537753775377537753775377537753775377537753775377537753775377%537753775377537753775377537753775377537753775377537753775377%537753775377537777FDFCFFFDFCFFFDB3FFA9FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD%1BFF7E224D4C4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C%4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C4C28%4D4C4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C4C284D4C%4C284D4C4C284D4C4C284D4C4DFD1BFF5321212221222122212221222122%212221222122212221222122212221222122212221222122212221222122%212221222122212221222122212221222122212221222122212221222122%212221222122212221222122212221222122212221222122212221FD07FF%A87DFD0BFFA8A8FFFF7DFFFF7D2128214C2228214C2228214C2228214C22%28214C2228214C2228214C2228214C2228214C2228214C2228214C222821%4C2228214C2228214C2228214C2228214C2228214C2228214C2228214C22%28214C2228214C2228214C2228214C2228214C2228214CFD07FF7DFD0452%7D52A87D5252527D52527D527DA8A84C2221222122212221222122212221%222122212221222122212221222122212221222122212221222122212221%222122212221222122212221222122212221222122212221222122212221%2221222122212221222122212221222122212221222122212221FF7D7D52%A8FFFFA8525227FD05522752527D527D525252FFCF77214C214C224C214C%224C214C224C214C224C214C224C214C224C214C224C214C224C214C224C%214C224C214C224C214C224C214C224C214C224C214C224C214C224C214C%224C214C224C214C224C214C224C214C224C214C224C214C224C214C224C%214CFFA87D7D7DFFFFFD05A87D52FD09A87DA8FFFF532221222128212221%282122212821222128212221282122212821222128212221282122212821%222128212221282122212821222128212221282122212821222128212221%282122212821222128212221282122212821222128212221282122212821%2221FF7D7D7DA8FD16FF7700222122212221222122212221222122212221%222122212221222122212221222122212221222122212221222122212221%222122212221222122212221222122212221222122212221222122212221%222122212221222122212221222122212221222122CBFD1AFF7E77777D77%7D777D777D777D777D777D777D777D777D777D777D777D777D777D777D77%7D777D777D777D777D777D777D777D777D777D777D777D777D777D777D77%7D777D777D777D777D777D777D777D777D777D777D777D777D777D777D77%7D777D777D77FDFCFFFDFCFFFD0CFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.cb7c5a1, 2022/04/14-05:22:35        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator 26.3 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-06-21T05:53:28-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>148</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYqwf8AN3QtZ1vQdMsNImuLa6bWLF2vbQVkt0SWrT+HGP7Rrtirzix1n85NHsdaaTSL6HVNUutQ&#xA;aJLK1F5At6jWKxzKzo5WCSJZzGW+E9PtUxVNYpfzsW2/SEmpajLKAtyumGxs1Tmuq/VzAxW3Ehja&#xA;x+MgMH/a5Yqldhdfm3pnl+ew0ZNUitoJIhdtcWKJJaiS7n9UWHG1ne4T0vSZj6UxXkeO+yqs38tv&#xA;+aLaF5lv9SuZJtcgtIodC0+SCKC1e5Gk20zTCkaSt6l9JIrcmotCoApiqTaVp/m/X9d8vPq51K60&#xA;nSdYa4iudSs7aCVyumFy80P1eNVWK85JFIqr9r4SSFfFUF54uvzTvNW8z2FnJqy6XCsc9k9naqgj&#xA;SC5tDwhb6szzO8Zmb93PIzUKtGnwhlUZe+aPzQZ72zjg1WGOymu0ur+PTo2c2smtRC2lsg0TJNJH&#xA;pTt8IQ7gllZxTFWOW0P5saVpKfoS3vLQXItvrt/JZL9cCyX+tyu7Rpa3JLEval1WFuAf4VUMWCrN&#xA;/JerfmXL56a18wLctpr2KvMothDZw3Cw2/8AdyGH95zlaYgrcseoaJKKcVYlD5r/ADf1DRbi60m5&#xA;1C5heSEXl5JYQoYB9anjlGn+laStOnopFzb0ZitSR8VQqrKdNt/zF1Hyd5wfzBcXM98+nfU9L09L&#xA;eOCN5H0e3klmiAjSZnkvJJVozUUgqAMVYTFp35zeX5fStYrqdLLSNOs7bWAjTTmze5aWVSghuq3V&#xA;uG9JqQuxQc+NTiqPl0jz1c+ZNOvLxb0eYJobVJdV+qyxw2vG2ZXvLe5B+rRxq7Vns7iEeo24FKYq&#xA;yTRfMX5h6v8AlaPMMzzQajqN5bsYrKCG4ntdOE0VvcvaoqOszMkctwhKuaN8IPwriqSapq/5t3Wr&#xA;2mn2R1g6bPZNFLeTWUNu0vrW91xmZY7d0gmSVYK8p0oT/cqC2KoZ/MH5zWKzz281yul2WiGe2Go2&#xA;nplmj0tnklnd7WJUuI74ceMk6hlA+ChMgVW23nT8ytRsLm40K/1bU7OC5voNJuf0da/WJ7yKO0Np&#xA;baigt41gt2Mk/OQIhFPidSFBVTiLVvzXgv8ARLebUZWuPMeq6hazWtxBaxvY2lpfmSKeJFhVmjfT&#xA;raReUnL45ENemKvYsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVU7e&#xA;3t7aFYbeJIYVrxjjUKoqamgFB1OKqmKuxVZNDDPDJBPGssMqlJYnAZWVhRlZTsQR1GKrkRERURQq&#xA;KAFUCgAGwAAxVvFWnRJEaORQ6OCrowqCDsQQcVUrOys7K2S1soI7W2jFI4IUWONR4KqgAYq39Vtf&#xA;rQu/RT60EMQuOI9QRkhinOnLjyFaYqq4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUHa6zpF40K2l9b3DXKS&#xA;yW6xSo5kS3dYpmTiTyEUjqrkfZJAO5xVFSzRRKGldY1LKgZiAOTsFVd+7MQB74qp3t7Z2NpLeXky&#xA;W9rApeaeQhURR1LE9BirzT/nIH8wvMfkjy1p2oaE8SXFze/V5TNGJBw9J32B91GZGmxCZILdhgJH&#xA;d4R/0NF+a3/LRZ/9Iy/1zN/KQcj8vF3/AENF+a3/AC0Wf/SMv9cfykF/Lxd/0NF+a3/LRZ/9Iy/1&#xA;x/KQX8vF6j/zj9+cHnPzv5l1HT9dlge3trL6xEIYhGefqom5B8GOY2pwRgAQ1ZsQiNnu+YbjOxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4hP+QfmKNOGna4trA9rcLN&#xA;aoxUfW7nULS6nMbvFMqxXEFiqOrRsA9W4tyYYqix+S3mX12NzqkepQRrpTxLfTTSPLLps9lI3qMI&#xA;/g5x2cqFvjqZOQVPj5qoCX8iPObaTNZz6+NVknefmt/PJ6XOVUC3ii3hhInHBgUfmDzarHFUJ/zl&#xA;vYwJ5W0u8VpTNLqCq6tNK0QC28lOMLMYkO3VVBOZmi+o+5yNNzL5azZOa7FXYq9x/wCcThct5t14&#xA;WrIlydKcQPIpZBJ60fEsoKkqD1AIzD1v0j3uNqeQfR35eaN5j0byymn+Yb39I6lHc3bte1YtLHLc&#xA;ySozciaEq/2Rsooo6ZrXDZJirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVQOr6BoWtQJBrGnWupQRt6kcV5DHOivQjkqyKwBoaVyUZEcikEjklP/Ks/y4/6lTR/&#xA;+4fa/wDVPJeLPvPzZeJLvLv+VZ/lx/1Kmj/9w+1/6p4+LPvPzXxJd5d/yrP8uP8AqVNH/wC4fa/9&#xA;U8fFn3n5r4ku8o/SPKXlXRZ3n0fRrHTZ5F9OSWztoYHZKg8WaNVJFRWmRlOR5lBkTzKa5Fi7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqluu+ZfL+gW8dzreo&#xA;Qadbyv6cctzIsas9C3EFu9AclGBlySIk8kk/5W5+WH/U0ab/ANJMf9cn4M+4svDl3O/5W5+WH/U0&#xA;ab/0kx/1x8GfcV8OXc7/AJW5+WH/AFNGm/8ASTH/AFx8GfcV8OXc7/lbn5Yf9TRpv/STH/XHwZ9x&#xA;Xw5dzv8Albn5Yf8AU0ab/wBJMf8AXHwZ9xXw5dzv+Vuflh/1NGm/9JMf9cfBn3FfDl3O/wCVuflh&#xA;/wBTRpv/AEkx/wBcfBn3FfDl3O/5W5+WH/U0ab/0kx/1x8GfcV8OXcj9E8+eS9dvDZaNrVnqF2EM&#xA;hgt5kkfgpALUU9BUZGWOQ5hBgRzCfZBi7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8zsP&#xA;zY1GDR7HU9Xsbe5fWbWHUNO0zS5kN1DBLb3F263IuXiT93DaNRwwDuGUKONcVVv+V16TNcQQWOk3&#xA;t29/M8GlUNvH9ZMNwLWZh6kqmMJMwH7ynIbrXFULafn7oWoXKwaXouqXnrLafVZfTijikkvfqpji&#xA;9WSRUVgL5Cat0Df5PJVB6r+f0C2962l6RM5so76Sa4naJowltZXF3FLGI5KTLIbRwQsg6fariqYa&#xA;j+fHl6xuHtzpOpXMsNzLZXKW0ImaOe2aQXCMFbrEkaP7rIhG1cVYZ/zlvfK/lfS7T0ZlaLUFYzNG&#xA;whblbybJJ0Yiu4zM0X1H3OTpuZfLebJzHYq7FXYq7FXYq7FXYq9h/wCcWJVi/Mq4lYErHpdyxAFT&#xA;QPEdhmLrPo+LRqPpfUnkrznpXm/Rv0tpqSRwCQwskrROwYKr/agkmjPwuPsuadDuDmrcFPsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdiqTSeSvJslvcW0mg6c9veTC5u4WtICks4rSWRSlHf4j8&#xA;R33xVD6x+XvkvV5HlvtGs5JZpop7t/Qi5XLQVEa3B4/vUFfsvXFUcPK3lkXYvBpFkLwCJRci3i9S&#xA;luVMI58eX7oovD+WgpiqG/wH5HEc8f8Ah3TPTunMlyn1O34yOyujM44fExSV1JPZmHc4qirvy15c&#xA;vFZbvSrO4V7j64wlt4nBuQoT1zyU/vOChefWm2KsE/Pv8ufMHnvy5p+naI0C3FrefWJDcu0a8PSd&#xA;NiqvvVhmRp8ogbLdhmInd4b/ANCp/mf/AL903/pIk/6pZmfnIebkfmIu/wChU/zP/wB+6b/0kSf9&#xA;UsfzkPNfzEXf9Cp/mf8A7903/pIk/wCqWP5yHmv5iLv+hU/zP/37pv8A0kSf9UsfzkPNfzEXf9Cp&#xA;/mf/AL903/pIk/6pY/nIea/mIu/6FT/M/wD37pv/AEkSf9UsfzkPNfzEXf8AQqf5n/7903/pIk/6&#xA;pY/nIea/mIu/6FT/ADP/AN+6b/0kSf8AVLH85DzX8xF6F+R35HedPJPnR9Z1l7NrRrOW3At5Xd+b&#xA;ujDZkTb4D3yjUaiM40GrLlEhQe5aXpOnaXa/VbCBYIOTSFRUlnkYs7szEszMxqWJqcwnGReKuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpNpfnLyxqlxdW9hqMU0tmSJ+qrQOYyyOwVZF&#xA;9RSnJCRy2rXFU1+tW3qel6qepWnDkOVd9qf7E4qgr/zFo1gkT3NyFSZ/TjZFaQFqqKExhqbuOuKr&#xA;9V1zSdK0241O/uVhsrQMbibd+PD7Q4oGYkU6AVxV5j/zkl5y8zeVfKumXnl++awuZ74QyyIqMWj9&#xA;F24/GrDqozK0sBKRtvwRBO753/5X5+b3/Uxzf8irf/qnmd+Wh3OT4Me53/K/Pze/6mOb/kVb/wDV&#xA;PH8tDuXwY9zv+V+fm9/1Mc3/ACKt/wDqnj+Wh3L4Me53/K/Pze/6mOb/AJFW/wD1Tx/LQ7l8GPc7&#xA;/lfn5vf9THN/yKt/+qeP5aHcvgx7nf8AK/Pze/6mOb/kVb/9U8fy0O5fBj3O/wCV+fm9/wBTHN/y&#xA;Kt/+qeP5aHcvgx7nf8r8/N7/AKmOb/kVb/8AVPH8tDuXwY9zv+V+fm9/1Mc3/Iq3/wCqeP5aHcvg&#xA;x7nf8r8/N7/qY5v+RVv/ANU8fy0O5fBj3O/5X5+b3/Uxzf8AIq3/AOqeP5aHcvgx7nf8r8/N7/qY&#xA;5v8AkVb/APVPH8tDuXwY9zv+V+fm9/1Mc3/Iq3/6p4/lody+DHud/wAr8/N7/qY5v+RVv/1Tx/LQ&#xA;7l8GPc7/AJX5+b3/AFMc3/Iq3/6p4/lody+DHud/yvz83v8AqY5v+RVv/wBU8fy0O5fBj3O/5X5+&#xA;b3/Uxzf8irf/AKp4/lody+DHud/yvz83v+pjm/5FW/8A1Tx/LQ7l8GPc7/lfn5vf9THN/wAirf8A&#xA;6p4/lody+DHud/yvz83v+pjm/wCRVv8A9U8fy0O5fBj3PQfyJ/Nn8w/MX5k6fpWtazJeafNFcNJb&#xA;tHCoJSFmXdEU7EeOUajDGMLAa82OIjYD6jBB6ZrnDdirsVdirsVdirzm5/KjUp9OttMbWbaXTNLl&#xA;EmjWFzpqzwqtZAVvAZg1zRJeK8WjAIDFWbfFUu078gNMsPq8sOoq2oW0E0Kam9qpui7yWTwzNMJA&#xA;xkhWwdQ3/FrUp0ZVC+VfyMvLO1064vtQt7W9gSETWlpahYqxEtV2Ev7yZix5zUHL4fhHHFUOn/ON&#xA;trBpstnBrEbvKZlaa7s5LocJfTpLwkuqLdL6IpMtBufg32VSn/nLfT7SPyvpd8isLmbUFSRi7lSq&#xA;28lKITwHTsMzNF9R9zk6bmXy3mycx2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;vUv+caP/ACb2l/8AGG7/AOod8x9V9Bac/wBL6P8ALf5c3VlqVnqV3Z6fbXdpq9zqQe0d5B6NxYy2&#xA;fBOcMLK5rEZGZmLkMxboo1LgPQsVdirsVdirsVdirsVdirsVWTW8EyhZo1lUGoDqGFfpxtVH9Gab&#xA;/wAskP8AyLX+mGym3fozTf8Alkh/5Fr/AExsrbv0Zpv/ACyQ/wDItf6Y2Vt36M03/lkh/wCRa/0x&#xA;srbv0Zpv/LJD/wAi1/pjZW3fozTf+WSH/kWv9MbK279Gab/yyQ/8i1/pjZW3fozTf+WSH/kWv9Mb&#xA;K279Gab/AMskP/Itf6Y2Vt36M03/AJZIf+Ra/wBMbK279Gab/wAskP8AyLX+mNlbd+jNN/5ZIf8A&#xA;kWv9MbK279Gab/yyQ/8AItf6Y2Vt36M03/lkh/5Fr/TGytu/Rmm/8skP/Itf6Y2Vt36M03/lkh/5&#xA;Fr/TGytu/Rmm/wDLJD/yLX+mNlbd+jNN/wCWSH/kWv8ATGytu/Rmm/8ALJD/AMi1/pjZW3fozTf+&#xA;WSH/AJFr/TGytr4rGyicPFbxxuOjKig7+4GNotWwK7FXYq7FXYq7FXYq7FXYq7FWH/mZ+Zmk/l/p&#xA;NrqWpWs93Fdz/VkS24cg3BnqebKKUXLcWIzNBnjxmRec/wDQ3fkn/qzal90H/VTL/wAlLvDd+WPe&#xA;7/obvyT/ANWbUvug/wCqmP5KXeF/LHvd/wBDd+Sf+rNqX3Qf9VMfyUu8L+WPe7/obvyT/wBWbUvu&#xA;g/6qY/kpd4X8se93/Q3fkn/qzal90H/VTH8lLvC/lj3u/wChu/JP/Vm1L7oP+qmP5KXeF/LHvd/0&#xA;N35J/wCrNqX3Qf8AVTH8lLvC/lj3u/6G78k/9WbUvug/6qY/kpd4X8se93/Q3fkn/qzal90H/VTH&#xA;8lLvC/lj3u/6G78k/wDVm1L7oP8Aqpj+Sl3hfyx73f8AQ3fkn/qzal90H/VTH8lLvC/lj3u/6G78&#xA;k/8AVm1L7oP+qmP5KXeF/LHvd/0N35J/6s2pfdB/1Ux/JS7wv5Y97v8AobvyT/1ZtS+6D/qpj+Sl&#xA;3hfyx73f9Dd+Sf8Aqzal90H/AFUx/JS7wv5Y97v+hu/JP/Vm1L7oP+qmP5KXeF/LHvd/0N35J/6s&#xA;2pfdB/1Ux/JS7wv5Y97v+hu/JP8A1ZtS+6D/AKqY/kpd4X8se93/AEN35J/6s2pfdB/1Ux/JS7wv&#xA;5Y97v+hu/JP/AFZtS+6D/qpj+Sl3hfyx73f9Dd+Sf+rNqX3Qf9VMfyUu8L+WPe7/AKG78k/9WbUv&#xA;ug/6qY/kpd4X8se93/Q3fkn/AKs2pfdB/wBVMfyUu8L+WPe7/obvyT/1ZtS+6D/qpj+Sl3hfyx70&#xA;98jf85GeV/OHmmy8uWOmX1vdX3q+nNP6Ppr6MLzHlxdjuIyOmQyaWUY2SwngMRb1nMZpYb+akmtx&#xA;6BbNpMl5HILtTcLYxXMjyRCKT9072azXMKs/Gkkcb0YAMvAtirCbDzz+ckbyw32jPbWMKWqm6ksL&#xA;u9vYlYQB5XjtljhunbnIXWBqof2aA4qh7T80/wA2L3y5Y3VloTXF9dWNrfNOlhdtaGG6h06T1IpI&#xA;xIsjL9Zuz6acn+AfCf2lUVdebfzouNHvGewNrcEpHE1np10zoYrOyupZkEpLOkkk08SxmPkCvGpZ&#xA;SMVQWq+bPzXNvcaPb6ZfiG4t9RC3SWV+LhZBJdvbyRXIMgWqwxqFcqfjUKCCCFUH/wA5bnUf8L6W&#xA;JFhFh+kF9BlZjMW+rycuakcaeFDmZovqPucnTcy+W82TmOxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV6T/zjn/5OXy9/0ef9QM+Uar+7LVn+gvoRfzP8xvqiw21xpd5Z&#xA;/pgac/oQyNP6RdIyEj+s7srM3xvxLqjusZUAtqHXvVsVdiq2GGKGJIYUWOKNQkcaAKqqooFUDYAD&#xA;FV2KuxVh/wCZn5Z6T+YGk2um6ldT2kVpP9ZR7bhyLcGSh5qwpRstxZTA2GePIYl5z/0KJ5J/6vOp&#xA;ffB/1Ty/87LuDd+ZPc7/AKFE8k/9XnUvvg/6p4/nZdwX8ye53/Qonkn/AKvOpffB/wBU8fzsu4L+&#xA;ZPc7/oUTyT/1edS++D/qnj+dl3BfzJ7nf9CieSf+rzqX3wf9U8fzsu4L+ZPc7/oUTyT/ANXnUvvg&#xA;/wCqeP52XcF/Mnud/wBCieSf+rzqX3wf9U8fzsu4L+ZPc7/oUTyT/wBXnUvvg/6p4/nZdwX8ye53&#xA;/Qonkn/q86l98H/VPH87LuC/mT3O/wChRPJP/V51L74P+qeP52XcF/Mnud/0KJ5J/wCrzqX3wf8A&#xA;VPH87LuC/mT3O/6FE8k/9XnUvvg/6p4/nZdwX8ye53/Qonkn/q86l98H/VPH87LuC/mT3O/6FE8k&#xA;/wDV51L74P8Aqnj+dl3BfzJ7nf8AQonkn/q86l98H/VPH87LuC/mT3O/6FE8k/8AV51L74P+qeP5&#xA;2XcF/Mnud/0KJ5J/6vOpffB/1Tx/Oy7gv5k9zv8AoUTyT/1edS++D/qnj+dl3BfzJ7nf9CieSf8A&#xA;q86l98H/AFTx/Oy7gv5k9zv+hRPJP/V51L74P+qeP52XcF/Mnud/0KJ5J/6vOpffB/1Tx/Oy7gv5&#xA;k9zv+hRPJP8A1edS++D/AKp4/nZdwX8ye53/AEKJ5J/6vOpffB/1Tx/Oy7gv5k9zv+hRPJP/AFed&#xA;S++D/qnj+dl3BfzJ7k98jf8AOOflfyf5psvMdjqd9cXVj6vpwz+j6betC8J5cUU7CQnrkMmqlKNE&#xA;MJ5zIU9ZzGaXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>431.381256</stDim:w>
            <stDim:h>248.484375</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -234.084 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 234.084 li
405.284 234.084 li
405.284 0 li
cp
clp
gsave
70.4837 16.6444 mo
405.284 16.6444 li
405.284 234.084 li
70.4837 234.084 li
70.4837 16.6444 li
cp
clp
70.4837 220.146 mo
389.341 220.146 li
389.341 197.844 li
70.4837 197.844 li
70.4837 220.146 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.793973 1 .278019 .337499 cmyk
f
grestore
gsave
70.4837 16.6444 mo
405.284 16.6444 li
405.284 234.084 li
70.4837 234.084 li
70.4837 16.6444 li
cp
clp
70.4837 177.392 mo
338.324 177.392 li
338.324 155.091 li
70.4837 155.091 li
70.4837 177.392 li
cp
false sop
.793973 1 .278019 .337499 cmyk
f
grestore
gsave
70.4837 16.6444 mo
405.284 16.6444 li
405.284 234.084 li
70.4837 234.084 li
70.4837 16.6444 li
cp
clp
70.4837 134.638 mo
185.272 134.638 li
185.272 112.337 li
70.4837 112.337 li
70.4837 134.638 li
cp
false sop
.793973 1 .278019 .337499 cmyk
f
grestore
gsave
70.4837 16.6444 mo
405.284 16.6444 li
405.284 234.084 li
70.4837 234.084 li
70.4837 16.6444 li
cp
clp
70.4837 89.8844 mo
121.501 89.8844 li
121.501 67.5828 li
70.4837 67.5828 li
70.4837 89.8844 li
cp
false sop
.793973 1 .278019 .337499 cmyk
f
grestore
70.4837 208.995 mo
66.9837 208.995 li
false sop
.749721 .679194 .670497 .901457 cmyk
f
.8 lw
0 lc
1 lj
4 ml
[] 0 dsh
true sadj
70.4837 208.995 mo
66.9837 208.995 li
@
10.8244 209.693 mo
9.85938 209.415 9.15687 209.075 8.71688 208.671 cv
8.27812 208.266 8.05875 207.766 8.05875 207.173 cv
8.05875 206.501 8.32687 205.946 8.86312 205.506 cv
9.40063 205.066 10.0994 204.846 10.9594 204.846 cv
11.5444 204.846 12.0662 204.96 12.525 205.187 cv
12.985 205.413 13.3406 205.726 13.5919 206.125 cv
13.8444 206.522 13.9706 206.958 13.9706 207.431 cv
12.84 207.431 li
12.84 206.915 12.6756 206.51 12.3469 206.215 cv
12.0194 205.92 11.5569 205.772 10.9594 205.772 cv
10.4044 205.772 9.97125 205.895 9.66 206.14 cv
9.35 206.383 9.195 206.722 9.195 207.156 cv
9.195 207.503 9.3425 207.797 9.6375 208.037 cv
9.9325 208.277 10.4344 208.497 11.1431 208.697 cv
11.8519 208.896 12.4063 209.115 12.8062 209.355 cv
13.2075 209.595 13.5044 209.876 13.6969 210.197 cv
13.8906 210.517 13.9875 210.894 13.9875 211.328 cv
13.9875 212.019 13.7181 212.573 13.1794 212.989 cv
12.6406 213.405 11.92 213.613 11.0175 213.613 cv
10.4312 213.613 9.88437 213.501 9.37687 213.276 cv
8.86938 213.051 8.4775 212.743 8.20125 212.353 cv
7.92625 211.962 7.78875 211.518 7.78875 211.022 cv
8.91937 211.022 li
8.91937 211.538 9.11 211.946 9.49125 212.245 cv
9.8725 212.543 10.3812 212.693 11.0175 212.693 cv
11.6112 212.693 12.0662 212.571 12.3825 212.329 cv
12.6987 212.086 12.8569 211.756 12.8569 211.339 cv
12.8569 210.921 12.71 210.598 12.4163 210.37 cv
12.1237 210.141 11.5931 209.915 10.8244 209.693 cv
cp
f
17.756 207.928 mo
17.3185 207.928 16.951 208.088 16.6535 208.406 cv
16.3573 208.725 16.1741 209.171 16.1041 209.745 cv
19.2785 209.745 li
19.2785 209.663 li
19.2473 209.113 19.0985 208.686 18.8323 208.384 cv
18.5673 208.08 18.2085 207.928 17.756 207.928 cv
cp
17.891 213.613 mo
17.031 213.613 16.3316 213.331 15.7929 212.766 cv
15.2541 212.201 14.9848 211.446 14.9848 210.501 cv
14.9848 210.302 li
14.9848 209.673 15.1048 209.112 15.3448 208.618 cv
15.5848 208.123 15.9204 207.736 16.3516 207.458 cv
16.7841 207.178 17.2523 207.038 17.756 207.038 cv
18.5798 207.038 19.2198 207.31 19.676 207.853 cv
20.1335 208.396 20.3623 209.173 20.3623 210.184 cv
20.3623 210.636 li
16.0685 210.636 li
16.0835 211.261 16.266 211.766 16.616 212.151 cv
16.966 212.536 17.4104 212.728 17.9491 212.728 cv
18.3316 212.728 18.6554 212.65 18.9204 212.494 cv
19.1866 212.338 19.4198 212.13 19.6198 211.871 cv
20.2816 212.387 li
19.7504 213.205 18.9535 213.613 17.891 213.613 cv
cp
f
22.4372 210.396 mo
22.4372 211.122 22.5903 211.693 22.8966 212.108 cv
23.2041 212.521 23.6172 212.728 24.1359 212.728 cv
24.7809 212.728 25.2734 212.443 25.6134 211.871 cv
25.6134 208.766 li
25.2697 208.208 24.7816 207.928 24.1491 207.928 cv
23.6253 207.928 23.2091 208.136 22.9003 208.553 cv
22.5916 208.969 22.4372 209.583 22.4372 210.396 cv
cp
21.3534 210.272 mo
21.3534 209.276 21.5816 208.488 22.0378 207.908 cv
22.4953 207.328 23.1091 207.038 23.8791 207.038 cv
24.6291 207.038 25.2209 207.29 25.6547 207.793 cv
25.7016 207.156 li
26.6972 207.156 li
26.6972 215.933 li
25.6134 215.933 li
25.6134 212.908 li
25.1759 213.378 24.5941 213.613 23.8678 213.613 cv
23.1016 213.613 22.4909 213.315 22.0359 212.719 cv
21.5809 212.123 21.3534 211.333 21.3534 210.349 cv
21.3534 210.272 li
cp
f
32.3512 212.869 mo
31.93 213.365 31.3106 213.613 30.4931 213.613 cv
29.8181 213.613 29.3037 213.417 28.95 213.025 cv
28.5962 212.631 28.4175 212.05 28.4137 211.281 cv
28.4137 207.156 li
29.4975 207.156 li
29.4975 211.251 li
29.4975 212.212 29.8881 212.693 30.6694 212.693 cv
31.4981 212.693 32.0487 212.384 32.3213 211.766 cv
32.3213 207.156 li
33.4069 207.156 li
33.4069 213.495 li
32.3756 213.495 li
32.3512 212.869 li
cp
f
37.549 207.928 mo
37.1115 207.928 36.744 208.088 36.4465 208.406 cv
36.1502 208.725 35.9671 209.171 35.8971 209.745 cv
39.0715 209.745 li
39.0715 209.663 li
39.0402 209.113 38.8915 208.686 38.6252 208.384 cv
38.3602 208.08 38.0015 207.928 37.549 207.928 cv
cp
37.684 213.613 mo
36.824 213.613 36.1246 213.331 35.5859 212.766 cv
35.0471 212.201 34.7777 211.446 34.7777 210.501 cv
34.7777 210.302 li
34.7777 209.673 34.8977 209.112 35.1377 208.618 cv
35.3777 208.123 35.7134 207.736 36.1446 207.458 cv
36.5771 207.178 37.0452 207.038 37.549 207.038 cv
38.3727 207.038 39.0127 207.31 39.469 207.853 cv
39.9265 208.396 40.1552 209.173 40.1552 210.184 cv
40.1552 210.636 li
35.8615 210.636 li
35.8765 211.261 36.059 211.766 36.409 212.151 cv
36.759 212.536 37.2034 212.728 37.7421 212.728 cv
38.1246 212.728 38.4484 212.65 38.7134 212.494 cv
38.9796 212.338 39.2127 212.13 39.4127 211.871 cv
40.0746 212.387 li
39.5434 213.205 38.7465 213.613 37.684 213.613 cv
cp
f
42.4345 207.156 mo
42.4702 207.953 li
42.9552 207.343 43.5883 207.038 44.3695 207.038 cv
45.7095 207.038 46.3852 207.794 46.3964 209.306 cv
46.3964 213.495 li
45.3127 213.495 li
45.3127 209.299 li
45.3089 208.843 45.2045 208.505 44.9995 208.286 cv
44.7945 208.068 44.4752 207.958 44.0414 207.958 cv
43.6889 207.958 43.3795 208.052 43.1133 208.24 cv
42.8483 208.427 42.642 208.673 42.4945 208.978 cv
42.4945 213.495 li
41.4108 213.495 li
41.4108 207.156 li
42.4345 207.156 li
cp
f
49.5019 205.62 mo
49.5019 207.156 li
50.685 207.156 li
50.685 207.994 li
49.5019 207.994 li
49.5019 211.924 li
49.5019 212.179 49.5544 212.37 49.6594 212.498 cv
49.7656 212.624 49.9456 212.687 50.1994 212.687 cv
50.3244 212.687 50.4963 212.663 50.715 212.616 cv
50.715 213.495 li
50.43 213.574 50.1525 213.613 49.8825 213.613 cv
49.3988 213.613 49.0337 213.467 48.7875 213.175 cv
48.5412 212.881 48.4181 212.464 48.4181 211.924 cv
48.4181 207.994 li
47.2631 207.994 li
47.2631 207.156 li
48.4181 207.156 li
48.4181 205.62 li
49.5019 205.62 li
cp
f
51.9574 205.474 mo
51.9574 205.298 52.0112 205.149 52.1187 205.028 cv
52.2262 204.906 52.3849 204.846 52.5949 204.846 cv
52.8062 204.846 52.9662 204.906 53.0749 205.028 cv
53.1849 205.149 53.2399 205.298 53.2399 205.474 cv
53.2399 205.649 53.1849 205.795 53.0749 205.913 cv
52.9662 206.03 52.8062 206.089 52.5949 206.089 cv
52.3849 206.089 52.2262 206.03 52.1187 205.913 cv
52.0112 205.795 51.9574 205.649 51.9574 205.474 cv
cp
53.1293 213.495 mo
52.0455 213.495 li
52.0455 207.156 li
53.1293 207.156 li
53.1293 213.495 li
cp
f
56.9789 212.668 mo
57.3189 212.668 57.6408 212.581 57.9445 212.406 cv
58.2495 212.23 58.4702 212.001 58.6064 211.72 cv
58.6064 210.418 li
57.757 210.418 li
56.4295 210.418 55.7658 210.807 55.7658 211.585 cv
55.7658 211.925 55.8789 212.19 56.1052 212.381 cv
56.3314 212.573 56.6227 212.668 56.9789 212.668 cv
cp
58.777 213.495 mo
58.7145 213.37 58.6639 213.148 58.6252 212.828 cv
58.1214 213.351 57.5195 213.613 56.8195 213.613 cv
56.1945 213.613 55.682 213.436 55.282 213.083 cv
54.882 212.729 54.682 212.28 54.682 211.736 cv
54.682 211.076 54.9327 210.564 55.4339 210.199 cv
55.9364 209.834 56.6427 209.651 57.5527 209.651 cv
58.6064 209.651 li
58.6064 209.153 li
58.6064 208.774 58.4933 208.473 58.267 208.249 cv
58.0408 208.024 57.707 207.911 57.2658 207.911 cv
56.8783 207.911 56.5539 208.009 56.2927 208.204 cv
56.0314 208.399 55.9008 208.635 55.9008 208.913 cv
54.8095 208.913 li
54.8095 208.596 54.922 208.291 55.147 207.996 cv
55.372 207.701 55.6764 207.468 56.0602 207.296 cv
56.4452 207.124 56.8683 207.038 57.3295 207.038 cv
58.0608 207.038 58.6333 207.221 59.047 207.587 cv
59.4608 207.952 59.6758 208.455 59.692 209.095 cv
59.692 212.012 li
59.692 212.595 59.7658 213.058 59.9133 213.401 cv
59.9133 213.495 li
58.777 213.495 li
cp
f
62.5687 213.495 mo
61.485 213.495 li
61.485 204.495 li
62.5687 204.495 li
62.5687 213.495 li
cp
f
70.4837 166.241 mo
66.9837 166.241 li
f
70.4837 166.241 mo
66.9837 166.241 li
@
19.8956 168.034 mo
19.7906 168.936 19.4575 169.633 18.8962 170.124 cv
18.3363 170.614 17.5912 170.859 16.6613 170.859 cv
15.6538 170.859 14.8463 170.498 14.2388 169.776 cv
13.6313 169.052 13.3275 168.084 13.3275 166.873 cv
13.3275 166.054 li
13.3275 165.261 13.4688 164.564 13.7513 163.963 cv
14.035 163.361 14.4363 162.898 14.955 162.576 cv
15.475 162.253 16.0769 162.092 16.7606 162.092 cv
17.6669 162.092 18.3931 162.345 18.9394 162.851 cv
19.4869 163.358 19.8056 164.058 19.8956 164.951 cv
18.765 164.951 li
18.6675 164.273 18.4556 163.781 18.1294 163.476 cv
17.8031 163.171 17.3469 163.018 16.7606 163.018 cv
16.0419 163.018 15.4781 163.284 15.0694 163.815 cv
14.6619 164.346 14.4581 165.103 14.4581 166.084 cv
14.4581 166.909 li
14.4581 167.835 14.6512 168.572 15.0375 169.119 cv
15.425 169.666 15.9663 169.939 16.6613 169.939 cv
17.2862 169.939 17.7656 169.798 18.0994 169.515 cv
18.4331 169.231 18.655 168.738 18.765 168.034 cv
19.8956 168.034 li
cp
f
22.0643 167.642 mo
22.0643 168.344 22.2274 168.909 22.5537 169.335 cv
22.8799 169.761 23.3162 169.974 23.8624 169.974 cv
24.4137 169.974 24.8512 169.759 25.1749 169.328 cv
25.4987 168.895 25.6605 168.29 25.6605 167.513 cv
25.6605 166.818 25.4955 166.254 25.1655 165.823 cv
24.8355 165.391 24.3974 165.174 23.8512 165.174 cv
23.3162 165.174 22.8843 165.388 22.5555 165.814 cv
22.228 166.239 22.0643 166.848 22.0643 167.642 cv
cp
20.973 167.513 mo
20.973 166.891 21.0949 166.333 21.3387 165.836 cv
21.5837 165.34 21.9237 164.958 22.3587 164.689 cv
22.7949 164.419 23.2924 164.284 23.8512 164.284 cv
24.7137 164.284 25.4118 164.583 25.9455 165.18 cv
26.4793 165.778 26.7462 166.573 26.7462 167.565 cv
26.7462 167.642 li
26.7462 168.259 26.6274 168.813 26.3899 169.303 cv
26.1537 169.793 25.8155 170.175 25.3755 170.449 cv
24.9368 170.723 24.4324 170.859 23.8624 170.859 cv
23.0037 170.859 22.3074 170.561 21.7737 169.963 cv
21.2399 169.364 20.973 168.573 20.973 167.589 cv
20.973 167.513 li
cp
f
29.1237 164.402 mo
29.1537 165.105 li
29.6187 164.558 30.2455 164.284 31.0343 164.284 cv
31.9205 164.284 32.5243 164.624 32.8455 165.304 cv
33.0555 164.999 33.3293 164.753 33.6668 164.565 cv
34.0055 164.378 34.4055 164.284 34.8668 164.284 cv
36.2568 164.284 36.9637 165.02 36.9874 166.493 cv
36.9874 170.741 li
35.9037 170.741 li
35.9037 166.558 li
35.9037 166.104 35.7999 165.766 35.5924 165.542 cv
35.3862 165.317 35.0387 165.204 34.5499 165.204 cv
34.1474 165.204 33.813 165.324 33.5468 165.564 cv
33.2818 165.804 33.128 166.128 33.0855 166.534 cv
33.0855 170.741 li
31.9962 170.741 li
31.9962 166.586 li
31.9962 165.665 31.5449 165.204 30.6424 165.204 cv
29.9312 165.204 29.4449 165.507 29.1837 166.112 cv
29.1837 170.741 li
28.098 170.741 li
28.098 164.402 li
29.1237 164.402 li
cp
f
42.8944 167.518 mo
42.8944 166.803 42.7419 166.239 42.4369 165.825 cv
42.1319 165.411 41.7137 165.204 41.1825 165.204 cv
40.5262 165.204 40.0344 165.495 39.7069 166.076 cv
39.7069 169.106 li
40.0306 169.685 40.5262 169.974 41.1937 169.974 cv
41.7137 169.974 42.1269 169.768 42.4331 169.356 cv
42.7406 168.943 42.8944 168.331 42.8944 167.518 cv
cp
43.9781 167.642 mo
43.9781 168.607 43.7575 169.384 43.3162 169.974 cv
42.875 170.564 42.2769 170.859 41.5219 170.859 cv
40.7531 170.859 40.1481 170.615 39.7069 170.126 cv
39.7069 173.179 li
38.6231 173.179 li
38.6231 164.402 li
39.6131 164.402 li
39.6656 165.105 li
40.1069 164.558 40.72 164.284 41.505 164.284 cv
42.2663 164.284 42.8687 164.571 43.3125 165.146 cv
43.7562 165.72 43.9781 166.519 43.9781 167.543 cv
43.9781 167.642 li
cp
f
45.3612 162.72 mo
45.3612 162.544 45.4149 162.395 45.5224 162.274 cv
45.6299 162.153 45.7887 162.092 45.9987 162.092 cv
46.2099 162.092 46.3699 162.153 46.4787 162.274 cv
46.5887 162.395 46.6437 162.544 46.6437 162.72 cv
46.6437 162.895 46.5887 163.041 46.4787 163.159 cv
46.3699 163.276 46.2099 163.335 45.9987 163.335 cv
45.7887 163.335 45.6299 163.276 45.5224 163.159 cv
45.4149 163.041 45.3612 162.895 45.3612 162.72 cv
cp
46.533 170.741 mo
45.4493 170.741 li
45.4493 164.402 li
46.533 164.402 li
46.533 170.741 li
cp
f
49.4452 170.741 mo
48.3614 170.741 li
48.3614 161.741 li
49.4452 161.741 li
49.4452 170.741 li
cp
f
53.6754 165.174 mo
53.2379 165.174 52.8704 165.334 52.5729 165.653 cv
52.2766 165.971 52.0935 166.418 52.0235 166.991 cv
55.1979 166.991 li
55.1979 166.909 li
55.1666 166.359 55.0179 165.933 54.7516 165.63 cv
54.4866 165.326 54.1279 165.174 53.6754 165.174 cv
cp
53.8104 170.859 mo
52.9504 170.859 52.251 170.577 51.7123 170.012 cv
51.1735 169.447 50.9041 168.692 50.9041 167.747 cv
50.9041 167.548 li
50.9041 166.919 51.0241 166.358 51.2641 165.864 cv
51.5041 165.369 51.8398 164.983 52.271 164.704 cv
52.7035 164.424 53.1716 164.284 53.6754 164.284 cv
54.4991 164.284 55.1391 164.556 55.5954 165.099 cv
56.0529 165.642 56.2816 166.419 56.2816 167.43 cv
56.2816 167.882 li
51.9879 167.882 li
52.0029 168.507 52.1854 169.012 52.5354 169.397 cv
52.8854 169.782 53.3298 169.974 53.8685 169.974 cv
54.251 169.974 54.5748 169.896 54.8398 169.74 cv
55.106 169.584 55.3391 169.376 55.5391 169.118 cv
56.201 169.633 li
55.6698 170.451 54.8729 170.859 53.8104 170.859 cv
cp
f
58.3566 167.642 mo
58.3566 168.361 58.5047 168.923 58.8009 169.329 cv
59.0984 169.736 59.5091 169.939 60.0328 169.939 cv
60.7203 169.939 61.2222 169.63 61.5384 169.013 cv
61.5384 166.101 li
61.2147 165.503 60.7166 165.204 60.0441 165.204 cv
59.5128 165.204 59.0984 165.409 58.8009 165.819 cv
58.5047 166.229 58.3566 166.837 58.3566 167.642 cv
cp
57.2728 167.518 mo
57.2728 166.546 57.5028 165.764 57.9628 165.173 cv
58.4241 164.58 59.0278 164.284 59.7741 164.284 cv
60.5166 164.284 61.1047 164.538 61.5384 165.045 cv
61.5384 161.741 li
62.6222 161.741 li
62.6222 170.741 li
61.6266 170.741 li
61.5741 170.061 li
61.1403 170.593 60.5366 170.859 59.7628 170.859 cv
59.0291 170.859 58.4303 170.559 57.9666 169.958 cv
57.5041 169.355 57.2728 168.569 57.2728 167.601 cv
57.2728 167.518 li
cp
f
70.4837 123.487 mo
66.9837 123.487 li
f
70.4837 123.487 mo
66.9837 123.487 li
@
6.56812 125.28 mo
6.46312 126.182 6.13 126.879 5.56875 127.371 cv
5.00875 127.861 4.26375 128.106 3.33375 128.106 cv
2.32625 128.106 1.51875 127.744 .91125 127.022 cv
.30375 126.298 0 125.331 0 124.119 cv
0 123.3 li
0 122.507 .14125 121.811 .42375 121.209 cv
.7075 120.607 1.10875 120.144 1.6275 119.822 cv
2.1475 119.499 2.74938 119.338 3.43313 119.338 cv
4.33937 119.338 5.06563 119.591 5.61188 120.097 cv
6.15937 120.604 6.47812 121.304 6.56812 122.197 cv
5.4375 122.197 li
5.34 121.519 5.12812 121.027 4.80188 120.722 cv
4.47563 120.417 4.01937 120.264 3.43313 120.264 cv
2.71437 120.264 2.15062 120.53 1.74187 121.061 cv
1.33437 121.592 1.13063 122.349 1.13063 123.33 cv
1.13063 124.155 li
1.13063 125.081 1.32375 125.818 1.71 126.366 cv
2.0975 126.912 2.63875 127.185 3.33375 127.185 cv
3.95875 127.185 4.43813 127.044 4.77187 126.761 cv
5.10562 126.477 5.3275 125.984 5.4375 125.28 cv
6.56812 125.28 li
cp
f
8.7368 124.888 mo
8.7368 125.591 8.89992 126.155 9.22617 126.581 cv
9.55242 127.007 9.98867 127.221 10.5349 127.221 cv
11.0862 127.221 11.5237 127.005 11.8474 126.574 cv
12.1712 126.141 12.333 125.536 12.333 124.759 cv
12.333 124.064 12.168 123.501 11.838 123.069 cv
11.508 122.637 11.0699 122.421 10.5237 122.421 cv
9.98867 122.421 9.5568 122.634 9.22805 123.06 cv
8.90055 123.485 8.7368 124.094 8.7368 124.888 cv
cp
7.64555 124.759 mo
7.64555 124.137 7.76742 123.579 8.01117 123.082 cv
8.25617 122.586 8.59617 122.204 9.03117 121.935 cv
9.46742 121.665 9.96492 121.53 10.5237 121.53 cv
11.3862 121.53 12.0843 121.829 12.618 122.426 cv
13.1518 123.024 13.4187 123.819 13.4187 124.811 cv
13.4187 124.888 li
13.4187 125.506 13.2999 126.059 13.0624 126.549 cv
12.8262 127.039 12.488 127.421 12.048 127.695 cv
11.6093 127.969 11.1049 128.106 10.5349 128.106 cv
9.67617 128.106 8.97992 127.807 8.44617 127.209 cv
7.91242 126.611 7.64555 125.819 7.64555 124.836 cv
7.64555 124.759 li
cp
f
15.5805 124.888 mo
15.5805 125.591 15.7437 126.155 16.0699 126.581 cv
16.3962 127.007 16.8324 127.221 17.3787 127.221 cv
17.9299 127.221 18.3674 127.005 18.6912 126.574 cv
19.0149 126.141 19.1768 125.536 19.1768 124.759 cv
19.1768 124.064 19.0118 123.501 18.6818 123.069 cv
18.3518 122.637 17.9137 122.421 17.3674 122.421 cv
16.8324 122.421 16.4005 122.634 16.0718 123.06 cv
15.7443 123.485 15.5805 124.094 15.5805 124.888 cv
cp
14.4893 124.759 mo
14.4893 124.137 14.6112 123.579 14.8549 123.082 cv
15.0999 122.586 15.4399 122.204 15.8749 121.935 cv
16.3112 121.665 16.8087 121.53 17.3674 121.53 cv
18.2299 121.53 18.928 121.829 19.4618 122.426 cv
19.9955 123.024 20.2624 123.819 20.2624 124.811 cv
20.2624 124.888 li
20.2624 125.506 20.1437 126.059 19.9062 126.549 cv
19.6699 127.039 19.3318 127.421 18.8918 127.695 cv
18.453 127.969 17.9487 128.106 17.3787 128.106 cv
16.5199 128.106 15.8237 127.807 15.2899 127.209 cv
14.7562 126.611 14.4893 125.819 14.4893 124.836 cv
14.4893 124.759 li
cp
f
25.893 124.764 mo
25.893 124.049 25.7405 123.485 25.4355 123.071 cv
25.1305 122.657 24.7124 122.451 24.1812 122.451 cv
23.5249 122.451 23.033 122.741 22.7055 123.322 cv
22.7055 126.352 li
23.0293 126.931 23.5249 127.221 24.1924 127.221 cv
24.7124 127.221 25.1255 127.014 25.4318 126.602 cv
25.7393 126.189 25.893 125.577 25.893 124.764 cv
cp
26.9768 124.888 mo
26.9768 125.853 26.7562 126.631 26.3149 127.221 cv
25.8737 127.811 25.2755 128.106 24.5205 128.106 cv
23.7518 128.106 23.1468 127.861 22.7055 127.372 cv
22.7055 130.425 li
21.6218 130.425 li
21.6218 121.648 li
22.6118 121.648 li
22.6643 122.351 li
23.1055 121.804 23.7187 121.53 24.5037 121.53 cv
25.2649 121.53 25.8674 121.817 26.3112 122.392 cv
26.7549 122.966 26.9768 123.765 26.9768 124.789 cv
26.9768 124.888 li
cp
f
30.8498 122.421 mo
30.4123 122.421 30.0448 122.58 29.7473 122.899 cv
29.4511 123.217 29.268 123.664 29.198 124.237 cv
32.3723 124.237 li
32.3723 124.155 li
32.3411 123.605 32.1923 123.179 31.9261 122.876 cv
31.6611 122.572 31.3023 122.421 30.8498 122.421 cv
cp
30.9848 128.106 mo
30.1248 128.106 29.4255 127.823 28.8867 127.258 cv
28.348 126.693 28.0786 125.938 28.0786 124.993 cv
28.0786 124.794 li
28.0786 124.166 28.1986 123.604 28.4386 123.111 cv
28.6786 122.616 29.0142 122.229 29.4455 121.95 cv
29.878 121.67 30.3461 121.53 30.8498 121.53 cv
31.6736 121.53 32.3136 121.802 32.7698 122.346 cv
33.2273 122.888 33.4561 123.665 33.4561 124.676 cv
33.4561 125.128 li
29.1623 125.128 li
29.1773 125.753 29.3598 126.258 29.7098 126.643 cv
30.0598 127.028 30.5042 127.221 31.043 127.221 cv
31.4255 127.221 31.7492 127.142 32.0142 126.986 cv
32.2805 126.83 32.5136 126.622 32.7136 126.364 cv
33.3755 126.879 li
32.8442 127.697 32.0473 128.106 30.9848 128.106 cv
cp
f
37.7754 122.619 mo
37.6116 122.593 37.4341 122.58 37.2429 122.58 cv
36.5316 122.58 36.0491 122.882 35.7954 123.487 cv
35.7954 127.987 li
34.7116 127.987 li
34.7116 121.648 li
35.7654 121.648 li
35.7823 122.379 li
36.1385 121.813 36.6429 121.53 37.2954 121.53 cv
37.5054 121.53 37.6654 121.557 37.7754 121.612 cv
37.7754 122.619 li
cp
f
40.8872 127.161 mo
41.2272 127.161 41.5491 127.073 41.8528 126.898 cv
42.1578 126.722 42.3784 126.493 42.5147 126.212 cv
42.5147 124.911 li
41.6653 124.911 li
40.3378 124.911 39.6741 125.299 39.6741 126.077 cv
39.6741 126.417 39.7872 126.682 40.0134 126.874 cv
40.2397 127.065 40.5309 127.161 40.8872 127.161 cv
cp
42.6853 127.987 mo
42.6228 127.862 42.5722 127.64 42.5334 127.32 cv
42.0297 127.844 41.4278 128.106 40.7278 128.106 cv
40.1028 128.106 39.5903 127.929 39.1903 127.575 cv
38.7903 127.221 38.5903 126.772 38.5903 126.229 cv
38.5903 125.569 38.8409 125.056 39.3422 124.691 cv
39.8447 124.326 40.5509 124.144 41.4609 124.144 cv
42.5147 124.144 li
42.5147 123.645 li
42.5147 123.266 42.4016 122.965 42.1753 122.741 cv
41.9491 122.516 41.6153 122.404 41.1741 122.404 cv
40.7866 122.404 40.4622 122.501 40.2009 122.696 cv
39.9397 122.891 39.8091 123.127 39.8091 123.405 cv
38.7178 123.405 li
38.7178 123.089 38.8303 122.783 39.0553 122.488 cv
39.2803 122.193 39.5847 121.96 39.9684 121.789 cv
40.3534 121.616 40.7766 121.53 41.2378 121.53 cv
41.9691 121.53 42.5416 121.713 42.9553 122.079 cv
43.3691 122.444 43.5841 122.947 43.6003 123.587 cv
43.6003 126.504 li
43.6003 127.087 43.6741 127.55 43.8216 127.894 cv
43.8216 127.987 li
42.6853 127.987 li
cp
f
46.7695 120.112 mo
46.7695 121.648 li
47.9527 121.648 li
47.9527 122.486 li
46.7695 122.486 li
46.7695 126.416 li
46.7695 126.671 46.822 126.862 46.927 126.99 cv
47.0333 127.116 47.2133 127.179 47.467 127.179 cv
47.592 127.179 47.7639 127.156 47.9827 127.108 cv
47.9827 127.987 li
47.6977 128.066 47.4202 128.106 47.1502 128.106 cv
46.6664 128.106 46.3014 127.959 46.0552 127.667 cv
45.8089 127.373 45.6858 126.956 45.6858 126.416 cv
45.6858 122.486 li
44.5308 122.486 li
44.5308 121.648 li
45.6858 121.648 li
45.6858 120.112 li
46.7695 120.112 li
cp
f
49.2251 119.966 mo
49.2251 119.79 49.2788 119.641 49.3863 119.52 cv
49.4938 119.399 49.6526 119.338 49.8626 119.338 cv
50.0738 119.338 50.2338 119.399 50.3426 119.52 cv
50.4526 119.641 50.5076 119.79 50.5076 119.966 cv
50.5076 120.141 50.4526 120.287 50.3426 120.405 cv
50.2338 120.522 50.0738 120.581 49.8626 120.581 cv
49.6526 120.581 49.4938 120.522 49.3863 120.405 cv
49.2788 120.287 49.2251 120.141 49.2251 119.966 cv
cp
50.397 127.987 mo
49.3132 127.987 li
49.3132 121.648 li
50.397 121.648 li
50.397 127.987 li
cp
f
54.2222 126.517 mo
55.7934 121.648 li
56.8997 121.648 li
54.6272 127.987 li
53.8003 127.987 li
51.5034 121.648 li
52.6116 121.648 li
54.2222 126.517 li
cp
f
60.4397 122.421 mo
60.0022 122.421 59.6347 122.58 59.3372 122.899 cv
59.0409 123.217 58.8578 123.664 58.7878 124.237 cv
61.9622 124.237 li
61.9622 124.155 li
61.9309 123.605 61.7822 123.179 61.5159 122.876 cv
61.2509 122.572 60.8922 122.421 60.4397 122.421 cv
cp
60.5747 128.106 mo
59.7147 128.106 59.0153 127.823 58.4766 127.258 cv
57.9378 126.693 57.6684 125.938 57.6684 124.993 cv
57.6684 124.794 li
57.6684 124.166 57.7884 123.604 58.0284 123.111 cv
58.2684 122.616 58.6041 122.229 59.0353 121.95 cv
59.4678 121.67 59.9359 121.53 60.4397 121.53 cv
61.2634 121.53 61.9034 121.802 62.3597 122.346 cv
62.8172 122.888 63.0459 123.665 63.0459 124.676 cv
63.0459 125.128 li
58.7522 125.128 li
58.7672 125.753 58.9497 126.258 59.2997 126.643 cv
59.6497 127.028 60.0941 127.221 60.6328 127.221 cv
61.0153 127.221 61.3391 127.142 61.6041 126.986 cv
61.8703 126.83 62.1034 126.622 62.3034 126.364 cv
62.9653 126.879 li
62.4341 127.697 61.6372 128.106 60.5747 128.106 cv
cp
f
70.4837 78.7336 mo
66.9837 78.7336 li
f
70.4837 78.7336 mo
66.9837 78.7336 li
@
32.8838 83.2336 mo
31.7531 83.2336 li
27.4575 76.6599 li
27.4575 83.2336 li
26.3269 83.2336 li
26.3269 74.7024 li
27.4575 74.7024 li
31.7644 81.3061 li
31.7644 74.7024 li
32.8838 74.7024 li
32.8838 83.2336 li
cp
f
37.2084 77.6667 mo
36.7709 77.6667 36.4034 77.8261 36.1059 78.1449 cv
35.8097 78.4636 35.6266 78.9099 35.5566 79.4836 cv
38.7309 79.4836 li
38.7309 79.4011 li
38.6997 78.8511 38.5509 78.4249 38.2847 78.1224 cv
38.0197 77.8186 37.6609 77.6667 37.2084 77.6667 cv
cp
37.3434 83.3517 mo
36.4834 83.3517 35.7841 83.0692 35.2453 82.5042 cv
34.7066 81.9392 34.4372 81.1842 34.4372 80.2392 cv
34.4372 80.0405 li
34.4372 79.4117 34.5572 78.8505 34.7972 78.3567 cv
35.0372 77.8617 35.3728 77.4749 35.8041 77.1961 cv
36.2366 76.9161 36.7047 76.7761 37.2084 76.7761 cv
38.0322 76.7761 38.6722 77.048 39.1284 77.5917 cv
39.5859 78.1342 39.8147 78.9111 39.8147 79.9224 cv
39.8147 80.3742 li
35.5209 80.3742 li
35.5359 80.9992 35.7184 81.5042 36.0684 81.8892 cv
36.4184 82.2742 36.8628 82.4667 37.4016 82.4667 cv
37.7841 82.4667 38.1078 82.3886 38.3728 82.2324 cv
38.6391 82.0761 38.8722 81.8686 39.0722 81.6099 cv
39.7341 82.1255 li
39.2028 82.943 38.4059 83.3517 37.3434 83.3517 cv
cp
f
44.7602 81.5517 mo
44.7602 81.2592 44.6496 81.0317 44.4284 80.8692 cv
44.2084 80.7067 43.824 80.5674 43.2752 80.4511 cv
42.7265 80.3336 42.2909 80.193 41.9684 80.0292 cv
41.6459 79.8642 41.4077 79.6686 41.254 79.4424 cv
41.1002 79.2161 41.0234 78.9467 41.0234 78.6342 cv
41.0234 78.1142 41.2427 77.6749 41.6815 77.3161 cv
42.1215 76.9561 42.6834 76.7761 43.3671 76.7761 cv
44.0859 76.7761 44.6684 76.9617 45.1146 77.333 cv
45.5621 77.7042 45.7859 78.1786 45.7859 78.7561 cv
44.6965 78.7561 li
44.6965 78.4599 44.5702 78.2042 44.3177 77.9892 cv
44.0665 77.7742 43.7496 77.6667 43.3671 77.6667 cv
42.9721 77.6667 42.6634 77.753 42.4409 77.9255 cv
42.2184 78.0967 42.1071 78.3211 42.1071 78.5986 cv
42.1071 78.8599 42.2102 79.0574 42.4165 79.1911 cv
42.624 79.3236 42.9984 79.4505 43.5396 79.5717 cv
44.0809 79.693 44.519 79.8374 44.854 80.0049 cv
45.1902 80.1724 45.439 80.3749 45.6002 80.6124 cv
45.7627 80.8486 45.844 81.1361 45.844 81.4749 cv
45.844 82.0424 45.6171 82.4974 45.1634 82.8399 cv
44.7109 83.1811 44.1234 83.3517 43.4009 83.3517 cv
42.8934 83.3517 42.444 83.2617 42.0527 83.0817 cv
41.6627 82.9017 41.3571 82.6505 41.1359 82.328 cv
40.9159 82.0055 40.8059 81.6567 40.8059 81.2817 cv
41.8896 81.2817 li
41.9096 81.6455 42.0552 81.9342 42.3265 82.148 cv
42.5977 82.3605 42.9559 82.4667 43.4009 82.4667 cv
43.8109 82.4667 44.1396 82.3836 44.3871 82.2174 cv
44.6359 82.0511 44.7602 81.8292 44.7602 81.5517 cv
cp
f
48.7277 75.3586 mo
48.7277 76.8942 li
49.9109 76.8942 li
49.9109 77.7324 li
48.7277 77.7324 li
48.7277 81.6624 li
48.7277 81.9174 48.7802 82.1086 48.8852 82.2361 cv
48.9915 82.3624 49.1715 82.4255 49.4252 82.4255 cv
49.5502 82.4255 49.7221 82.4017 49.9409 82.3542 cv
49.9409 83.2336 li
49.6559 83.3124 49.3784 83.3517 49.1084 83.3517 cv
48.6246 83.3517 48.2596 83.2055 48.0134 82.913 cv
47.7671 82.6192 47.644 82.2024 47.644 81.6624 cv
47.644 77.7324 li
46.489 77.7324 li
46.489 76.8942 li
47.644 76.8942 li
47.644 75.3586 li
48.7277 75.3586 li
cp
f
53.6733 77.6667 mo
53.2358 77.6667 52.8683 77.8261 52.5708 78.1449 cv
52.2745 78.4636 52.0914 78.9099 52.0214 79.4836 cv
55.1958 79.4836 li
55.1958 79.4011 li
55.1645 78.8511 55.0158 78.4249 54.7495 78.1224 cv
54.4845 77.8186 54.1258 77.6667 53.6733 77.6667 cv
cp
53.8083 83.3517 mo
52.9483 83.3517 52.2489 83.0692 51.7102 82.5042 cv
51.1714 81.9392 50.902 81.1842 50.902 80.2392 cv
50.902 80.0405 li
50.902 79.4117 51.022 78.8505 51.262 78.3567 cv
51.502 77.8617 51.8377 77.4749 52.2689 77.1961 cv
52.7014 76.9161 53.1695 76.7761 53.6733 76.7761 cv
54.497 76.7761 55.137 77.048 55.5933 77.5917 cv
56.0508 78.1342 56.2795 78.9111 56.2795 79.9224 cv
56.2795 80.3742 li
51.9858 80.3742 li
52.0008 80.9992 52.1833 81.5042 52.5333 81.8892 cv
52.8833 82.2742 53.3277 82.4667 53.8664 82.4667 cv
54.2489 82.4667 54.5727 82.3886 54.8377 82.2324 cv
55.1039 82.0761 55.337 81.8686 55.537 81.6099 cv
56.1989 82.1255 li
55.6677 82.943 54.8708 83.3517 53.8083 83.3517 cv
cp
f
58.3545 80.1342 mo
58.3545 80.853 58.5026 81.4155 58.7988 81.8217 cv
59.0963 82.228 59.507 82.4311 60.0307 82.4311 cv
60.7182 82.4311 61.2201 82.1224 61.5363 81.5049 cv
61.5363 78.593 li
61.2126 77.9955 60.7145 77.6967 60.042 77.6967 cv
59.5107 77.6967 59.0963 77.9017 58.7988 78.3117 cv
58.5026 78.7217 58.3545 79.3292 58.3545 80.1342 cv
cp
57.2707 80.0105 mo
57.2707 79.038 57.5007 78.2561 57.9607 77.6649 cv
58.422 77.0724 59.0257 76.7761 59.772 76.7761 cv
60.5145 76.7761 61.1026 77.0299 61.5363 77.5374 cv
61.5363 74.2336 li
62.6201 74.2336 li
62.6201 83.2336 li
61.6245 83.2336 li
61.572 82.553 li
61.1382 83.0855 60.5345 83.3517 59.7607 83.3517 cv
59.027 83.3517 58.4282 83.0511 57.9645 82.4499 cv
57.502 81.8474 57.2707 81.0617 57.2707 80.093 cv
57.2707 80.0105 li
cp
f
398.416 214.571 mo
393.758 214.571 li
393.758 213.921 li
396.219 211.186 li
396.583 210.773 396.835 210.437 396.973 210.178 cv
397.112 209.92 397.181 209.652 397.181 209.375 cv
397.181 209.004 397.069 208.7 396.844 208.463 cv
396.62 208.224 396.32 208.105 395.945 208.105 cv
395.496 208.105 395.147 208.233 394.898 208.489 cv
394.649 208.744 394.525 209.1 394.525 209.556 cv
393.622 209.556 li
393.622 208.901 393.832 208.372 394.253 207.969 cv
394.675 207.565 395.239 207.363 395.945 207.363 cv
396.607 207.363 397.129 207.536 397.512 207.883 cv
397.897 208.23 398.089 208.691 398.089 209.267 cv
398.089 209.967 397.643 210.801 396.752 211.767 cv
394.847 213.833 li
398.416 213.833 li
398.416 214.571 li
cp
f
399.789 211.006 mo
400.15 207.461 li
403.792 207.461 li
403.792 208.296 li
400.917 208.296 li
400.701 210.235 li
401.05 210.029 401.446 209.927 401.889 209.927 cv
402.536 209.927 403.05 210.141 403.431 210.569 cv
403.812 210.997 404.003 211.576 404.003 212.305 cv
404.003 213.037 403.805 213.614 403.409 214.036 cv
403.013 214.458 402.461 214.669 401.751 214.669 cv
401.123 214.669 400.61 214.495 400.212 214.147 cv
399.815 213.798 399.589 213.316 399.534 212.7 cv
400.389 212.7 li
400.444 213.107 400.589 213.415 400.823 213.622 cv
401.057 213.828 401.367 213.931 401.751 213.931 cv
402.171 213.931 402.501 213.788 402.74 213.502 cv
402.98 213.215 403.1 212.819 403.1 212.314 cv
403.1 211.839 402.97 211.458 402.711 211.171 cv
402.452 210.882 402.108 210.738 401.678 210.738 cv
401.284 210.738 400.975 210.824 400.75 210.996 cv
400.511 211.191 li
399.789 211.006 li
cp
f
347.398 171.817 mo
342.741 171.817 li
342.741 171.167 li
345.202 168.432 li
345.566 168.019 345.818 167.683 345.956 167.424 cv
346.095 167.166 346.164 166.898 346.164 166.621 cv
346.164 166.251 346.052 165.946 345.827 165.709 cv
345.603 165.47 345.303 165.351 344.928 165.351 cv
344.479 165.351 344.13 165.479 343.881 165.735 cv
343.632 165.991 343.508 166.346 343.508 166.803 cv
342.605 166.803 li
342.605 166.147 342.815 165.618 343.236 165.215 cv
343.658 164.811 344.222 164.609 344.928 164.609 cv
345.59 164.609 346.112 164.782 346.495 165.129 cv
346.88 165.476 347.072 165.938 347.072 166.514 cv
347.072 167.214 346.626 168.047 345.734 169.014 cv
343.83 171.079 li
347.398 171.079 li
347.398 171.817 li
cp
f
351.325 171.817 mo
350.417 171.817 li
350.417 165.796 li
348.595 166.465 li
348.595 165.645 li
351.184 164.673 li
351.325 164.673 li
351.325 171.817 li
cp
f
191.76 125.938 mo
192.063 125.938 192.342 125.845 192.597 125.66 cv
192.852 125.474 193.039 125.245 193.156 124.971 cv
193.156 124.61 li
193.156 124.017 193.028 123.535 192.77 123.164 cv
192.513 122.794 192.188 122.608 191.794 122.608 cv
191.397 122.608 191.078 122.76 190.836 123.064 cv
190.595 123.369 190.475 123.77 190.475 124.268 cv
190.475 124.753 190.591 125.153 190.824 125.468 cv
191.057 125.781 191.369 125.938 191.76 125.938 cv
cp
193.152 125.938 mo
192.963 126.163 192.738 126.344 192.475 126.48 cv
192.213 126.616 191.925 126.685 191.613 126.685 cv
191.203 126.685 190.846 126.584 190.541 126.383 cv
190.237 126.181 190.002 125.897 189.836 125.53 cv
189.67 125.163 189.588 124.759 189.588 124.316 cv
189.588 123.841 189.678 123.413 189.858 123.033 cv
190.038 122.652 190.294 122.36 190.627 122.158 cv
190.959 121.956 191.347 121.855 191.789 121.855 cv
192.492 121.855 193.047 122.118 193.452 122.644 cv
193.857 123.17 194.06 123.887 194.06 124.796 cv
194.06 125.058 li
194.06 126.443 193.786 127.453 193.239 128.089 cv
192.692 128.725 191.867 129.051 190.764 129.068 cv
190.588 129.068 li
190.588 128.307 li
190.778 128.307 li
191.524 128.293 192.097 128.098 192.497 127.722 cv
192.897 127.346 193.115 126.751 193.152 125.938 cv
cp
f
126.612 81.9215 mo
128.824 81.9215 li
128.824 78.4356 li
128.716 78.6309 li
126.612 81.9215 li
cp
129.732 81.9215 mo
130.718 81.9215 li
130.718 82.659 li
129.732 82.659 li
129.732 84.309 li
128.824 84.309 li
128.824 82.659 li
125.587 82.659 li
125.587 82.1262 li
128.769 77.1996 li
129.732 77.1996 li
129.732 81.9215 li
cp
f
130.656 10.6444 mo
129.337 10.6444 li
124.325 2.975 li
124.325 10.6444 li
123.006 10.6444 li
123.006 .69125 li
124.325 .69125 li
129.35 8.39563 li
129.35 .69125 li
130.656 .69125 li
130.656 10.6444 li
cp
f
137.355 9.91375 mo
136.864 10.4927 136.141 10.7822 135.187 10.7822 cv
134.4 10.7822 133.8 10.5532 133.387 10.0953 cv
132.974 9.63594 132.766 8.95781 132.761 8.06094 cv
132.761 3.24844 li
134.026 3.24844 li
134.026 8.02594 li
134.026 9.1474 134.481 9.70813 135.393 9.70813 cv
136.36 9.70813 137.002 9.34792 137.32 8.6275 cv
137.32 3.24844 li
138.587 3.24844 li
138.587 10.6444 li
137.383 10.6444 li
137.355 9.91375 li
cp
f
141.695 3.24844 mo
141.73 4.06875 li
142.273 3.43 143.004 3.11063 143.924 3.11063 cv
144.958 3.11063 145.663 3.50729 146.037 4.30062 cv
146.282 3.94479 146.602 3.6575 146.996 3.43875 cv
147.391 3.22 147.857 3.11063 148.396 3.11063 cv
150.017 3.11063 150.842 3.96958 150.87 5.6875 cv
150.87 10.6444 li
149.605 10.6444 li
149.605 5.76406 li
149.605 5.23469 149.484 4.83948 149.242 4.57844 cv
149.002 4.31594 148.596 4.18469 148.026 4.18469 cv
147.556 4.18469 147.166 4.32469 146.856 4.60469 cv
146.546 4.88469 146.367 5.26167 146.317 5.73562 cv
146.317 10.6444 li
145.047 10.6444 li
145.047 5.79688 li
145.047 4.72208 144.52 4.18469 143.467 4.18469 cv
142.637 4.18469 142.07 4.5376 141.765 5.24344 cv
141.765 10.6444 li
140.499 10.6444 li
140.499 3.24844 li
141.695 3.24844 li
cp
f
157.774 6.88406 mo
157.774 6.02365 157.608 5.35865 157.275 4.88906 cv
156.943 4.41948 156.465 4.18469 155.84 4.18469 cv
155.006 4.18469 154.407 4.57188 154.042 5.34625 cv
154.042 8.54656 li
154.429 9.32094 155.033 9.70813 155.854 9.70813 cv
156.459 9.70813 156.93 9.47333 157.267 9.00375 cv
157.605 8.53417 157.774 7.8276 157.774 6.88406 cv
cp
159.039 7.02844 mo
159.039 8.15865 158.779 9.06719 158.26 9.75406 cv
157.741 10.4395 157.044 10.7822 156.169 10.7822 cv
155.234 10.7822 154.511 10.4511 154.001 9.78906 cv
153.94 10.6444 li
152.778 10.6444 li
152.778 .144375 li
154.042 .144375 li
154.042 4.06219 li
154.553 3.42781 155.256 3.11063 156.153 3.11063 cv
157.052 3.11063 157.757 3.45042 158.269 4.13 cv
158.782 4.80813 159.039 5.73781 159.039 6.91906 cv
159.039 7.02844 li
cp
f
163.544 4.14969 mo
163.034 4.14969 162.605 4.33563 162.258 4.7075 cv
161.912 5.07937 161.699 5.6 161.617 6.26937 cv
165.32 6.26937 li
165.32 6.17312 li
165.284 5.53146 165.11 5.03417 164.8 4.68125 cv
164.49 4.32688 164.072 4.14969 163.544 4.14969 cv
cp
163.702 10.7822 mo
162.698 10.7822 161.882 10.4526 161.254 9.79344 cv
160.625 9.13427 160.311 8.25344 160.311 7.15094 cv
160.311 6.91906 li
160.311 6.18552 160.451 5.53073 160.731 4.95469 cv
161.011 4.37719 161.402 3.92583 161.906 3.60063 cv
162.41 3.27396 162.956 3.11063 163.544 3.11063 cv
164.505 3.11063 165.252 3.42781 165.784 4.06219 cv
166.318 4.6951 166.585 5.60146 166.585 6.78125 cv
166.585 7.30844 li
161.575 7.30844 li
161.593 8.0376 161.806 8.62677 162.214 9.07594 cv
162.622 9.5251 163.141 9.74969 163.769 9.74969 cv
164.216 9.74969 164.593 9.65854 164.902 9.47625 cv
165.213 9.29396 165.485 9.05188 165.718 8.75 cv
166.491 9.35156 li
165.871 10.3053 164.941 10.7822 163.702 10.7822 cv
cp
f
171.624 4.38156 mo
171.433 4.35094 171.226 4.33563 171.003 4.33563 cv
170.173 4.33563 169.61 4.68854 169.314 5.39437 cv
169.314 10.6444 li
168.049 10.6444 li
168.049 3.24844 li
169.279 3.24844 li
169.299 4.10156 li
169.714 3.44094 170.303 3.11063 171.064 3.11063 cv
171.309 3.11063 171.495 3.14271 171.624 3.20688 cv
171.624 4.38156 li
cp
f
177.189 7.02844 mo
177.189 7.84802 177.379 8.50646 177.76 9.00375 cv
178.14 9.50104 178.649 9.74969 179.287 9.74969 cv
179.93 9.74969 180.44 9.49813 180.818 8.995 cv
181.196 8.49042 181.384 7.78458 181.384 6.8775 cv
181.384 6.06667 181.192 5.40969 180.807 4.90656 cv
180.422 4.40198 179.911 4.14969 179.274 4.14969 cv
178.649 4.14969 178.145 4.39833 177.762 4.89563 cv
177.38 5.39146 177.189 6.1024 177.189 7.02844 cv
cp
175.916 6.8775 mo
175.916 6.15271 176.058 5.50083 176.342 4.92188 cv
176.628 4.34292 177.025 3.89667 177.532 3.58313 cv
178.041 3.26813 178.622 3.11063 179.274 3.11063 cv
180.28 3.11063 181.094 3.45917 181.717 4.15625 cv
182.34 4.85333 182.651 5.78083 182.651 6.93875 cv
182.651 7.02844 li
182.651 7.74885 182.512 8.3949 182.235 8.96656 cv
181.96 9.53823 181.565 9.98375 181.052 10.3031 cv
180.54 10.6225 179.952 10.7822 179.287 10.7822 cv
178.285 10.7822 177.472 10.4336 176.85 9.73656 cv
176.227 9.03802 175.916 8.1149 175.916 6.96719 cv
175.916 6.8775 li
cp
f
184.858 10.6444 mo
184.858 4.22625 li
183.69 4.22625 li
183.69 3.24844 li
184.858 3.24844 li
184.858 2.48938 li
184.858 1.69604 185.07 1.08281 185.493 .649688 cv
185.917 .216562 186.516 0 187.291 0 cv
187.582 0 187.872 .0386455 188.159 .115938 cv
188.091 1.14188 li
187.877 1.10104 187.649 1.08063 187.409 1.08063 cv
186.998 1.08063 186.68 1.20021 186.457 1.43938 cv
186.234 1.67854 186.123 2.02125 186.123 2.4675 cv
186.123 3.24844 li
187.702 3.24844 li
187.702 4.22625 li
186.123 4.22625 li
186.123 10.6444 li
184.858 10.6444 li
cp
f
196.868 8.68219 mo
196.868 8.34094 196.739 8.07552 196.481 7.88594 cv
196.224 7.69635 195.776 7.53375 195.136 7.39813 cv
194.495 7.26104 193.987 7.09698 193.611 6.90594 cv
193.235 6.71344 192.957 6.48521 192.777 6.22125 cv
192.598 5.95729 192.508 5.64302 192.508 5.27844 cv
192.508 4.67177 192.764 4.15917 193.276 3.74062 cv
193.79 3.32063 194.445 3.11063 195.243 3.11063 cv
196.081 3.11063 196.761 3.32719 197.282 3.76031 cv
197.804 4.19344 198.065 4.74687 198.065 5.42063 cv
196.794 5.42063 li
196.794 5.075 196.646 4.77677 196.352 4.52594 cv
196.059 4.2751 195.689 4.14969 195.243 4.14969 cv
194.782 4.14969 194.422 4.25031 194.162 4.45156 cv
193.903 4.65135 193.773 4.91313 193.773 5.23688 cv
193.773 5.54167 193.893 5.77208 194.134 5.92812 cv
194.376 6.08271 194.813 6.23073 195.444 6.37219 cv
196.076 6.51365 196.587 6.68208 196.978 6.8775 cv
197.37 7.07292 197.66 7.30917 197.848 7.58625 cv
198.038 7.86188 198.133 8.19729 198.133 8.5925 cv
198.133 9.25458 197.868 9.78542 197.338 10.185 cv
196.811 10.5831 196.125 10.7822 195.282 10.7822 cv
194.69 10.7822 194.166 10.6772 193.709 10.4672 cv
193.254 10.2572 192.898 9.96406 192.64 9.58781 cv
192.383 9.21156 192.255 8.80469 192.255 8.36719 cv
193.519 8.36719 li
193.542 8.79156 193.712 9.12844 194.029 9.37781 cv
194.345 9.62573 194.763 9.74969 195.282 9.74969 cv
195.761 9.74969 196.144 9.65271 196.433 9.45875 cv
196.723 9.26479 196.868 9.00594 196.868 8.68219 cv
cp
f
201.497 1.45687 mo
201.497 3.24844 li
202.877 3.24844 li
202.877 4.22625 li
201.497 4.22625 li
201.497 8.81125 li
201.497 9.10875 201.558 9.33187 201.681 9.48063 cv
201.805 9.62792 202.015 9.70156 202.311 9.70156 cv
202.456 9.70156 202.657 9.67385 202.912 9.61844 cv
202.912 10.6444 li
202.58 10.7362 202.256 10.7822 201.941 10.7822 cv
201.377 10.7822 200.951 10.6116 200.663 10.2703 cv
200.376 9.9276 200.232 9.44125 200.232 8.81125 cv
200.232 4.22625 li
198.885 4.22625 li
198.885 3.24844 li
200.232 3.24844 li
200.232 1.45687 li
201.497 1.45687 li
cp
f
208.92 9.91375 mo
208.429 10.4927 207.706 10.7822 206.753 10.7822 cv
205.965 10.7822 205.365 10.5532 204.952 10.0953 cv
204.54 9.63594 204.331 8.95781 204.327 8.06094 cv
204.327 3.24844 li
205.591 3.24844 li
205.591 8.02594 li
205.591 9.1474 206.047 9.70813 206.958 9.70813 cv
207.925 9.70813 208.568 9.34792 208.885 8.6275 cv
208.885 3.24844 li
210.152 3.24844 li
210.152 10.6444 li
208.949 10.6444 li
208.92 9.91375 li
cp
f
213.029 7.02844 mo
213.029 7.86698 213.202 8.52323 213.547 8.99719 cv
213.894 9.47115 214.373 9.70813 214.984 9.70813 cv
215.787 9.70813 216.372 9.34792 216.741 8.6275 cv
216.741 5.23031 li
216.363 4.53323 215.782 4.18469 214.998 4.18469 cv
214.378 4.18469 213.894 4.42385 213.547 4.90219 cv
213.202 5.38052 213.029 6.08927 213.029 7.02844 cv
cp
211.764 6.88406 mo
211.764 5.74948 212.033 4.83729 212.569 4.1475 cv
213.108 3.45625 213.812 3.11063 214.683 3.11063 cv
215.549 3.11063 216.235 3.40667 216.741 3.99875 cv
216.741 .144375 li
218.005 .144375 li
218.005 10.6444 li
216.844 10.6444 li
216.783 9.85031 li
216.277 10.4716 215.572 10.7822 214.669 10.7822 cv
213.813 10.7822 213.115 10.4315 212.574 9.73 cv
212.034 9.02708 211.764 8.11052 211.764 6.98031 cv
211.764 6.88406 li
cp
f
219.975 1.28625 mo
219.975 1.08063 220.038 .907083 220.163 .765625 cv
220.289 .624167 220.474 .553438 220.719 .553438 cv
220.965 .553438 221.152 .624167 221.279 .765625 cv
221.407 .907083 221.471 1.08063 221.471 1.28625 cv
221.471 1.49042 221.407 1.66104 221.279 1.79813 cv
221.152 1.93521 220.965 2.00375 220.719 2.00375 cv
220.474 2.00375 220.289 1.93521 220.163 1.79813 cv
220.038 1.66104 219.975 1.49042 219.975 1.28625 cv
cp
221.342 10.6444 mo
220.078 10.6444 li
220.078 3.24844 li
221.342 3.24844 li
221.342 10.6444 li
cp
f
226.277 4.14969 mo
225.767 4.14969 225.338 4.33563 224.991 4.7075 cv
224.646 5.07937 224.432 5.6 224.35 6.26937 cv
228.054 6.26937 li
228.054 6.17312 li
228.017 5.53146 227.844 5.03417 227.533 4.68125 cv
227.224 4.32688 226.805 4.14969 226.277 4.14969 cv
cp
226.435 10.7822 mo
225.432 10.7822 224.616 10.4526 223.987 9.79344 cv
223.359 9.13427 223.044 8.25344 223.044 7.15094 cv
223.044 6.91906 li
223.044 6.18552 223.184 5.53073 223.464 4.95469 cv
223.744 4.37719 224.136 3.92583 224.639 3.60063 cv
225.144 3.27396 225.69 3.11063 226.277 3.11063 cv
227.238 3.11063 227.985 3.42781 228.517 4.06219 cv
229.051 4.6951 229.318 5.60146 229.318 6.78125 cv
229.318 7.30844 li
224.309 7.30844 li
224.326 8.0376 224.539 8.62677 224.947 9.07594 cv
225.356 9.5251 225.874 9.74969 226.503 9.74969 cv
226.949 9.74969 227.327 9.65854 227.636 9.47625 cv
227.946 9.29396 228.218 9.05188 228.452 8.75 cv
229.224 9.35156 li
228.604 10.3053 227.675 10.7822 226.435 10.7822 cv
cp
f
235.088 8.68219 mo
235.088 8.34094 234.959 8.07552 234.701 7.88594 cv
234.444 7.69635 233.996 7.53375 233.355 7.39813 cv
232.715 7.26104 232.207 7.09698 231.831 6.90594 cv
231.454 6.71344 231.177 6.48521 230.997 6.22125 cv
230.818 5.95729 230.728 5.64302 230.728 5.27844 cv
230.728 4.67177 230.984 4.15917 231.496 3.74062 cv
232.009 3.32063 232.665 3.11063 233.463 3.11063 cv
234.301 3.11063 234.981 3.32719 235.501 3.76031 cv
236.023 4.19344 236.284 4.74687 236.284 5.42063 cv
235.013 5.42063 li
235.013 5.075 234.866 4.77677 234.572 4.52594 cv
234.278 4.2751 233.909 4.14969 233.463 4.14969 cv
233.002 4.14969 232.641 4.25031 232.382 4.45156 cv
232.122 4.65135 231.993 4.91313 231.993 5.23688 cv
231.993 5.54167 232.113 5.77208 232.353 5.92812 cv
232.596 6.08271 233.032 6.23073 233.664 6.37219 cv
234.295 6.51365 234.806 6.68208 235.197 6.8775 cv
235.59 7.07292 235.88 7.30917 236.068 7.58625 cv
236.257 7.86188 236.352 8.19729 236.352 8.5925 cv
236.352 9.25458 236.088 9.78542 235.558 10.185 cv
235.03 10.5831 234.345 10.7822 233.502 10.7822 cv
232.91 10.7822 232.386 10.6772 231.929 10.4672 cv
231.474 10.2572 231.118 9.96406 230.859 9.58781 cv
230.603 9.21156 230.474 8.80469 230.474 8.36719 cv
231.739 8.36719 li
231.762 8.79156 231.932 9.12844 232.248 9.37781 cv
232.565 9.62573 232.983 9.74969 233.502 9.74969 cv
233.98 9.74969 234.364 9.65271 234.653 9.45875 cv
234.943 9.26479 235.088 9.00594 235.088 8.68219 cv
cp
f
246.451 6.88406 mo
246.451 6.0499 246.273 5.39146 245.917 4.90875 cv
245.561 4.42604 245.073 4.18469 244.453 4.18469 cv
243.688 4.18469 243.114 4.52375 242.732 5.20188 cv
242.732 8.73687 li
243.11 9.41208 243.688 9.74969 244.466 9.74969 cv
245.073 9.74969 245.555 9.50906 245.912 9.02781 cv
246.271 8.54656 246.451 7.83198 246.451 6.88406 cv
cp
247.715 7.02844 mo
247.715 8.15427 247.458 9.06135 246.943 9.74969 cv
246.428 10.438 245.73 10.7822 244.849 10.7822 cv
243.952 10.7822 243.247 10.4971 242.732 9.92688 cv
242.732 13.4881 li
241.467 13.4881 li
241.467 3.24844 li
242.622 3.24844 li
242.684 4.06875 li
243.198 3.43 243.914 3.11063 244.83 3.11063 cv
245.718 3.11063 246.421 3.44604 246.938 4.11688 cv
247.456 4.78625 247.715 5.71812 247.715 6.9125 cv
247.715 7.02844 li
cp
f
252.233 4.14969 mo
251.723 4.14969 251.294 4.33563 250.947 4.7075 cv
250.602 5.07937 250.388 5.6 250.306 6.26937 cv
254.01 6.26937 li
254.01 6.17312 li
253.973 5.53146 253.8 5.03417 253.489 4.68125 cv
253.18 4.32688 252.761 4.14969 252.233 4.14969 cv
cp
252.391 10.7822 mo
251.388 10.7822 250.572 10.4526 249.943 9.79344 cv
249.315 9.13427 249 8.25344 249 7.15094 cv
249 6.91906 li
249 6.18552 249.14 5.53073 249.42 4.95469 cv
249.7 4.37719 250.092 3.92583 250.595 3.60063 cv
251.1 3.27396 251.646 3.11063 252.233 3.11063 cv
253.195 3.11063 253.941 3.42781 254.473 4.06219 cv
255.007 4.6951 255.274 5.60146 255.274 6.78125 cv
255.274 7.30844 li
250.265 7.30844 li
250.282 8.0376 250.495 8.62677 250.903 9.07594 cv
251.312 9.5251 251.83 9.74969 252.459 9.74969 cv
252.905 9.74969 253.283 9.65854 253.592 9.47625 cv
253.903 9.29396 254.175 9.05188 254.408 8.75 cv
255.18 9.35156 li
254.56 10.3053 253.631 10.7822 252.391 10.7822 cv
cp
f
260.313 4.38156 mo
260.122 4.35094 259.915 4.33563 259.692 4.33563 cv
258.862 4.33563 258.299 4.68854 258.003 5.39437 cv
258.003 10.6444 li
256.739 10.6444 li
256.739 3.24844 li
257.968 3.24844 li
257.988 4.10156 li
258.404 3.44094 258.992 3.11063 259.753 3.11063 cv
259.998 3.11063 260.185 3.14271 260.313 3.20688 cv
260.313 4.38156 li
cp
f
272.789 10.6444 mo
271.47 10.6444 li
266.458 2.975 li
266.458 10.6444 li
265.139 10.6444 li
265.139 .69125 li
266.458 .69125 li
271.483 8.39563 li
271.483 .69125 li
272.789 .69125 li
272.789 10.6444 li
cp
f
277.834 4.14969 mo
277.324 4.14969 276.895 4.33563 276.548 4.7075 cv
276.202 5.07937 275.989 5.6 275.907 6.26937 cv
279.61 6.26937 li
279.61 6.17312 li
279.574 5.53146 279.4 5.03417 279.09 4.68125 cv
278.781 4.32688 278.362 4.14969 277.834 4.14969 cv
cp
277.992 10.7822 mo
276.988 10.7822 276.172 10.4526 275.544 9.79344 cv
274.915 9.13427 274.601 8.25344 274.601 7.15094 cv
274.601 6.91906 li
274.601 6.18552 274.741 5.53073 275.021 4.95469 cv
275.301 4.37719 275.693 3.92583 276.196 3.60063 cv
276.7 3.27396 277.246 3.11063 277.834 3.11063 cv
278.795 3.11063 279.542 3.42781 280.074 4.06219 cv
280.608 4.6951 280.875 5.60146 280.875 6.78125 cv
280.875 7.30844 li
275.865 7.30844 li
275.883 8.0376 276.096 8.62677 276.504 9.07594 cv
276.912 9.5251 277.431 9.74969 278.059 9.74969 cv
278.506 9.74969 278.883 9.65854 279.193 9.47625 cv
279.503 9.29396 279.775 9.05188 280.008 8.75 cv
280.781 9.35156 li
280.161 10.3053 279.231 10.7822 277.992 10.7822 cv
cp
f
285.47 6.20813 mo
284.344 5.88438 283.524 5.48698 283.011 5.01594 cv
282.499 4.54344 282.243 3.96083 282.243 3.26813 cv
282.243 2.485 282.556 1.83677 283.182 1.32344 cv
283.809 .810105 284.624 .553438 285.627 .553438 cv
286.31 .553438 286.919 .686145 287.454 .951563 cv
287.991 1.21552 288.405 1.5801 288.699 2.04531 cv
288.993 2.50906 289.14 3.01729 289.14 3.57 cv
287.821 3.57 li
287.821 2.96771 287.63 2.49448 287.246 2.15031 cv
286.864 1.80615 286.324 1.63406 285.627 1.63406 cv
284.98 1.63406 284.474 1.77698 284.111 2.06281 cv
283.75 2.34719 283.569 2.7424 283.569 3.24844 cv
283.569 3.65385 283.741 3.99656 284.085 4.27656 cv
284.429 4.55656 285.015 4.81323 285.842 5.04656 cv
286.669 5.27844 287.315 5.53438 287.782 5.81437 cv
288.25 6.09438 288.596 6.42177 288.821 6.79656 cv
289.047 7.1699 289.16 7.60958 289.16 8.11563 cv
289.16 8.92208 288.846 9.56812 288.217 10.0538 cv
287.589 10.5394 286.748 10.7822 285.695 10.7822 cv
285.011 10.7822 284.373 10.6509 283.781 10.3884 cv
283.189 10.1259 282.732 9.76719 282.409 9.31219 cv
282.089 8.85573 281.928 8.33802 281.928 7.75906 cv
283.247 7.75906 li
283.247 8.36135 283.47 8.83677 283.914 9.18531 cv
284.359 9.53385 284.953 9.70813 285.695 9.70813 cv
286.388 9.70813 286.919 9.56667 287.288 9.28375 cv
287.657 9.00083 287.841 8.61583 287.841 8.12875 cv
287.841 7.64167 287.67 7.26469 287.327 6.99781 cv
286.986 6.73094 286.367 6.46771 285.47 6.20813 cv
cp
f
293.065 8.79156 mo
294.786 3.24844 li
296.14 3.24844 li
293.167 11.7863 li
292.707 13.0171 291.975 13.6325 290.973 13.6325 cv
290.733 13.6106 li
290.262 13.5231 li
290.262 12.4972 li
290.604 12.5234 li
291.032 12.5234 291.366 12.4367 291.605 12.2631 cv
291.845 12.091 292.042 11.7746 292.196 11.3138 cv
292.476 10.5612 li
289.838 3.24844 li
291.218 3.24844 li
293.065 8.79156 li
cp
f
303.701 9.74969 mo
304.152 9.74969 304.546 9.61333 304.883 9.34062 cv
305.221 9.06646 305.408 8.72375 305.445 8.3125 cv
306.641 8.3125 li
306.618 8.73687 306.471 9.14083 306.202 9.52437 cv
305.933 9.90646 305.574 10.212 305.125 10.4409 cv
304.678 10.6684 304.203 10.7822 303.701 10.7822 cv
302.694 10.7822 301.892 10.446 301.297 9.77375 cv
300.704 9.10146 300.407 8.18198 300.407 7.01531 cv
300.407 6.80312 li
300.407 6.08271 300.539 5.4425 300.803 4.8825 cv
301.067 4.32104 301.446 3.88573 301.94 3.57656 cv
302.435 3.26594 303.019 3.11063 303.695 3.11063 cv
304.523 3.11063 305.212 3.35927 305.762 3.85656 cv
306.312 4.3524 306.605 4.99698 306.641 5.79031 cv
305.445 5.79031 li
305.408 5.31198 305.227 4.91896 304.9 4.61125 cv
304.575 4.30354 304.173 4.14969 303.695 4.14969 cv
303.052 4.14969 302.554 4.38156 302.201 4.84531 cv
301.848 5.3076 301.671 5.97625 301.671 6.85125 cv
301.671 7.08969 li
301.671 7.94135 301.846 8.5976 302.196 9.05844 cv
302.548 9.51927 303.049 9.74969 303.701 9.74969 cv
cp
f
310.531 9.67969 mo
310.927 9.67969 311.303 9.5776 311.657 9.37344 cv
312.013 9.16781 312.27 8.90094 312.429 8.57281 cv
312.429 7.05469 li
311.438 7.05469 li
309.89 7.05469 309.115 7.50823 309.115 8.41531 cv
309.115 8.81198 309.247 9.12187 309.511 9.345 cv
309.775 9.56812 310.115 9.67969 310.531 9.67969 cv
cp
312.628 10.6444 mo
312.556 10.4985 312.496 10.239 312.451 9.86563 cv
311.864 10.4767 311.161 10.7822 310.345 10.7822 cv
309.616 10.7822 309.018 10.5758 308.551 10.1631 cv
308.084 9.75042 307.851 9.22688 307.851 8.5925 cv
307.851 7.8225 308.143 7.22458 308.728 6.79875 cv
309.314 6.37292 310.138 6.16 311.2 6.16 cv
312.429 6.16 li
312.429 5.57813 li
312.429 5.13625 312.297 4.78479 312.033 4.52375 cv
311.769 4.26125 311.38 4.13 310.865 4.13 cv
310.413 4.13 310.035 4.24375 309.73 4.47125 cv
309.425 4.69875 309.273 4.97438 309.273 5.29812 cv
308 5.29812 li
308 4.92917 308.131 4.5726 308.393 4.22844 cv
308.656 3.88427 309.011 3.61229 309.459 3.4125 cv
309.908 3.21125 310.402 3.11063 310.94 3.11063 cv
311.793 3.11063 312.461 3.32427 312.943 3.75156 cv
313.426 4.1774 313.677 4.76365 313.696 5.51031 cv
313.696 8.91406 li
313.696 9.59365 313.782 10.134 313.954 10.535 cv
313.954 10.6444 li
312.628 10.6444 li
cp
f
317.393 1.45687 mo
317.393 3.24844 li
318.774 3.24844 li
318.774 4.22625 li
317.393 4.22625 li
317.393 8.81125 li
317.393 9.10875 317.455 9.33187 317.577 9.48063 cv
317.701 9.62792 317.911 9.70156 318.207 9.70156 cv
318.353 9.70156 318.553 9.67385 318.809 9.61844 cv
318.809 10.6444 li
318.476 10.7362 318.152 10.7822 317.837 10.7822 cv
317.273 10.7822 316.847 10.6116 316.56 10.2703 cv
316.273 9.9276 316.129 9.44125 316.129 8.81125 cv
316.129 4.22625 li
314.781 4.22625 li
314.781 3.24844 li
316.129 3.24844 li
316.129 1.45687 li
317.393 1.45687 li
cp
f
323.163 4.14969 mo
322.653 4.14969 322.224 4.33563 321.877 4.7075 cv
321.531 5.07937 321.318 5.6 321.236 6.26937 cv
324.939 6.26937 li
324.939 6.17312 li
324.903 5.53146 324.729 5.03417 324.419 4.68125 cv
324.11 4.32688 323.691 4.14969 323.163 4.14969 cv
cp
323.321 10.7822 mo
322.317 10.7822 321.501 10.4526 320.873 9.79344 cv
320.244 9.13427 319.93 8.25344 319.93 7.15094 cv
319.93 6.91906 li
319.93 6.18552 320.07 5.53073 320.35 4.95469 cv
320.63 4.37719 321.022 3.92583 321.525 3.60063 cv
322.029 3.27396 322.575 3.11063 323.163 3.11063 cv
324.124 3.11063 324.871 3.42781 325.403 4.06219 cv
325.937 4.6951 326.204 5.60146 326.204 6.78125 cv
326.204 7.30844 li
321.194 7.30844 li
321.212 8.0376 321.425 8.62677 321.833 9.07594 cv
322.241 9.5251 322.76 9.74969 323.388 9.74969 cv
323.835 9.74969 324.212 9.65854 324.522 9.47625 cv
324.832 9.29396 325.104 9.05188 325.338 8.75 cv
326.11 9.35156 li
325.49 10.3053 324.56 10.7822 323.321 10.7822 cv
cp
f
328.638 7.02844 mo
328.638 7.8626 328.808 8.51812 329.15 8.995 cv
329.492 9.47042 329.971 9.70813 330.587 9.70813 cv
331.384 9.70813 331.97 9.34573 332.343 8.62094 cv
332.343 5.24344 li
331.955 4.5376 331.374 4.18469 330.6 4.18469 cv
329.984 4.18469 329.503 4.42385 329.156 4.90219 cv
328.81 5.38052 328.638 6.08927 328.638 7.02844 cv
cp
327.367 6.88406 mo
327.367 5.73198 327.633 4.81542 328.165 4.13438 cv
328.699 3.45187 329.405 3.11063 330.285 3.11063 cv
331.188 3.11063 331.892 3.43 332.398 4.06875 cv
332.459 3.24844 li
333.614 3.24844 li
333.614 10.4672 li
333.614 11.4239 333.331 12.1778 332.763 12.7291 cv
332.196 13.2803 331.434 13.5559 330.477 13.5559 cv
329.944 13.5559 329.422 13.4422 328.911 13.2147 cv
328.401 12.9872 328.011 12.6751 327.743 12.2784 cv
328.399 11.5194 li
328.942 12.1888 329.605 12.5234 330.388 12.5234 cv
331.003 12.5234 331.483 12.3499 331.827 12.0028 cv
332.171 11.6572 332.343 11.1701 332.343 10.5416 cv
332.343 9.905 li
331.837 10.4898 331.147 10.7822 330.272 10.7822 cv
329.405 10.7822 328.705 10.4336 328.17 9.73656 cv
327.634 9.03802 327.367 8.08719 327.367 6.88406 cv
cp
f
336.459 7.02844 mo
336.459 7.84802 336.65 8.50646 337.03 9.00375 cv
337.411 9.50104 337.92 9.74969 338.557 9.74969 cv
339.2 9.74969 339.711 9.49813 340.088 8.995 cv
340.466 8.49042 340.655 7.78458 340.655 6.8775 cv
340.655 6.06667 340.462 5.40969 340.077 4.90656 cv
339.692 4.40198 339.181 4.14969 338.544 4.14969 cv
337.92 4.14969 337.416 4.39833 337.032 4.89563 cv
336.65 5.39146 336.459 6.1024 336.459 7.02844 cv
cp
335.186 6.8775 mo
335.186 6.15271 335.328 5.50083 335.613 4.92188 cv
335.899 4.34292 336.295 3.89667 336.803 3.58313 cv
337.312 3.26813 337.892 3.11063 338.544 3.11063 cv
339.55 3.11063 340.365 3.45917 340.987 4.15625 cv
341.61 4.85333 341.922 5.78083 341.922 6.93875 cv
341.922 7.02844 li
341.922 7.74885 341.783 8.3949 341.506 8.96656 cv
341.23 9.53823 340.836 9.98375 340.322 10.3031 cv
339.811 10.6225 339.222 10.7822 338.557 10.7822 cv
337.555 10.7822 336.743 10.4336 336.12 9.73656 cv
335.498 9.03802 335.186 8.1149 335.186 6.96719 cv
335.186 6.8775 li
cp
f
347.082 4.38156 mo
346.891 4.35094 346.684 4.33563 346.461 4.33563 cv
345.631 4.33563 345.068 4.68854 344.772 5.39437 cv
344.772 10.6444 li
343.507 10.6444 li
343.507 3.24844 li
344.737 3.24844 li
344.757 4.10156 li
345.172 3.44094 345.761 3.11063 346.522 3.11063 cv
346.767 3.11063 346.953 3.14271 347.082 3.20688 cv
347.082 4.38156 li
cp
f
350.664 8.79156 mo
352.386 3.24844 li
353.74 3.24844 li
350.767 11.7863 li
350.306 13.0171 349.575 13.6325 348.573 13.6325 cv
348.332 13.6106 li
347.862 13.5231 li
347.862 12.4972 li
348.203 12.5234 li
348.632 12.5234 348.966 12.4367 349.205 12.2631 cv
349.444 12.091 349.641 11.7746 349.796 11.3138 cv
350.076 10.5612 li
347.438 3.24844 li
348.818 3.24844 li
350.664 8.79156 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 24.0%%AI8_CreatorVersion: 26.3.1%%For: (kyle Hamilton) ()%%Title: (nesy_category.eps)%%CreationDate: 6/21/22 5:53 AM%%Canvassize: 16383%AI5_FileFormat 14.0%AI24_DataStream%.((`,!*BBS"7FP>"V3/G7&76r!+<%a-V4U+Jp>*C)h+UhA4<Z^LpG-?Z@*?L#_teJ!'g_g!&t8\%f?jc%uF&uYX!;gY3S,%dWO@G%hf>Z]0,@.;"0>!3AYSM%NhOi05]kiB9-2mkWPHn)(`j/Tf6,nA;!GPG`H7YG+M5obZU/ah<LDtof9,8$%%qi-(G_I(/.qtQ]U3/e%Q7nD-0uLkqbNJ/*+qa3-6m@0_U?`!l@/-tpDH*U&=_cT9b1j0oN`fg-De!Ta)fidQ7kUFO_h#m$PW3+]@T/YT7bn>p&FP.Ol]9!k%@1EGRbGA_u@!Y7)8W[DEF`1JcXk,P=5X_?"@+NelnoYoR=?']=Wi!kMT^6(#Y,XTdDT@D*,auhj*2tofIl?CR=_j]dnH$(#H.uuI%J,u!<l+mF(8RN>K2dJ0L'"YkP?ki0IG\DX;D]:Aq-UQ$g;-AUkO@&2p\R9t;qhiJQdR+sCf:>*2f*OtZ03HhK%3.jhV$)[Y)rPS2%YNrb1,11Nn<@GX(/-JJp%2^d,^]8<M-o+kKM0'T9:l67^er,'"9<+X:"q1dn&^!]]'I<D5%>e@r6N"JJ2rkm4oJ?sl\KFbF0FWr%%`.B'I9^/Me#9kQ/?Ljl>ae2`\#>0Y487>a[Y.t99(g(8sg\ejmJ!tE:bPkf!R>hFY$55^M8C+QZgdp%>C*WqF3t2_Mf8/\&Xt,$E%?'bq,?7(?h\rQLJ\dfp9N/Y4d9H7?iYoH#8*'eUOLM1d88';*C<(U$r#F8.S^upUU_+'-q0Gn*I3?B#,QJH[hk?;Ckb9c0\?.Ts=%?.[&!$sc!Z\un[@?.[nl6#+5Af6%0ZR*PE^L*1/O*J3hF3YLQ<\cDm;coRR`l)L"4IXoO=^A_mC81YpD??A(KmCE@Mgdu`mU<=hT%bYmA74s?=CPYu_:&:f3=drh4j6+E-6I^9n\@`V-Nb8I(gel^1<"u&KP=(aBH\TN)0<b@d\=m66MSH<+?NjEsT^,,k`Y*mA,WMu?M%V4t:4a.Y<Wo6]H5&1?Cpd9a(TjBh.GjRtk2iC"g4LYIV)^)IYqbr.#8+;QbO$rsE-oMj9q^mTd'e6ut/;R@66"]MA;fp\>nfeR%l%o5Z%ac<^S8)7uhDnl0BE9VDqE/#C3ci&Y@f((3j]<!pKQ/_992[S0l)3b,.1p56-#'aU#20UP0I!3iIG9\,rk!:0!:d`bg>#+2B!%Y8(<=W\YDX<Tj4!"[K,f+AG,tG=m5$<#<IbcMuuNB#@n0+a'?L.N/ZB"IM"`Wk'o]V5<@tFK(oO5RPpBA5K,A<Y\n?)Oe*X8u%pX%?7Ets+N:J.fo(!9NSdUbm\uW^Xts*q775T]V9)OKW7#3+O<u)nY#*f/7K[/$C/Z#["ot(6[A'<f"k!PGf/b]RRK,%<dI?8\3dZE5%'ofX'A#i380UnI18Bog<V4,q:Z'7715rDrEl8`(n(i)97:o0S^EsAX$<K*eQ?*Q3$)$<kWl\pC&8u)2<Aua?"^]h/[i%!Ob;Ue-^%`E;%J<NWV!Q(m1dKrN9u$Dj_;H3Tb1.PQj]<i?F#A#b9"IAKp7`Brsnohs*NQpMh/PX\TJ^_H&FL0/l'c4lK\M,\/$Ff&]:bXfZe%JMJG^Wg[?O,>i%uU7%h$8@6[h1,BQfdZ]<d2,V/7O;Wnr"#;YFXfC&Wd=RHaSZ<H)SY:"WW_UsAVQWn5\XIA;B*[1=HbXMYkMEa^%SK7a4hS7*?kK%T8>i(i\m9?o`97>(/d2ClMR^"ZU,HL%)^.'sOi:iV,iW;MGHdPp\9K<,dN$^nl*:4J>WU&o9daBoO8u&(&mVJ<!%f$*KN*-FDE<BOb?F%oN#!)0o&?=\[%E2faJXjP_RL\i%<Ao91\Ne*DE?E;P]cqqEs1R9d,aA$u`Z]0:Rb^u4]69?Z]>YRrZ'K%k$%<>:AAb)HZ/1WXR22%rcN=_cL2>h'YDR_8b^?R)c!okNkSI_kob^YEUZi+fqlk:-J<ZHgb0f_XG&f!?8U`a\,@n#<TpU0-b%BBXkI%MJDY'3]h][K8dO3j3,S+4$M/>a'!!%4t2B/b1#X@B'e)*&d4jD)Oc[%CMUXn-ML\V-AS;ZWcI:h'jGH%Q_#bRhMl3tF&gHrLTWLs%gPChGL8qWWMOCN18`Nr2A`/KTl75J*1$>g]4$D%nMS!,N`__rBrLN]F.^s`#/Ihc\fpS9cF_7L$pGZQ>>AGW\L!F(=/B+0\)+2pj%a5%]8a^-H`ShuYNI/p@PfILO9!mUo9%$7(GR=_qq2rZjU[1Q%W!U(h[o//R?7Nr>LNRbS>cIaRD2qJgM%[NP)!15L0qBF#j!l?EE%dF=VBs0FQJ?@D:'SCsb`SoYq2BAScBc)e7^)^,f8nhs&%f&IYE>$i`dC2bP=$_[g11UPG6.*.;.R>NgX*UUu'+9A]G'YT1T?!1f1%L9<%q&odg<&HNeomWIu$HOK+t?*2`C!WW4>bWJ69Q[S#J[B<g:LfCS1%=k;#d+R];WR0:GV$bdPPaVUS8CZ,tE)L>,!%JbGTrV?q%S^c>e@BLr&`b7,+Q!AGp7;"/_^/?b;C)((EL1fjXWDr-kQ,ukQ);q>hiIj7M#VajJ!7V9iPt!G;Ympa52[9<e&3p5s<@UjY0pr#E%(eRc]]"0j,"uDVKE2coT7:W^ToYf>4.T*<[B1nJf<%5DIB<$j2"FR<OC3[0\fkWHV.E]g3I]kWmZc$b'[KdU=\;am4EC7OP-LPWO%,cVT4'2[#_Q?oCnC>r@^[>Mhb#(Z@m;lrC:.Vtq0(e\YO0U0r8e^[Km2,l_;$#>gOc?'eJ\PrVCeI%V:#niN',XW3q._Y!P<P;uM%+m1O\F(MMPbY1qiU]Fk/B:G"[[?qiijD>IREQZMY\O'qkF+qnK1'%ie21)1#.-)AK7,qOG"W\*[!3%tG?`WH\L*po'E8g&bAsee%%)R&G,Erg,-d'aB+V*O4TShUncRUH=Yek(VO-4k&F&pLmuKh.`i<h*`'i&mOC>QER@*&u+RE-;<`M6i[Bg-V=c9G2R:p>P?UUWHi:%E.`,-bUa#[#K%I\RB2TWBP\<!('$DUKU[;-!3h@3<;_m"4p/GYl=tL^/t>SQ3DQ%-&ojsT%Ah1nnQ]EY&XT)ifo+rq9b;#%B4_RZ%c<b*12.pM0eDM<'1j0(j@:Uh03lqB*<HZa>oE7$27r.frRHXb(i#Jf_F@^hieN)QQU9!Q!WEq3GRC6G,QoUb;)(S^mF&`5`3b,2A%R[P@eqMLsq)$!'>lIBmR<\j^fQ_Ne]L#LT^FO4>@(dl]'2&.(#K6+t-oRM"^[Ih>H<YI=ebgLQ<9b;NGd$<89:tBGMX.a6>p1i,e%TT_%]>-lgAH_mAQ>&^4del1'b@qZ3If@_U:Tqf/ejD'G>]ZlVqgNk5%]e%,qQC!_@ZLjm3hid*0A3#t;^)1@=]rbME]Nh`f^!5S7%O.+Q8@sV9aY.'O#/B`G*h:p"7C28/LbDs\be<l90NU6M)jf!+<G]12I=d%Uq4@\+:-i^qlM(r0,NlA<jS1K"/[C>6\C/Xf_]=!+N%NP5)C[Om=nH+hJW]NB3Tacc"%RJ._E=dC;h]jG^<Q7P15a`;1&*;.#%G-rX>;4$BUeDAc'hH_\UdbB*B[YlfYCsn5JoJX#1V"Yqf%ZLkRelEVro-VLaPN%_n)muik\(,,A>O"h^K`P%ULaiVthpNGq@AN?&eks^$*Upjb`\]GKQZLiB_lYWH+A4^sMH^bhbLj*!JZ"(*"%h(ddC7Wu)$]ji^]A1'Iq*L#=61.h2"]oDAiM0E*GN&TFt,tkQ(m6r\fm;6CS)t/f8p9q:!@Te"]8TqD+V7%Z&]i^S,,eFl_p0q0F%9U8nD)K0Q#[OeQ"?n=lqS%W(..!k?qmG73tD,tG1n[8'sDt>l*/'HAqEqZsA]r`j/o)E\\bQ#b+*<.,$EV-]0a0@2qs*l$3npbTT%IiQ/hs0=3!Z7O2)jIC;:3Tn%+3Tkc03Tp<iD_"K+]e*l4bH`[?rkC"*k.E6d0$A7YGoXjZB5dZs*-:7i*6[pQSB(1"SH&URB?pPO%[^+sVkAfQFkPmQgR<-Zs1?Y1J1$>),cT,X`F3`InEmD3HbL5,EbL0R4j1HqFc+,C-/^&.@Fr\QMgAf4@>0b19g7642g9UY6g2[&J%>&X<<Iqq(EhqFV#02'Tm*CnDWrL\.H3To2OS2p>PZHV"Us)YW7o:2r-3TkChf%U/+[?blLXj,O&CV<G*<rcJb!N1\43-S,,XsWCY%S*,%Z4MI=2p+g80=j;(3npo;;`Y4r7lY=F3XKUNJp]'cmptojMGWB\f#;KT!d`e\#^@)7X`t8f**KeQPX]P?Z>:.GW!M$@@?Cdk?%C5*&Q>g6DtXtfIrn(&KAR*4*&*p_#*Im)D1p9nb>k8WA*kA,_lbYHmTA2U9iA8RlLkY"Xr!%6@`[*Hs>L5r1bX*%`DrMo)g!4*oN%'mNJ/6XOU\L8nm"4^4n2E6VK&4'/BD?VYX]9U/.+"3f!ZCo(b,V"$qH2U4nDoef*-cWDc0Xk&i&S-*)l2&/o6,C3QsD@T,I-OJ^Y%"ZZJ")M@g"cL64kopFL[_:poXnb%<S0_67BDU73P&G$it]fqhRjYgd*5$'O0PFVrjBC.S?2<O\ifj;D_obkDFF-a/&7"qJ7N/"2>%L)Khkc#crmXY[?2i9o_&DYnA0qUuH`mdpDU`gZM&XnGriI66$[rm!gQD>s4[Sa242f,_5gKN%H#T!qitU:+[;FZi0+bEQj=I3X%W%-TPD.MK$]WdG(t?Q]n4X8ldHE`Eosq$/^a+D(q4m]5ReDZ.N4=b]S*;9Fj'<!AJO,2+;$=W2ca&9gS+3Pgr_]l$6Lr?Y?KfefKHF%@nqBq^X!g*J&-LipFk+Mld,V2s+6g5](>jss13[jWb:Oln[o<Hbiu1=c?2l+!55aOYLT_/?9Bm(b"&ZX^*;/7D?V%l-m-:Ch`M.=%9"kp,^6O[C[Qkr\MOXu`R83ibZ;Ep\K.01`2QkKeo!g4'W/Q[Rh)K5`/[;;aGiR`GAh!o&A?>.;+nI,p7o$%JFi5ZU"`%;0:[p=N%SiRhl7Fngc*)*-uBb2uH"m6T]dpPo9Tf.ubpjo_K4q,gG%1.sb^gPj>C32KZSBTH.>=&@[0^pB!-4%?&"_Ul(:MHUOYH[mXDhDF?%=Mmt&2m^Yg-4G8.RAks)BS4V433qo6D2eqa!N/$g-$([r#$dT+LhFT?N7r";@?dsC^a\"12DpbnA6+A/6\P->()=N1hKI%<^5t0[%mXgYE1rts_;br<c=NE`Fb3*W/"UI.&O]$sU.j&A6_CW8,AVH?a%TFcQU3merMe-R`&dheCnSq3XbH_Xs9@-9KMb)b>5\^0oo,("J%+8H4cT\>*-+I!Cg1%9R!hUi/;-cjaOHJ<!F+86C';%LU_:bjL&k'@uWOSKTRkq,^M$UVp^$3N]l8/8g_>=*)q$9`;@fLs;mL_f1U%7/76X+%ij>\Hn:43ES.PPY9)VeOmu>GmCB2oSAHu[t,M>P8<XG#t0q13!nZ66BbP#^lSs3r)qGuf@a:H*2'.IZ4`jsFIINFWQ$"m%#p,69%"-u%eP\g<0bDM6FBg)nnN!jVXF;FI:q[<LH<q[H_8B90+I+e;%<rE8p3]g@T=76S'*^q%+GkYN0aR;h*N@.29R$bDSI@,m%")1p`9g[$jGu(p]UELm"3C3JR/W4^aBqe>t5#->?7hp7d_#]JrGu,t*aAT2]PTsZI/`&p@c!"RJk&JRW&F/81'8f+p94of;-+7Ei%39cB`40C%\gqa[imK>GP:M"3RNj7=nDd6\Om.cBq"sJg%=;35"`PWuc18og+E+E*iX/H4-T4SHf,Roe@`bMs#Ttm4D&J\!tD2U43%&M]3!Bs["=*DpRKnjjIS$+qit5l&%s8dU],S&#8h?lBqsF\q]7%lKK2V?Ci'_N^DVOe\>#+GCq(>aBLDG^TktJ\b4r"uH^If;)B%%Nr\L0lJThOl_kL5=DTZshV1l##PKLd#1Q3Mf8P'DHJ4##ofU(fl/7QYU.atZ.6aoXgM.d%@pL>42(2&CL'<0@o94IR"4W/O]M7EP%"%hSuES,"rJ=^5=g0)Ql;aiY'D4FItaJ]/7K=H)XF"86(&bsp3Z2mBTZlK<99t_"a%;]qHJfP5rWV\12A:^ap3a&QN_27)&*ZRq_%eCu)i*El>25hV/he"ADa_sAd21u=?nVgbYB&!FoS@Nl5HcJ&nm!`'qc@4XaEqa=aOMel/>gTpi$)9nit&lT[L2jLFLEq$LHm)-WS%@*il0:cp#$P$gL),'+YK3.cZ=RLE:j">=s'BUk40/>Q)H/l?E((c<9?$O*G_K5d>K2R;7X2N(=*AdF2Z"f[,Co!%Ymcg^F+ZCtO>%H@hUn$QVn+kc$kHhY+IAhQ[.i--V#s9lrZij4+]W6qS1b@eI0-Dk%6`Ae61$,\,)^*^)<HQf)TaQ4+1uosPBsKbV4#+q!ZiD5j<e%kCql6D/[$4$:BMh>U8.P60]gp;b&d^&@'*DnS/>U>JWV$+`+7lp.=6LV+(kBK=AfTrBP!XK)q\p,Rc-%(G![2\!Ia>)=J.$ck9`O%.7I&:da[#6\jO9sTS\U:H!VRg67WZ)AoKaYXf8*\9>E%jI%XqACC2Lg%0_QfV;=[/'b#59(k@J"f:&2ee^W>m`!l1cLp0&sUo4un%%5u<?(fG9nn^(fi(G#BE@"_SU11"gRFD*h5K-;P?!bnZX;Q*J&B=paRWqNkiQ_AdahoVNt0MSO)LF*0SHKd+]BO@Q1;ml4N<e8RT%fKc`]h3nDq\MF*(g]G2=#SAep\t;n['/bSIk:2_;Qh\XlaldL\FU=JC!=+Ui^neohF\la8-'m5KO%,EN.kr57I?aX`8A)(3CM4<>%8d3Z&=a0#uROod,("\85RKmu7Fd4d(c]c@H:nNW2XXohC.r67X#+kg%Z%OaMFr2hc98E&q$-1WY=S1!lC`7&mXF`rR^ttr'bWq#(%d-qW/;hd0,-$uaq3%U@4%-Z"C6><N[?rOdqlDp#.MM9MJ\,^YSE.&JLPAH5WfqecGJ4[_g[rmqWG9%+qXp_4f,aO\E$AI?(+D-sM%F]qrq!:`LTi+:OdFkWFLbnO=2hIb[_]05K>j-h')!COjb%&7JZF'Lt[.fuj\WBbnCLd<fC;F=+@]Hgl3R01sjCc)?(jJI;>!gL\W%?t]WpAI?ud9HY+m$0hg/6l1HOQOV%/[Mcu8=OnVu(Ao3)<=^iuKW>Pt.4*.]bt0=WJRq$']W;@'/7=Pc"p5cj^<l#m<V\u-(YUQ#%WdGhp.GqfX1#,e1kJ=hNZ$!(LeYJa>ZW@.VF2hOh"I_=akt?'lDSu`,E:PnZ!'\SIW1!WEV'?2kP+H(L;M;SPGh<^pJ+,@JmR(]e%P6aQLHn;-(:f8o&+_qA1($lKR@RJ\iF;^G`j#7f2JeC#`A>0*_N$9JiAEU([@bq)@&2S#1.]eQh#e#UB5&@N=d2Z\h8`[*QJ[g?A%0ffKEf7F.Ai$I;8kuX=j@]khE"M"YI#2.P#.]dbrLd%q8`jq?d//YEW9),Vi&":]L$&l.\U+cV=gCi`!YqV?C;QDQT3OBoVASsK+%C>l0:Q+)b(!j;s-*bbs<>)cE&:e2^?!8>pr&]g\S-B'Jje!/Q79\$`$J:cV1LoP=!"802qW`-ZlbmB#Q!1j`CrRJ\]kWTF^DX)rt%4$XZE+p.t&Pb^Qp_:o_J6cVHcV+`4iQT(?oe\kmjU`*8A%B[iWGc7^UcuEH($E+)JTMXm_,RUW>fdV0Y^edWH0T`-65^arD#M((*%1qjLBJO.1F(^_cf5^6TY!J/c6'>.%t/rg&>b^q_C:gBU>SM][F9].$^0X-?I&1!d"$US<uH6B"cC[9p-OFRfF.L5t21Ej=3RcDj>%8qk-@#[q_-+p*E!=f;u0;5cS;9#uV$7``D1Q@ZMjNW1^uTVXTGYo#NS[:)4LC8T,XPV?A[`.28;5*-[liIbtLq%5#<i.j,ua9i7e%4/$$__o2[YX+(;D^r=-B?O-n.na`E!7br33*#;#Hc9l,u3o5%rVb*eNqF5+G.9rB]SfuCX6".W-(Hr9<jW(f:(gI:iJhM+A#RYOq%6',]m_e)k"+D`#;%WOkp*'cEafL)O0?sFrd/-V0)On5\%FaO];O31tRGhZ<XfOPnJA7m5!8XE<+:T?g5SH\,!K`\+9OME8;ZH!=t%Fs[?Nj5DYY(M+1f6lm&%'O;"R,RAi)8@@C)a]4=r+@hh6CF!"`d7EM0EQjIFE:gS7Q-q:Abba9]=rQQJWu:hn")NL-EL@4?Od49c%&6ktG7XQeT=bJLdF<V/@>?O"j+gNeB(G0(X'3`+A9.M9`1b54/m8IFa$RcbB(l;3-Zkn_]D;Ct+U21m@!X_;PS5<*Y#"$G$J2Z@7%7]2*cAJRrZWs<2kQ7A"'8qHXhi%TFt@&%an#$qe7ARHl(Fs+ViWrRbp@3s9/+:eTS#"]/dR8F?b0oeT9gW7LQ91!]j,tXtc+HU]$%;BdhD]cIg-J>[f"`JOEn/r[WEN>@ikigfdRb9ug#/=`%[&>1FrI2P&:VU5hIKT@M?`RINI%l@R7(oE6QM:7RNhH$d!^N47<oL8"/%n5pp$i[7UeJ;_9;aYg$_H0+UAnG[r#CtjiG[c8#FCi::L)po>u?6?CiX,<un<DbgMWd'U^i[YW)73@o\Dd5ZsD>'0Dd(\%Ma;2a-%a97h>ap=q/As>[S4;3j;bXcgsE#5&qS,j]W>\Y*93/0^JpgZuO(1.Rn*e?/SMiK`=ECUVDa-rL`Eel&$F;3NrD4S\d]<I*(Ap6.(%f`\T<Z3elM?qYQB/1c@6m=<i&fMht:+l!J0.r6=n:^HYBq1K3Gg)07rb(lrm-k[##!^mlp&]?pD!lkEY".^$kckpafDsK6H"cT8n%*:tde50tddC(XMQKLJ!0-<)7[p*bNu@[p!+6\-'d,Ea,D-se/#4.%08$*]X&K#oDU,_Hq+OG'Y15[L:EJLmIV!D(&(`/mXOe:;dJ%%jBL7oH&e6;\A/YOus%XN._mm/;k^e'LF&6SPYA3L6faI/Y(2\Z,#j\4\TH=ok6>4d_eHh#*2]F2%Q)*<#uPq"+MR3(?"5"+MGhh%Ym6&n<=UE1#H'pdNeEOFjB05`O@(<91(I,tW&Q2r:3V6&0m'A>$c@PR>h0+gQWU"M,?Qg&VTI=iLh6l$$Merc,_6TW=M;VJ+lT%P%8=p&D\d=)<n@"2X[PCUINf<Ln3/ca8eJ]:3`[cU;TpS*(Q0>P_BU!RHQimg#(a-^e1J$IB@71aX"XChqW@bmgEjf*&B5=2Jem,"+%"q$7pA9"i@_+:.$B>cS6Dek.^b@9F^,RXW@f*e$`!A4d]0ZHGKX)9(ZZ"P0aF`R!Hb@0Kq^g[`oBgn7K$eRn>A&@b\/d#1p'=$oC%UFZ`V]MDeC2_tiEB4B@SY>[\iGht?X$$75U=_Wb^MLm9^*"P]IOH>h:cmU_"1(l9,0i9);`D61jMMRWW$H=A^77ZB7'FuS?=3(ra%X`32(=G89Sn0qNcKV;dR4pXSM>c7t\(n)b`c%1Kf&i*>M9Va#V9H\#@+i/+C8r:X-i?4g'9VB<,QI&3f<hr<7#R\Y+Jj[VB?jWJ1%&umDPM(^N*_O'gfBXfIR84^E6$!0PK&rKYA88n^OMX\'6#LO(k["JkX:dTCMn4%q^csTu`EU#q>"<o1]&-A^\+V$sl!b,aQ$R)li%og*s^V@FfY@Fu\ZVkHM76EUpj:eE<q!L#f8Qt?s37"\@p&Hi`%NUSiok@TBtl*1MYVa_6+14BK3P,j.9,VBIXk<_faC?DB\BJ<ua%*YME_>mC5"h*XaXlSNbclW+[AFWJV^eL>1-<@8-5;B99iTK6#qTV:ZW,ZElCY/s8/_a%$rLN'2O3WtU7kd4tIl<[rBT\Jr>W,m?O%K'q]fSPH7T3*h.0flSR0Vs,`CTX%Ll$VYb:/;tVFOBfBcc7E7:19,F<!Xbdi$&_C<D6$8Tco#nNP"qdqhdqkfGNnAcXs!i)*PoO#%G9!<B42mZ0h:^?5)1Z8+S%Mp5kD5qLc2hF4FJFR&Uq7`X^((k84??GpEHDSn8u'R3$)@+#rL#4JcIKT\ojL9j5XGM_%,MgT>VT\3%?_ZkP<emdSni(a:SXC'eGQ<R;=OaM3&\Tdh@NJAK3^=J/s1H:1=Ba$,/^`)W6"#=aiP'T4"MibQf\7qY%%VX4[s8pk=ZOK>6T!cd%E8'jPGW[%."r/)E84Mbr3CkKPK4K!^*1kJ2/*W:SeC[6ciV=DK@g8,r)Pr2OCQQ1\KRH:$PSaZ1K0]kUPWU&<X^Tk[7mI1^"N[7h%*60AQI4Ah\osR?-^lfk:cU,l%;TXJdUUgIZ>>UiaHoUXfNl?UM]C'kuf[V_q@GZ^d,u$*;g6!;F%rm%bMh3j`r6.Z_j`)TIPfeM@%"RPYd3aec1g/^T'2U5*3qaKY_N)LTtDqcJh_Bu%)d?QP?MIiVUf+DDE7J?dSeNB(o`ZGgSFYMeXc9RhYVeUnt9g633+%H(=m@l_>%''!ick&$IgrYkQ(D^/7u`3I\&`WcMid:q=*b0[lD"p]e`dI[]E,TWuO>(U'Ff2b9.iFM/TEBP0U"KK3(6h3K'E'_muiT@sCEhO$q%$._Fa+"XD[Xp_@.W8SoMS\YfE"[lMW@a3(%CkBJHn2>1m9e,"s-G1q6:7d/[FJ"AMF92`#O28X9knjk`YOf2a.*ogC)'Qegf]&'(%?Ha^U%2BLK-E6H[:9@@6p`NtQ!(!6<aQRK;&7]6:Kb#sI%"g;i(2p7$<$^nEmA*(:QkVPm8V4BYOTt,;-')H0cn\E<Uk>JBUXP;e%OD^?&84Ud2U_B"1db0?eUluK$34]_*<F<dt;803N#U>nLF_D;IDBQc?'U0H_>sQrlI>%_ma4Is(8!Yd2#j_\f+a$AaEl&`Q$ABKN%<*aXJ@I\o2G4$a;D98a%jQ!1odAD:J:p6[o[s;2HG^+=g'ut]4(1F;sgUunnObs_P7H87A<_>6Jjak>e=jfb7)D18@-$u,s6YXDB%7qiUiDZV,p<6R.Z[s=J,eoh8L4Q_![!@Hc86(!iL(T7n'X=eHh.)H;nbD,WhZCm/`F"O(?FVd^Q"X7O-J_oO+hWA[B`sI<kTX>i3%[s;`Sd<Q[%;G#>Zk./>6YcJ78&<3,L,iB%LZJcpF+JSQV9*PdfF.&/j/PT26#>*C'!P=:8bsbPuMd=sRd6nnl16bp36(gNlOCGj3%U@O[id9t0e6kV24Bt#rDVm;&CNp)XVl"&!V3NtsW"pttHW68b&CIAQn)Y&/>%$KJIGc?<-)aGkWQ4S_X_O?DjKa+.]aPq'E$#G_1%]M'Z$'G+aILmA9=/G097oR\8`n[<B,2?QMs24Lhi'GU\kPKP4ZH(7i9MbFt+PDL1e10/<L22he"M&`k?oRN'+'FOc"aTE,5a^dpU%WSe%5-it-97K[gZSJ[20e<)"OV2V'Oe0lEuG;<9n^<"KWOeqo;D+HAq+"[-idU5Bq!WgJU=ANMF!!n`I_:uh*);:2Rof<m"9jBe;%q-8`@!X<2&-DhI)4EO^%:Ot?2F<Gn!9B#PPe-$UH&djheA2&,*C;;#.RQM.pXY\?#L^=OO<4Y75L$9)u;n8<87[A+kg;k$OGNN>l%$B4Ou2W>r%jRR83@u2@7!N>i7%>Cu1=IgR?WFK:JBde@7!@*PF3(-)$VT18/e-E;c1eZ'@!c^Jk%X&PB0p2RCGT.NP'SML/$Y0j7%*]*=pYUNoh<A`=^DS`2t[u>!<3CC_;%OKO,4#WMR3lXj,7?dMVN^pp_I%Q_@JE@B/N43*<VL0+RC0TGdX@*n?e;QHM$TT"(E]N$1%_VjXBd&%h[Ym@B7NP[+]<AFSE5`n8;j9;]^<sSgsQ=]82%*Ut0Pjd(K%h+akZROdU3h-W'HJ4SoCoj=IB[CJBd\_DS#EpK\PU>?T%`<#3[0Zr!u,djg#@"aZFThs[GX?%ou;0X[u[iM[[:q-p>#SpTr"(iWM$'2SF.7E-3HnWl^.VFS&l5JCV!)m;AhJ85m"rYRm))gSL%=;"-RUrn5L5kS5i9I!KoR'1VJ\[@1CgHGZPk(9?&\6oB7Z/NP\d(p(l;W^mp%ZFO`Z5>8_18;Q5T1<b@V^W3-3OKS[jmsOP.<V\C%TQ%^rCr.No_Rp=4il/sO)2*9$"B]>I*_Kpd.i$d_5`Gf2<Xfs9P8,_F+dt*(A:uWiKJ[*i,_=BG0U)pH\&lG)b*nDe$C),[j\*4G%JE93t3>rqH(]6?seHn&%5brD2CIAI[&B%F$6/WM%%$a/kq1Of74sbE4/4[T,i3U1/n5Bt0j5YTX;J7)D_LWH[m%BM5T[9\hPl]d,%b(+=7'O%^C$>hB#!JM;p`Q.pHcsKM,I3_W-M\._<osRlo(&?VDj4[9UZsb<qg([u4^^ZD]e*pKqNW_sa*KlAjfoDo&`W2<h:5+6B%Q2sPZjut&R7Up#CNM3$pTtR/q)DAHp-(>M[322-a_L*L4Jg3[i.3A\4=V&cSHk2Tj2DgnsfjOrYZ)VM:+pjLR6;F<a<fj40gnb;Z%Eu#andNhbYGI,[Rb*iPY^P7CENi7+tRHQ6'pHd?]R1*\iNY6\!\qWWjks/C1F94/=f+B.L8>@CUGT`ecam`,''Ki)j"i%tX$O13+%^0uXK-\bcBUQGtHV;Qo__GKVeiClX__W_;6hN6]]G*,LU:s71<\IONmO'kYZL;?$2Y9t8$MP1#I[?R2,/)-18*[hKDpV2ijUYtW"%!LLZL+/^6T/)W3VqOg)mM=cduN/hQUo0d[G;Fl%"#n_naYmW^"(_2mI,#6:@==TE58r:X+9CAT%Qfr9.NXCKI'Om1d$;A\*jX'&3%@oCnZfdJE03M<$>q,XE1H3X\OfZcOdmP-ti*)`EJf,IL#9/I!mO$IqDf7G+i!dU-"J6.7lhVuqj'Gs:Teh>Bt1oj]2Z/RTG6TVR`%J#]??fr_(PW(B]N9U_g_%1gU-)hXAPG0Q_EAW[lLlj&Y^YRUelJo-Gj$+;a+(tmPV8!`77&a\_h3Nt_p7+QM#5.8FnFmQ)8e$5$R%OKk>m>$B=(;d)c2!FnJ%%*#$Gf>6WeV3&L.pE(dbTBIs04-ugqd><q-kSBf4lV\C<n;.eU'aY)qd..N@&/eAk(QrZu'0HV/m\D&$%0]@=$=C.g+ON#sB#HkXoKEGaF8/\SBau!l75<ki16'TEb9dhl#c%YXa#X`QA7DP$s_1mVS_pO,<2C'O\.As)&D+I2C#E%Y\(57Kr%ojE)"-'2"1o/%XDb9fJDO>LCcOhn?1'!7ClPqnSd[tWju!)pSU!E2ek3$#eSZ*GT!4&4oe"*pA,6kYUt+A--6)(6^3H/?Qo4G6>h%cm/m^bV5,X5._k814efN/$cVra9W]S9)qQuR<'k]i5WU01>n/0`kf(9C`LMc7?sMe#fX*@)9Sl)W0C;WBjj^DeUUNl2IKL$`Mf>H%K1=RR_$^g2&<WtO)&^"B_5sTrZXXImO'8R)$-EJR9c-u`9*>[CN]72+V""cuK+(gl:+3D5HO10#i05!69*Bl7`tg-6LMNfGc;=$8%Gt0g?!`L$BJjLZFBdLVqdL;.4=*PdpZr]S7kgI<rTkHQe1eO^?8cadA0^u)!O\0NoA\JMn586.=&:G9k6uXKo"G6+u?5RrAdHhOP%5[_Vf7:72PE+GB5+>HOb=R^?$J9o(n$FRs^b3Rme7n1^r7qKI;C<)"<QP/;`9&l;heE,pD6V1)<l$G*qE/m<tQPFd"-'/`X#pFtI%`s5P_PSl&BUIE%1_D#(#(5'#[1?2gWM3!R'l=hnF4`(I':[:8[X:4/LR4%$*SfAZh6`B)$EG->IJY_iSE4h3-aTdn8LI2Gb"IDAC%O<;327W8ZE%4tEga9W[s7Eu%A)SrPW'9hjgm)J!P\mS5_LDl0H5e>lH!klHD![5.t8m*V#!][J@.g<#*^IDq#-Hmc1QqN'r0F]+<%_H]c%(F`c2/g1o"TEp45#J#B,"d3,(UpX+O5`$i>rfAfC%l7@j_'*#3N"1jIk<Xd;dNplJ"*OdLhDcBVALQdI/.3m6m)Kc=/M/ui%[k5Z8%ht!6SZ[Vq\eOq)l9oS-U&rng-kRp5Ths/DNX]0:i/<,a>.Qs-HjN8Un#E@FLDGd)al"![+WUT^qDsOe$dp%T\0,)A'4=!i%Uhe%\Ur,$J+Pk.I(?rK6V;d,^;<K8k:^7bm(.'38Z/B34R4/D%3cs32MJ`eO8mkMYWO]s/WAF?r#EL#fZE0M;PT1uI$)4:L33m?,%FHFoaBf@<K+i+UZX^T'hOWJa3QnjnZ#NE$Q`+<(TM,p@9BVc,K<&.nMkcGp?#(0g_7O6$0N\]f(*G$YUL+n?Cio?&6.6d/*;br(e%_+Z[!)2L&4:IM3c:`;EebgW0-e"4e4ekY)Q)+Z57bJREB)SrNea9_:Q=6(:9XUoG(JW'TF\Wn*#/$_cd/)0$'W=7Fq^bdO!`l`fN%Q&PmC;;$IKPlY[59r4qUceI$nH4M-_miGk29;S_(ccee`#m2\A/@-P!XHYB5U)2=C=_1PCUO38*Zhh>:/BtIi6C=,m6i"kuK9S&!%U^9D@PVA5_[p^1/O:lCe@:kUa,o8gbHTViJcm,rSO5#JT'!_[sdKk7>ON#@gYZ!.@-6L0opoJ36Oc'4MM"IKGCe@5WJA;hqcJ&s7%/N&gG%)OQ@>A=kh]T@la[Rqj:VR/jFjl+ns#Vgml`IOX$85kMoV)4C@]?<$q')]X#V2[<r#a7Wn6Aea[[;?3?C82_uTbGT3D>V8.%F<cb8FeI7kda]<FNUC1sJom`A&Yr&*Oc\u<E$!gaiZh_67eo*-K+$+M7B"V9??9TKP</*J7%@BW"(Lu4PS$f!FMr.;c,fI/">NHk%Jl!AI=@1$eP%i[KVFo_I;7^-FN\%fYO_$=.Z8rfdK#\KQ;BfE9-&j5[4S"5[A\BZYV5F_J4aC7!_QrLEKRpso"O`C9XLCV0pNdCJ%ocQp=_?<"-dt9>5i]`_bPR!C$6V/C`F:dU51'mJ,+:en3k$]Z?_bc_^#6l^-8sp:50d;TJ)\_@o%h+bP4>9mGEIm$YVOhu%Trp'P%,6Hlb4p8gE*A^AP/NQ3gkU;'Kg/*Y$\;i.)DMT+0"4@3!o-jniLBH<UT=6s%%[=tnpLKjr#0P"P)2\ieTnl5KPfA_5H=8'q)U%WY%g_iX4*#_=90A8dlF9W?fbqVM_A.C3_.GdLlj96op3OD<>+]S">$68O/k)]E,>jZsj2M5(L,BnXG^A"h7me;?7F85Y4GK(]er&*X5%K0SCG1\`cop0PBtT0;o%ArZW[*UK3cGPg:&"[CR^o8bJ:p#`bsr;YA5K0=,nm;N$UI]kE>SS*@,hH"!DoA@)gcLJ[EK04&sV_,YG%kIpiGf__/Mp:C9a^W+l7Y^^FEmU4A1C>Wh$`>S=*COEh7i6Rq=HMdTObr0&Brp)Si=oYXG^L)2g0kb^Dq0'G3[iN,OhDb>7oA3Fd%jqdQY]>e-'s1A4Lj88A\QK*rZrr$/anHNpg<#K&h\$dF)h-9b:f3`l`1#?(1ci*8/rp7DM(h[aRp=f6Kk3P7Og2dhg:"?_dI<u@]%XR?@3kJ$9[HhWlq]8[fnSF>2cpq?D#EiZsq)Z,Tq]tSh&g>).^EB.7Z41:RC]A*9IpKZkig>"X<f%E.VSj-mEpTM"'o'8Ha?%`1;%r:pO[ei&#lq$0"Do#2AWT0[f_huA<eHiIsFrnb;5#B.<os3(08g@MB4moo></`o.XSjDhI`h)@3Ds(;@F2'eh)u&b"n(`!_2lQ?!%\bBS22jj1pEZ\rln)*m!^%o,7s/YhdT4dQ["`rPR>H[K#ERl1PJ,/6?K/_h]q>Q_!DJd^eDp*LRhr!bi2KJWjIPJ:`>&F;QH09["%mQPh+kPbA@p31q5s52h[FiX49Im;9:D@D!,OdsDa4uUuho%eZimF<1lMu!;jDr*A'+P.^RRDYLuHT1C8p[%eUq/>$\[i=CqdlUpn%ZhN;=YBe`go4p#"]X)tJp@m;npR(,\1V_^KSupiJrenD%gfhBMmXO];H.O!f3e*[3#BAn?h>-BKnb!k$$g-f`#;sg,qJGu7r*jX*%9u^bV0uc2*R;]0$p$oJ7p[#*6h>5lG`qK;43S<lQiUFP\ip8u"\[D;5IR0UneM_cd5JR-a$\$=iS,_X'J'`E;XjpL"$[1=1kPe\G%\a=>02VX15k5!oKZ2Ga4%<Cg=p/g.D/\Y8,Y!'9Lf6uKtn,;k>gY2,.c/?Us`VabGHafML%r/bV31fU;rn;cZW%jWcpRgK,3P;p&%QX<R!Nb>IGcIhFZmId"0CH;E&``n5aSTjEX#ArWD>C430]C+S=XZ<k[pV1_BGl-hfhm_?gmEHF=I9VXlrr%/Tn'6>cXM)U1pT6=0%*;=frNq<7=j5)Z7nYWTtkKUi&\X[f^<b"s=NaIh:`>@<so@eQ(Xj*Ekg[hi/>0X86TZ5a-h;%J<hLE_Xrjh3oGL(^/CVT>iK,Jaf%gWM7;1REU2\SEmChD=:W>OK,C@)cIOpfb@T`r1MaB5>>B3NmYQQ\2cbq/5fDrbj$:mI%`!S#spVr0YZNF7/MZ(jcd&b[kScn(<46%o4p4uqgo](.dlo"D9f]hmJ4.SgX!]p3Qs;Qqtm#a`Lt6,idUF3gZ&fZ]ZKO'(Z0YMpDr%6;al`(XnM7He;Vp]B./A7BF53.>h8d^%ST!Z_f@flPp&05Ir\_FBJeh_>45S`Xq_,GYk)]Q8SqAqBg"XdIp@r*g6(<5pg40&_kF^do0E.:7XDRFYqVV>/3p4aP^>.`Hp[u:2%cseX)rOL2(IuH8bhJS>E`np0f]C-U/Qg5`+DEI&:[sQ0Ohe]^pg"N&[hVR+Yqu=63b;JH"DgT%_i5Zjt1%(\2C\@WCK/Rr2IF$YS%c9(eUkO[:BHOfJemD$-L3.i;o>(>oqp>E[>aEbMg`VG--F$4`;n$aFSSF6Ad]g7^iMtct9Iun%*G27Ghq-V<('pj47f7G&bS,^et%mhkDXe(]2?I0Vjrmbdj?Xh2?^KDjg-Fn_8ASF+$4oU!Jklcd2*3PG7V?2q,*p#*TTk?N3AG0KWL3TkgC(2k\jC7]Xpf'E8hkV9!;%`KoiXH+0)DNcPGRk54_^GK8;#c1.[j1="O%Ciee:K-0!?^#n!oD1;b,k-"^:n,L/r^0Aj+hE,r<6(>FPn'5)1Du%H0nuStm>Bc!J%hNiMhn%Mn>h<k1\oA0#Gp?o#chY;^^F$Ju,0CQT$NA$)DVfDI?pTJqP)75dk]DJ[X#4]rCp\].=J(?jE%H>V)IWsDtK)]lHmbN<Z%+O8dA46N,"J%<8#[Fs8\]=5EPs$-5OHEONm@*[QppNli=f6N#IEh2+c0A\d7YJHa>DnE`MA"WATH/![o#P4hPGkPKKI(cp.CV)m'%\UM*&s*oKEpNPA=m0@drEjkdMh*&e\lg$R?T)Z"khUq]&ESfH"TC9HVGQ)aZgk5Q;X1?KJ^RIj]D0<V)Df<Aps5eFd?":LUf,SRs%GLsEQIR!W#ceRC#/`sWWXYIjTlb'^YrU8#`f,EQ%2eXqTqmB_a%-e?&IXfOff)"6]XoEWm0Rp0BhV%&:E<^RJY.n+dmeuhPhn:i.%*RpMK*VZ1Q#;=q':?VPY^O,jm0=Wh4Zg[[-h=L@Z]U6<8qp+s8g&J2EobiAuF80'h]AE8<m_PIcf%u#pD^3;Ns-DQUF8m$:RF='8%Iej!^@guVch9YKMH>g!,#'o>hs&aLDFjKu<s5'rgcWYu$DCVhE^RKSs?gcdAo=c.(RDW+`Y5\b(jmom+HYp=.)!%+N[pOKm`n,\K%p:H;(cLuR5\)k>JE+c?RY5RN%F3?Yd0:2(O)r#5?cPbN+o:'NB0a@I8E8T@JC]2;fD^s%:T!uBLe66YfqqYZ*r:[<Kh]LX?]DD8_%n[@4[$g,[t^%]3GA%qgDq;"MXF7"Cqg[]_PpUX^Y3QNl:rRTQb^&>FsEbfaJ4mQt$IQ=REhAb4.5PO*\*8br"h0&I>GHft!`o6@]%jk/^Ers!E(1=f]KY.MHYKDp<`?K#u!MBS?mZWMY;^$N%I4K/-(j#RBap2HH.^k',MiiT)l"IRs,^V0;c?e`EP4#unkqu,4J%"<R_%)>Cc#G[KrXXhVR*j3P@:TZ<V[FlmjSs7lii^RL2:g"r4o^0G`@gRC.aRs48k^EE9ANA&9of:W)g\^!+nn%m4>^9'qr`@%!e2/*>#%!f:tT\A&oO1*[A]F/uLq(sKRTDmhW<X*quqs*9fJ2t)5Tp07EA_2C$\\Z:.fr*O9ThRMa<[I=*$rUJ1cqe\@efkZQ6s17C+^#kpL%J$&/V[+sd4r\rTd3UT-3%bg<ffo>(\QE[n\SP@+Lc+hREe/39$iiB]bg36QXoHnU&H`1eZaOr-F&na.cZeNUV";'-`4B]sL:Rm(_%2[F1KL*poWLn*:5*R8Z8`g5n/QF!'egtqi#S"9U640'7]FRM[*J/TkM,S[n.k1LGeo/:OY2K7H`K2jL40Qa>(WKtNGiXg_S#l\f"%Pk5nX'<TBM\)A:#1tICh(kI?I#RX's#,*A'L3OZU66Hi(`^1dZ#R]R.f/c_OkjZ"kjTs7hZ(cJn%4d.[E@%TS/j'aT$^HI!Z(CMX%AH55r$P#</RHn]$&n0Y/+L&p!!>FTR&h&a!AK!366m@=(ES@^GTU?,jJ]O\F^mL!gr%Kd[6cEc>G")aW6s*FdY^f&ElOYO+PW9+0%jU3BAbY?2Kjn#oO5ssd`"cl6PiI32K[HISkBh'*&K&MFsg5"%n6D8ZLjDn'Q$b6_lVL5)V_J2!J$T2<Zk(4+NOY&&/Yp7[#Rj\aR%c2AnL[&Crs\U'#Hgn@`aL:+'u!CFFc&-30@g@2pL.*04a!%m?-iG3,s2Gb<5>R3HY"AApr0M#<'JpSS%%2MHgm"?+G`?gGCL'EZh%W$gp?FGjsDJ=:6RC"V@!,]%/Hs%!qD2)(]E>`q.M[r'e:>!MRcb0o65E\*2HV1E72PY\bNMi9=,VL4AV''6G.S+>6nA!''39i6kN%J>L*P+W*uhisONA(0YWT^rWV(J5OrK.&]lJS+:Qe!(J?/.XLo2_PV]o_G/[IcbY^;Ho<-AfT\$/%7hI1;"Y0Pog*IDL">#H_5;Sq%Zr4]P'K)$*nd5en;ZU(rA^W:M-oDK^)+EA96ZuQ]OQ^PB()XZ:"=t8mNZ;lX(X\B;Up48.V6Pl."Qdf4"tG7"q>@+a\tQs;I!63#%?#R?"+Him()/RG#I]_,EAOLUA7A78"JSo&%[m:@!%>;d>-$*98/Ne@^`7lK9YOe1JGAp;0#/k8nEeEB^D7W!D@)c`4QF9)H\*q[M%#.PHl,_eA)4:S,YBGhiah,MG$,ln+"-%7;I;F:h$2&:.L,D@l],GqnAOJK3^+D[am.0?WpYqo&<Zlk6X!-?05#'2C)'%7I(T(#ru%Qu.+$+H']I$jJqoT`M\I8HI&X*5*JBE1nD4MF$'VaT7fVW8t7\FKoA9@L=93AnGRCg)pF&&cb0>/0#608&K0[])r`I"B/8J:-:uq%/g-BLA$J9M$4)5/6t$d#0bEF\@nna7D#glj&!ZXX5__IM*;t./'qpjuHntm#BQ7JZPX$;1MjtETT]K!`1GK,OM*mq],m],2LL=_Z%c*oCCCnmB6i,^Cta"4S?@<H%SikWMq7@rZMWtWXlk5[;!q1"&3'HF#G$\lf@38jlMSKUok]/Oh!LY/g*O`[d2*f(KO3e;HL9dQ1$%KgMma)JhCM!5MD5#bScO">GTt.n1!5_6ke+/9C!k-[1%s3@Lbc'h"/uquo'*[6BnX0E@\cb-]VN_Unsr/_Eb<^]JT;g%4YKqB5n!%Vk!iY5[LCa_sRQ8'8r:%b'Apbon8(8>BM:NKF7kORs5U+@N@NVB;!P+-jU`e$BSM/Ito9Obf,MGS7l5)pAe4lEX#c/4RORDN#Wj8%^E=Ml]<MIdHRY7Vddl&-DB-^C#LMPA1P/j6[?LN5'99mT0r)I!0mJ;kAF1Td0ht=`8bS$7EP1E)o=@i"\hJ;-KA4M^pTtJVN00E'%g:"eH/N"=1hkYFtHLd.L_Qeq7UR?W\`:El\"m"J<a7q6>ETiSL7=+MLC'*su_e2,O0KFrdmP^Pb%ues1^)$<=Ji-`f85J(`KlK)3%^5pM!Z,FH7L3ZNL3#sE9BgnNd\RWq]akm6Z1A&Z1@1Y_]pEKH#E4+)86$%hiUV@/1!a<r&,@J7R@P/W,''>U__/7ou:qN6aahu><%rh6bq<pJXq1nq;^msnq0Gh`OZPs]VXDsn;^-]i*qTrkmjGU*dI)DG\<MY)\Z%ij<h&0J?hfuS).BX3YGQ"F)J/iQ!PYY5\&8sRr;%FOFa7Q>HXl_?S:ol/&<C:0V1m7Mi!!aV6J0H&8tLL,+FYPq68."KL%&,):4P3+CR\9\`3\GT-&bp$Jt96A3?9A9l8?ZGR9pjMA#q%AEBYL9u.9hjK?>A/-1?43rWO,CJE*WTU2T\%j_beE)SHeRq!sWMc04o^r8>ef=mpnH0JZA&_;C,1,rXaL;q-Ai"B]@J;G.WF6:Aa%SXZe?buVrH!9F#ki]4iA4J+JLM"HiX\TfD'"@tn=[t[3%nM4i[Yn$LC>p&DeF.W%Ultq_Y`;Gm/kKR51;`>kR"KX3(-*gGK-QT<c%A,"0Q\Whi3.T2jL#K4@^3]5U(QVWSfYDJeVTdSN8($]b75n7=$Gl$J^)ta*C;kL&&UG.PT?<Lf.D-AIb0cW<E2Ff"541-lbgrXg(%^BmABMUq2n>i3:QU?Duh:J^41,9lhcBlO2_Z'>bN%peTI8o\^_#iuhUgds_"<JX&E:0d"u_hULT_T9q-"jI#p'9q+*0X9cl/H6iS%Pq*I4.msRlUP'5q8D^(b_;5o\UAGgP@#\=1.cg5iqs<McgEW;[<KOd,JN/%])^C)(W58c=\f6B#gYl)^7aTp7h!MO<AcEUUp,;Sr%!e]U!WpjsTJubP:d.pFLfY6S9_:7,@ZqqY"EhJ=]::JD-Rh/_W^0`V!ACpt6E0JjeNtmjC:m9!pp7mL(ZUoMd",7&,7MJD/r1b8(%q[=N+Wj]*TLb[6'hE[`YZTs*MIZ)X\MiJW^m'Y0H/?tY=GJ=RD=Y;,Ios2^OF-/]&2mba;T0Lmfc#8_PV%iLcHB`l93?9jQ(aXY)%/K3[2JH(k'Yn)c0>(4YAeT``fq>XrobT,b?I16N5<L`k&jk=$HaJ?W,/F*ZkkrOWcDq1.?^1\JFqN54V"Kf/p^dPi0&qJ.F:+36b%:><G1Vjrq!'9-9$MuQ@'.mVkL7_Uh8p*/8K9MW7hOm6B4<YmaK*-(\F)f(,+.R57CFlmRdRJUj,1M0tb^okWtY"Mm.B;1jpL0)g\%5^DnHF[d[OhSJ8DrI9IckS;G\SOU3eW'JDQJ-\#i-*Q9=Iho)+5U[UNFDU9aaAf8K:.O)GdO+B%0sS1=h03+H%c-X(2M(g$X3YA^%P?d!GT""7#f\%6\o5J+)aN%D*IWCb`fsdJr,sE_9/d2%?p;tllidRuR[jrUep*E*3ic%/\Y:*C'GIFV?*@*F@p$1QcjNj3k,O(84%*#)s$O^<&=/m=&-(%(MQ/n5>oLX&Z.2I>#GiF2C3N@e"R;e7$7V^R(;'[tBlg#dnNBB*GDN\bH81'@L5Q[*7ef[[8!nOb>:`R6$&%]omN8#btM5HtEfS0:!;Z$&qk7FZ+/Faj?(p4pD@mHM&6+TCak(-MWVN2YIr$5Dgc*PdS3QTV5IS`,t^<#5))M#LiKUM8^Q0^]>bE%Q,obW,o)##S$/WCYloBlQ!H/\_kk+;U*e]Wif3SOpHM]#&.Y"oHVR7?:?PSZ:+?B[>Y(JpcfpPR:h*tInl"-\L]&JfH0)I&G'Hr(%_#0Sm$4n6P*iGm4`['<0)$ZAq0nXK-)(*8#rtpNbs!ANNLDZA?.H@OMe<EH-C)2MC-I4bh\k@X66Irp*4hb9>RO;&sK0Jcn9+*+T%_.'6Me)!@hZnf^Q779K4^edT"5OeF`WTgVeh/!@T+[%B05oS/`"gAHaYlK_o\=ncM))K.X\Nc;8`KZ,?',K\B5J3<g>;8mkJiAo>%O.F:#@Ia(1;o>qe#\CI!NFu@$a"^mcJ+Z%*.U$%?,!$S0A6c7%rb\B`#=7<XcaHMSR?L(+=G7o>ST#RYrPa4q+8?"886Rf#i39,]%-9YQ+mD++@):,"4#m3Eq7Poe>+-mErQq%H;3),\?!tJUteq_NEs3kb%G$!62=>:[P/FG/g0g(JucC2cQY3mqhKpud-@d6T<pTJ20%/(2[B<5=qcKPmWs^Xu36J^`"53R^m>;^N5!#S,LrB^[62eKYjI)#(#NWH[25p8_C.!N,;q"OWML_l"YT-po'Y5cNr9;CE&Xqjo@9%rY(I+*Cj3)*#<\4QKB.NY_a+!Fs>.r)<-.ZpP:Z?\<of1aYBTj7DP(^Qpt3/='QjBT$hTRVpGb'?*d@\Y6LMrm+681hA,tC'nLdI%^gCt;J!AZSI+,I>6hFJ1E%#2$"K#1U.bjhlRj(`664&\W<>-AFD3i69a,66%CM+k#DJF-=NF[JMF"?UQhqP4rW+]nr_0@JSSJ2E6%,NU/M_1JQ`bf8gSJj(rg"PF&[!b.Z)n(Ej<k!iH:SIpEgLE"R-@PH)c:+7B6.)[4p;lSEZ=3K6Yd`MLfgqBjd&(1A`Q__R\#;^Bn%%We]]Xk`ks=!AtnRi;':>u!/QE*>r]SPIULr=nrf,,5h<Z6Gub,b>cXbBC%.'=h9naRQ(@,_MQAHNV$Cc$MtJJGn+d=Qot_6^h99%alD/\4iY.O/*L_l'at>%YAB>S=gP>;e29!K4iLq$^K;8CX^>*SMmou&9kcd'*/+p;q;DqGhtF'"(k@Dlg)!!QFG/9Q1`@Zo=_6=t%#D4%Y'mjBm"IN6NqSZ<-7RJFMh8,'l2+N-UQR^rh9l.HrbgG<fbshV9e*W37l22r?YI/+\jhn%8)J]]G8MlEeM"R,q@1Xlh#DH9l%)B"JJechUHLUQ]l.BMG+Sc'>?-LK#s'Y#5or\dE#)f_*:XhS-Q8162(H/N"q``rfJm6/"=^q`+H:Zp']jsk?1s6=[eDg*8ZkY9$E%5FSCIXbe"SA.bhX*[:?D]9#hV&$U)\?8"-[EmI8;/rWBUT%ra,j]2Nif7.graOoT[\Xu#Tq0dSN7c39UV15MbPI<FVK@lf7K6]Id%d34:/=&pc#$UrSmnFL+j]IZR0oR6ubDRhlLWPdKm`$^5W3J:Sp+r_(DYP_-"JX(jCNOU@A?\F80$(jT3.0ZYNk'3@O>r:IESbhu"%jthWrI=ElVb*(tK&`%$fQc5Mh8ld(lR3a8XBPTlUalj&(9E3`?#@iq#q)Y402'Ng)PDR^q[rRs[rr*r,Pf@"QcT9MnC51.OR_g\:%W;U4.R7%*[3^XdIZ\cCb:u,OmX;&Zp0Q\X<>)%Z'>UHsm.,Vs`5;VK,n$AFh4RntR'EU4Vl0p.,>bE5#9KJD)GX8X[EW7M+'AE>.%L)fF\9@6VFIo9&^-E<*79#WkA#o?8jaAh]ckWM7XY#[DJ)tKC!(n'UC7k)LgB(B8k]nj`l*psi/o%76T]n$i"P@b?98h<M=?3J3B%Ln"hoTlbSgRfg6B&MaK^jUcq3jD+\N/1lP#00$a4p(km_D+)0heO0jJ552Z@:<OQC9oBQFhP5d0c66,'_GsNf$nSApWR0b&/j`)"%a/K]ThBkesS(3dK,3Q)]a[Ij<WO$DAbJlpALNe_KKiC5>2[](/(aoeg\)@=c#T_>3o//2jIjisQRI`(,@bI<)lE6!UFq\aJ$'c[3%+#"#iF+t-YRCleC?7Zu$5_4EM##,TG/$jbEaL4!R@:V\O3",kGWP5p_/#<>P6&I;XVLf6*kiaqad+PgdX4HfSYAk#1/)k=:[:l,V%S-G+t#s+V9ZOc$M:!NE7CR23]_s)j2\:Cqh=Z4P>mQMJSSUUDIpDI>)>iT33Y&'%29=\PS$WWG[7:1L#oSYFHB"HFtG0oI+jG9A,%j<b*sRfCd(Y$+5>0GOW^$Ga2_\%GAj-K_ftiR*A$6_-*Ec8J.M-Stf4V'SjjO,dtA\Hmk='W2;rN5(#>W']>A0nf+s^-M_U/8/!Q%JfcJW?k%d[b+K-Y[%j_t'^:$"NihOf)EiXj]b:E67gd]:YIFM][[cQ*kgDg*4gOQ>`KBo&1psD>OXIp(Fk]O"ASZU)5sI"'_;`X<%h.hKVa8Wohp/ZsF1%C>N(,]jZdk/]pC4)d#lr$IpG`#X\:A^>USmDu==V)rQZ0pe$*Kh0)X<82G.T&5Dj[%Km./@YXk\eo<Q>#bU%adVDp[=q*<qD_dLma[XYiI.<)7=RTpI?.=^i6R(N"BX>HX:F\m"gfKC`k$F'r_sgQ\fNETag3&siY_D<Y.I-TgNLb7n0P#MAt`H)%E#fHUq;A>l[kO+Dk>6-"a"rQk"@<d`_b,N[e?=?s^8AJ1eE)K7<-eO)?re(h$e6$L>G+;o)R#sl\7MIIPu\W27u7YR3s,<E99!kV%TdQLeZs#pb]26RA5s"iM/dUo""qnn;`9V7n1BR.ifD10bDmX??:B27R("b;D93l\JR$s+T7t3ukmip[8U-,":]i=!PVWI[RE!@8#%NT*fteo'R.CpONQ$gQG/*D_0q1iMTe4hE[M@E`LM^g^-EB6[1j\"r.Ma)IpOiET;U+$=3(ZHHaV'n8bDbnDH;2(\V.$ao.a)hN6^%\iat@ND;;7VT?)Gd-XYhInK)1k4V3mX[BdT[i?"P$)*)L1AEf@BB?P25hTOij3#g[T\1/gIum1"i>asl3GBPr,q2j,,s5;24>OW*%iAB`@18ik%Yq15[lGeMqV^g0&RLG:f`RRf/h&D8>MB?0jbq*==Hb,;*(2H/&W$kZ.MHZB+o8r7[b-goJE-T))l)Xtd-o"ZeiX>2E%a8TKY^@8m.`FQMj*te=,joIZ`J,6u`Rkt.srQ@\0*o6us@6>#GQ!HaX3,<P;Og808Q-et?+5o525<D7.fdC7KUR:cBa@ZcbR?tmN%=$%p9B,?-kPWu#2;0c9t._M+)>Mg3,Qhp=TEfOGs#=1R+\2>SXO0:pf[Ft36n[fo,oeoC)mssZ4MiT1j9f89'!mMO7:P+cX$WE7k%EC.#,>>gN*R(:Up4tPP-4W8^cr#Q#X[`sVEQ]S<<*!Yo'iX6\>d)[dJ?L.:cBo5d](s8OR2V^Cb%2<GAn^Gl*P:\PLV&l"-D:I#<%"*i`(g?NJl0Ge7,Q$FJ#7f[`LH*TTWI.fJT&_n2C+[6,o)GJkR;YjZId9>0L<b"T)Vj(V>U-T%p4Fl1_6P.L0r$cs21DCF3+gsQV%`cE=\i'QnT'R(cl1%r^DOLK81IAarn)sS#%iZ(oakR84DC]?V7U[3:MqU7pqk9+[u(jc5p4u+"6b)J+$,^<7j.>/,Z.9HWOKa$O6%0ls0$Rl]Bf(rhq@7T)85iWFT+*uo,EKi(gLkl"Ep*e)[]H[/r#`a9W(RrEd$(pq?M17Y8/7]k'R-irPM8e#>/Wf!_(-ObU*PYmfV%AV2@N&bVO(a$E_^2,[WbWhKQ*]o)O#I7s#E$^*O0h^'D`Ub;_jSHlN[^rd(B>L3j`TNXgV9WjW_s/$63/rs@lm"*i7OD)VpGK3(O%(Jl=DE-/J"^k?c[o$>CkF"WN"&Hp!X*:"q;:t0Z2_aBjFD6LVY2B[kBs.gKjBDu`l;p"5eF#a1=64pKGKs.0TJST\[?CjI;kEIpD%D`4OR]l;m,E!N2=o"?7<Phlhi?/J9l!O-cNX!pZP`YqN=Z./&3%`IP3I68#&6cH8^C;*.##-Xg,22WagFh66``"T>o?78Ec@Yin[%LB'g'oGApTGhTu_.+i3>'dO.A^B[pV:Q_#s8gtsU!g,3Se[">!5[A8f6k*nW7LB`iF+&XEOQ*8$I(OPUZ-bV.[5&\<&NklO!]^B,%'c"94g>?+EfA&4kc=tB_(!_]^Cj4hFHSp@V@V`d&#VU0o&<.T`1%o(<qIPO;0>+iQ/u,p&#rlTjkis_rJbOE@C3B3S9-bh7jo\"A%*or4:Q!^.dJJ`5j]q=]r[Z6"gYG\k+MZBFi/L5Q^c>kqL>4WKmjC^Bli%$DH;+8eq?NqVk!'-[c-]_1"2cFQVK7Wih/M:N)AX)d[%]qG$]IP?CV;GtB6N?3k9CuH\pniXY58V(3iT9*YJ9aO@t@,`kSQ<Z!=.?MWVRM^;Q!nI$TTWq38rg[j5OusAf4fB:9T!=,,rY@Lb%XGDS3=BW;Q\^(#NC!>S,f2aUS_)&?Q71_g'>ni&la=bNA:Bo7,-P"Boo/qi;+&B6QE'Yb*i^?T:YiV(ap<&Dfel^O.j/Hn].LD[u%5`%t+b$M%lGmR4[D.3jnJcUZ_Ph:4I27S%bnp&$7=XR4]5ic--A7BE<j/H]*M!DU&Cco+(s03,H_a"68)Z%B]FMO%s#M\5;-fm5f%bH6`UC*J\1?CpA!E\#T+G>E]:BC$0Kb?]1E@)RBdr+lRoFI,uqQJ;VW&</V4,MFZ!A4g6oZGS0s&K>Z&lm3"Zg(JC[q"D-gP,ZL.%k5mOrL?;'-<a<s<Bf$/G><e`3dM[s`I(2Bo7L*F>CNrU!b;,KTGn#*#@ZcUo.JS@TNb]r!?+ncoA"+LH.3$AKr;Tm;bd7X*Ch4*0%R:GfRV*WA&7KQa\8Z2:&"E/BX%9)4)TG@l!qR59Uq8u_@8Z"KT?8eVYUUa5-Pe-^`F`oRl]=)Y;TO(<VL3,9Z5/^/lQ]RR+-b>Js%T8G?!VO=DV_di6FmC/f?GN.`=4XXaf/tW]ON)\Kus59H8JZJP&+CVe7FM.a?:5#Z_Qt]&a,Y&0%bJeB1PJQ06M#ZY"d0d9p_6J)b%4<(Rgf9#Tk$eI]7]u(mBAVqK1WEu62B5j7%p$H0J9SA\n(5[p?cAX.RrsfoO[BoLLgc"s-iK'74fN=?hOZHLoH%V\ZSd7?*]$74P%DgL9beeQ$`O27)6%ooC$>;D\60Lfj#rY&7A>p7q''W=B;-$1piTBrqOQ6J^(ok\p,%IB@(b!@NqQV!MlG!n2..>I+,p1R[.l2WFr%33;kr`6tHh5>oEl9?a(U`sOc`.knqh,),"S/DX=/KD%lpg1"LNDXn/L]UiToY7e#<O7q'j\32jtFe"?<bb=d.93Bsp_8uVc"L5]5%E3gis#Hg^2a^sQIo%.IS?A<$2EYCMY+YMO<"&O&D;e@?q-,NN+(OKYo!5f_J_T#EVSH"aXYFnl8&`UoH6[[gH<.jq9S/`HD0?;m]%+\"8'N9u?rjCd_AN>J<=eKnuJ>Br$h)lKjTHea;dBtIp0mm_.gLhbJBB3=T.s1o"[]O`8%<(Kkb#lcZknTS:$-C5YZ`LHZae!!ib%rHf/?OPE:T;WM!A7hDiN7H"[&ZGT\GIpndT`I!]8Rk4FNi>DS)**+A+"r-mZ*re^8'pX@g[/T`f!i_JG"tS!@R%&[<,4(UF:D3\b%;Z5?Q=U!f%-OHGUrVH_''s)q=]".[H.^4Cid5c`hKn"f77+<nOQ[oA=.pJ0:Dj;7>)dUIC&-fGWPY6Z4khjV$=0FkLe:.sN+sbk.%)>;Hn=A?LL*g=96M9!@L*$"(F[Y4JngIi,CV3S2Z_*SFaifb(NOeW?b:7Y436N7f^AH3GEHJ^k!PaJ-_G8\rjh`F\%K0crFrjD($%W*(nq>lR]l0d%h&h]DOVO8QqEnhQT+P7qbH.m(0cX_r]me6U]N\,rZZ(7QhkP]CBh-YCP'V:HRaqG2L2h81LlqUsE:Q!0J.[5IOr%ZSJE98eu'^SI&]1[[Mq^mo3\<S@fOI\AFp=cLp01'RhLl/Y!pjmE&_0f_W72j,tRj:2>_T-)ch>jV&4gY-Jk#o0834XL`e@hU&X(%`kZueQI^,9SOo#sBG&05RHB3"S\_9H'Rb_h']8ONJdI69;r0=`d\b/n'iGcG[/?ViOQs"TdqF&7.qqSO)[C=SjA4=3'-t]o#pl2)%]b@,?C*`S2i0,g/eV7#i]NEW4F1E^+\t-g-ZJ5Q"Sr-7V.b_n%<-DFTCX!U.m`8K<r61llqT$D6n\2R-c;]MBGkOgQY*46`Bn[0[%0<51g'91Wf5G;`%dAL8=6'#0"fGr+1I;(R9`H;ut/brb-n(lp&dDGGd.ANU]`(@U$;0Wsc5u3`Je0&aMa8ofo4TI,le0d'-l4r2p%K/cES\UeF8aL,T-jB2?YM,lp8OM[^S""!%unb7ZgYJQ"DQQD1/Tk#bJP#=om+mHjgY0^e.!.gLEqm7mZ5eT;e.GH9j<.AKkT\^?=%q;Yiq?`mqkRL#gfieVmahIf]f1K:FY)X:lm&?/aec!WlO!f#+[jkmP";F%of]pHjhV=m*5.8L9f-UCZuBW'6?"p[L,s$+!7UmOd[%Mo`mlS!9nLgTai6F55`5M2Qgjo#Ln(@q"#pA<`Qq#6mbP&SVga5gkXXZ.W5tKC5=J8gVQ/A^JVu'B6[ggL&NCk)TT0EK6I9W8kmQ%cjdX;QF$\Y1)HL[s2OaL>NjBPDdc:pjaFSaUFLF$3nX-kO-[WGjF1=OgO!ldY+mtHnVQ+9**i9?#D-OK+i&u?obli2gp&s?i*.-u%cpm1o'`X1t#-s$Dd.[MumlE)`R"@K@&l:.PS:e!bU[rkQ&cY[$X)>,uA+TX^?H^_IoiB@0E@eN"0WsC;1-Q.i`'%ks9Gp#cOFX@a%+S^D_:*\]pD_a45E2tCs0fTpWi*:IW\KmsJ6$i,P=h)<&dUE[7m7ARDmkoH4UNX$HpmV:GDTu.;L&\WXl=ak29%6L&J6E"(p-)aL%'V[!=Ds.#BdQlcLKC`,bg/rB]IIP7TH=7g.@p2.Z:R:\()_+$<E2rMFgX&cBocDBH0^krd*FM:^T!VP"HJ.(AGE@k?EF.1bE+S0(%St3AKY$P=j&X1Qe^mUalj_^iS-J*.Sqb"'ISZZ9s%"_K_=O.hMCI;1:+^9o>fi9PGI,XAH0`U481F_KR6KTs,IR_B=T^&YD?.%8I%^YO!%i>4"4Cr^-i).48F=^34)EMrf0s6kI_:fKeIdmL;N(4JCr9lj1TgE#p6gI,"$Lru,(?YS]3l&l8ED4CnW/JUtLd0G!L&fU`m%a04fmbO?b89ue27BXa]Z!WZfbYr\6cNNi^ko<8I[;!2Wn,?,mH!@q\Om#5REbXc'A]-Kb1[EO;)-8'H7/Pt4LmAO`oQR+Ft!5g$`%SjAbu_-Yq>$fX4?(@mer&!77qlgHKM-n+8>_5XA=Oc_8K2;Y7$%lo(6`Z6p?GB\XBH$W&Le$5>&;`Pr44pHPqfY,X0]4cQ)m>$&c%s-^q[_@e6/eFK_jh2#>^#+OPY$&+>o*<eNq$;_0uLh/<m9;XH]<SbK;CmGr/6;k>uGBi'Fh#<MYSj<b_[@U*R=`?%EfALS?*!MAh%Fu$W!m`mXind^sWGRS'PjY(:3<HAXU0MB=oqYDlD8Vff;LUH#s+7EqQ5d[C[&1E^a"/-gof-$KP)]skcM92sDJ_/5G<#[`$]PC0u%iaq!&2i:rtp5b]dG;g:D3@j+.6H-B>Pl"C6IVD7D]1^Ma>$kWrE:L(0h.?5j<L$rKkd*/L/'S,T^Uq39#dGk$nLi=X#:0.Meedde%p,GFZWH`X?<V[A>IDPXFl.G,WeZ*+3Ju/r8.-0jeh/7tbR.B8sqUgmU!&$sj*dIY^jSm:kRH(i)\;B`m_&YKl4'q;)/9#MXY^^Eg%+/_pLN9N.h-[!hF5B!oI;C^k0B/U6W%cq5)gIu5P43.+*BhleKmP\"OV>bZn-G6jWI&2e$V)k2KRW[jJEP3n[d#TnSH*OnZZ85Ne%*6mhNU:q6GaWSfML'WMB2RKGuNIn"[B9lHjY$b,RPf.qS!<*%>J[EAhW^lt/\J(r>JU4L$TY?EY@6?Tr\e"te1&*C0FtGY3L2?)c%;JC'ndc\e^`CUe6][o$P=]),$<k&,?=&C$MKlpoB7@H'!:(m!3jWZ\>eo5o+)TAf$p[!/+PC-F2ZD[Z\r0A-;Qh$>+a#>8X]uDb9%$Mo`Z^BBG`T"j3EE"."t\53u]J:ZBJD!U:fAl)Yq%B0YYG2Am+`8Q9b``o-$iMIK+eI(k2c!L(0VoS65]mX4/*"*r,&'7)MW6nX_%m*]#!/D69=JD!/gT`h,s)pi$0qU%*>gdmGL7!>dRXgF<sE^_bO_"r;M2G'/rG'?6"<=EFWSYgunB!0qK'R?7i[46]c1$li+6/((^%ntYi<YC/+s=GAc5Ycoh._c,B.TO0ViDg[MCCrJ.B)=Z9OooKgcJ+;5L]=T_Y/C/l\VI,+\E`(YI]c9mmi7D"5FfPn>%OUZd$TM\n%:!2n8qZO%;<Q&J^VPmKM2`If$H<@_4+qP9)M?h:QaUH>SES3g>0!1"NXX0hB2_lCB=*E,j(QXFj4hBCg,cac9G'$0L&8GSg?%W]7%F=iDt/<Y("F>s(\L$_&V@R?ViT,L=kM_]?=kg?MNaoK;F7n8nY0-g@!iH"BR(P=JgE+4ku64eOB1Z:SekaG`+lV0UI`DD:APml%Z%<NKE7QC>XHQsBP'`HE/\$8JDSZX#<CddsZkbBg*9AssoV"iO;s@b^>&koR?2Imok<_u!sT'k+(b2CnU*SNpF;(JoLdjSRMkRtr;G%./)!4)fE*#?3%`04bpm2'IqW]8D6NL1FZ1^H!d)V=n22h-m)Xuo%#2UZj]+Vs$E&*Dh02J/^Ut7[]/fAcXqB5A'PB(L!:,==+Bc*%^U9XPT:Z`3pSEoLfj$T6-#_8Z#U(gnb,pb'$!^08Orb;KO18OJ_i4Th&LC(VLkBl-/c>/d"<^H$5X?&qm#>6k)Bkm3/f.K%m6==8%YJ7,%H7dL3lo_W4SmNDlKU3iQ7TC^A14MehIX$1Y1T2MGXM\`=Q:;3./=m%f$^6g@69)CVYTu6%>`LXHMO/e1?t5t^KI+e8aBM"L%6;Su!JPu*J:GN\QU*A<Nh2b"`6%'8._^_)npQ5-8*9_@Ec=Pu!1hO=E:X2b"mUEb?UH@g?[cKb"BfH?pCJaq2]6':cSYQhT%b!#+%H9uZCs*L(jQ`jd9e(mQmet5\'j"clP$7.Z(VL/#aFnZJOBgaZ2*8,^Eg31YHLeLmmIAnZ`mQ3gNdnIp+$Wm<I@"rH&hrF*QYJ!8N%[V.=k'MDI=fW=J*U"6>2EgmIlkL,f3AQM?5(Wek$#.u^E"",cH^<Y^;<%&,C1cIr:8;2[[?.6i6\uq!'dbjs11pc`:V)(RuTe\Ce%gLK(p(h_Xm/']#T,<\"hB=2"7JRb+>_BqTn;-OpWp[t):E-U-V?3pr@5MriZ+SePj$G"1+Ys;Ti0`TW>[,cEm:fd@D:?DiPI#T"<%ZLo2\\FH:4psVV<+u4@Rbds$M3D;T@XkVA7ml.OU`J[_h6>B&B8GC5f=_2n"Km,WhaM"6BRcCaS\jTX9!/pFM!O2dn"mcSNM#RGG%U;N<f%#0'@,;R,:lGlP*X=E);/;Ie\.u*?$;S)qoK$dW[Y5F7,KeLn[7H'V?WC);S*+%)oc:L(V`Xj@9??.&&&ek7uWa1c`dGr1m%L^;3<0'3:W\EE:31)IpqR^Z7K#7q4\\fg!uA!+Rr$]stIZrc)Jg7W`bY_R5n1dT"tG0f_g.$0`+i]'+,DO=r>Kje-B!^jj&PU`Vm%cadpK3c1k=rV)#'K09n:L=lIM_Sf_bopkdGnDBmE@b/0HH?DhAfe*GZm#l6(r]_U:IK=da>K&Hj@B.96c_BdO&P`ccFI3-!`rZ?s%Vjg%j3gMr6U/C>3o/&qK!hF5)e[r-:6U[6(q9+@+Ja3.05-frV7^m`e&.d,?<BSG/Qi9Rk=,PDQ,W$,]QV1foJ;0gY7$_mGA=.Y,%iI.M/BX@#DT^HbM2df'mQu`j59[Hp>T;gag1YMN=h91W*f^?8!@AGJO_rqT=HuDc)b_MP&0.$[H2k,&"n_qDpi\7<#RKGio<'P_k%qn+/Ip3iAAGcSTqct8"rWKs;_!!D9(=Zc%NW-dmoT(EHHNt7MJ)\T;.X+`q^?@W.(kWT\u,MfIWSg15UbM`%kNost(#3-3\&o1$&%D+baBhlc2-LU],,]cZp+a_f(PK=orJC\DbtL,p[DQiX8A'!!nb*[\[%?*1XZEr\;7TA.dVl*rde2X07ai#5bf($0V:Slau\arn:g%KmV-r]nj"?n+`N^,*ST"6c/<"%*qq(>lrkB@t7NL\t>-/2IE!oT*KpT(Q5>62'YRcN1gLC8s-5ggN;@W&slK>GZG@9dtUm=Ye.4]%1=n<M,i-VLF_f+>L7e!*WW24De[85T@!^VrogN%d$fR.QLo\OJS]/,.,X.'8e#cAjrbG+0#,M;`(bAl=FqN=@_p5YQRR#A,D;0[t%7+k#>?!r'GIoda[%D1j`@Or8V?4\teGqXk97&1b!:k223ZU^o]iB0\p]3Gt)3m7!N"m8u80"pGk5#`4V>iQTkS?`=ONt7MkhKR,U%\`)'-<GB3;0["n;)Y'upEQHa&E!$XU[QT1W9k[-?L3<aC09#YJeWf/j3tL3<2(d>p:/I^^BhG=![]XSu0SaI3XoK,BFF"=K?hbAN%bJIm007rXe+HGmgG":Gj9qW<:O,=1Pd!bOO\[Vf`VpaWIFt!Wm`UZb[NT'[l0`+;p+tf:=9/e(j[Z#e[-@VlZa0j6YnSj;j48mU#%MSGf@,-Ho9LDH>)4hfT6/FgUrM-@Eg`Wm.*XgfRc@$dW6@V1&O%c8s^*$&CIZOi_PWK&O=Am3'W2^uI,nI&()4%F(mIi`.5>@&[!%h@pT/\r3?p.omuZXjVjr?HNmSl!%s:58W=W@7d^ZLcXVsG^-MW#mdolK#%knX9XV`l!!U";XF@&+^1-!b_cpg<;p-umKsS]nR1E=%MF,I5>aN+H_Hu_rMX),ZnLX2!c>T9^OYIs)4:bU+SQ[+>Q8\B*2%eVk/ug;N?;4FEW>u#p1E]@C_>fkoH9r?JXt=(g[p70opFin!%JGI*_R7K5KP%r,CL_(r;M2J=<r<q3YG:/l.5P+iqMP"7ba_>3lC6k)mB/:nl)M_5125KQ#NAnurc%@2'dsomnIY9\ZQM\_,B;2?d%52JkJp&bOG%k'gOpK`0,>6J9B0l&%B6W]U^9i"#q)+^fg3LrCmaQABNRA,Oo1`r)8\&N4\:$(M3Z6s4sIX7"2(_!=>iT;tl/QG5b%"TZ?m:ZUc&\1<g+WbBAGRqMIs5`)#kJQbPaE:ik-/aW119g5FZ\8Rr$/c=2L`5@plm;,7oT7?2(T'j0UBA];rK9c<J>Xr@;C7rBM%T-./,I5Hmg7(>2\."RZ`T7=boC9:Zj)`[48RsbBhUd##]8PfEOb''6R8iuDa^K,T!ZLr%tZoDeYB#+tYmS*<VBY2a2Rf7'9*)i@*%8$X41cO,G`94488L\u2aXT<>rn2b!8R)k&%b,7HRe;sD^)Fd:h/0$hhW$MpcfcA*7/5*qS2ZJnji<aP(QUIm7ZW$gfGoPY'O>H?M%MS9%n?q;E-Vj4]K[<`^943Woa;R?5jMJKe1U6\rs6&ALR"sMD)GBl>"fD2f]&tqkLJpiILl./$U):XsX,T\$j!ELlF/b=ObJlEAE%[aL@VdFTXk[=k:LZK+=$""-@lL::)Y56`UA!LAF0?]q,4!!@##%Q@pOE+X0r>_n`kN3"AM9YMnWOPoAY$jOV'`0Ap7"E.YA4eo_n%!qkc%<%cu1i+H:16-Af2)O//RJh(7(AJ,Bm,tRUKbjP[lL9SnTJRJtJ:bZ$)h[@BH0N87H<Q2ru?SE_Z)SQDg<kbqil,BfXZ1<))%hqDLC@gYZ\+_3bJageM"CBoUrlT)%9Tjk)9e*WN<(q^fi=O+F,?&"mjg&a'0SdM0oc!;($M>#;_nX[sZU;A%#R(q2YUY*H\M$;R[%lBE\=+P/)^a;UrT8]tmkm)EE?mgk^)obgSk!c'Vhjmh@N8upOjiVPEk[T+rWoB`[(XQ&NSY=;jSLhDbL'G8/WqLKaYC<E=3ma3e!%9a<!2H?@A:#kLN[F(.fJkJUcg1s:/KGhm6l<8,4U0D;e;Ya$fgd&E4tFie=E?N3Ed@;4RBUA]uJQ0W=h*sh:':_:u8r<?p8.j(rO%+4+GhEA4)CQC?j_).ZaRnSd-8>UAe=nqdHHPEHZ*ieDJPceABeKnp:TV:`V/8K(1hpH0B]R67]#*.$/u0HUtZk:/7HIBo8*q!fSX%+<oJo8EX1=H^WMq\c@591-?d1fps8=oA^8'59GEdBj@GU9H+*]0Q$O8BE,imHe&FMU#i83\$^=>pGfN4>Q^$]H.jG8G\3@r?5EZ>%R,jMFJ2t4Y4f+>]c524\cr&hdB4e"NA]JBJJAZYccn6c`%@[-\oJ/qt<*e,'">.WkDg\G$e*VpUN2Pe^,"f*sfjN\kWh5s?o9La*%b<PA.$pj"^\W%^W)sN2S@LDCOQ+n>B]#*uHdQg77mPf%P8B-FC-`6fnP[l+W^di6s"[j$4cdl5Rn>:g@Y1-O41a3E`l@*^!GA88'%>@sY1&I=!npY**tFc83m(XS`tKcf,Zm.J&cp8jI&CaF>XAY9*>Q*-=pO_snFaTUR'jVh8oYo%m'>&47[KLP?f"&)^4kiChL\=TWB%Fi'K(j+,!bF2FgsQ1;^mOHtAHOun,e^3(+ucqlg`OhG`R;;,&#R@^<`lk^2glQRfi?DK/VQIf+Q(I1_G8F.b`T`:\a_hX`0Y+<Gd%%tAihKrK-_iFfIN4ur<">O=b_Pl_io1Hh4+@'cmo:cV6N?j?tOhO6;5[*cHD8-5pp!DLVa?Ri!*Nr@E*JF48Z34"-V+6X89,$=G*%^[Nga3<m<dcXH<'_ZH5c;-pfGHeA45Zd#El9]=jGULK=nlc7_4J4QNOIu48fRZR3-cG!%RLS]eP4G7-*9nY;jJ`0/f=ED/`c7S!H%(OP.bXa9!UPsb+kbD,DOkRTGU?`"W1NT`h+[?Peoo%*S8*a)j"90'eO[$%kPibNIKA_8O,K7jhA:Ll-c2;(MOffIi`k2!I@q!fpI%]F>M&[jo<?%3;KXFBB*O&d0kl@OU.;+9nCeO>Xoj.'F?79RuW/3_:X(I791W+#da"52jRbWucZ\kR^+f[qt=(Fh(h(Vd6'Mor5%&%/"3U$@aeX[X\n?XMAi,=+Hm#\K>eXj9&mlgh$6(ir++o80cS%q<N'BU0#+adl(Qg6Y9n%H+Z1f4E\l8E,dC)h?U*<[]P\`c6[sgo%OpDr5Rp%jc&9un8H^M_ukd5KV]@Yd:omR1^pREGM0UXOF<)n^??=.g?So)^@>l"PM9lWl)H..o*]$c'Q"R30:W;qd`LR-<hm]L:5%N;FHGNs9Qc*t$PCUjs%g^?PU<OogA7eCM(=d>-rm57Y@]K*2J4nG*K)()*0k3K/4pPLnJcO,@ZR'-!\Oo(W/?<&>/SqTm/2&b'b&%ETdZmA20A+#l2AZVL)]Y_K*p.AJh+/Z@78D`78d9-Xk"m!>HkZF0PaqT/j;qq26qVcV1.$@L6n2"W-H+EA?<J)*Oc.72t),mo^W(%Coi:^8)Hor3Lq>onNLH#idk,W-iN[)fYC_9TR"&DelT(EfHKQ=W^jbt[&2J8n0F_RF7BCCe3iS$EN[.gIa5Nl'6`28QLV>IQmHI6%J.+MT2MVJehO:LD:uGN%6<f2(?)`S4adl+G:pCn8>LKh&mr&tF=CuOcYsc]K?E35AeXI6HbW:r2.sIXQP+6&"hQgr-\W_;R1m.%@%HoDKWr"mG>J[459QoqTKnLNlc'-P-5>j5AF#``_l4>CAugNf&$Y'l.]C3WUl:IqM$:-<fI#ERPBMXAu!U'u*^COGg#=Jgt:R\O2K%+SQVK6R*G;A<c<XV80HrXO@/e`9ke%>58@FffLT?`6$]'l0R6a6*fC'8o9GW$o6-O21Lmd8FjGjcdOlfD&)i1^_]e>Z<$QNlPtY!%$j$tP@mC76%KRYKDFft5s$]V1(hXG1F1.=(q2.4I0Ed,6,N]A8W:C!$!tguY%0!ee;?2l4=cigHBHrnKFot4'[]k$!+p[4DelG'<%n+.-kg1.WL'3B`b`38?j_H>7XdG4a'>:Y1i"LJGSM+<da^=WTu/R.0Sle9B54!0$`R7-u6J&1d?HC%.>CNuGgL+?IpUo,caRe_XU%^YleS8E=Z&,'m..Zr[!#F(4pfm1BCPB6L3CfQc&9:<8sPJ1H<u/7CeuXetZF:,WNSXZ6/9XLcV0Q0O6pF\#G3dh-h?Gra$Of])3=%L2pELi"I[@CZ=)%E4b-GoYd8e'/El3=qi680;%q(/i'RY%q=ImbhNg)pf*Q80Xl5!de6%:,U]0q!2aY4R*<NRR6+C3eM@[?88olN%8S>mcMS:;e8K6UQ*:<1==d9As3,6p?M<;:,X,PR/*nF'X@$HSlV6Nb7UPgM2G*JR@>@=jV&TWF,\2DVi?eFD*!'*=n.%bit:O3TK%HHn&j>XaE;>aZu[S.OeiCCp@O=M4knOt4rmn2c9^l*tWEnnba>OI]m'ifEckWbAm<`WkUW2]=?]Y_@s,Xl-G5c0Mf_n_VJ.B?IHs%rF3FQ,$!!g5a`CaTiq="XmrG?n)45>D,)9R9Y(n$gX_Kd&%B7\W,=S?d<"E%4RCjECf0?-P3p23q^"1D2O4f.Y[P(7\LP\H"N]Jc%pkCW!ZrPH[+/haMo-P?j42+/a95aC@pr5.kKS(2+_Oh/3V![2'5HM`4V:Re8j8$NdS+>"&f:_'n]9.2Hmpt*F8pW?)-P$&qVO%gZ%B*ki::_ErA9G[UY:oTA`,le.q3AuPL2![`FeRe9sK(p;]8WTp4<D=//BN><u&T:K,V@I+?ec3Et3?eP#P?l#&K@mKN-a!!dR#?Wu%LkAn@*/l)\,cniGQFJI/`9"WV4#<0G)QArDaPjo3/^5m[JJq.@,6^7;6$f7$<&4AJ1:iY?FG<T1;ha-X7hK0^."X#Lc:=>4)Y%`3%/A#dQ?68&u0\cg=P[Or(4LkNdQc<7%$@`b>7a^<58]bT^T)hZlR/)XU?&+M1o68,=j@8\;(DK009nQ`8pp\2U;dc&4i$1V#R;nmr%HpD0#!^\;DqBNW\93SDDI9##6)Tf'$Zk'ur,0t0npG)G28+hJb+Gn<t\k=`[e)_13?R1U4^MtkA/%rI@0CIms%@F@D-3uX1VP/S\%OFo-\al&R-"pA<=c0!%4okigDrN"ZSfB&n*o.tk%EVd-NG8Q[Z5U`#o.ZZCMAK[7B8jE*[NL:PX`s=:;:u#>>_T"@h=>1eGT_^Zp%d(Y]<]H=sC3.-4^M%:!a8`XCA==#7Y$8rE&h*C]f-JgLAU0`n2OMt&qIS4'Kms8%UcH^k9'R7EPWJf_$'UBIDJ`dVQ`u>$<6b6nn%U'!ffd`pZem*.'9JaQ"Pn-1h4N\e_04@!a[XR?gqf8?Q)O5=IQ(bi9lU.QtmU?iCs=&8R:((q<'-Nb8s]"RSc2I;kXZZcg_oZX3s%`%1pA\tg-+=MU_M.XRW1f/3aL:2@Lc!SBQVWl\1fqcalY<E5DOQ]ml^nN9-h]Dj<(3t--Kh`]$cI$Oq]!(n[r0Y>X5:+Huk%+[uI%/NjDd4^e6LNne_aZ=*/'5blT!jo+bn"VZh"^oVLl'#Qb_QELY*SROiR/VJ;C%"A=c4BX#CXd_U!`FJu7[*P_JILTsmTrWfcpGI[)%&dtrn+mAa>?\D/6)(\V`@h.QS'T1.m;Es([a;mq]#$]#E9n`l6""3k05U.?:QqXJ%lbPRsQaM]2^Bh!k>Ae6EJuh9c6p.+QO`8*m%eIGj9:ljF_dDB3YEMBA>Q\;a\>YK$L&C>4,LZnP;MKJrt@AVNREC4-MV;uj;(]l\AYCsT523"?lr35s\RXo#oBkn9A>+cT1'f':G%!J(0["Hl:)=a+r)<4%TISCQ[uJs.W\4B4S&Z#BeJ`c=2(a?R$Fs),sHGVaPtG;mYqY\COh`<ELqrWGlL^_p:pC`HH80MmW4B_,sD%Fu5@),#FDsY;(a7&6;7]=qO@Ypm,p@h@CMd](3B&?#D"Uf_jT_Nmrl`0(UroQ1:PBQ/a]B,f7&dFHN:87SbhBE]l#+X*cDFb]3f@%p<\4#8:A1%Bk6o_fm9YA)p4j^AK]RZU6;(pQ4lkWJ#XJ97@UUZK%7jT&$:]d&"D":gSf[Orb$b7"JN%b!Zi/=bQiSMYE0:7YeFFF%WfP,fK2s@aB0M3-+sd$V?GkVq0<'n\>TqZJRg"mZ5bZiH%*1!JF#B,17"CTgn4:_ZV_Z@Ypgd@q%VOZ\VCl0qNSN0)GXkof\EG8o%m`-W//EuQq8!.q4]JKSYE:'i&2+NJT`*I%9#QO`60^82D9NekHMa_@9[3d_Cof$d+"nI9b>SiF8gpW8]F9kSAj`[6S-S&dR?B<f3%ol60.\Eh_&;7qcX:E4=-(P)!"8h1ZU,oP5lUVk;5Y#cP2e#umr]HM02o=F/sY%pMYP1)lXJZ9&_'\5r]7P]C9Rg%+bD\NOib>qmJ%5c&dn#$T;6g0Y"n7/QV`2HFBI12ZAIF`>.OhA9,WA;)r`CQUJlREQ\a>o<ZZ.'FTI`3%(:4X4o>B6TJk7MUfKq$E]7\E0Zj"6m8Q%Z4Ffk,BJKR>+e1B:51@`b`2U$TDHh$kdAFCmlhh0=f"F_L;Xk*$$VeYB8;damnp2@cMDa%n4p^2MS7b$9&?"HW\LR&s-1A[XD68-%=AZbs$a^sP1&Pf;B4K2Td4s1_(^$<V1]:t!Wdj.Q&B#ItW#HoGY1;1JF(T#=c6-nbr"#O"qUe^O.>8hIdBNIrpHE)++_Gf]`4\\@%S)e?!QcZluA;JZEBM,?i<+tTF:+Gp5PNTuZe?tGA\W>.="ef>KV,DGil6p*-lJdY%=O;GYmDYOqNnPNMdhr>N?h0R&m.UgIT5(EH%M8$F<F\O#k-CM'+6O9rF0]H19G!Hkm3-+[Vba?`J?&mO.J<BSdMD1HJaY](0ZrSLED<tV\$pcqWj!.c7]O&Sl3d/UNOK+!IWV]'^%a"GNHFNt;_hh-=!]!;%!]gG#c$]p,YXLi$m'n-fP5ShqXM-gammU*kTIs!"*UPnZ4%375\:2ZLU#4ZZuKi%4%]RFVoZVQ)K]o-7*%+-$3;rcn6l/cj4;\<F\L:P'ag"5#iaB'Ffe*@fHuNL<<"7m<M83kR6Cm%>EZ"SINM:O-&QN58k3di';WEDAKqj;+H>=4Vn(j'Ml+%ku%[2*in=`QA)ArUW4''?0Lu\,sB>Xmc@,3]DmX?ihQEcNSq<UJo.Xd1u36;d?YZin0O]sJ?1F&!]^,#cWF!fR>SW!5\b]".D;27%NZe*d7WkFXO$:4qZEfj+HQaaP)l@Ba5hku7;0$A\f*R<Idg\Y;3JO=,Df:?dQ,9dRhG<\7L?UDk/iZ%ZpI3K@3YV8G&Uu$00'H,3%=U@=73sf)9gQAsDjsc#Rm+#A(2[Vc?648i6">?X5M2!gPDgNIRec`T^r'V@RGkSlgeKIHSK2<rTdAN-j$`KVn%BTlEpF!jTZf[K"%.'rY"*^_4!Tc-1/:qrh_"c6caEfpg[h=U%90]3$V.IjZD0%[7m>Ysb(Dp#!>(7,>WPl*Us%".ttru?31qL2\N9gM<Rm/oO>P&HBd%2`a?PkcPLu$N<^A)HQjkZ##nSZT;3g)c(k+S2EfF]4cN(XkdqNnQamQJFLIUgb=Aa-EMV&']iFfZ4u\(o('7498SeGHquSAl&A][%VmKPHK]%OInepcRI[,`B)<6*.1DMq$I["N5D/Tak7rIk?fe#OVbpghk<G=Q2=^M-=P7mTY(FNdJFF$u'#oV3Q:O+H1+`?Ksa%V=V%BP9H&p7Gg,>X`9/Zb.6RQ8A-h5\F`5<g21lFPOng,Q]+f25H,K%`OV7Y1(D=$m75]8>QF'Ho+C"V;,shS_Ze<as9nXM7iKc$3iq,%!!;HpXUMNE19EcA;\'\tWZq`\<0LAHaFQR2R*:MJiDM@]`SsXF>up8*/4>p`Hjg\lX]jZsQ&1i'*Kl9Oot(f(Rho*Moor(Iq1:An%K<4R9V_h&kc<1loVJ;.90ZnHoI8c:G].%`=,g77d^nVT<T^43"_[[[*XerppBOqhtau3fCH:cL>*WlSDW%+f.fKaL3PE@3q`@aJi%KF6[[M]k%/XS3]LU-;;.6epT"m&F1]YfqijK:.M*/0`S_,>4[a:dCb\N(8P-;%WIU;&^Cr(hSf7@ngfDN:3.s?u-mqJF)S6@9eE)%!!*<Z:LhNZ1)._2\UH&o&JDc"C:$DCdjehZhJpN=o?G4@Q(V+/*/s3].%LL+afH\*id\F$?BZMsb_C=93Dq:Ub25t-6k(lu'%78G%?9hN/\A,6gEKXjcAfNc7#oFAM-*38+.3UP.ZbUkZ6DKDU_+N+=P/\c=Z`;=EL(3O0R0T.C/G7<&"W<_Vp(\4"A"r=d<m[_8Ap01_%H;P8K'Zr27L+2,G.58aJqh)XSJr3I(:a.53*`U'srDJiZJ[9f`TIS5@!iK^h1W?Sl,2+&J*0cncrA+e\KZ&P2hD9qleBDJio1#H8%="6NTMMAE]QG-4q$KZn1ARm,>=U"?s0f201+':'UO<_6!>Hq1J,Ue`bUhu#h<DsU*]X_@1+&!N2lF^Rmq1+'WX[H+,<!b:^,'k]V%(b@)sNX(u7Ku=7&,[>,\PVW,n1++KmN+"$*'k84P?5OV4E4g(8er$tH;RbnTeKSO0]/qL@>l6n<,CCu[iY<.I5Eg<4>=g.%,qV=h%[7;d4oc^"e:s]T0!_m3\-C:D4oKgA?nLQDaR(/Td8fHmq)@H+hU>2BB'@uC>*PKXUkg9oA<3F>u]YKh$CK$i\cismGHHi;s2Undo%_FC&uY_.q"Q/d1GZ\,;eLYD\qE=KI:&117(Y"gH5[AmIUXhs>Q?,Aesm`'i+Ao1=-V\S'e\Q$M)X/]N,3MCcGH*puPXMor>G%V;m%B5*QL-A2m^;DC(/W($)Ik3^%oNg6>=gK#.2i1QYO.m]fl@WT)9FRp'0)2XLf2Gc[0E)d\`,r$(3jLm;\W3&qQ$-2"q<lO#T8AH[t%kE5<%O?iF;[Hr9(iB=,a3>4fKDVPLs3>L^p_@rjP$5t`E%Fl&o'#Fl*EoU59IgF@oBk:"9fAHf%!CJ+ZCdEnN6!PR++CPnOWEg7o%+CACE4V>sAU<(O:rX[^#cAt(E.[!fZJ`t7f2A?\9f/8U8'0Pr?C-j9i(53r0S3[ma#;eaZgF#N&mYc<Kaer1++>l-o!Cb)3+4CGY%5tt?MmAWGoUngJ<Z>(Vc"q'L7)qKZ+r/@@]X0<YH^A(Zc`,aGe!!f?nqr!?C<IE2'*;fn^DG8WJ0>Z_$V@f:\PkZp9ef]N2fJBYe%dN4Jj6M&i4QlhP[6pmZ<C!]gpTHO"`cVW+"l[_PVBnc@K[CD#"daI.u4`G$tHE3((U^%msA=>@9/i$Fh.ep_"U'L)]cS.\M<(.N*%2>'R4,nLU06*?QJGN:MgoCfiTTHBF1Gsrb\k="H11,bAK&R>:42GsDC%QD+j##.l(_)U[4Oc`XZ(:T18^ZNF;(/JS#TAX5uY$(tC%8C?*Ie3Lit6)kh`r%uKTP)7/g8D_P$cQa7lcm,tb<]9R,Q1[A<,3\Uq%Vge3d0,.K"Gml%T^i\`\kL45=qb$/YZ33p&&bcBUnkDW%)g`Mg`"2!GQ/o+"3R@XH*9j!"+Yr)H0N6Mt&3osLlPE*n&A'9X#3CE"EY+d!W`m=^Hg;t\FgbXm"MS(tgi_bX3j?W5n=`(FR@%5C%m%!>uQV<pH8co5%<3ihO)\V9<gJmRh@*+to,Dh1aOf)6r_!6?YM"mTL/okZ=<@!RC:fMNY(H3k6&n7T7A/&c0HYb5-#B,QV)N%)@%#61@;)G)PKY8H7+rIKnuX:h80(i$D@&,ZGU6qUCu.F@2W>T9e8;[;Q\Wc!^Z#9@5;W1Pt'bX>&fllFTmAU?8`+?t,'.i22]Oq!he%DjNbCoh]LQW>I?d50r3Q8D"G`IO\A9'RA=A>1&,T@@h39?f+%7mk2,-7e9/A`#G1S,%lW*J^>iZLFk\eO#7qQ:ecX\SaVC0MC?.-%`s<I*!r[Z;X2Lmd&Z80m+1PRnE:BZ\5#Y[=+WV'mJN]]@ejqq:M=;Uk31"W:WF[Cbb:rV44'q[m(,<g#SYAX'Z)SX9,:<7Q2UDth%1D<QF`<u5>.W[6!6nQV8IE0/[:b\<VKL9rK/YQU_.j:'X.W>VjFdXpMrBR1@3<LMkHn7CDCkrMl"/1RC%,4'nMI"02$NC,9K>`p-%r!,$-,rrp\Y*+S9!J`sa0\f2N_Gib&n)/dZiAY3i%K.`6P/&0`X+mo?kA\IqrEp<I8d),f,NL'^hGD(4+LBbJ.3&a&T7'g):(cHA%h,-*p7lkOD+4)mn#bS'37F-Y^JaMm40Fh/eK)C-T:Ek2;_sF&]%imCp"Som<pek,B*6\&.b-2u?oVrZHa@&SOGBe['0TecR_^CX%%RE>mu(+U%u;9`QFdOF9!C]rVq%N#Ba>egFdn:1cki.28T^]P3OJ-->`!#Pta[Y'AG'S$9(TR["b0F:$qK1Uk!5[XX2OFVom#QOq.%\0f-0/-1::"?[fX$j7[S!&1'bAXJ"VRA%W.5u<iXR>,t"@LermaD/:;]SZucK895"&ZRFT%(5)Q;%m^8EY;6>TaI'i4i%g);i"&r%"<D7W-lc*SVDI9=[9&&JDPpK.'g)`oOiM$DEq$FS*J4MPR6\SeUN6d5Q/%Npq@F"+"6/h1MC.D`D[qF>QP6<0$5[GD6L)M,$-fMI%fMnX0a#eYYb*%!G-LkR?VQpMu;2(Ej;i)")E+1D5l45r"F@K52n9ClIhh$XKpW1sJ:s,#r;`0Ku\LVV/\@P%UEUM_TE*!a[o!t;D%8g@N7W\BSAd3Ns:((^#j/KD^SKY46IWn2Wo7aW])8e`RK8a%.9Np`)RZ5Y:%\E`hWETI&[`WXW(7l*$q&M&+%[Dgj^0QTL>370%0%@ZesK9NAqB4?15tN'36T"Go0]%NIBh)h\Gb$64[#*7,mSW?9[S*8%sd;ak,9d#hJM6I7Q:0XuA\e`Pf^L6s/+2?jKuVVEt.&i^+q%p669:Tpk9WSEVM&McGFjJHEkTVh`RCWl:gNF0O7-=lIl!7Zg*+0fZs7PqQZ:2Oo12KlsCbAK5:l3$Lct)Hea\,LtRFR$iMW;hRPj%^K@_V!=n6<^G)$[XJ+@*)LOe+RGeu2Yac?%,G+B*AgY9kC/..(M%AVik#F%S\n[&#M3qC8$S_ks\k;Yl)(&r8+&5/H88kJM-71>i%&Rl4coMhj3nY)mX5+oD*.>m+T8D]%oXD/)R5_2dk)f156_1JAUACkH+A3M\t8T:(7#rXbnCVu.U$?9Qa(`s%LQc2BcTM5ttPpVG#%`%`",G&ur%'ujlfVf$8.2Gi=kcl_[(qkmo&EajG*A:jt(8/L1--"I)QTL>M`'5NGN(8n<NG`jY?%2=&0?P1?a*uXX,V/RN<:ai46%3%(4&-[,,I1Ll3`Url,JT#;*4_90AW6oYU_bIK4/:;](l7h2mK0#;[BPc42T@^lk.@"8?BW):ML1^]!&a7?-]+abD0Q'tr'kb:H>%J5i>DA5=K7mR&s7,7/Ze"S"cJ_W,G2"n<r!j<-?W5U>$=UPKYcD%-#%l2"t(]bZRWK\8W,J[caQ$M+:X4c5Rt<JuP6qS3[UXbd`^%-PgBiR48JDF&Hf\=eH36E'SNljZ88V--7[UTjBDo'5.IO<N7>^T7r[KFAmheTQZBkC*Z46R43du&ff-gNI`afkHc9tW$F^>&qLrQ%Pi=7cU)5YKX(kAM6;!2eKS)ls'\orXA+KB2o^+&!IWLn-(A'<BFQCaNMiVU&9XgI:?nLBl:ghNsq4"L+)-Z9XQ;%%7<"opLDF-7\%fEp#^0PW@3)dY#iUl`:,qfSXSnBU>F]YlP!'_51i<kjK*RGKZd>_X\316kacV3p6FGN1\/;hP9tL?F6`6GJ/HF[&r8Bkg6irdg&q%<9+:md?FJJJLYf*MPKYRMb*+A_^iTX<1(ge>^TuV#`^3Rg>K96&sHZQ[/V*!iA<m5+Sh0LA-+hjciVrN).Ea";@dQp.QN!q.TEAr%`O$B2H-%<hYTd(R.:e@`eiT'FHY<j(OL/1_'ln7&3adI]2Gc*F7YIC%-@ata,-=3&L2'+5']Zdc+gH.cPUF=r0`4lmWgY`fO<1+>%Nul:GS-N=D6;6HiU<`R/-moi:mN.(/SS9C-TgZ;f\Ju#21Qh8UN3.WKrO]U:L%;)\B).ZjCLI^Q5^j_^N`3h0ij/tk1o]=q6]H&b%V"'L!?\9!8,olGOI2hdOFL??9qA7;(#R.6m/WM?C7E,V`qFHUa6M5jg6kSFt!a-ec78H`A,8m5',"Kaj5s.K2=G/Q1Adf",<`GIJ%opR18"T!Yo3.57nFJ1fMNuqB]jZ2BXJJPtl<M3tS"H?Is)%j-/Ie'BB2!YP/'E'U,e0_+>h?NMS:?kBfI)%2BY7m>rEcgjp6aXb%%cJtXaa#/pW+=!'o<G\W?)jW12m?5^EKTDfF-odmXK#Ss4;mV?q`,LSMR@T(`1F#8K-q1!MLToQ$+\]>7R1?22Ni.JrB\%q6^ems!%+O+[?X.faiX[O_*_b?(PCpaVL)3"_gr2?!'"!,(U-tEt&k>?"lQo@pbCI.k:F(W(H`&dg\CSi:J7<b[O:fl'J:+Ie_7(:&.89@U)%SR%I/<])]J1:'FF=7%:hW`VU<1-nA\;9m!S4a8us#+;djmP1G0SnV&3WlQH3B/WU:DF4+LWC;9&P.:E(rXSH[UeD7)UST,'W'r%o%@6PO.dA%T4U6lJjb:H!(K&KGO,(ECU%1p<0rJitI_RaD?Za*"uA'$pbe%hsA!GZ9q)2TfDe(BF>aij*]U]dfnGQ\0f3S85[)d'q5%+lTl0TiT;L%ie_HM2UrTb);"r?'Q!1D(.;^Q=aHsBr<[JbM]0rDc+Y,#qoFJ=m.X"SXPnp/(CO-,3`n*=`!,l_pfr%W"$]m4F$2`%R_'ghbXiTT2tu6OU:53;$H7rt)"Z)q8C8(`j;B`aWKjG0o+;4A3_Ro:.d7n(KJ//kK=GMUmupEtDQ/o*:fp7@i^JX?c1O%i\I,Kj%JuN7h9K7,0+qrReL7sYNfgI9_rR?cS,T8K/`H3_P"gL8j(0K9/3-$-._O?p:^8`V+)`D^Z`S1?k\$H`R^(irj&EBa\VBcbs=681)%@iSD]oU>$6cmjT0R-Eqm2AVas&lh,e'uXjsje1W>G?/h%rOcb7$:TuS-^b9PR?ACIbktI\2k_I;R0Eu;j=qAoOAJKu[C*ApEXmk%%EO=2#2@ca4fO7->pfnsI$QkCFS!8_`9LhLTSX@gYN%%n,ci[!064FB$)J]&h-e-N<An_QH;%>Gf#G;AZ@A_6]5@!uB%\Jr!W[N87%1bk]D%j=;f6PMj+$Lrh[,=6c!;Bb[XW;/tYaEU1U&-a.g?JuPq,)=K6;\D8_B.;%u3Y!qtO]f+ZI#?!%*LYtpLsICreAuQ/MuoE8%n.?iOTnhUu;0l91q&O(c/?aXQ@PkngFmtJa_6Y#ZR-5E"8i&7MHjgdLA8e,dOLiT=6DS(Bbfh+<)j8f?LG]8D%`I^@\PR+TTQh3;%n7X"FL.AKepE=2o=<S/(jB>p_3DJUWYcN&"-:9CX+HoTi;-ofKRj_qk@BVj%iq8p@M@DRk*b86DKtD#M9W1/8>f(nc'UJW@=\*5o%9u7RJ,:)f@R7JW$o0"QhB3UDO8O-/uBXEM"82Ja7ad<eR[(uc4-En-FrA.7s?B(\B:ffY$*5reA21dDDWTq$A6GG(U^<=>7T.]\L%%<3&HR:+2lWb*1uW7_CbOtWL`.1,]6$(Xs/lDSKlIqob`"51VVf0auUf(9X0ddo^<lidVI,G[2c#rP:;cWZWP73@t^.Up0<TD[5.%pkg$5Wfm*$S!ic[1.0n5>VsiP`<FslUhYXPi?S-56S'+@:Cl`g(`&ec+XH1_1.<%oBdaoY</7?7:c2?o@%pjhV$CaeooG<4_E70M%Yc,%X^EbeKN2;;)"P&0(9%Y7%4&B(5W2^PfB\io4]22IJ;3^SZKrT\*3@.X]1=;GH*3#r6WH?Fi4LEZWWfM3lk#naf)TsEhclOu[%-K.36?HXoD$'\gS586lj`tIUSkhXK;OJh-#S.o93"UA$nA8tUFdfYFiAg!6e';ZjJ)2jHm<%h:*-@XJ95V\u?5AEZDJP=UJn3N2r%&]hdL-UEl+6eL;s2.O3p,N2WG*0s2:8VMFDqX?-*0Yn)4h?-eR>8VOX_\.UVj6enP>?5mFLp5@uA&?_\_*L1[I]8"pi8+<N`q`M!%`ZRjC5V3^TL?a>H1_LajY<pdt!&JauYS6+n@!.'7BS8+(M\MkI6[0eCIR6p+:_`P\LCjuu_dj'kVohHp6(&EBPo(i-(^]_3TG,Fh%?CqO?/b$K2BN;'/A$*P0]I=D0a;*JJQ]R+MA8i&_[qd8+_&Uc(l92rmTlA,^OP.&Rq<LCto"22*Q%\,t8XIO/7G1?:7?CR4.$T\M%,>sC14lFEQKZ@b<A`?$55t,TJ&`/VL#d4beb(Jtp-3=oVZQYq,M$Fs$'i(1G8$.*>e0.aKI6XobWY'Z<aaIf.c5h>uQOkbFnV5C;%8sN6KF@&\oT11=BaYph`G[N9S<S&bV[Ah3"o>'Cd0s0_<_W)4%,q3#sCj0@I+souR5*P:_dgT+]>,d].?*FCP6tSdXJ3o(PHIPd1%f.)G1X,oEm-[d(MJk"Gtikb&F9IRO<&!om[?>Q?3\a$E/W]$FT7%T+M$pPtf()/#oOPC,1E$?gLHmH?CDjZ7;adO'G<QpA%;5R.F%Kji1L1kJ>,II<QJ9:soT:2d#;Ef31>=AU.\;'=0=:<?+hUEcTqhT`?k9]s5,A$TS/_s+j'#QsCHc;]39@@W3X+\"n$kZ$n)(#G&C%f`"s7FfWkW54k5_76@DV<A>GbFh'er^s:"&8ON`%!dS22oYMCabS$tNQoaM`XG1^SV'GVcP2_=`'Eu(#U*92!SJA3N!uW;dQo'be%Bdb]Q&VM!5&]I4M`Y"!!6%T47PV]#5<X&j?9L4QD9HdrQGm05LaH6D2PeTWu#5sc8iQEri(kof@[I-m$$BihC-)p[d;[mbAf\ib!%"GLk4f1&,fRam:;q@lLA,Mgl(ME6kp;t*E9_CS*&LY9sBKeZENLd&\6'rEBQ%^WaFU/&P*N9m5Gb%K4]OU9e]j##s/geITFP+#5L%-[ak'.]IAQ?gsd>Q]2eZZ]QG,XgW2*R_qo*L!(?b/<eK6F2BlD1;e_Z'IG.O@:l0?e=\C<X*Ek-D4rIW.-&;eAXouZ't+uX_FCfY%@9Xl(Ep?"#X6h"J3Ya*-:Bq&;1*;g8=#e6(-4;mEWe]9O9Ve/81`UGD&8>h#XJor'U7nA=Z9Zh$eE.kEELh2tbtNeP;LDp]5J8*S%l@U<`SAnmYWY6Q<'CnsC7V1,&8*_g-9O>gi<h9R3WM.Q$)mLooC<^KPQ//WX:%3b:aEMC;!!*=&Njccb%p'H2_,B?\W*Y5S)^mJ-%%r[U?'[p/qPs8$,MGAT:6Op2tS23"EC5*.rKI@p[C\`h5.>o3g>h_f[*S1rm1!Jm,_o)\U;?ihOitJaanhiH_Os*RPjfUqlV,FU1%N$Bp@)Q(`+Ftktl!@afX6`X!_d.;FUTX[fm$#R#%OjD5u1.@H=`UMp_IQCM.#qp!T5+][=?_(BsP9r(:@uA:pC?9L:RN3)DTH)=c%&JQ.7;UjG6T<eLRehg'20s`Bd(are6O0pH(7>.Z[qMi'<<1s^1:oR:&Frero]?;Bqo!g@h-G`".;%m_>_Pb9*^D\3#!f7o@4@1'I%`6a.F:U<l`9jG2*o_%N8.dk;[Ii@@]'5E3!MN;=X*+U(Ra8ti(+W?)0;8sd%TpdYqGR9AM3U2N03:ZOo,OD<@m$)q>^m[_@):r4[%O\C.S(,6CN;+!+Xd=_V`?tt?P<+444eiaHY-3afNXHAD\'SBq_9IQj;l%G-#G)#@<l(faG<J?:kQEU6p6=M4]jPY,%N!OPK7'>j*%.PH7*\jqRuJ]CmW<B:u-WNPh%-#ugT\Uph/7\GB0-R`$e#:b?.*)KV^\D`Qh&`I"7WhIo-c2J%?YL:6+oK_-R%HX!mLk1/@08LV'%Fh.^5:ec'f&gdjQe(dBSRO_&?%WG8=k,qW4:uoDjP_1HDUS/k:'p"(o<":OGOC43':KD$T=WV?'_MB2Y1fPk\jlh?J&Xcia-,T4,%.uDYIV?lA*#EYBq%u69V*?*@\8MI.?rc"__o#^f/`s`G#-)W,"#=?Ft&i\2g0P6tc&f@*oa/kan)2^pU/"H%jo--QfcR<;'.rlA=%8gelLU?/=(<X`SuU0iR<j%.]fV)=Mt;%@^b-)1St(N%Yn6;:b8Pir]?iKD.g%M5I%P-L`McY5cUa\Q=2JFc_aYibjp&fRN50p$M"%":ce9G!JF$:TS)#MY8!'R:7ufo4^4p?$hanCfV-<7rf#LV,1(<]OkiZ'UGnGBF.<tiM+[3!sKLQ_&3HT*YlG>!`g'^U'e'4X<W\m%U>;Z7#FCAs$'uVVP2MK*MU7Lg2p)c,NYGS7-U^a>@*-70?nFcj0La,Fnu8jV""KJTTkN*OUEHOUKJ+aqEVj/j"ph.M)R?+XSJdP+%-$Z:8GhmYEZu&Kh'QdO"VFUN<)&u'W.L[$d(9(@mO@mSHU#!\&YbJM;k0cmi+s2Mc[[<p68U?Jc@)P_g(*gfS6Z^mF#<<L7'Qb$V%>Ao;8oMAO9M-4@Zn=_*4o7nb_#Yd"p"N-<<-t&l.Vj&SDjKjD.7#KM;+hLaBY"0^o:3'14A$/L$Rb\[X5/OOEAC2eK8qt3WkWjb&%"@Eu&78Yj3@]De[*/JB-d1A2Ec"'>iKr@ea8Q_%!'Rm"g6m@1Q$ks8,O<im":(h*6`*oSVW(9O,Rb&HOF^e1!'hVih'o>hb7J#M*%.7atuNCCG\8Iift64$t;0Jj955a"tF"q0WmjPUS"T:'`Deu1\4KbXKc'gl7J$<I.*TKe5b#;pZm-N)hdKU69r0dYd#?`n)HTBN,6%Kl^9>\\.Omn40.0JV'P^q&SK@eE)5J#YC,OKHhd0M[FS]5X5U7?aQ-^6K]V/?]$7@&Q>j1/pF9i4FjdKHR#6u&S7s;^/.@6-n5NM%k.HYI5r#BrXEYq0Gt^44.BOMk+eG]739IOnKL]33`<u-@9#>A1U6<hEYE?dK0A7XL7G8hj%a&Zg"gLE?nC(i>2@mEI,]A:aUF[%$%0i1-"f-A?WMm*%$1u,uhd(!^h_K`#!AI_km5;>\?<Is1,ZIEQ>=X+14X:]&$1%3*>!1r[3JPu0Y/fi!VdKXt#?0E"9J]\LX\4fJp%D_WZi'Pg]++\/9D\5$j2d/8n5#%D4YU5Ik3@jqJS'FQa<:`P<0&s`in*,).B9%en468%ut%lH[Q$<iG4+YEs,if9F3$kR@h<3F/"%s2/UB!B(SgOe<hX;<UQ'@n*]>`pJ^+`n7)X0PkIRX:8X'!m9hVi7qZg.&&OkV7<Xlf1KQ;i"=BYZXAqm?LB5@PQ\Hn;m"#sd%*dr%&_?oHZLK,MTR]FVGXE*4d1S5=BAkkK1et#P5t6Iu&!$5W'4Sm&_1H[4W^005VMui=El3P7$H2*qkY0-u+;om;:$#fGFNQ%FMMC2t%INS)N+=EC8&ABV-=7'q-1:p5KO:$"W4b1b0CAcP)-MEKb'rph1`!R>,3rShN;;4(SBd'V:q.k+L(<Y1fj3B8/;UJLM@Oj=rQYD1H%Z";c"d8^`X&T"G7#`hYZ>NJ9gKsB-*&&VD$V^QSh/o"VMMrBs?RVILY6cp,RG9+mJb[&.;l4o%0]O4rk+SulU"XPHpU7k;,<E(il%(</u-16ndhfaq<::tKGdc!kVlBnbLUl6K>(PuSod<(WbE*28lUMh(pB8Oh7p(*&/<@6*7"f)FHh^CZ###@0<5+S>eVb5]VX.Q!-I%e'6<sbW[lB7`=qO(>O6`i>E@XN0jS4Y[Y[R'O#di@\@*QC4TsP2MKJ]aoP()9OGImega3ZA/0[PM&hQ<P>=2@Ma^Q#EXGYm.JX6&%'X%g@)6$UN<\[EI78o)ZaoOL*M%NoOke)b?Oa9_hr"Zi#1C/2$l,*nT$a)$Q/$:(V._Y[!D#,cY,u\DTLu8d.;%+)]a)VQ>3uD\=%!sSL.W$qT&&gSl&R%@/NR4pEOV2V>e2@G<f8tc7,0*Q>M1LXfdBV1Y?238<k*l^)5'kS0.8I;C-U)5F@O@ea`g5oQW_C>&Sa?cB(%=U6JHXPP?tFYK)_HaMC9</BmV.:G]S<HXZu0Gp.<c79B;N@HIo::29?8L9U%TO?q+nNKoBLfdJQ"*q>D&?6(_\.&3)WeMZ__p?22%k^%ONftO2Uo4!@b)-2R(k7L%sY@"D]K#\NK8@>To@`1/>Wha2k!J:IoPSk^I)En$E*[=^YkC$Jk%]#3-O9DjhP@B6&Zt^gRHKtJ\%qU5C9&DUS1WU_f#/u"_<=@D>GWlbh+p])UkE_9=Z=<RhX4iTdoQ_Y<V7%6\u'AN%dpiff$fRdBtaL"rVdnsi,$,eVjlsLK!L+5Tm%*+^TDq4S*p6b]XE]P&+]7cV%4K\SJL:r4X43D`:CJV6K!oT$h8#u*O=`C8c@j1i_pgd"0=U,4`<M0jnZ<_ua^`qh[-A;'Y[MS(Ha%@^*qJ>fd#7BZ<>m"Ri)g.Z5W'<.\6$AqD;f_J5HdTG!Z=KS1g0:f)osR?shoUJNg97%]SQ#ncK90,nHtm$s_^8T63sF$deT0&'`:%m!YpkTb&r2"UDMD#"q[T0cG@01NG2A)^3F?hhhh&76q;M.,+*GJ!4J<K*6RR7[;'#_EaqA>IK5@%6@mIK+D)nL]$%+h(dn="XE;9%er+W,aWt%m$)`[EF/WX_U&QP?cp]0k.[36S\GleA=)j@:`BP+Jo7MCmBW!2TL*t3AZ8tIPgm;)@UqDq[#tM(O&tGW;+s,\($hZ@8%'q&YM`Np?X&.6ikb.U5dn>%;k!V[33;(,EDXLL)`+@7-'R0QaI7^>2io<a/d7ti5*J`aIi=h:ddK#llY<@a1DCnT^ZiY@rnB0mU7%"4AD-ToP;IN'o)@N2UuXatt[(WRE\R;0;qIH/OT\%/^.2Z5QJ@ZH#X:'nKseMhH>,fgWF_%2Kpg?Lq<BMSZ1#*IK&GN^(U.:nLJc%M:.H270mcH5t!55lGo,k49^VVMC%MKDg#Z+B;Tk8#cdl:ER>=[#hDrm6@.5%EstKk0/]M+[+pDie4@u(#26,jR&GkmIL779BhMoY%b0LA;,#^e$@L-\(K.Tff>]&'eMk*8d`M.2rHj;Jg5=B<Va>Gg8`8mS:OZ$cCRD9J@+HJ&9<4GHU(/7_c`BM\%f"7VS5'_Bp@8[jt%#t-!/SOI=aFSOf[dB[jMa!+L45QSE)W$C]D$+#8QL!1F&j5A!kfPSVmV\<<,8:50I2Zj5Q=!4\fZU7UK;A@<^dtq?"+B5*+:F(oc%U^&3Vfa5YKKQK,AL"&A=-_mVA8^,GFAZ4h/fNrrr[fSug<l<^?'aj#iLan?MRhp4i;1'aK2Zc\[$+3\2A8&iTF1bTaIPom#L#V_\%"N=2"lDe9SphM-ALa6(j)+ctj_\+S2-=P0MK;55Ui.Ud'."rW5;=iBKLCRVdV&me$-$T8&Y-Z-$jfqC20e31VK1$6m_\-E\JrT'G%/9-bR)6VK`+L,spW+^qiN?th@f./.PbS3QoEF>#gJPcLQ/\9G5$B-#[rmnu0WF,@Q/1-%OO>j`g)22qULQ:"q'<KR,5f&+8;GeCD%3->!_LD)E'<^^n+=tN5,%2u3*'e-!,psA4*:$SXeLdU[I'+/JfZneWe_%@"P'T'`s"B6:HCA%de)D!iZ'BK^t0[/7-+a]L_Uuam<%bh+]anHbm)]7M$hSaEY$bq!U&=<u2=-qZ=<@&]A;J&FknDqOFJP4E01'Z7FF,W!$CHC\69.*ZVr,PKS_N_bY!6XmsWV]g:fQn_6c%/B!W%9t\b',19;5Jr@6![ia?<4u/U#?=!s<0(+Sm7q$*^MB]Ic(Ph2nF47#g:DSCIP"M[kp&54WM,`7k(ZS[cMlMX*S/%3,R=aTE%(8G@.*/qNt/P[*?6f]%o'Brs_&j/:AfJ*m[[>%$G@*C.@-GbY`;P?c!b+<#-P>4IRaWb-uNUCJgGT8]0(cscEQY%O*E&KFJhXn5Z%-fZUqJo!Zi[-0gg@V?&t$KWt^T4A2eO"/19UQ1jgd%^u\DK.u]O!$5?MTR(hW0NctCpAbh49o"=OF,G(kc+l.3G.V<2hhJ"*m+WA%<R[Bqjk8B*OX>Wq;5=[VeDL=;)EhDsPCn:f&C)!/SBaA8)Q@*dclCPY6m9$mBh]9G$>;[+z!5MtD'p-386D+>eFPpO.*703@%3\URE<8_-c'p-38-K"n2*)$>8''MRa$ofql$sZ%!*-_Ga#f(utN'IFN'$(%_"MfNf(aN4J$l06l#h958!=jLM!Z.Lp#::Pp$.N2i%VJTP751CJa18QbN79`nA+/:\?Kum_dp^4JXgas/5_p/#nl@kOC;lW_*KeYS8Lla;;c/TRDo@a\i3,c7F9d^Lu#r4>.:p27dBXB#E%5\>pu^W(qqmuUOJ)JZT:&STTDl7pMhI5>;DePfmgq6S2;>"H`<&O"W+=_,2W^i:aT8ED,AS?Ps(eN-\U7$$i#%54]a5\14VJP$94%n?U%H@RW70'O5fb\mD(A=Vo7aUbP6[dY&jPCg@4Ne814kMDW-V0;F,i.\RdV5\3Y:Tuota<&p][<@/9G71"YtWCh?4X=mCAoDc/,%XB9GpqErFMWR&>Bcn\"D[ISDGQ4%Ak;teWc$lY=go^YHH51<2m"Be#3'T+FH95$U#7*=^9)DZH%=&JK?:F`s96<p1VL>IlBC0\cZ%7\?QQ`^fHpJpmGk_]TQa)@F5HRO6NX,U1"g$ALT%2eer#(".:N<3/W!=B.Grd>;iS7J0TWW@=L6.G+JNKguHe8Xgk[:f,Zjqe90d%_mc+E+[_Bi332.n-:DQ`:s=R#+D"-(-=p"fE.B>]>4bX%bpYo@"q%(E8K]e^a*(OK%%g7I+V0#<9uE>n*sN`*4>]==5u<D28g17.%.@--R-VkdgD)f1e1aO!e9_B=]WNgTOD4*()]Wao(Tm<[*&YZ!lB@,"<895EE6Gc8'YFoF)?7$ihSe*.n7RE2cW:Au2)L:bH5VgVL%N''fKQUMa*TR\MH%ml!n@of9mWblOMd1"?P`i(N:8?BjP-."(>"-#&('QJ^K%7(m`OC8Ptgr`90qLjjXE?<)mj*]o.7JYlh15f5/%3BSZ1Auqr!$9-1""_LU#kaT`2A+^9PV)f8-la?L3T.o;WcA&&/4;o>MUk0mDC.D2k/eehk;9EFJolg<a2&')Z?Qrb-8%ld&LHSt^%kf#*@Ko;u)kBPP#7C_2OTF&K$,!d/ShFW?!'-po&0T4G5a[PbTLS=DO65*jjYt/,_l0CjL'MKtCm@#R-8KAKtN)@)Q7mBOAIsh%T%FDA`+DUu`_,%$"ce\`Yg?t#/9qa,9>Q:@Q%m&$d?iI_=A=:@.*LU^4+9^lpk<DY/RA0S,Yo6:8MdSj+saUGK!F:oK3+BmJq3C;tV%8C?@S7!gCa(s-`l2^Jb*B^^2%&5.]hRYp(CG(G<74;`btg(;hm'kApa<8EpN0uPK2FYRpZ/CJ691L^Qn410d-`9*!H0iD9]dT\Z`%:sKee0\+,:SGQ+l;o49.B[R7(3?D20n:#eX`@q]f-EZ2/&q&&[R?=teE%)d'O!PPkUifXkGSSL2#uoiCC8=0%%lPSh&eV\$8YL`n%iA'lTMR-1PldVadA)+qW#7=)H;_UME@bd!^Lk5jh'o<52A5V-F:dKBV'I>rn&AgTKGF4>*dIJ>E.P;D[EX(:S,--BVlmC_N8-5KE%TgDhc@GE*s7>G#ViuJOB*mdUALEr!IW?;kLLC#E*+eKl-[UI%rkS"jcQqufd6?u<'hkZ'(V91bWl7<RJ2DlQt6'jAq2&IL.O^a$E%c"RMb1H5As;@/,I.r#RRUhDqkF!2Hrim3C@.fQmYeI2paHHeH&f4Koi[LX[902^q$WmK[=_L_t"(n1jElpqbUP:mfq(SM]i<bE%K%6Fs"IZJ1%Q8dneanT=oN&ia_ZUo'P6Re._cOIEP\8+#67,:kg'U=$?p0hebK+C80'&W)T.N.&3>,`j.VOsgQ16Umb_#7L&<<2%D+%U8oUXJfN?<8Wa/?:_Zb4&pfWh)O[%fW3GQG%]g;3d#):4\=D5K'bn,U,YYW,6&6P9=W5\^IKEYB\AUpO<E*=i8,KQpMH@YO\6L40%;/e*X%kT9-KH=6E_mh8:H(7'.M0qo4Ro.;E>N0V=%29LLV"EZjX/f^rSKL?VX6im)E33/uO:,?1*a2I;gZA4s5RAhLY*+Q](._tA%&LE=Oe-lhk=t%f^jes)5_(`9LTo!A<$mH%]<Nm=7,ibsHQt0`\6DJ"`2$4"JSHI(-'h-ZSml0bZ21l"doa"HZdLB&R0OslH.NuqF%6PCA,c/8SsgCtBsp::s[)PhOQmOMSqckN5[57B(lrJk&f(o!Bk(lD7G+^$Ce/0Xa:83pm@!\#%pW2V\>6A_WbgO]q&ZPeoGJS5K*%R6WSD:@ad#_F[.O'_F'n65)i+d"Ep:7ajt/<)I4n`j%"T)"^(^aNG&=g)l+j%RcUa31WMRO.dF>E/_iS#LeH1$)Z.E<'`$/"Tq>&%#p`,sdE3+l03,n\3h\57HI<"\@hYPXhF+%oK*=!$TM7sRb7U@&BIldf6WJ^Mpb5'"K*8$UN"8:(5noTWbbntaAM"?JV4#>Z327XR%1km^e"Z++Gbj87O_(`2,;g9^84KI\)4:>=`R$&=8TWd-_F.er;!h,3'?<eQuPoAV7Qj6KC1W1Cl?CZVkN9^JEF3$3jOCP.\JP;5i%:mRc6@hZuq:/$be^Df(s56AlIfcc91"rZ\X6"VAU'Oi&_R*!GD:i=f2ji_aH%-4G?-'2Ee7KPS>p6oUm+Hl!.+YkiM?qQ6C9IQO4%k/jY*3UBXtHR"=#2_i1_d;O?:M,j2s5c,+OP\75Y0?jIt;]H.$#RR2d:#$8=*2"]LD,HC<DP2O^;K32dZ(6Kj,D,]S#X_60rZG&`%Jr!!!YRQ:(k1-EI4B%UT\Xe#,Ms3ZVb69PlC/>d_43l373k2Jh\G6^D[?,&FYo"l3-h9FEF/^;Q9Xu@'f8G;D$mkTH'l+%!+Y$Y%%ii]9q`)AH`H=NCB$:-"oRV0<dDuCFe2M5jF!Z0&jbJYb``;*(T9!ZtSm9H*,=_aWIC4(2h_J1Nb1qFT.[Lb%dfhFj++`gAC$!oq^%_LX[(;WA!kNC50i]F;c9)'[e0?6dn@9=!M8Lb*B0?.9FD>2'jOcJS[i&_K=L2-]ikeOsXTj!mGi)PZS&O1mKH-kn$@U2?/HBKX84%,Y1u[;B+2d"Cl2#[;)KHqeSj;[OJ;r1T]#\@?=7<LM9Xs0be,N-kP-S>-e:XXD(&u#fSi2,:-qMmPU[T&u*6;B:Kd6j*`.(Q,?d@%`)(6<.]bEk5\K2Ggtq<)InHYK67>8EBaH4?*m/Id&nRSYRChM9a=@QjiqhG2IFHH6E+]54MV(EX^JcFbOY@b:qTN6n/XRbX8V+f6%m$^KKH#uh2%i`Lt-PL&!og<_5(lgC-:f&\1NGq"UohHOQ\:n_^<L6_lY3^DW]ZHE#6jkH0MOMA5l,Z\=*`J6?UoJ[\^Bt1!OE`?\%as/H,-PR(\b#&6E%&08HU#pKMTf.N*bU(b'X@B.*Voq7C,,nZtb-lrB/7q@\8-1@q,bDa6OqJJ7Mcm*%\g=<"2hM:9c9,o[<0h!8%_GsHl@`ZB"7theW?R(M\Je.V+(%K0E`N3\2#h-C$]$[%&_Y/[X()N1a$n][TM+?]:G$1ejh9s(BXt.SqF-K?T)![7!"4rWZ@4[j9%^\$o`Cp?Td(aun**4?>Y6m3VbK[t`D;aKi#=l/GlL;+u\i@4[F-$8`XOOFDO"q#r+aC-U2McF%KiJ8Ta?=kh%[Y'SePfW-q>r%Q-%Ug]T9:,LJ#8l4"C=/up(-JM(9)Fda`:dAl/SNrUBJ[1E&[P6C7-Ms_U-=_ij$^AW08nKkU&61"h0u:/>`\91!a&uEtA'p/P*L=MB%hI;2QN'TN&!lZW$Uui&Z(QetnV*M;ccP-6kN3q@R0te3j$0%X$)0/8XeCl'VQ7870MY)Z8(<(q6LInaqW+iL`jC3Nm`N^A;rXcB\%Bl-[$<,?W@:;Y:,_p]JH;`)'2_W2O(p^nmp+(6eC'3O?36_7<pk,9E#Xr&q&K[m="MP4B&Z?AT(`<;c)b:4F(^8PI<9CJU'5mn9g%ecbeD]3^WL6UXcSWI%+0Ljke[+AkN?@BlFEor"FL/OH4g58P$Q#f7$0'm_-YaP[1G9I3k2\QLbqW!TP#+"YoeCo$ZVDptODG=<9^%nOfq;@R@W.7_0Jk04>&KUdAuKj^AaZYh1HuWNrp's*^M2j.1no)=af5+=@RB*YLb:ZKab#Hs5V6V)#"1$V<gq!aSN`N]BNr)aFB:%&HE@B@"CQo,a&Jr"L`^mJ-6XG,)h(<0JF=dN'g1;&-)\1!!",d!!Al,8ATb+]&!-WT6CCY4*=1dmO4D-=1D""4!2Z3dUM[+F%LN/%N#J(@r)Gl>5odJ)U"HbSY(U"`IJ(`nGp/m"nrK0!s.!%A&[OM:C/\sZ"5TWk4gHg@@8+^YT@4]oRca[W=@LrNoFtZ(ARd#oc4s,1%6G\=<BR;_FciZu-=$3f*q6H>i"\@?#M]O9p[hV@E//hJuHE<A"i%-qHreNKKh8s0jVF<S>-atJ,/rF(gMtZJ-\^ljA)7&%GO[6X#%.g?9Z%#67?!tV.;JsG,KYS7rAB*TPHj6[PW_h+!<WPW>]`HBPn,+2ih5Hukfe>6!4]W-5(?@=SECXhA'0Os(>J^pb]&-p!_lLmcQ%U1*\9PR#G))?-VEfZp%(&%U?S1*U!%JU4T^m,Dq/#.ClVq]*k!&id0C'\8&=\2`=t;`u4Up*=ApJ'N)OMeTR6j6];6C(P,X'QrtS%8J\ltDS]cH2=ZA)FqF`#)B=a#E!QYmJ=7`ulhiGObTe4UVTuGC;Yk`-XF^RsiMb"jljfap/0"h[7Z;VF;Gj?#E\UO!L36"P?G/q!%p%*OUUoFWQ=rsb]iJ'^/$JX0ko'LDG/2%PK3%f1(HYdr_Lej-O#-a^oU_%.^fLT(=($@hCDj4P;(SRQKZA=?Y,#[WeYSlN]S64<$%(*KC[0q#N`%-$6SfJ]T6i!u0_39QGnVeZ!Z-Aljc$61PVEfO`n*0EHa`Bd8e7/t?l;E:XP/C?_:LOrFLZ'>2D.K1=13U)qed%6g6%QZKG^.s*ufFk"f+EX)b&'>[VM<_nd_3.p@hX3XNlk@h9lV\isGSAV$1`$l\&b;lnT_XICD/"Gs2QbKrS,G$aqb;i?I_lWa[)LL&s%S,ciXgr)%EU=5F;_U6;YS<Hq!k5IrncZr(RK4ViVCq!!G6+i#:XK[[:P^sD8&gZW[a)J/,mii*!#AdI7I2jHoCgad4,3PbV=sU8;%a>l]C8KWj[@jL4OAT0)Q#Y+r::90DOFfWC)%cSH8V3GqZe,+m;#L;QtEIKcO2oa+X3PU>W5ee"sJTH-b33]*57/oMn>b(5/q+PYC%"Pr72BBXV%_/6Y`"5eGL5BRkPc9cDnU`Z+:S..8#K(sX5"e=%>eG3V3`ADO/cV'HqqJj,H"p0Eu*n"-H.rp/]\B?TugG:PQX\dK#%CH4:2(TaG?=tTtB'>6YW>UFJgP+PqoofunC?H3%(gp/P&90.7\!R&iU^DJ)IA5VmlTNT;%"%*SN$/Q;bQh+Z\MHQYrD0!,Ban!Uf%TI*l\.$#aiUp-6_/(h=u>iqQ`dBAMuJcnf>Wg,Ae3@*XB=">%oX@#A$"Q@-L,$DG22XA>^^LS57C(W?m!E=$(J"d_q.5=81^LW=r%nl7kTJ<beOf$#<#NrnZFH>AR:01Yh'_J]m8rA^MspKh0me@7k_5T!LI.!5+@qQm-+[XAPj?Kk1A.`9Hn5#[AMj)p])b8"U$/gZlA%>T0G[@Bq:UR"T?WTc*oaQAQ-o(S;kk9!/f!eP3.b]u',B3gJ=9=i=u@lZ8q7PjW%3`p54G<jBNKq"\4o7#eWJ^o3JR*^Q^CVO2ph%DK)dlC0CO-Cg_:NfEau=?o5o&$OFbB%o6"NC*PeXiWL"i5(["GBC7,]Y9=5t*#_'mDpZ2_IJZ,W-q^$Yr3@C#`KX]s7JQ:Y]M:Ut%_#iC#qi!To0.js]bbcUnfXB=*=:LcJ@+uL65Sn?sls+\cVePGLg$17=>p:c34I=cnP1'BOQ+F/a+>bb/XX(9c:6:Z2N>%%fEMI@%%LuXJ#j_EXH$dq*\EfsI7"j2$?q.$Z!=$/+hr:A'0]?]@C^rmo3'E[7&_G`[#4;Y8+@k9,dF:?*-[;(S=1lq\Ze/C1[lA!7c,D/I6%%I5pM6roi7HZ`l*OqAp1(8gY*GU45Y"7/N@ZgSm]Nr]D$h<_VA>e7=(QSdZpNVfIO$61+4+R;`gm\2Oe!8n.\r4(22=>=]oT<57"%n&1ZR!I']TX)S7<[hE%sWNhDI"uqPKhDTB0&P-jHgIpYf@u0'i`^lg=e4p)6a&Cu>7_$!@J\t$@)O%OBCI%nQXmbk8''OO4$D"*/%J$cG2Ju9(=(5ERt<k+*0h[dUB4cImR]r2g(r&*]4O.gft?A@'klW.Ut>E9/3&HrXj9XVsX.0oGC;\cFjOCTpd*?+FD6"r4'F)=V/%3l!tBb/f=m!8d0E0(j1JQ^^Qi6`LjAUH;Klm<?HK.JTr<)0f1f2rsA379t[j1k4hUdi\bR>J\&V<H8LSoQJ,30dUH]'o2O%VPV!`%$TT3>,WO('P?S+8[G:8(Jb%WslJg84=gR",abM-QC7RV=.P5h]BXQXqf]M'0Y,rY[=;nsfUIOL&!Fn"`eOZn%XPJum27?H+"bf9R%WJQO,oj9q;oJ8Ua5H>=`+KrTR2ORWM.`EVql%L4@)b'jBK$iEjJM_4&9W.?k*I`0!6=e,`>Td]=Cbl8]mK[;bY0dgd*YH[TKe*Pd%nGa>^ft&sgK8=DiK;*r5MMV619*bi2W68K'OC*tt'3Z;:]>CX"GMu4F`]"F+lu)*Bg^VZ.pG"cG$F2F]09^+NH*au`=^:GI&[20Z%mr".QYA&jk]oN'2oW;"8kDM%pXQYgN,R%)3G`iu@>YMe6F29JPAI@S]Lko,?ifQM;j+0_>CX&]FjFJEi/RE90kO$/K;NH^;V<!tF%lu0'aU/hl/,5\I"nWG!E0OD"%NSD]8,%JtIK(5;1[!Iq)ehLJU?3]=]II3bY\G)nKp_4Z>Wti&9oep[,/+LF?:lID@/\3#8Zgm>%%Q^EYCD)()$HfQL;d5JN)$Kq26-G9SDpg7;rdB([*J;Q`:AI?DI)9ZYT"p8.2)\fTBRu.R*'h!oAa`I`qgs$Lcd?J851KPRa"r-"-%#bZIAqmMI3+[4p=P:QI(_N56cj[E^J"lLJ-,VilRPJ5P2Ku+uq-QNQ%j/C!]AIPD4oU6rtY&K3Rm3YH+>,Yho>U28&rPkSG-^b6$%;*#P5HXqq<F;\CghZt`=([R-`42tZ"i?:UNloNtE:lCc"#+lCDV7?2g>W_U]cJMD0nrQDElnXqE$/FX,?`VWD-Xa<@);]e?Rfi^n%K<d"ufnmeN0`*,g^a<kAD/+*6<'c6_@jc"rma.-p8W`[,W@Vhaq%;n5@hMot<SLiU:Wro>h&9Nd7EnD%4KlM*<+r(`2s[8m##=Qa%md2$G/]egD@kb\9"-1ar7b<6C@Q]RHl#SMU6#Q/H]N?ZG6UPZei]+*[lU:B!,\cYc0gp+DGnCdo8s?LV(d84c"2\k4Q4`4/U*++p%3Q<RlSt[J)X$)paZJcM-0f_hP-P:P&fjH(^-WV&Ql4sO@HIX_:D7r9T'B)5j6Z(EG@I<G:%%OTRcV`h'>9h,#$Es56g5@^IpKm5`%bLVi9EKj9kom[('r4MBZbE,ks"DNmY2o[X0F$(-R6UK4Da^"SVJC-[K`CJ=SWUgpOE,bkl]P9;s_Xt4>%d,"=9A2H>DNd3CX"'Wr%oZCb^XdSi'KFX%f].PX/Sl75PM"\mf0f-tn9K"('O(C+H[M<T3MWsqkKB?b0k3sn&)9#WR>..Ps;3.e*m.*ibJ_VOi7/u-UKW5FL%C"rfGg_3rl5Lf"*V2P#$Fb?,:F(\*VNOV$GI@ZX$YddLdku'>.3W'!`Ael!gotfC"GoO@:T#4c0j=)t?1Q>\qQ#a.MjnRr0<]WF[%d&%=&TFQc1OZM6OkIAA.I$-2's.RamBMe=;$m$+VhMKZ]\N[\=JN=,.p-_ga`tulTMu-*V#g>'5$EG:P5A8YV\)*l#@_Y3j_:;^7%Zq-.e,S?+T,9\,qdaEM9*.@bSCGgRQ;kht)%+O@<1^%*jO#oOoVnI4(BOO84?jGt[+%dNS#"2liKDf\fiOT"i]'s0\1"*oAlWHGl%!K*b-kW,-"%MnKE*(SuZEB`NM^r*e%?1AHrN@]9YR/fWGLDD3En^[KlkH)9s9@$pqSXcf(VBY1ur+"6q*lJU'`6:INpN<g.Mptad%a<]Zc"XcMnK,k8a@_[5QX'Xen")7*fQou@8mRAm,.<E;4LJu;dI\dj*p^FBc[m<S"s+C?]g<'c@F0p0#^:CQS).lbdPrPPf(e@O"%&9[j[dgOhOkmD$[UtE!Be>qKh*sK]V(D_HW(;i9Mhiqm3)dEUFerlk0@.3-0(Y+6eBUR7.;QNtFi5mVpVRr[;+,])<WJ#-\6"umr%DNWFtb<7L9Jk;;E;14BZ?<nJ1nE@R/\aj\,E2okDRsPt_LZf(Q[jYS(@b18PiMLkqWFeFuG4>]T'1q[1*(\fCVC^a[[e^a*.Ru8"%FhpmBNoSKu'piDC@HB(Q.P`-t[eUr<;S+/YB^i[X=^GVLWZ0'`1.31e`[tRA'')$J/$qDVfnREkANeD!Ss&O\g7L6%VQ-YX&uuCM%WMITVOPUEId8.&Bhgh%gY,qe5AOV4C?M.89_mqD.8$oP?0*r$-intZeZ(4AU"3S3kFR&E7UGO+IP<gWgZq[@fad>7.m.#Ot'PZ%]%id!!lU'5^YX[:k_1)qT)8GlO7Z7PbX<=iSrk2T8`J^Lrqfk\0oc#if:UVYPr''A3q#0+H8+G+Ku-jpknQt;$o@V7q$J=KbYZ1&*L%_tXR7/B4a,H7UWN3Act=%XP!"UTNQ&!E$K&bphs6l!kET1Kr0l&>AiWr_9qq_n$$D2dltIC_?Q=WWS2Q!fgK2CpOkP'<;6jJ\g>9%%nue<N4MXH*F/f!hk1>4$!1TO=Ws'gWUdhLJ\=MqJ$'.&IMtM?%m>#2$BJ+OpY6*J5kIsF>Z\g\Z5/hK!;Ra$6)O3:Ad(M`7lo02%;^74$#SON-r?FjG,QHK_D4&]R.\$qg+(:VTZ_XFJ"KLA5@g1et+C=ISMK)@KA[U,Z`LR/&Wt34PI?#FN,F?gf/c1ej<jB9K>X_Ah%S.<a1;NS;p!W(,#;Hqf4:VT4J.ol0c:kR))7<LUbD!42a#]m'tX-49-SL"\38fXgs8"RN:;A[:b="'>Xq@^lop,\\S/n0XLjB$qJ%^tNQ5l&/C;V3u^:b>?mQ8mJs%2!$j\s)YAtGl0`jYSY]qn?u/;$)5ND&ua&k"'@a$^_Qd$9HTtI5l[U\H9eApg2pp4ZMKN&gVSb]%EURTFe!8EdDApa\q(b6^<oOINE(/RuQ0(J;>_lb<@m*nPg/8oWJpE!`?+I]C#HEJ=0E2qGi+s5Y*dbbqjaJEA1ND,:^!tjfR]Flb%)pCpmCp\@@$^4Oh['kQ'A%.+qcd:=KoV8tFeck"4Z_!p91QO9#iJ764NqT]2*r5)F=GPqdT]l0B#ZPaq[*/TX.)17.N$LTNWLK(O%LCMZL7Q5V?Bo>>1MOGoT^8rGe9Vlci,77F\@1E?rg7Vq.XCA)h_sM)S'A2O[>K"%glVWg&Gg#?Ke&'?Q<bOBaoOE&o=Y()biW_io%@Cjk';MHc>X^+r+/m?fHen+.d<q%j[PR0@T7t;J'Il'Oli_%pEF`1T6lJV::IObhlT'.FVW0AiYb>Nma/S#/g:`nWVPg^r>P(M:`%J%f-Bi?]aX\55L[F"&8^^RIU"TJ=?R5Z=1!(_I]BqABbp'R/*:[(%m-pMhjX6<6/fi/7&jE#>j#am/Q\'dZ6*RY$<bR?#'%R,V_r%?BT;>INSM:W<SqL-g.bkLC.AaL!RmHm!]_>=E<<b'T.mPMbSd,F?Lcn'o/,i--&#,h^k%a.3JVQ8,qAT?#1D?1fQr`$f%]EPf<"i%2NQQp=BV!=l]aW8Kjf`8'DS@_ANb[7:=>E&^j=lNSP-C4PYti.CKSR?9"#h<#9o!`$g+IQ]/?1U-ts3qS9S!Yju<DpXT]@kVh&)V%<6FJ=]F_+JYQe_F"$FVa\&0'"d(h17(`<_3@SZ&pL)<@M%0NK2M8(l=I+EW!7#D<i&UUW5Fo^,X,FJG(eQHhXH3!]IUKFFK7H.aW%7aYAX!<(,S37o=]%@r)qkOH`D0kFIgY3i)cl=nqT#+b_RF8'4UWa-acq?0qtaL*JA8S@n+Tj$&?JOWQtlupuB3qp(79F@C*^YPon%iK/K4IlfqG9E,)6hkmKYp9fJGD'Z'in`r[7G-:i<.AH03h+'fsQ/\0d,c%NMA3-1kq49'&!H7-T0seLm93J_>k\E)P!Ydd""1JD/%GMP0/SA6'i#&[SmBPD>Vkh?UU[-fi8f=GZ6h48`\b6pP8H1K"Y@1o5<ga`\GP.`rminhgik(q2Qf+$FVjJa^jXI>3MKR7!PJ9oGi%AHfJ[XYbV?4X[S-I;s1uQ$i8:Keogh)"]`.9jD5EX_MmF'#.2^UM;:G'UkQ!3(hu:h`L]PpD+m6s+i[J1RRY%#h,IMQo]O=.5r+<%qqh`,+ccEB@OBcK.C\0D-T;q=:T$BoiEHgH_cDp@DXP$u=['!-qc!Sd]D-Iu$?jpaqdhLTc;>Z*Z[>c;3KmPd3G*DLbIj'nZVZ';%::5<,VAu@6bh11'qqu2o#:-e9afR>tXHQ/*A9+HgY//&u)7^pM&f5efdh,37'>Z6tZKt9M:'=>fp'OfiW=OJfR?e,4+a+%L7bEa4%.Wep,2Y"QI;7KHbq@JVRNY6=I7B4D'7L<CoT5ZC&g@gTMgJrk0!VIQn>f9P<GuK<aNrMLB=mF:Y$&gb*DY32mK<=K+.a#UOp:k<!%+7mYq^]BpE.7i+.egNWm=O]=05LRL7>QFr%mu;B6m_YurWNrPESQuMWA!*O1kI>N0n32Eh.INXP"Y\ioX^A(/3G6o-_U]G]PDlG,%3-!^q:MrR:(T_)?qI,1kPqOt_[(8L[k#j)&CkX_52;e'pN]I\:L/.%G^fS68p#\$gdm#eR:qht3<:mGE%$@>f`RA/fgsXG\27tp@%3E]UqPV4.5\L[.#o3:0(?gPS$?rqF*Wi@nkE\Qo6cL1X]aW4aU;PPX)P,T.H.LetgcuN;P0Wof>P>;:jM>lh8CM^@d;jfNum^S`0%UAW``U)GAJFCqD,Oa4gV+Rp,^L;3:jo5KP(T0jMo'JIM,-GIo..J^dcK^(!+PMV1hNV4]B&[4GKc&(JJe",tk1)B;rK@sfqrTd61%%YhQEEH#P1nm#]jEU^E=Y(6fLM6K"TWNX)P_?PO"mk5HY(D.aHB<pE7EPbCrdt(sO%=d3fK7;ghhnCGZJ]E42-VnQR9[6s;!Dbi@%0q17$CZJE-cLrFSo<MhLdQYD(-$@/RF&*53r@LLaEPrLuEl\T_(.YVg#egd'1'Z1iC6miV9R:r06`oGF`!:$_mWu=+jh=g13bE,R%cIXi7mYT+f"7gcZH;?c1g_MPhMDmZaH<Rc\r0.9TE,KdiJ#4nF*$/7\KFM'c5B55<]e-GXKOU.lF]XGM8P$kk?>UC6p#7gd!$"?L%4"/DEV""2Q)0uk1r&J?Y-!01YCCl7h#j#6k`"PYJcg^YZasY1P\%Y'd7B]hPTmXOOe?7As2gXb0#*i.aUbaG1:to<dj%(XQkKMl/%TD\:!&[B"JE68Qic_"!<h8=7&&gj^3V*3="(brro"m[^s.j<"p[WYZ1M['XAM-lXZ%e"%`0.s"KP82#%.PmQTW*&3iV/jPde/B^7%*4)fp5ZcT^>./Z65#&Mh\b[t:Bg1(dJ-6!WjOeYV#;T2iODeh6e,hn/WmA=J3tE@/%."cR'jst`MUqMQ:!#0AJm')9>e'/VM^Z_I%k@;Uc^hV'/4@T#-TUMc+ku",b,1@RA,/G3fTbNn9,cPfhJ[/N(fPl6@qV6*==*g#<_je+nKntRsG]o,fl:kEq03[)UaXn+Um$B.D%nu[I[E9eK]3N+#.8u=J)9!i`ppUWa5G4.VK*+o;;Mc2l0E-K6V`VnkXp_3L%<Se32V...U<nNLGij;EGeR9!:1ZVJ!m%/,ATdl"c%W'Z+#U<#NTH6tJ0:BO27kjZ+8!G='_0[I3J_%,;ScJhLNK_C[&[Et<OoO9s#`e#"If`o25&G(T^M%d=-ZIC.KV#-1u[ZSg$E5/?P%K!e'hZ/\t!b/VG6,d1#N:FaGJ!^+OX,E[hjL4mRifJ>@h37pq/,2mQ7hK9[Ln@H%?cs+^VXa$D)P"qEs;Y5KqIS+q!n+rn,#9uqR%Ti1=Cm8r+9?!=`>YgMH(dB*S,EJ4(e1)cZ:P/\2aU/R5&f2d3Wf%N;g8Z)8sfY2WuX/%)R7ULE4#A:-=&4nc*C)iD&i%(dlma`'1%8)7B@1EWn`]tt*EJ"k#pP0T+>M:th8P3t+R@A^Ts8kRj4a(u%&8o!opD()[!r&\e9TcS%LTlre!Yb67t1dlqJaq6Ah-s]Cmc-8>I%k%c8;6VYp?<*^tY8RBR$2,'8$bWAHg?=:.'^4tjLLoFZOW1Y)_j!O"k3Hlbqi%f-ebcjFGOuUTkEjI$]bh&(<^>8PL=;_KETK60f%UW[o#d5!1EqRM.jPC3RG8[P%G^0&f#2Do]-5"j>__p/+XU+GP$NE\P=8$Je"n)Rs_]g/.+P[)(<8`.(k($ENTP(_Ls/TSPeZ_Y"=%88li+>1\K[kn\?SqfLHL?h+uR9&ZdbH:qqkp6m4s`/ea?Mk6lCIV[g%TF6<%VNTS5<77]j%TYM!EN3Mt;P92WW0.DFUjA]rUfb>&%<(ZO@+ur5YX@i&V<T-lDoRoh_:GcR"bXO$QXT/.qVrC_1.u[l5L5&s=h*WN*nr]j`-i\IKOrQPXCf(gO"p"F,%Zd8.%fn4brmp'm%m&ZarJI3gi3!1W&3]'^^&;bu#c#kDUOmXtt?o&f*Lbnr`FHT\^-ZC_\qajE'J^)+!Rs1$),:c7Xlt8IQZ(Z5!rZmI]bm4^=kTl_@%$H*-eULo=T,b=0dS$Ut#8ubBr9[kQAht+lsB;TF.UoB_\8UnG0Yh"\_1P"?55G,S"<[#*e$c)-EcU<&5"5KA'0G;U(S:Gr4f8OtO%64l-kE+?lWD!2/78*`srIW5^"HV"*@>W^@FRXf1$H32m%>pU<bTHP[)!q'pH\:/S/))VD3RMin'3ph+<JfN@=2WiJ6U!1hu+m@W`%Y$JgPUgYd!V6k0=OD6K--Id=*6X#<Y#Ijrt6LQhB"l*+:\9Y6T$E3N6HTH.!QEpm:CFpta[Bst:9n4/g>A3fk"Ph:&3!-gnEd$]#%e?CGNh/f?Ok\+8$HY/i$pAB@Cn[Edq$JJ6n7=X'+Vr`tZYTrT(!.q04[oWRfpPk]GL(14aV_o"u8'VIJ/O91"M\qY_0Fbladr->f%GW(ChqJCG:N#brLICf`aZHF4ifS=[(^F\e"X!rmLDB_=he;2^L>u+clk'Qe<1EmP0G/L0d'rrq8\!M]jebU$QD/!ER]R)s3?5c;p%8)GrBiU4AW^l#ihJ41T4!1%0$D^-r:4We'f$3S6q6i5YAU69VU'%*.s4!hQpbgjq]DeEf(@d='qph^6>dqld%-]*9kj%n'R)KItF%EDJUMKud*N71OnA#s>e6D:mi:6GsDUL@jER]d,WHeak]8Jjie]!YWle<mrj__+6E9QsKLXSm@USm\E,1eQ8h*,V,M-T_<NHE4[5!%o@s%=`@;ZDUDU\/b1W>i$sq]01'X^>CFWDC"la,[GDbHW_`[0?`&]+'1uAsuGgSX+\eIQ5%XEj!Jf$T8U<'JB2)89m;F#(CTsP8"%^Sp#"F]B7cco+Eo=+/eEF2@;YqUb2W7fRk\dMTn:[NMB]n97E-mUjuDN%&6'A):Ek5ErPKO-1W&]!_p$UE8fCqSS>\+k@"1(<3V&%Vk0f!X1/g:qTcPqh\k@(,XMYT*;+tFk#R=UWL)%]*AIQ=m5s"K:5$O(WK/ITZQCF3HL,MIMnIft=@AL=j`[fP<O;&HV"d*6;;q+1%[o10M0u=\f/2uXTK4AJOW!i/*CstY&NJm<91!/FWMsb:JHOI/l?q`dpqZ(fBeqBej<mLYclM,?KOY4$`^&(5FHkn04dSg?8Z3[AD%Nj&Y3mr4FTr%g$TqXRTrS7RM<2//TT-!2P?8Fl4E.29Q,k[C^?'Pd3Me#-K:p8[s<-&g"'I27t["7K,+9B%@Z=@I2KoiG2c3WfYd%hL>kZ$IFfu",o-)7N-U.a\%+&,nfdY)q>\CY<!"p5L>)tfmoI)\2UI'cHborNsobkkeNX3GY3Th3QS7JB6i$eBPYsnnTc:X`Y?5N%4S)8Z$]DBfa/Ot#jD9)=9oBF(B0,@VQj<tS1q&0.rJ]<\:ojd5nPM"jMC)I]UU"R8Lsdc3]CF]aZ7D@4Y]7gSZfh#+W<,(J+r^5u%r%.gPa.Ig89O&Z$PnUkF@E\cU3i'Te&=m$keZJ6Sq"`H9kE\XT3tL3NqrnHKXh?m=).^gqfS[iTV2jep;H$5"o%*=NHq4H92(/"[%=rr1uG[E7gIC<V[J#`>:>^-!0f2ASD:M@c'_6FOGoWCW0?SXOVVf-'6D$LasHb+p(FFqKAH:q$bWo[s]b,ih4E('3E"gdjc<se.h%DXI&[l,G7r)2roSO`_*fU9>f"8uLn^G]rmb9J!"p.%f=n*"H8,-2`,KA,`rT[ik(%5KtH-P*do22eP)t>+0e@iR1tc1_>UIaShOF%LtJkQWbIk%$ukZ,B6X_.`_;OjjDuWA#so]uqPj"L!p/ZC#?5c3J`;T4DTYo]TssAad_9Wc2`M2C_AeN9;bgmpqr/)B>*fac\F15Q%iNe^:h?`Q7#Qqfdg.00Pm>*JGdqMf#/#>$a-+hb],qWZGTIL%=9@[9OUjc^_30T9=@8at@PP\6`5?"V6!LNbn4V;Pg=+PeVjhtHa%?.@U!`CtsgoD1s@n@`h\1=gnfCaLelhd?2c_tAQhW%B:.!T?W'KS,BU?5ncb<K[$#![og,i1Q!6G@rkfbY=c@\s$-=&Qc#\E`kr\%SHB!p-JTIB!>3Pm,Xqnh[>bG;>`ca%?A.\;&RRTa\W:H;l!TBS?L4UFleZr<?%=Ia,2=C$Aq7i--[,()G3@4`k%fmH0UE<5<+H+t%7M#W-_dK^CFrh*D@nGf3&,47$ZnCs`:"@/hdM99+#F2tZ">U\%MM#S.>Nji^H!r@OgWl%`*XD=[hbNidR_4\9]i.S'X/og>EPD"2%2WK>>H=o%H%JT02/$_WHBeC3J=!#oBg:u-XN^k9ZA^lV8Q:I=35;nV4'`_"1"c;^H]85==M2Sdj>ROWfPe`,'O2@U.I/AE0:F\1n%(W_7`,!Ni8AHrnG8?&a+78-:TaMJY+N4't>K(SAWSa[rPP.b%2(%4[Z@6>+$lm_EAj-<[`T]b&Sbnr@X[KNMC!@mu7pI9@/6KF;[%Q?tOUjKPW&TTG041_V:f`/*Lg(^nWd/;C,P*ZMk`6eYj@3S0`'3!d+/^Zb;Kmar4npBRKp>S,YOJYP_j>mBgVi$3qi87i@sZ*(i+%_T;u;"WiO_>Hk'%4jKSKTYis[*A%i-[L-L4ZDCSG&[I3V^1kbC9l[-8A_be1C^Tg[%G_^')Jo8*FCf\[Xb0KeoF%omK8;G`F%,pb%3%@!R^TN.pMjg!T%:TtqiRU7degPt."Q,BH]BQpn(81EB)gi4:NrhU(K&O*QpP7ieAK>dt@)7K*[M8,Q'7_8cNB(0R&A!:\jjhdL%O$N'jE*[NK`)kR;,62L!8<X_;)EK4]r#mB$5>dMUTSVqW5=%G-5a_Kf,HR$-S5]+3*Dslea;KO=j>N07pqbspl(&m>,Zj;0ClP+a%=F]>Un9"jp^35#?;E!]Q)Irn\/Rs04(1R-a8?s5A(0#?$`bMt9b7qXCC"rbNWH9o@P7TkOl<;e29pX7B8ooMU*]cZg%`U"'#]PY<%bq,#`n@;+X^!oP#[;0\hkj_8n4RHJ1`J395!kq$W*&`G00P.gp40SEM+b%PXr[k?\0p)o^mB%eV)ZSU=`VhMS1HH18!sfK\n"Omb%b6*o+$+iD?;tF<dj&(9KdGmo?'r*$"qGR4Zk--Jn@U,'d%@4-TE(='>5+4eUEJGp!R0rtGA+IYT>]#hJm"oDI)I!$eL<5YV](kIQ%+\!9Q+AMrq('Dd;<M&$?TYV+RC]2T,:70$ER[i]%V"0A+-M?Q?N"pH2\CsU(lVM%'l.YV>]$R4gYGR4^1YaSrF:!j8M/K0u;Ar$?%@Y<0d%B9s@Y](j#K5_Qh%CNt3/mCng`5<g/T-QA,aNaUOp?>I6oXU2[=uGQ"I2jNQGV^u@TF52M!!tEZ\Q@;"mV=iVIRqT77mE3&%JTAl=m$,4G^F'>5/@\Y-(ogMHViH4BYVW97[?p*n^`0"]41+GYM/aA\#,3d_U/^fk6%VBe/)_u2AMHdlCH26O)ESqeUnT>be*C0F%(Z6q_1l[p39HST0"h"6:I^?:9.74i$V)WTM:sQ5+bB7JK'k$Q4W$K4s$*r+B8d8pJ8%9Pf;u%<&7>bl>eV>8:IZmT+=<ncGqBb.g%gGLQ-b+*7?kO?[XX`,s?Z07J#PhkeI`n"&U<jkT$VTtT%:u[gj&_es*@@eW:.C,'IdWG'I/@T4:OXt^S-e>E:fe4<^3:j8G$HNr%%D2bujP;2Vmgl9o#%"9/dh2i">)L%Yrim7&h]]AD]&hAA5'?/KXGBefM:,r]qM7tE!6-B?#/"S\M.;OL=aGF?b:-m=Bq"Y1`6ZZGs%f2Jl1)Sjr"YF!V931J:+T8TQg-qTRtr5=FsJROCd;s<XknUaqaBonCi4oFs;AFcm+a2[clA=t[q8sJBSO[m3:S3oE5V></#&?JIa%1;Q+ijq4&G-iFG6]Nt`("[`ub&XB6u_\1Ml,)'<6Jc>RJ/O1<&BYg90SJr35nq?;-40M-Gk`kmobq:Rj*EK]^qF)m]6I1PMCeUf_%fb5c7YcjMenB6d7MT&?u\G*7bUp2@$X;W_(emb2fIJga0+]In,0`;*)cKc)jh*b<q/f(Dt:f`-Y6B5M&'!<UcW@mhOC\[/*CtH0;%9-L+l8E"Ytp[=r%*n^f$)7VV*hXIOgY_XU2?"eC:^`EroaXNQJhKUG2XMagNL52,D<4I%hADD%p_iorFGV])Qbnr^%X5peQ*5-(t%DT[ThQS5E9%K`OGM,`=Hk`l&QiD0PpAfq^Y&$h[6mUO\sht=^)>"V=]kY=X,a39"cH[8L[KO'2U;5Op3gj^D`?SPgN<I[8]=Y;e+%`W1/t"X"C(i5l@:"8SWraCGe1P%IeY0Jk%dFlK(-`5X,b'H.@7]-O9ThQZEa9/@5u@b\'\O[MI$W/1>*RWW>8lmKrlJ`YOF'kumL%+_^-K6_?W:c*m_^JTX-^aE:!5gSM[*5$s).ZZVr`>`#NjOerGO8<PV=GHD/Yib6ub/3>FoNZ"U)!T:#G8U@9.""FY<U"Gi,TF'51%0oXp&46L$0=@Y9LpK$MnVmfkW"0m_u%2Z!,\hqLc9;pX%pPYu58SiW>1rfGn-e:),s22f>_.-L=Jg_Qb>`gX-8Ou$VcEIY.ZnBL!%3<:,jrC_'3T^1Q.ajY^"OJ,`9<P-sTFU)W#LboS]Ia5/[TfCYhO#\s<g^\i)'A*SE&;>G7JRWsc>PnOk<MUoe5b<06UB2U#@[6(s%nI^nGn@]:P:qC7^VGdHA=o!K^fu8_D$UEk5B_Bun:F6u.fdWq%Z%qdakq)\hA%DIR,@V.[\g1H6L'??^IQu04q3/]t';O1f`JZlf%5n?SVi1K^56YJ;ojKXQcT6plUN!\t*8c<]eaXqdX=@r.jLi^PQ<`.SGR'&YB`t\H+-b.]ZNpf?X=:aS[IDE$el.D(6*/1+1bmoNJ%7f@=jJ`I,tEU!=IU4s5CcYs41&e0d9e!%'tmIYIT])L/Egt5Df"XinI[oF\E7l55.l27g^d9K8\#_FNY'2C6-1Q[sFG9MFo]1UCc%*b#aclBs,>;UgUMRS3aj6H!R*(.10onO,=&$Sl0ZHP+bXBli<E^Ztsj(_clgZG8!7%IIV]YA.^&1KrRbXu2"BKSo'>D[VM^S,.\+%OkX^1Y?CErQG65G4<SF>K;D5fCfW:A<F>X@h*)h&S#E_sT(3r'^/=5\Q49`/_2h]U+PVl`,!j7&$t3mDF]P;K:f'4HNstj!kWp[,%)8&1`VlF'd*=`UV2F5=gCa94iT&AEC+;<@8OBJ"d!lO?ba<]\bUoNEbL9n.>H%Z?bDkSFoXmd)2$7O'g?<^o>LhN5,ed;d6YJ$Th%SK<C%^\BfWV2<gE2aJaHm88&)TQ5fN#l4(FVXqdaTBq)X_bRps@L;=+K6sf#M1H,E%+JKQ'G_/M>kV1*]D;8AAm+l1q:IrVU\L,+%8eM3iY-%t\/Q<$^d6rGIP,/KU<!2Q'/D]Q`I&=:)&Ce5'AOA2*eUd**dHtq=.+(dl9G<eIGsetD_'i>['sQr&B+r8.3Vc5:9cUs%%7-e;:(-\=j*6ls?T$P*VOMWUBDA]-n"gGa^'mSbOiPtSj9p3rHIM18s>j:5pFGnY:V]#-QHK9UZaMR-j6Nj2Yci/t@*&o@JaXjrh%#Nlu1%gn<c1L[_*8r`K,j(eqrRRHauWWV5:<#-tVHp+:;H0.j_MhIfh#3N&+,*[<tfcJuWUPN(bNpjK&2rk+p[]pr.fI,a&O@,T!%W<>)!r');<?-Vn.-SQ=<OMPU@E/9,//?oT.6O65M]uEiVJV_(ALIJFsC8,2:"Kn9RE2>GX/;B$F#>6V\T!-6[\p"40*#-FhK1IcX%N_m=P4o*R+2&_#22*779"3_Kin/hZJ,f6>`"T43#.e_lX8RJrA:uj7F79UJdQosdhp9]]eM>^cc`R-M$F\"pg$r64+%'L@rp2hp=%R$.J?D>KPk\@YGKZZM#u2O^27L*E7&3JZM,YZiD"X5O,io\Z5INf+mp"TH(>['"IlBr2qRgQ5k1djfQe36nrRIXKkL3dqEt_*HRL%!@B'6;;KIadr'!4On-$L%^fN(#"d[tk@d'8`\C"+=eAoh#0WX#0Tr4CFk/t><IC=r6Fi-3aU_?-&OMe5Fl>eNE`eC`W?ZWb/JA0n%G$)V0D^Y&3\c\'QA-r.Cd0+p(_^aaF_',eu.'4I>_ICk7)Qg3a(R&h[A`0e?>27i(TM$u./@P0f-Dec7eJ=</W(1hf(X+71Q[R#'%SMTaAe<P]hi5Rk\W7e]9Zhk$F0jLjHZ8jb?64QpjSlQ$ZaG,a+ha:knrV9!8Dd#Yr6Y->ofMj?6J,8D=6q^\pa%>#s#fF6R""TtR%I;O1h!_k&XX`b`&QYUpgT4fe)@rLZOK/\C?*LtZm!SQ\R[4*_NaFIn+RKdWi_Eb]h;k]tVXJM(1n1hjNp%X-he"A<p$LB7%VL$2G%a`iC"%\0Mt*ZUd2#*V.@mXjP=`dFM,cdeeQ<7$l_S99E4nX'KNKo9NUb?V=LMpSpO?iO'b>/>4`l\*ChWjAD[E<GVij)uKf`<Hb5%MR[Re)SA,eOESi7&$J934@HO<1l(@Ne:M6^.rnRdMl/SE]6Mh3mMX<^pj$0KK-nrJki-NZj&77!BZpohDgrAQCl8u`khccFeW`9.%faqB9&N'k.G<Z,AZOBe'kblrR*?sU%eW<=\&bGW""Y@h^!GW[nkTS7OP7O5#H+T+1FWlhDgqY4s8Nlgk5]Yk)f!A,^r4`g!',g"n%8MP3'XQ"r!/offFdDdLVQ,R9k+]a\,>*;h%0Q'`MbJLW3^1pG?g;hEC*uN)1VOg5Fm%WXN9Dh>td0WM[TtqE'g"Bc!pTYQq4!Un2%NI$RpOZ<[-bCL>?^E\:K;=*%>Z<OL(Lg;B%J.6i^(FE:QW!&7frSA_F_V1]23g>B<(r5@dC.,nKjAK/VNk"]h,jsl^!Lcui7+'Fa%6Y4q8$-;h]CT]h:^AS%.gQ)SJ8"G\Fs!dIc$b%Df'DqV%&bbReL0S_aKB#bb+@j_lK#8tt6c?H?]Clo75.5p<"Bg+j843/>D=K*u%r^,`#R<Z5aCIP)F2.!=^F";'UO*4,2qU;J&;;`"Gre[b,O2o8%q@pI;m"BMEf97Oqb",.er=(qe!t;_;D=W*LX%N.KP\)!/Ts5gh%B[l[-pF4.IS]V?U"aYtcg\:A3NK,Va;cg)o8)uu";q"$F.qM3U]&P\@6s4cp$)"KCM8l0$Z6;2f5!/@`V`ZhOYIQ2M04efi3[L.m%Y2Dr4fCSrSepa@`,r$*]6s!"VPa"2-O)UQ27(s@E5o2Hl=!M0<bi<U1$=Yo-g':,FAj;XV>n._tij`n[*N."Cgl@^H)3r@4Hsg0C%65,s3n<]dX/-VV.dAUMknJg.%4IGlW.Oq;7\5[?Gi;N!@nS?\"egM2KTo_3U;LqSI+CZ;p^(,4=im9tCGV7I/3HGlIg(lFtB=f$Y%;4?)&8se`?\$q4MW^Fm9[YK1[OVo,p2CgmJ[-uM/=AhAoESZ7ifEX6r8qP)_k/<gMk&DXD_b;LEYX/@iIOt"d'8B\aQ"^.iiJEj`%nEjbrQf$;)K1P4(jg;[G^Z:,0k#Mr0bW,BU3X3f@?7(m`TEfc&:ku6f'ohRR,T4hgiD<<kTX%Nq;M6+3Nk)Tk9Bt`sCJs$O.M(gR%*I4GPmMJN^-<!o2-Tt_j,^<o:6hF,SL&1](nfDD\*@+uF5dEEsN%$<X^iQm'aVcs8+JbCoL#Jg8rZK-VRoi'b!\shgUkk&:8-,/D%I1`VB4#E-upl\ZORG;c)-A7e>!cIl3b$l.-C0)d`68=II%G'G>,j1l"_Us&D)tNBf(63Z/k5K"BXT+%tf!5.,^cR@g&!Gb"j97s!%MW,NmM3=\nBjt4[=J0'H$oPOt%M%"g10Q#fYRCc2]N`)lDW]D^\b$S#U:Cb'A5JB9i8!YtX2&Js;D=CIQ,eNL4drO.PD6=)7jal,%##&E`?r7-T1/qDOLh7:-gNj+<hh*h/Z-R;#`.XLBNu45?'<9%Q`WF#&dBF8XIYnt@h'0@7G(FM.a\h\0H2WXnlmX8?Su&1'%7s\R%:0mGi6X3M")@Ee07G!@e'tiC(Jhf)%+c''ICOti"Pm&j=A1\-_L##b%9.<Qf/Tjn_TPNW]8Z+@C4c%-9O4l#"RQ*T\njXgK%Cg;I%oZ4jJ=9FFl4rFZ@<@8J`m8BI;E`:#F-rGc@=C_diOd#^'^`_S8`X/QR&,9bYb#dM$Yq,(#`]$VJ\+Au,-%)1^?+/`<OW4]?dt8Xa%0@;=or]6$deE4Y\Jp93n(AP_OePmO#C-+05!DW-/Y"tmJ=IHV,*/(HITPu+06ue4\UHBBR_68DcK<BI+=F%bhV@r\m`<crj/p*Z[%bgnUT3skEHd94J7pARJ=qk=emR7s>9GJu?o_"o*G(]@/N8\E$63_3L':j@0jOq*6-nKIN/?ienYp"FOVa;Pn1'alOi;0a:?NfR[&%1/%'TC'm.YYO8Q>9UVH7j9_Fh(t^(%iMX.?F`7s(.Y5jB0'DP#PhM=8T/aUupb`uDFc+KFM_lK:)1tbCAZQY;#7<K<+eaW?Y,;nH%1dK]1=K0N\EOEXg*`L?c$=:d_Ssn$46Kuk70b5+F)/Gmj3D),eJN,Jg;0M=R-uLp]_tB-"TUt(\?,_+^S>FtU'dR7G@ma,R/aQUZ%abd(Qn'Letfnh#?+C"J#[Dtgi5%2i?<@'H<+Pj9hU&j*PD7>E!nsBrD18h%M=0T_3hT-]59W:jD@_$QZR.]*;fqNrK:Pn3li?5T)%plZj1!lHF7H,f+r8u8X*"4j^Lr2,]P=<h*^k?qV#SD,e\9&fbK1ub;#qQW=)!E.Wr!N:#erU2[CqsZWuT#^G&$$N2P'+7W\\1D@%%8k5%q/)#tMk8<nEjl_),Z-E2bp)c)/28^DraT-5Noe:iPUd_UW7QHnuJ9.$;%qCRt?f4T2:lkPDO>T?[pP6m9<9*F<b;1_7QprIG%9[a]c&&qoR'B?0L.ag?d0$V*!'I#gOm&HYnG1on^mIuYumk8hi^LlL_l,a+Wi`i"]9JMV0jk5X@h+1eFM$?(S<Il+-g;/qd^g5;<%?'-+'X:P)Lq4WaHkF@*q%Zq@FR)[TP0A[*ONT<k[>d5kiHgeWJ@_X];Vmi91'g?R1b;D)[PkASeQi`jogS`7;2PAorUEk"B@\F*g%LJNo;HPuT`ciJ&:]m;=f:Z6<RQ56p3>o&?\f%B[8#!WV/KWk5K>$DAS,_\La:EI0'hK\nu;&J^\].^rtc+=NG\J7&*$SF"u;eK/j%oiF7O[c3eB%Js'JF=^bc3o9iEC'>tZ<6n8Z_gd]T3X+3oS@;&$s2Am8:5pHOIC,>e(<t>e59c"AcP#S#VY'9\6e?1aM%I?Rrntm+%_4p[Aodr++Y7mn;lSN>?]hW.l4SL'rmq4)uZB/e9OfENA7QiG+RGMF74tNhR[bulI7in*u13UMh='/QKG@9Xp?kp=p)B[&cI?Wan%dgON/9ot1llTC^-W#<m$(9_7r:)fR5U&T`e686`@L*rZB5T^$Je];n#Ug]%1!2$e,?.SlY(^F;"r?,$L'<N"]IYf/+Zt)LtpYTg)%F@i,mVZKjVPPT9*j'^4QHqAXt=*dGoM?c6lepA)a3>?[3Ct82B$,!&_ZVcRAj]0!:LL2fFjaX1tot@*Ggjf!NN!iupb8U>B;X(V*%Hg,s4"FnP8kO$4Ej*O@Y7t9R`oY2ZH\ri3GXS9)hkRb_ipZ*6XqXuak/1oE/$fn8Y8?R*oR1PN17SIFN)na;R=5Nc1HgG9`!$_XJ%o^fc*?REt_9Ie>;mg2?.p#E4kFcN@U=mWBS5Ej9+PCN'"R)r7W-gUaM?(@Y+SX+`nnQ8:9&hj(;_jF"CmA7_AHo,P"=1L"Rm:A/c%r3,Us@JWj$C=6_"!os1Saa+T%alb;(j'@k/JTjfu1S-s.H@.r1C,3CUUYu%0h'gKGQi`<YBgsgP(7?MPRJ8pY"i=Fs/oPc)(M-&p%Bo+=*J,BT9-Bn8>g7'?As,nXMK:Des`%a%>.cQpKE$UZmSE!J7@n)tJ/h0Sd`3m]MJj6Ta=:.[QjS#PNd._G5->T*6Omdk#Pn!MT%9"mg.b]EBOI*22alJ$FpE>4.8QT3M(6SLQ4kJaSXH:^TrjThJTH=+>5NjNH\^Qh,DINM;r.Df:%\&_(@8T)k6O`-duXl\'6M/#GO%guHh&$+A:u]OQl^R+l.m\`"Z<osT5Zi]ZL]#]",7bOEC@rn<mQ]"6UWKlqk8,"-8@ZV+mCUoZ;JLa#f:-J1Xq%aBbs3;.Tnb(\Oc%@ulp[L<h^i^-0RH`:cIlmJBicR#g"80YNo@@rH$edlKUmd9>k>oto=R3i<i"4V9)Sd:O=jG-nb\A057F"cUWg$aoSr0"Zm^F_id'%A<-Xsq/tmi>Et[Id&e1a7+&G1r$F=="QomgEpEgtds!Q@AKPKl7YraC*cBE$K[a3*]u+r@$UD8n(sq;_/JbT.5,D\/hpU!Kk1S[&%!)Cag!Y30<R6D)ZZrW_q5?[:VkJZp79h4j\/:;KP(@_]+>ZYgGh"[_sCba048t@f>L.!GT'G&Chk$[;:<H;QE-F`63A9;dT0+'BW%//+;`#q/:gCmP&kf%.$/SiSTFX/qB&@Te)0iI@*(>C[Q\b&nPT`5cR2CY;t`FF$oYL6n=8L6o5h@hQR9b",aEj^C@BTHo'^g]g,h%dJL=G6:_pb@EFl'afKR(Y@J:-@_c%>E)DHfnd"&20(SZe9Y\H$:U&$er\iZ:>?O2!G\B;5OU'C!pTuIF?qlb&?U$LR#.LW@Up\2g%DN_U+((RJKb\_<eVlH`#0lGd_];\;&<`4;E3pm:;YPD^#6WAFDessb7N!Ijd)[LjN-6Dpjj_6lLY>(1)(EN!0Hjnsg<"d/%!B^<C%-.>bW"'LBO"=E62I/eVY0RKKsW/0!<>muJu/bLEAI>*.&N![l/>^IBY\FJbdM@?MW`QT9`\Su;a_'$81XCJ`%C6(iWP;BpY,\5;n%!*#Q-L!Kh8KFn7\:pe"pP(7-bZH=V;=b(gkNrMNPHm"Z8/B-`"__(-[kJMeSdP!48Lj0m"AY%-R)gf/k(\uTra\C-i!c<>#"(8.p%&Xf'+A^LN&7%aN,DD_CZU76LX7,E[;Ypg,HGh2XgI(IenfsWu)ZJ$O$ACTt0-6`S[fSkj%ZIMD\CGS6Z@)mM\K%R(29N$`EnhmhL%H9U*4ocdLkW7>X=l]I::guH8OXK/!W4^KUSiD!$R4!WPeFBad!eNg&#Dnrpi+n7Cohfs'CPH4P1<+Y/QhL*P9#;KR#)6+Dfo>/Sa%q%*MY.l9Bm"+(1o<clG(Xm*U?^;-O7(6PJ@9&/X4cIGJE))A+ma2B8j?4;:"J>T5Uf<6G^eNdRcqD:o)S7:WtU[1ALU^@/%O3hi"%`7-nqLF;$K\Hf,8?>A_?qPj0jW[\LLM4<4.KWr;Gi!,NT(/.H$DB;%T\s<Uah%s>->K[1&9K8W[UGL8pEN%%^*"HDgosH4,bs2T/%#uBCGC4bTYS!pILoF`%9j#P8jrA;k:ba?8hG:aY18ES:Kj2(eSlDIl3VJ%\C*+tQ;oqLV88pI(of88U*Ko?#^MFe2>U/HdX=r6fd%r+jagR1a<.6_EjUF'nk+!-)k4L_:gS@J)G#.[3>ZoL%%i[(EQgOk3m$lOSsQAk$YZ6SLV,ZI"kkF#fng;aN%2C*joCGNrUfhX?RI%SQ<Pa(*>eOZH/2s]`9^:jAue!+2!NjD[t]NUQ59%V^Z$HJg_g^XCspgm37-]V**U-]'3?`B\;j/;Vd9Ln11gF;U2c]mp+m;idXQo%S!>P`>@L,fhA8!Q5(:`iH6_ZC`ZFW#d64CA?T"u2MX;\.pghd&NeK98qKW.cG,(:T2l6/$ebL<VZM:hM/U:$.-k3JWNPLH23KX+R%+WcMq"'dlL`NDkT9EC9;Pd_]"0%XgHYK!eHGElS+]CR1QZr-o7bK>lQg`7N'U+^*HQMCgt[Gh*HC.R`(<qKHN"U<pKqX!FFMkVX.%s8%br%a2;Xp0^h%?Ijsk(YqY$e1rd)nsFCf&\Fh,,S^Thmsm&FHGL9ec\@FnlQP6EOdg%"<q&nF"(n#B!!IV;IkL8m6L[N2bERRe%10I!2Ss*T$;X'O.@ZmF66*X+!FNH4kKk#4m,_MuHXmqm@pYULT$[Q/?5k"';%#&RpeBH"U`Ifqm+cD$_l]iVlS00"N3K3V#nmXrn%B=K7%Yu=fn5V#3o__&2>-'.QOP07gqmCd2`AVJB#<*=tP-@.nOYYqY[KI1Gp3I96F5/+3/2a8Gnni"orL8,9d'@.uPC/"dGj,s/"%#$n3(^=1J_.ZFh_W8f<Xm>:]G/';HAS7?nn#rp,TAC_3I]ui#?:]6"3Xpi>p@@`E<BSa/OD8A?^SjlHp0:&Ih7(+A81+___=2Uj/%Pp)2%l*<'\b-^kTD_@[^Wa]g0.>:]oP7YgQ_-BO303m8\dh`_^;7'>XFass%"tc[5%l>0rPlX8Ed9H'LL58W,"u!Dhr)#:B>8]b8%c?gPB1rD(l3ibr/i,WE(]?YJ-<*U;oT$m_D*m<DJnU_17+dh'pZs+1?hobi!PaR9o[<#:eg[!lK1rH"1V@fHlXe]NFDY>6f`!aR/%<5&OL<&u?lLo1!OOX\qc9,a40[k^Ksa_A3`e..X",h`f\BYdLl$:A7I`!1/]6OpXV1&7B`"6(J\L/[MHYjFj.hcJVi^.pY_+'F]9%X6oj>P9K9tHo"PA3CgE8"1MD"jE3LAHARcZhBBtEM4NsIeN9^_'(?e*B41qE01_N]Y(1O=c-A7Mk"hoX^DiVN[%;=(]ASDi,L1V4%b+Ju\gXpgcN,V_ZRn&3CX^Ss+Tudg7L.%[tb@6#eBB4C'4uC32fpL4^XkSP*[lpVZ]SicB_QBG'Jt7l&PEtf'KRhSAh]GDW^Ud%g%F34UapYBj8n_Ru^Z:GKE1qIa-.CA?uH[^>L1$H'=RCKXi+'aZQ;[h\"lD0\,N^IF\b7AVIM0I?N46et-"1\lY*nsXt;efEj^%NIt%4EDSd)i0qaU&ODLHUlN=?nl3i2EW;(.=*<A%E),T<6A>BQU_`baF<TD`Ha&_,h88Rc<DiD_'_&90Qg>P4,Hij"I[;t!>f+uQ^m2i%h(0Ugr>JI*J-3)(3D,Ep*LpO\qs2Dp:5P'^p7WVs+N*gJ3=*WI7r4#ZIR^q5hnV*C\I?E"?2-\$]_S3lP*81FQkb"!pjIi):_V9(%T$QI$F\uR6h0pUpIV@uJT'f2LW86jX7F/5RYs$XC`JU5%4:bqcICQhMPclft?oPs%N_"*S(d/d.4U=crAhW!L8r()\WXjf57?M;-%3WpqnG^^A1,Rj<q!C\?N+]6l=MGk@5$o6'4,UECY%^MOh,UE]X'/&`b,"rR;<WE]lan$pP7NPF!R0W+=V#7h4D;U^]S<&2g4Fn'[%X@WQfa9I;/IE16f-&lmMdJUqX7R/lS6s9phpVM]q7&&@[m.=,l<12'-$R^7n.$hRRogjfF[O!W:K_:g[=Kp"iNkNB"k&B/1ru9)u%/0^BPcrA#5)T!k/]ll>a^dGL%H/NPIe<mo/qtcaB9h<]T^j0LNEl(c3LA-GUW7Vra\8dBU`E4Rh$?kYoa1lq+$lQO@""?8OA$!(_%XcR[VU][\M@JD"m/@D]4AKiN.r+&K'd$SaF(2uPP;u&.P3Bf;L7eH&U"#\%rcHV[0H:Ad.NC,<As!HiP@QA:7cm,.skCE-dLdo46%-9mh#`m0]4as'16,CjZ<cUK9Jpt7uD[fY5c(C_=M7S:\+JSF4W51tbqEiGEVrNL[G[%t2W/D"%Y6_6u24MoC/[3\Jip\E2NBPtp3%I5pq$/Y$KI_XPR`RG(*l<9bt,<#fN81;SDQh$M3Ncb:8;BU9[Bb)<3F#gWCs)f?2PhZRQI+i#<neQMS0jp'(d8tV8slrrg<+dWcA%cL\XWh9Un1cp/\m3nu:_aUTCH?'7EL,BqKXL:".b8-BhJ(L46(s8/)C6>)4]];d?#4r0Pn))jn'NK6GU/WY)oC`549AI`t4&#U0b%S!HP^5V!"Y8>7(__I&.Y5uO!%ki(qg^bpCjkP>rj-B[&/.=.3*[i%a]kW#PY>LF6/l/8HM!N[->LV38NRpnJ*<<=$=,uB%-Q,^XE%N8sT`[[Vmsb^K;G73>#,)t7o$740/\U#)"SPOVdtqrf+=*(2NcqL0Jl[O/Y>76+@lMVecYNcN^<[97,s7?.^ohGM+n3;G>74SJWZ%2ci$B]Rm`H&([6j_bqAC.^%Lg"59XRDK,SjThC@_hb_YReqZrDH-;C2IF;ZV#>_f;*o<t=%@g!\k?AD'HproPZO72lU>;+4r,S^)%WEZ!j#rF'agdZ5*9?O@m\tFn!1G-3a#%]Ja0VT:F^R,F1VL+a<acLee.@koi4OF.YjJ`-K-UW_Dpr9?j1_HU9gc.^cHL-r=0N8"J%0\e/G-)#^o3%ILgMh'ZmPisXk>ag`t^[^r7!hBlRdD1JD?DAH1)+>+K%'*5"Zb/$q0scG%s(H2"I9Z%SiJouWHHEh*o\2071E9"7%h^0omQ$0HXNl37bTKX*TD&UtY+B>U#pDR\`O6d:!-$DiQ;n\I/--="N69MI>o6)`>@n@UR:V(5t:hUGh;@4?oUM>q0h`o?GVWjGl%16Y_X/N`'#";V7Dbo5i#!,D]WR*JH_Z0>PE9L/=^s5U5Y,FEnY&AAd.X`::+U>#[%g&*bdJ[9)3ZEK_!Hb9QRg.C6+R2(bYjMKI6%D9oMdUX'B%TPcJEK.h84@"853kJ?Z9E!h/CF_"00i&)uCapLn0,0Gb;/j4,.BQeIUlJAl7gU[cd4WV*/rf6[Xr_EkQmm?&X'j:<q%)Lt2#XG=ljn=iFa!gTNCZg4*i5`usN\$/CI0cAPl##f'Ec7`^4UR>pXh()uHk:!4;O6JB5SM?:8.FC.5(re(>/R[X49Qm(90*^r6%!r\77gmOfVOa`@ZI[G2gh>VV88\j=$%=3D"a6k+IiM&(^J<c>:))[/r#Dq_s`j,hTBa]O;H:qlG9Y=DSGb#Au^dbfTRu@?DOW;5j%r1<=oTHJ(bM^D(P_,1aHALST,!Ql1D1K%JH@cY_>-7[\gSfDk24Y"e2-/$Ac-;4kp%Uas6:h:9UqH>pEj]5,M))8K((Qc^B3!QH%%m0dEDDh^o`+S@?n<M=pG6"L/_ql(JJ*bbC%W!gCUR)\a>$uWh<rXXWCj\po&l_1)q+b^r096Y>]TlL-11%@f"#1p`)&[AJ(!!*`T%2_W2HiD4\9M\N+.kq#@ZUu[&3I@+30YAZR?]ms7`3"#L!#:U^I/#>9ROJS&V.lK<^c0@`el:TJrb<tPm[,+!SX,<-.WANHp8nkfB%'ED3a"=E:2_i"NE2Ae2<A\>NR)!`]+62?(iZ&k:rXQE$)!_NJnbYb7!>/ee1e.4X9MLu/ebR0m!nZD[NZ\"W%rjT'a<p0\`^6neA%_^7sWmm-gLMdHooOOmc/>J\Pe3:3aC[_`(3DMR6u"4k4%M#i-(d)j6j&C6UlN.):rq436%E^7[enI*>Dl*cW8=[Ns*XFpiC@RV)(%P^OQP*k$,X^1<uc&:qH*UbIV.8Ye#c.\K_H@dl<mp)kY^1bcb74X=e;D*,!PSFBI*8pjG=#b4[S)EUr$NTNUJg5B%;anrWKMNUUI%!l%on;,j:tVp)lF"1X_U(dfR5*,0_`MLa1k7Ish0F*u-ne]guiX97BI7"7;uJBH.dr5La5m&F!3r=H@&\F3?ua-S#TUY[FDc18(J%i2<5YrbG5Amo//0='c0K:XOJ9Jr7,f\:_p[+t3N3FUPVskHM]9$Lrj:=ZaF%1ai)lQ!BVTLkUUD1h"H):C&h9U`j5%WgH,G>iP3F%\d8BFHAE\D3u!HFTfm(BhB6<7rh%q[(Gu1,n5IK<3MZZYEp0O\#q'RJ<)6(_1<I/q!If[*CV-1emK[CE*K]cLnIgIGbL0Ap&ciaT%BE\pV^Y;=VnGD%PlkuFXOU:27M>sC]?52@WXCHs8;CM%>,X?_XSMD^a[0_86JAa]9-*<NSP8"WPMG7Lk.+ak9`Y&J@6-@b6]0ctH%Jl)5",];Fc6Gcp;bfo(f0DA.oW]]0u2g2?S0\d`#SL\H\O6l8OiJZE\_F403($%]-]!t*XcZCnP[ksaIh4ZaN.M4L/)RrPOs7rWN%TdU\7XU"8K:iBWQ;Kag2XLda,6,RgbX5iU5Z'S,`AZssPJo6!jQs8Ob'qF#HPSl$(_F:=9'q@q2aYL4SfMqJ(3K=X6Ziq=2c$--o%jL!#LYoa:Jf.HpbJS#f:F5j0#ZpLBM_M<U>:pUW$8l20uO!fseI+0eJ)"8BjS`V3(O,:)Yb_^hHE*=ok=ukCMk`KjH8S2;LR0K%R%a4#%HPe<i_#pb'*<-,S)KiS)7f54i9,:=%plI?WNFnIN,JkemS#YItJQM2OQb;,;P2I=:bnq2Ue_QRQ.qUr^H>Y471fZ^VDhq715%8W%Hd^=soOC/YPYU*11sW')QoZo19_MKlZ3[lM;1A)[fbfo\!E<g_Tu=F;[!GK]@]0cJL&J7^mh>[V$O5d`*!fKY4lY(r#^/<9Fl%H+rmmX<pZhQKEN&BDQ$s#fR^3_'p%$cu;l4_6%)C`2^(]6Q*$d\sa4/g6O@>/].Y#@[h)N\\]I9D?DqaGh@3eqEua*]%GEWQcS??%hRLY45%%1P\Or&scDX\?,:iaTB*EGab@utchr<Ab^s@B?)2eOYgGg=R"B<2FD`MFPSN>H<VH]m?5rme`mZ!jZ+:GG!=[D.;5OpPi%ORm0Ei.n=rO.n/&Z2VGl-0deH/,:R-B1P\hl]q>MH.LkG&9G#0C6n'`@!Y\kk"s0Sh$AV-I\X^nf9P,',?-EmBi"UMW=p0d3dL_,%6i'\TEHO7IONXht\GTIk/\@pmBr,'*qQ<PpI166"-W>=Q;LJlpiJc!;-fJ-g)$6\\0G/s`$'^5/3Y]T=p<US^B&_eI>nFY^f-PbG%E[j=\IYoQ<pW)tr]ueY?=IF:D/])Y.caqQMY,_<MK^\[#Z2S81>i0a<&D+BSQ@T+\h[A$P.ns1As-q\>!P5==i/1Q[-9\V+3r7Pf%&'KL+FA"K0E4EJmCjs=#h[bDqZP;GG.J*nC<OuA0:]<:f\(415,J]mZ\85_VpCK36Ul@3We><-'jSj4tQjYRY<(\V[p/r5Tc*`pM%r(=>hBV\]rUPq_cn).+"8MUUP!3^!JV5O]jSJfdmTP?qkICed(?oK<b:+M=?A^q])Fb-G]4@gMT-0na#mMX.(nktpuejjesML`T]%]o2k-4?jcAGYj*u$\R+$a;),gRWF,9>`Jm!ZA+EUKP)7@H2\q^eZM$G.5HqeYLAA8EU.'EOXgb%H)4R0)OV%R&%YX\lH)ZWn9"ks%L<>(W81?U[c7JIf%Z4\*kI=$)(FKmS3'Rfc^Q=^:3L/7KR/!kigFhg2MI[Q\Khko1=H6dBBX>:4jG<h]\;c@MX\2p$L'E*EhOJ3\%5!/W/K?3g%RPXS6(H"e;0%@A?Jpp:YphEoR"&0El7t?+%46mbPV&Z)>XaYg(=G_%J'[[1bV<H3Qr2>23Bu:Z^,4Sd4X[Jj[$/N'G%ngP)K!S'L"BYW[gWTnqAo?4qbE$S4&^sG*lJ7RWM^s>9nkQo3$PP.o0(8[Tm=&QLA<me%KU,9nFQpT;k/>VXO!ln/,&@WB!Ep<i9%0hPCc43t1SLB.ScD0=gL($5Ja,RQuBIeTYX/^++%'m^VMZr"?)qGDlM8&H\d<FnBY-uK2AJdN*&4bO?>\8ATSbcKu1<i[MDaaC,T%[kc#=5UJ;_OiPWfPqO/ePt3hZ]T=0=Scb:Tm,R[N?2Q#u@dnWDn#Zbbe(tnQjq8Q:@tDVd;_]&pbgcAn\Ps<6BcMn5&OcorTo$@j%^$&XNFNVU\H?d9&$>cd"?p[m@8#cN;?^ffhRG"hg)HXm(M.S%Ss$.e$aq1SN#Ea+Ak4t/RM'>0.:pS@UR4%Iu-Y?3ks5R1Ds0R0:%HXQ1dR8NHCr.W4n"EE?[f?>'k2/UQOAEXmX;6\2FNGE;3U,@]>+[60!_^P<*)LR6>:-Hh3.RbbR/#/S"gslV[Jo&*+hNa]1/eCW=%`g+L*9;(rj-$PTZ"D_W!i<Pp23C2IO+K*1R4ju"B/k`AQcr8]cR`,^MlTH,=*7<m"5NXYm_8/;Jc1Tr+q6.,=N$q+m!L[%&[?-Pg%?Db.jbn+j[Ui1:tJX%\qce?GTaC;0i2XtdNA;g*s(sH\]'Maq#=:kG:dnMGgiW!q?$mE@kG#uRm'unT8oEd.#Sr['fT1,>V0tlP$%W"_"P*jWmNU6BMjB^Qb4jW\5#4`lnKGM/AH646fXW,G,?j.<c0N6B?dXJ8Y8_CH3q3AkEQ0`ghlm6S#/M.nV8Lg5]#)9H-3;n/^4%k!bZ/"j.Zl=>?Iu)qs69dXoM#4EN./%+*do2"nP>`dOB4A\Ak;YWj5:>_FclDY?rE3k(/@F4'dp1p)^ToGU4r/S:Mc_0+1+0>CUF%p0%)LTZ/<H5YN?fif#'7rQFC/W$i,DaT)en"&C@`(^9A7VkB8Mn6)Zni@?#Q1\LCM:*ijp`l(H+DeS.3iRTaa\r&*7:=#e)>Y;O@%7UNU.A"dTgo'kR[HSdi)OWSHjK7RZBW],XkclJJaR=c+N/d<>'oZp;geOEBqT\l\Mr+3utEBAQNPU$j0<pcS,92`E>92)N2j"'aj%X$g4&U)=#rc&@FI[[9G.Kfh-1h3rqJhBgn]/rmRXX+n%u="FH.V(2#m,qc>I$24_bflXSMF"P?8Mc9'I<BP'H4bF9rd7/NL$iU)9%)gt;>O2T.?69\=36([a'e**f)F_9JA(PTJs:KKl@]Z_rBA4K1)+5YX<=Jm&8pj&&S0:[OK.1Rh-*^&u2?d)rD![-%lL=$Gq+)'bL%5M^M6a`bYOPApP4a*dG4Vpo@o<F99*MfuV4Pd;Y*ON?\kQqONQa#V-_H$rT(ig?V_U`:NUN?(URq0HJ\\M10-8bL(;\1[l_$u[[i%N=Eh3Dm*-<do!m-k`7+D-WZZ[DM3\^616NG%=A*drsacb+kVkh2/N`1nsFRTmr]R]mXAJQVWRAlpXhSFWd"q[OAG#\i0q)-<,Z4@%G4Ldl#^V\O@ttaG&WGr_EXGBtoK:;LhG^D<J<1'Nhf7YKjU&ssIC7%Ai?8+`H917#Y6OEoLHoQmC#S^^n9MNXM&'X\p<h1h<7K^"%[W]6E;?@q`cIO)D7n!.VBoorpRmd'g^X9*<7-NbhJBf=95bH5cp(]*A0*J0V!8UW.d*>8@A_EW1N=;u*ODn](lD42jNEfos6ckj"%D]2k0e)tq;Mb>CAo>7c[i"VobXunU*fmHoN%#(N<,@o(Lgh]_n3]65)8]i.b3/sra!iMk^E+Dd=/"2V$frsm=pisUu\?6+!4m2e7%Fb)$mF+)l]6ZD\5(0[Ke?oXVK@_P3We3(I3CXbJ=213@UPhBM?R$m8&4i0e4@jPVKp/R'/Soa<-D_LVM@RE;iA9-8a\'H9bUDXRq%K]_JId(:ZiP5^HPPpA`&4H%L@Kb/`Drp6]WjTupsF\;>j1ZKc;Z1!^0%b&-Y4&e09N:Wle%]rr3Z<4UFWRc-)$,(RQR2W.mh_BCR%QB$,nNY;flMk)YdFb6n[ltr$2mP&:C9QKN/DfCD+-YSP`$SZ;^MW$H]W&&FDl+2?2!B5"olNE#%'`s!].u"X%$^uK^XB]%c*kC=F%-CiASA3iA^<NtM\=X)EiDU9d(Gi?GTY<fmKU?tkBA=i&G@j!5=9FH2kfJ5)lUh!N>7,i1P$bUj85Ah=Q!mTY&(ajdaMFmQd`#S3T%/hd0r`MCFpMWsNCTukNEj`.c,TGeuQd!B=+0NB,PKs,MpknS1n37%@^@.jgX5=f%L]57kZn?aeDa?Rnps!j]E9+_tPa@'*28Ih+\%&o3qj.D\)pk`M2\$]eo&l9k&F6arStOe.fF'Fkp<IFC7t1eQ0Flmp2Zj\Ctp[ADiWL;7EFbN.I<oTFTYCG[3,0;:.9bGRT/`+*6$%>IdK8`i`WBq;"`)K@5WKr]7\n!@`D;-$@/lno2+N'%?`Pj79/T*>7l5NNP"G*<4qsIX>p54[AXbiWKM./bCIq_J>[q:9JqqV&_.:%PbE&:V;^n?2?$qQQR2)WNc.J:_gA5856Qi/($3!X`JTO0b;7a0>j#6M&Z-;(*HNEL\P@@A@!Y9XJbgp,Ekg4W=]p3MWnbsC^m--6%Q>d<3Bnm\HK@e1dq[;gH/c>87/6-2uC"d:q(4tBZm'[D7^1S;7=%aC7A*Y>L#H17b]_u?Vk^`>5FC=@3[+4u#DXON7*9ct66!1XV%a4hI0+"lZ/U'k?3JP"iRE3SPj0*n5k>FSmrZr7?,T=8?tTH56%&dmPha-4s[AU(iFh/IT([VZ-ulK0Os;4hB!Y5=%=#T^?Vnnru)%r(kg"ZBZu7"CQ@3DTV#W([cr*Jm(BZ#;tX))t:eDc+!8\0/6Cg^$n&JbDZ/9.hUPJ2U/q"'j[8A<iPsYF+S;-`%H*3pLSUQ!&]eI%mC$J+1p[6-gRcL]\oXj&=EneC`r(a5=2^nG3k2&&i^BmZSW]k<DD5PFO)/YFJ!]Z#M\+3bHh`,od6i1b7oK4$$661]/.p6gJ8o;-%68G`_C(2!fXtYkan5jf(VHAYn&Q9Tm$R:hiB'!7./BS,2MkbNr%1ea=6aSK=!cVKM:!@Q,;P[;R3mi&TK%g#khT!1Jg-F(rk=9/Y%gdtX!]MbARD/D'^r(\1rS\lI)4T&JZ@[FM$.nT`QC:K<H#[\lKCBO^s.L%Y$8=\6j"foFLra."(^LCW,aEn[+P%.i;P*o5%VV197%f[1?=M'<YdUNLDK0`(PKCHPZ[]HZFW3-9a]8Ong6Ld-4J2;tt7DZiO%i?*U'K+nhMHJ*YVZQg7jlo(GCNI0'c7RdCBXe3.aS'Nsn%7<X>6YT3S$WH<LKO:ET<Hf1iic&bk9BVE]d3E]'X<)#6]Y$q;;3l]`1Z0.tX2(RJJ)oh]KfjT.>^9S4hCJP`Y5c?W:,n(@[p"EAa%Zu4rY@?fu#P*+TKTd8^FBCKtE!j0D0FIn$ZF1SF@aOPO^:_kb<ni"1s\.E7S$m5`L)BCVo;e#'VQuHl1,m`/1^g+I[U/WqZI6]MN%+jEq*V4=PX!frVnXq?5U!>2!CEo=9<H[*6C[[?:_F-U3ql3oIr;[bWTHs<).gOEW+:f<lKcmS_'iIND14m^!TAuK.2B3HR"a6NN(%So07\UL<2p_iOS!&KG<G9[+$l^OXfH>[55<TcP!2FCg"pWXq^F+-'-;F+&&9Gl"c154mG>kc=r:N@LJb*oX!Xdg[31]jPL00o.U`%^9qDIY65KTV7"E6@Eogl^5n5L08D>G%DaT!,0jW#rDXZ0%C`Zj4<q8/;f"<5:'k]0UB=49?V,"_8^pih%oR`0K&!r@.:f?4aK`G#%8(0&aPl:F_;FJi-B/.D/r)J/RaI;X>$NSKP?Y"MJEmCt9$F>H(g-MT2cQV+IYi[J'a.QMooBMjf8N)5;!Ik$(#MCW!9GE^`B<k6X%[R+">KOle)IY[P0L?2]enQ%&1s41n*:'BV$X#2uSJmO_.fYp#j/r%,TKn-VOa`K>oBkX8h,-nX6Ia?luUEp55+f!=!/h&;hOih"u%gu1C@QdU`]XCbO7;\dbB$:If(9$2OU`4lm?Xr8E`]H9d95fr&M:8OQp.%!,G<2PJnjpZO*#]lBV%"^feh@aLJ5l.0RD];-k^$8(-%i[=("Fm4LP=QYntnjer!hG(J6HP&^!dD/qhA>5lO[s<:>ForCHZA>HRA5LNe'nnGj)'Kc,:f4_tUPkkBSrXmYF0k?I@Z)2"U9):N%fW]spDF^,TVfH$uE]8n3MqXkqSAGgQ(F<NrCWrN#b;I3:knqS7OM\GqaVVoejiCg"'J(JaU:!Fp$=!dbnWGM^Xo1%M7\QB"PZj4i%k0J,<(Oh3"s!+EFOIT1P_G'Gq%o%VN\k-0s#q!'%NcOSmVnXH0o\N)XG@rRCL-,TsO?ru;*aodb6-9HENt`fIIS"fEM+!r"muR"9%PZ_S''<m^>IFW;clg'g(fmD'R~>%AI9_PrivateDataEnd