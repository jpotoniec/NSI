%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.2)
%%For: (kyle Hamilton)
%%CreationDate: 6/4/22
%%BoundingBox: 0 0 234 140
%%HiResBoundingBox: 0 0 233.4970 139.5158
%%CropBox: 0 0 233.4970 139.5158
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.2.1 x197 R agm 5.5 ct 6.4%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 5712 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDEEFFA8FFA8FD79FFA827A8FF7D2752A8FD78FFA87D7DFF%2752A8FD7AFF7D7DFFA87D52A8FD79FF7D52FF7DFF27A8FD79FFA8A8FFA8%277DFDFCFFFD12FFA8FD6CFF527DFD10FF7D52FD6CFF7D7DA827FD04A87D%7D527D5227A8A8527DA852FD48FFA8FFA8FD15FFA87D7DA87DA8FD06FF52%5227FF275252FF52527D7D527D52A852277D52FD43FFA8A2534C224C285A%2F5A5A8484FD0FFFA8527DA87DA8A8FD04FF7DA8527D52FF52527D7D5252%FFFD047D527D277D52FD40FFA27722210022212221282F2F0D2F0D2F2F5A%7EFD0BFFA852A8FD09FF7D2752FF7D5252FF5252527DA87D7DA87D7D5252%7D7DFD3EFFA84C282122214C224C214C28362F5A2F362F362F302F84AFFD%08FF52A8FD5CFFA85321212128212221282122214D2F302F302F2F2F302F%2F0D307EFD05FFA852A8FD0DFFA8FD4EFF7E28214C2228214C2228214C22%2228362F302F362F302F362F302F305AFFFFFFA852A8FD0CFF7D27527DFD%4CFF4C2121222122212221222122212221282F302F2F2F302F2F2F30FD05%2FA9FF52A8FD0DFF52A8FF277D5252FF52527DFF5252A87D52A85252A8FD%3AFF4C22224C214C224C214C22222122214C285A2F302F302F362F5A2F36%2F5A2F302F85FD0FFF7D275252A87D527D52A8FD055227A87D5252FD3AFF%4C212128212221282122212228777DA8A8FFA8FFA8845A360D2F2F302F2F%2F302F2F0D85FD0EFF527DA8FF7D7D275252FF525227A87D52A8A85227A8%FD38FF52222228214C222821222153A2FD0BFFA9A930302F362F302F362F%302FA9FD0DFF7D7DFFFFA852527D52277DFF7D52A852FF7D5252FD38FF77%21212221222122212122A8FD10FF7E2F0D302F2F2F302F2F2FAFFD14FF27%FD09FFA8FD38FFA828214C224C214C212277FD13FFA95A2F362F5A2F362F%305AFD57FF4D21222128212221227DFD16FF5A0D2F2F302F2F2F307EFD55%FFA2214C2228214C21227DFD18FF7E2F302F362F302F5AFD55FF28212122%2122212153FD19FFA85A0D2F2F302F2F0784FD53FFA222214C224C21224C%FD1BFFA9302F5A2F362F362FFD53FF5321222128212221A8FD1CFF5A2F2F%302F2F2F3084FD52FF214C2228214C2177FD1EFF2F302F362F302F7EFD51%FF7D212122212221227EFD1EFF7E0D2F2F302F2F2FFD51FF7D214C224C21%4C4CFD1FFFA9302F5A2F362F36A9FD50FF4C21212821222177FD20FF2F2F%2F302F2F0D85FD50FF4C2128214C22227DFD20FF5A2F302F362F307EFD50%FF21222122212221A8FD20FF5A2F2F302F300D5AFD4FFFA94C214C214C22%28A8FD20FF852F542F542F2F59FD4FFFCB21222122212221A8FD20FF7722%212221282153FD50FF4C214C22282128A8FD20FF77214C2228212253FD50%FF22222122212200A2FD20FF4C21212221220077FD50FF53214C224C2122%77FD20FF4C214C224C21227DFD50FF5221212821222153FD1FFFCB212221%28212221A8FD50FFA22128214C222221FD1FFF7D222228214C2128A8FD50%FFA22221222122212177FD1EFF4C21222122212228FD52FF4C22214C224C%214CFD1DFFA8214C224C214C217DFD52FF7D212221282122007DFD1CFF28%22212821222122A8FD52FFA84C2128214C222221A9FD1AFF77222228214C%22224CFD54FF4C2121222122212121FD19FF7D2121222122212221A8FD55%FF2228214C224C21224CFD17FFA828214C224C214C2153FD56FF7D212221%282122212228CBFD14FF7D222122212821222122A8FD45FFA8A8FFFFA8A8%FD0CFF532128214C2228212222A2FD12FF7722214C2228214C222277FD45%FFA8F87DFFA8F8A8FD0CFFA8282122212221222122214CA2FD0EFF7E2121%21222122212221214CFD46FF52527DFF527DA8FD0DFFA822214C224C214C%224C21224CA2A8FD08FFA9774C214C224C214C224C21224CFD46FF525227%5252522752FD0EFFA8222128212221282122212221222253537D77774C4C%21222122212821222128212122FD48FFA85252FFA8527DFD0DFFA8A8A828%214C2228214C2228214C21222122212221222122214C2228214C22282122%4CFD4AFFA8FFFFFFA8FD0DFFA8527DFFA84C002221222122212221222122%212221222122212221222122212221214CFD5DFF52A8FD04FF7D2122214C%224C214C224C214C224C214C224C214C224C214C214C7EFD31FFA87DFD09%FFA852FD1EFFA852A8FD06FFA84C21212221222128212221282122212821%22212221212177A8FD31FF7D277D27FFA8A8FFFFA8FFFF2752FFA8FFFFA8%A8FF7DFFFFA8A8FFFFA8A8FFA8A8FD0BFF52A8FD09FFA87721222122214C%2228214C2228214C2122214C77FD34FF27A8FFA87D52277D5252277D277D%5252527DF8A82752527D27277D5227527D52277DFD08FFA852A8FD0CFFCB%7D5322220021212100210021214C53A8A8FD35FF52A8FFFF527DFF2752A8%7D7D7DA8527D7D527DA8277D7D52A87D5252FFFF52527D7DFD04FFFD057D%A8FD11FFA8A87D7E777E7DA2A2FD3AFF7D5252527D52527D52A8527D27FF%27527D7D52FF277D7D527D7D5252527D52527DA8FD04FFA8FD5AFF7D7DA8%FFA87DFFA8FFA8A8A8FFFF7DA8A8A8FFFF7DA8A8FFA8FFA87DA8FF7D7DFD%EDFFA87DFD7DFF7D277D27FFA8A8FFFFA8FFFFFFA8FFA8A8FFA8A8FD6CFF%7D7DFF527D7D52A8525252A852527D52277D527DA8FD6BFF7D27527DA8FD%0452FF7D2727525227A8A85252A8FD6BFF527DFFFF7D52527D527D527D27%7D7D52A8A87D277DFD6BFFA8A8FFFFFF7D7DA85252A8FFA852A8A8FFA87D%7DFD74FF52FDFCFFFDFCFFFDEDFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.b0f8be9, 2021/12/08-19:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/">
         <xmp:CreatorTool>Adobe Illustrator 26.2 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-06-01T07:47:52+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>156</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxj8yNDi1fyhqEUt5eWaW0M1zWxuJ&#xA;LVpDHC9I5HiKuYyTVlBFaDtirAPM/lrVfNH5dflzptktjduEtLy4sNRu5bNblYtLkWgeAPO3FpQx&#xA;CDtvQb4qzL8n7vSbnyNbfozS/wBDRQXF3bXGm+s90sVxb3LxThJ33kUuhKtirNMVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUru1gu7Wa0uF529xG0&#xA;UyVI5I4KsKggioPbFWNy+V/IXmXQrfSBFHe6boUxtLYQTyrJaz2am3aNZ4nWZHjFUb46+OKp5omi&#xA;aVoelwaVpNslnp9sCILeOvFeTF261JLMxJJ6nFUbirsVQOsa3pWjWqXep3AtreSaG2SRgxBluJBF&#xA;Enwgn4ncDFUdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSTzH538oeW05a7q9rYGlVilkH&#xA;qsPFYhWRvoXJxxylyDKMCeTznVP+cqPyvs3ZbX6/qVDRXt7cIp26/wCkPC1P9jl40cy2jTydpH/O&#xA;TPlTU4Hmi0q/RUbhR/RrWgPZz45dDs6cuocPVZhhIB3tkFh+eXkW5YLM9zZV7zw1H/JEy4Jdm5Ry&#xA;otEddjPeGZaTr+iaxF6umX0N4lKt6ThmX/WX7S/SMxJ4pQ+oU5MMkZcjaPytm7FUNqep6fpen3Go&#xA;6jcR2ljaRtLc3MrBURFFSzE4qxax82+dtUtU1DTPK0Y064q9m1/fm0uHhJ+CR7cW0xi5r8QVm5AH&#xA;4gDUBVkOiXWu3Nu76xp8OnTh6RxQXJugyUB5FzFBTeopTFUJ5k86eXfLU+nJrl2thBqcr28F7ORH&#xA;bJKkZlCSzMQkZdUPDl1O3XFXhmk64xk05LzXbjy35I8y675n1T9OW862n1il3WyQ3Tf3SSBncb/v&#xA;KCmKo/yp+ZmrWk2k6n5s19oNEutB1sWGoXjJbJeyWmpxR2k/AcFadrUgrxWrA1HXFUv8tar5r1rT&#xA;LjUrrzJqkbaR5HstWjghuWRJr6aG7rNP+05/dg0ruaE1oMVRS695i8uWpuZfMmr3cWo+Q31y6aWR&#xA;bqSK9iktkE1srrwi+G4YHan7TVIriqUDzJeX1prejyawmrWVjq3lO5s+GqNrXpvc6iROv1xobfl/&#xA;dIWRQyoTQN2Cr6dxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpZ5k8zaF5a0mbVtbu0s7GEfFI/V&#xA;j2VFFWdj2VRXJRgZGgmMSTQfLn5jf85PeaNbklsfK3LRNKNVFyKG9kHjzFRF/sPi/wArNji0gG8t&#xA;y5kNOBzeLXFxcXMzz3ErzTyHlJLIxZ2J7sxqTmWA5CnirNfI/wDxzZ/+Mx/4guZODkXne2vrj7mR&#xA;5kOmVLa6urWdLi1meCeM1SWJijqfEMpBGAxBFFIJG4eo+S/zy1KzeOz8yKb202UXqACdB4uBQSAf&#xA;8F881mo7Nid4bHuc/DriNpbh7MnmDRH0ZtbF9D+iUiaeS9LhYljQVZmY048ab16ZppwMTR2LtIyE&#xA;hYYtY2N753vYNY1iB7bytbOs2i6LMpR7t0PKO9vY23Cg/FBA3T7b/FxVIsmc4q7FWN+evNej+XtP&#xA;shqmn3GqJq94mm21hawpO8s0kckyqUkZFpxgbviqzy/5x8t+aLLUYHtpbNtLkWHVdL1WD6vLASok&#xA;jMkclU4MtGRgSp7HFU8mOktDDJP6BgiAnt3fhwUIKiRCdhxHcYq19T0a2i/uLeCKVEtj8CIrR7hI&#xA;ugBX4qBffFW/T0mKeNeNulwqC2iWiBxGw5CJe/EiOvEeHtiqnBp2hSIfq9rauiFYz6ccZAMLFlXY&#xA;bem5qB2OKo/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUp81+adH8raDd65q8vpWVotSBQu7HZY4wS&#xA;Kux2AyUIGRoMoxJNB8QfmT+Zev8AnzXHv9RkMdlEzDTtOU/u4Iz2H8zkAcm7n2oBt8WIQFB2GPGI&#xA;hiOWs2ReT/y984ecLkw+X9Nku1Q0luNkgj/15XKoD7Vr7ZCeWMeZYymI83s+g/8AOIOoSRLJr3mC&#xA;K3k/at7KFph/yNkaLf8A2GYktaOgcc6nuDN9I/5xl8saZavBDq165c8yziL7VAOgUbbYw7RlHoHX&#xA;6vCMxBO1ILV/+cfNSiRn0nVIrkjcQ3CGE/IOpkBP0DMrH2pE/UKdfPs8/wAJeb675a13QbkW+rWc&#xA;lrI1eBYAo9OvB1qrfQc2OLNGYuJtwcmKUDUglmWMGQ+UvNh0aY2t9bpqWgXMkb3+lzgSRMYnWRJF&#xA;VqrzRkVh403zF1WlGUf0nI0+oOM+T6h03UrLU7CC/spRNaXKB4pF6EH9RHQjtnOTgYmjzd5GQkLH&#xA;JE5Fk7FXn35waJrWrjybDpL3NvNB5jt55r+0hWd7WJbO7UzssiSxBQzqtXXjUjFWN+evy5Gk6BLd&#xA;NDeecNQ1fV7G416+u7f67KkFrG6RSLp9l9VjnjgNAISrLVi5VqUxV51pulw2V75VsvNHli/vdHh1&#xA;3zHJaaFJpv7w2klvDNE8dgtVMQd2fhHyA3AG1MVVrv8AL7zgun+Xm1nSbv8Awrbw6uLPSzpw1yex&#xA;+t3pe1SWzWTly+q0VXUH0unw9lWT+Tvy2mS98x3mqaTqOoahZ+WdMtNBv7xFtr8u9rdJPHbys00E&#xA;d0q+mhYO3A0qQCcVTj8hNCvNK1DVEXRHsNP+pWUSajPp8uizzSxmUGGezLmCaSJTvcxovKtPi7Kv&#xA;ZcVdirsVdirsVdirsVdirsVdirsVdirsVfHn/OSH5lv5m81toNjLy0PQnaMcT8M12Phlk9wn2F+k&#xA;j7WbTS4uGNnmXOwY6F9S8fzKb3sv5G/kRL5xK6/r/ODy1E5WGEVWS8ZdmCttxiU7Mw6moHcjF1Go&#xA;4dhzaMubh2HN9aaZpem6VYw2Gm20dnZW68YbeFQiKPYDNYSSbLhE2isCHYq7FUJquk6bq1jJY6jb&#xA;pc2sn2opBUV7EdwR2I3ycJmJsGixnASFF88fmX+Wlz5VuRd2hafRJ24xStu8Tnf05Kf8K3fN/pNW&#xA;Moo/U6XU6Y4zY+lg2ZrivVPyN85vZamfLl2/+h3xL2ZY/YnAqVHtIB/wXzzWdo6e48Y5h2GhzUeE&#xA;8i93zRu2dirsVdiqDutH0y61Gy1K4t0kvtO9X6jcN9qL114S8f8AWUUOKozFXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FWJ/mr5sbyp5A1nWo243UMPpWf/MRORFEad+LPyPsMtww4pAM8ceKQD4IZ&#xA;mZizEliakncknNy7Jlv5WeRZvO3nWx0QEpaEmfUZV6pbREGQj3aoRfcjKs2TgjbDJPhFvu+wsbPT&#xA;7KCxsolgtLaNYreFBRURBRVHyAzTk3u64m1fAh2KuxV2KuxVC6rpdlqunXGnXsYltbpDHKh8D3Hg&#xA;QdwexyUJmJBHMMZxEhRfKPmbQbnQNdvNJud3tpCqvSnNDujj/WUg51GHKJxEh1eey4zCRiUBbXE1&#xA;tcRXEDmOeF1kikHVXQ1Uj5EZYQCKLAGjb628u6vHrOhWGqRgAXcKSso/ZYj41/2LVGcrlx8EjHue&#xA;jxz4og96Y5WzdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeC/85d6u8HlPRNKVqC+&#xA;vXnceK20dKfLlODmboo+olydMNyXytmxcx9P/wDOIfl5I9G1zzE6fvbm4Sxgc9QkKCWSnszSrX/V&#xA;zX62W4DiamW4D6EzBcV2KuxV2KuxV2KuxV4l/wA5CaQkd9pWrItGnjktpiB3iIdK+9Hb7s3PZc9j&#xA;F1XaMNxJ5Dm2dc+h/wAitQa58kfV2NTZXUsKg9lYLL+uQ5oO0o1lvvDudBK8ddxeiZr3NdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfNf/OYpl9bymCB6QW/Kt3LE2/IfdTM/Q9XL03V&#xA;84ZnuU+x/wDnFxVH5UwkAAte3JYjuagb/dmr1f1uDqPqeuZitDsVdirsVdirsVdirx7/AJyd1eHS&#xA;/JmmXDRmaVtRWNIw3D4TBKWavFuhUZn9nz4Zn3MJ6Tx9rqnzQfPbV2sgB7yV/wCNc23jnuYDsWP8&#xA;4/J9Gf8AOLmty6r5e1t2i9KOK7jVVqWBJiqTWg9s1XaE+KQ9zZHSDBsDdvbM17J2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4B/zl9pbS+XPL+qAVW0u5rZj4fWYw/8A2L5m6I7kOTpj&#xA;uQ+W82LmPqj/AJxF12OfytrOhsw9axvFulHQ+ncxhNvGjQH7812tj6gXD1I3Be95hOM7FXYq7FXY&#xA;q7FXYq+a/wDnL/XUMnl7QUb40E19cJXoGpFCaf7GTM/RR5ly9MOZfOGZ7lPrz/nFLTHtfy1nu3Br&#xA;qGozSxnxSNI4R/w8bZrNYbn8HB1B9T2fMRodirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVYR+dPlR/M/5bazp0Kc7yKL63ZqN2MtsfUCr7uqlPpy7BPhmC2YpVIPhPNw7Fnf5Lefh5K892&#xA;moXDEaXdj6nqYHaGUj95T/itwH+QI75Tnx8ca6teWHFF9zRyRyxrJGweNwGR1IKspFQQR1BzTuuX&#xA;Yq7FXYq7FXYqoX99Z6fZT317KsFpbRtLcTOaKiIKsx+QGEC9kgW+CvzL86TecvOmpa8/JYJ39Oyi&#xA;bqltH8MS07HiOTf5RObnFj4IgOxxx4RTGoopJZEiiUvJIQqIoqSxNAAB45YzfoD+X3llfLHkrRtC&#xA;oBJZWyLPToZ3+OYj5yMxzSZJ8UiXWTlZJZBkGLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVfE/5+flzJ5O86zS20RXQ9XZrrT3H2UYms0H/PNjt/klc22my8UfMOwwz4h5vNMyG19B&#xA;fkH+fcGkwW/lLzZOV09SI9L1Rz8MC9oZj/vv+Vv2eh+H7OFqdNfqi42bDe4fT8ckcsayRsHjcBkd&#xA;SCrKRUEEdQc1zhrsVdirsVUrq6trS2kubqVILaFS800jBERVFSzMaAAYQLV8n/n3+ei+ai/lry5I&#xA;y+X4nreXe6m7dDVQo6iJSKiv2jv2GbLT6fh3PNzcOGtzzeI5luQ9k/5xo/LmTzD5uXzDexV0fQXE&#xA;ilh8Mt51iQf8Y/7w+FF8cxdVl4Y11LRnnQrvfX+atwXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYqw381/Nep+XfKxk0qGZ9T1CZLG1uYbae8W1M1ed3LFbpI5SBAXoFPJqL3xV5F5F85Dy5+Vet6&#xA;X5b/AEjc3zeY77TrXUZbC+le3huJ3pfTosPqO0cUZdkC8vUorAVxVnv/ADjvdaQPJt/pOmSXUsOl&#xA;6vqUaS3kFxDI0T30xhZmnjj5uUHxj7StswB2xV6lirsVY3+YPkTSPO/lm40TURw5/HaXQALwTqDw&#xA;kX9TDuKjLMWQwNhnCZibfDnnPyZrnlDXJtH1eLhMnxQzpvFPETRZYm/aU0+jod82+PIJCw7CExIW&#xA;EjybJnvkD87PPXkpUtrG6F5pKn/jmXgMkQr19Mgh4/8AYmniDlOTBGfPm1zxRk9v0L/nLfyfcoq6&#xA;1pN7p85oGaAx3MQ8TyJhf/hDmHLRS6Fxzpj0ZEf+cm/ykEXP6/cFqV9IWs3L5dOP45D8pNh4EmLe&#xA;Yf8AnLry3BGyeX9Gur2bost4yW8QPiAhmdh7fDlkdEepZx0x6l4b59/N3zv53cpq976enhuSaZbA&#xA;xWwINQSlSXI7FyTmZjwxhyciGMR5MMy1sZR+Xf5e67558wRaVpiFYQQ19fMKx28Nd3bpU/yrWrH6&#xA;TleXKICywnMRFl9x+UfKukeVfL9poekx+naWiceRpzkc7vI5HVnbc/0zTzmZGy6+UiTZTjIsXYq7&#xA;FXYq7FXYq7FXYq7FXYqxu5/MjyHa+YR5duNdtItaLpD9TaQBhLJT04mb7CyPX4UJ5HsMVZJirsVS&#xA;bQPN2ia/dalb6U8s40qc2t1cGCaO3M6MySRwzSIscxjaMh/TJ47V6jFU5xV2KuxVB6Zo+maWlwmn&#xA;26WyXVxLeXAT9u4uHLyyH3djU4qu0/S9P06KWKxgW3jnnmupVTo01xIZZnPu8jljiqKxV2KsH1HV&#xA;b3zlqF1oGgXLW2hWUht/MGuwNxdpF+3YWTjpJvSaYf3f2V+OpRVF+bPyt8meZvLMHl68sUgs7KMR&#xA;aZJbgJLahVCr6LUNBQCqmoPcZZjymBsM4TMTs+UvzH/Ibzr5MkluUgbVtDWrLqNqpbgg/wB/xirR&#xA;/PdffNni1EZ+Rc2GYS97zbL212KuxV2KuAJNB1xV6x+W3/OO3nHzVLFearG+h6GaMbidKXEq+EML&#xA;Ubf+Z6DuOXTMbLqYx5blpnnA5bl9Y+UPJvl7yjo0ekaHai3tU+KRjvJLJQAySv8AtMafwG2a2czI&#xA;2XClIyNlOsgxdirsVdirsVdirsVdirsVdirsVeDaH5p8kab5V1XyR5qtGv8Azbca7dfXfLyKyXd9&#xA;cXmpvPa3MLExck9Jo5PVDUVVxVA6jr+rJ5l1IjWNTj/MT/FKWujaD6s4tpdEF0iLW0B9BrZrQPI8&#xA;3HkG/aGKrtHjvwfLettq2pyXepedNT0O7he+uTbtp8j349EQc/TXj6KlWA5A9DstFUhsIrnRPy38&#xA;pizuLmy0DU9b1geZL2TUL+3gVba6u47WOa5hM0ttFIV+MxhQzCrmpLYqyHyZBrWu+b/L1tf+YrrV&#xA;7S20bU9Ssnsr28ihvDb6pElqlxI4t5LlY+fHmRSTiDUqTVViuieYvNEnl3VrqfzNJH5hPl7XZ/Me&#xA;kyXd/Ne/WY7VzHI1tJCkGnm3loI/TZQV2Xliqf69P5n0BNQt9B1TVppdT8p6dqV6zXNxezpK+oxQ&#xA;Xl1bCRnaJxaSyH91QDiCoFMVXeZtetLbQZYfJXmDU9R8qHWNPh1rUJ7u+a3tbdoJnnSPU19a5WKS&#xA;VIvrBQ/u6025mir038lp76bypdPPrMeuWn6QuBpl3FNc3Spa0TjALq6SOS49N+aiTcEbciQcVZVr&#xA;snmlBD+gbexuCeX1j69PNAANuPD0oZ+Vd61piqQ3th+ZesRDTruXTtFsJ2C3t9ptxcTXvo0PJLf1&#xA;YIUjd/s+pUlRUgcqEKsn0jSNM0bTLbS9LtktNPtEEVtbRCioo/zqSdydziqLxV2KsE81/kh+WnmZ&#xA;3nvtIjt7x6lryyJtpCT1ZgnwOfd1OXQ1E48i2RyyDzbU/wDnD/RJHJ0vzHc2yV2W6t47g08OSNb/&#xA;AKsyBrT1DcNSeoSkf84eajXfzPDT/mEb/qrkvzo7k/mfJOtJ/wCcQfLsLg6t5gu7xR1W2hjta7+L&#xA;m5yB1p6BidSegeneUvyf/LvyqyTaVo8RvU3F9c1uJwfFXk5cD/qAZjzzzlzLVLLI8yzLKmt2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxVrivINQcgCA3cA0qPwxVugqDTcbA96HFXYqxDzN+YsGj+Yk8uQ6D&#xA;qmuajJYnUXj05LVlW39Uwnl9YuLck8h0AOKo3RvzA8qapoGn64L+KytNSLR26Xzpby+tGxSSFkdv&#xA;7xHUqyjviqaS61oVveC1mv7WK8kZEEDyxrKzOCY14k8iWAPEd8VVJdV0uK+i0+W8gjv51Lw2jSIJ&#xA;nUdWWMnkQPYYqhx5l8t8ZyNVs+NqrPdEXEVIlVzGzSfF8IEilST3264qjLK6s7u1iuLKaO4tJFrD&#xA;NCyvGy9KqykqR8sVVsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirzXzJ5I1bW/zbj1BbzUtJ0xPL/1Y6jpsqQlp/rpf0WZkk/YPLYfTirEfzH/AC3vLCOx0Py9&#xA;oV1eaRFo15ZwX1rBY31213cS+q8dw+oEpDHLUu8qJyLHYigGKsXutDvNQufM2iXHk+41zzHeeU9A&#xA;sLWVktmbTr6S0nWs8s0iNFSVQ5da7x7mvGqqO1v8sPOcnmm/g1aDUL4ajdaXNp+radbWNxx+pRQK&#xA;S95cyJc2voyRsdqBxWm7EYqnR/LZ4Py/vnm8uXLazceZrnUbmXT0tTfGFNQlltp2juVeO7jVeB9B&#xA;9iN9iMVeg/k/Y63Z+UWi1fTY9Lla9upLeCOFbVpIJJCyTy20ck0cEstSzRo1B7YqzfFXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhYNL06DULrUYbaOO/&#xA;vViS7uVUCSVYOQiDt1IT1G4+FcVRWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>233.496994</stDim:w>
            <stDim:h>139.515778</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:InstanceID>xmp.iid:af149efc-48d1-44d1-80dc-a3fdac28761a</xmpMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -139.516 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 139.516 li
233.497 139.516 li
233.497 0 li
cp
clp
1 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
77.0363 113.36 mo
84.8951 113.36 li
95.6399 102.334 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.749721 .679194 .670497 .901457 cmyk
@
56.7431 100.538 mo
59.3981 100.538 li
59.3981 96.3551 li
59.2687 96.5895 li
56.7431 100.538 li
cp
60.4875 100.538 mo
61.6706 100.538 li
61.6706 101.423 li
60.4875 101.423 li
60.4875 103.403 li
59.3981 103.403 li
59.3981 101.423 li
55.5131 101.423 li
55.5131 100.784 li
59.3325 94.872 li
60.4875 94.872 li
60.4875 100.538 li
cp
f
63.9496 100.538 mo
66.6046 100.538 li
66.6046 96.3551 li
66.4752 96.5895 li
63.9496 100.538 li
cp
67.6939 100.538 mo
68.8771 100.538 li
68.8771 101.423 li
67.6939 101.423 li
67.6939 103.403 li
66.6046 103.403 li
66.6046 101.423 li
62.7196 101.423 li
62.7196 100.784 li
66.5389 94.872 li
67.6939 94.872 li
67.6939 100.538 li
cp
f
14.4656 113.933 mo
14.3606 114.836 14.0275 115.533 13.4662 116.024 cv
12.9063 116.514 12.1613 116.759 11.2312 116.759 cv
10.2238 116.759 9.41625 116.398 8.80875 115.675 cv
8.20125 114.951 7.8975 113.984 7.8975 112.773 cv
7.8975 111.953 li
7.8975 111.161 8.03875 110.464 8.32125 109.863 cv
8.605 109.26 9.00625 108.798 9.525 108.475 cv
10.045 108.153 10.6469 107.991 11.3306 107.991 cv
12.2369 107.991 12.9631 108.245 13.5094 108.751 cv
14.0569 109.257 14.3756 109.957 14.4656 110.851 cv
13.335 110.851 li
13.2375 110.172 13.0256 109.68 12.6994 109.375 cv
12.3731 109.07 11.9169 108.918 11.3306 108.918 cv
10.6119 108.918 10.0481 109.183 9.63937 109.715 cv
9.23187 110.246 9.02812 111.002 9.02812 111.983 cv
9.02812 112.808 li
9.02812 113.735 9.22125 114.471 9.6075 115.019 cv
9.995 115.565 10.5363 115.838 11.2312 115.838 cv
11.8562 115.838 12.3356 115.697 12.6694 115.415 cv
13.0031 115.131 13.225 114.637 13.335 113.933 cv
14.4656 113.933 li
cp
f
16.6343 113.541 mo
16.6343 114.244 16.7974 114.808 17.1237 115.235 cv
17.4499 115.661 17.8862 115.874 18.4324 115.874 cv
18.9837 115.874 19.4212 115.658 19.7449 115.227 cv
20.0687 114.795 20.2305 114.19 20.2305 113.412 cv
20.2305 112.717 20.0655 112.154 19.7355 111.723 cv
19.4055 111.29 18.9674 111.074 18.4212 111.074 cv
17.8862 111.074 17.4543 111.287 17.1255 111.713 cv
16.798 112.138 16.6343 112.748 16.6343 113.541 cv
cp
15.543 113.412 mo
15.543 112.791 15.6649 112.232 15.9087 111.736 cv
16.1537 111.24 16.4937 110.857 16.9287 110.588 cv
17.3649 110.318 17.8624 110.183 18.4212 110.183 cv
19.2837 110.183 19.9818 110.482 20.5155 111.08 cv
21.0493 111.677 21.3162 112.472 21.3162 113.465 cv
21.3162 113.541 li
21.3162 114.159 21.1974 114.713 20.9599 115.203 cv
20.7237 115.693 20.3855 116.075 19.9455 116.348 cv
19.5068 116.622 19.0024 116.759 18.4324 116.759 cv
17.5737 116.759 16.8774 116.46 16.3437 115.863 cv
15.8099 115.264 15.543 114.473 15.543 113.489 cv
15.543 113.412 li
cp
f
23.6993 110.301 mo
23.7349 111.098 li
24.2199 110.488 24.853 110.183 25.6343 110.183 cv
26.9743 110.183 27.6499 110.94 27.6612 112.452 cv
27.6612 116.641 li
26.5774 116.641 li
26.5774 112.445 li
26.5737 111.988 26.4693 111.651 26.2643 111.432 cv
26.0593 111.213 25.7399 111.104 25.3062 111.104 cv
24.9537 111.104 24.6443 111.198 24.378 111.385 cv
24.113 111.573 23.9068 111.819 23.7593 112.124 cv
23.7593 116.641 li
22.6755 116.641 li
22.6755 110.301 li
23.6993 110.301 li
cp
f
29.8291 116.641 mo
29.8291 111.14 li
28.8279 111.14 li
28.8279 110.301 li
29.8291 110.301 li
29.8291 109.651 li
29.8291 108.971 30.0104 108.445 30.3729 108.074 cv
30.7366 107.703 31.2504 107.517 31.9141 107.517 cv
32.1641 107.517 32.4123 107.55 32.6585 107.616 cv
32.6004 108.496 li
32.4166 108.461 32.2216 108.443 32.0154 108.443 cv
31.6629 108.443 31.391 108.546 31.1998 108.751 cv
31.0085 108.956 30.9129 109.25 30.9129 109.632 cv
30.9129 110.301 li
32.2666 110.301 li
32.2666 111.14 li
30.9129 111.14 li
30.9129 116.641 li
29.8291 116.641 li
cp
f
35.9583 111.074 mo
35.5208 111.074 35.1533 111.233 34.8558 111.552 cv
34.5595 111.871 34.3764 112.317 34.3064 112.891 cv
37.4808 112.891 li
37.4808 112.808 li
37.4495 112.258 37.3008 111.832 37.0345 111.53 cv
36.7695 111.226 36.4108 111.074 35.9583 111.074 cv
cp
36.0933 116.759 mo
35.2333 116.759 34.5339 116.476 33.9952 115.911 cv
33.4564 115.346 33.187 114.591 33.187 113.646 cv
33.187 113.448 li
33.187 112.819 33.307 112.258 33.547 111.764 cv
33.787 111.269 34.1227 110.882 34.5539 110.603 cv
34.9864 110.323 35.4545 110.183 35.9583 110.183 cv
36.782 110.183 37.422 110.455 37.8783 110.999 cv
38.3358 111.541 38.5645 112.318 38.5645 113.33 cv
38.5645 113.781 li
34.2708 113.781 li
34.2858 114.406 34.4683 114.911 34.8183 115.296 cv
35.1683 115.681 35.6127 115.874 36.1514 115.874 cv
36.5339 115.874 36.8577 115.796 37.1227 115.64 cv
37.3889 115.483 37.622 115.276 37.822 115.017 cv
38.4839 115.533 li
37.9527 116.35 37.1558 116.759 36.0933 116.759 cv
cp
f
42.8838 111.273 mo
42.7201 111.246 42.5426 111.233 42.3513 111.233 cv
41.6401 111.233 41.1576 111.536 40.9038 112.141 cv
40.9038 116.641 li
39.8201 116.641 li
39.8201 110.301 li
40.8738 110.301 li
40.8907 111.033 li
41.247 110.466 41.7513 110.183 42.4038 110.183 cv
42.6138 110.183 42.7738 110.211 42.8838 110.266 cv
42.8838 111.273 li
cp
f
46.3762 111.074 mo
45.9387 111.074 45.5712 111.233 45.2738 111.552 cv
44.9775 111.871 44.7944 112.317 44.7244 112.891 cv
47.8988 112.891 li
47.8988 112.808 li
47.8675 112.258 47.7188 111.832 47.4525 111.53 cv
47.1875 111.226 46.8288 111.074 46.3762 111.074 cv
cp
46.5112 116.759 mo
45.6512 116.759 44.9519 116.476 44.4131 115.911 cv
43.8744 115.346 43.605 114.591 43.605 113.646 cv
43.605 113.448 li
43.605 112.819 43.725 112.258 43.965 111.764 cv
44.205 111.269 44.5406 110.882 44.9719 110.603 cv
45.4044 110.323 45.8725 110.183 46.3762 110.183 cv
47.2 110.183 47.84 110.455 48.2962 110.999 cv
48.7537 111.541 48.9825 112.318 48.9825 113.33 cv
48.9825 113.781 li
44.6887 113.781 li
44.7038 114.406 44.8862 114.911 45.2362 115.296 cv
45.5863 115.681 46.0306 115.874 46.5694 115.874 cv
46.9519 115.874 47.2756 115.796 47.5406 115.64 cv
47.8069 115.483 48.04 115.276 48.24 115.017 cv
48.9019 115.533 li
48.3706 116.35 47.5737 116.759 46.5112 116.759 cv
cp
f
51.2618 110.301 mo
51.2974 111.098 li
51.7824 110.488 52.4155 110.183 53.1968 110.183 cv
54.5368 110.183 55.2124 110.94 55.2237 112.452 cv
55.2237 116.641 li
54.1399 116.641 li
54.1399 112.445 li
54.1362 111.988 54.0318 111.651 53.8268 111.432 cv
53.6218 111.213 53.3024 111.104 52.8687 111.104 cv
52.5162 111.104 52.2068 111.198 51.9405 111.385 cv
51.6755 111.573 51.4693 111.819 51.3218 112.124 cv
51.3218 116.641 li
50.238 116.641 li
50.238 110.301 li
51.2618 110.301 li
cp
f
59.4016 115.874 mo
59.7879 115.874 60.1254 115.757 60.4141 115.523 cv
60.7041 115.288 60.8648 114.995 60.896 114.642 cv
61.9216 114.642 li
61.9016 115.006 61.776 115.352 61.5448 115.681 cv
61.3148 116.008 61.0073 116.27 60.6223 116.466 cv
60.2385 116.661 59.8316 116.759 59.4016 116.759 cv
58.5379 116.759 57.851 116.471 57.341 115.895 cv
56.8323 115.318 56.5779 114.53 56.5779 113.53 cv
56.5779 113.348 li
56.5779 112.731 56.691 112.182 56.9173 111.702 cv
57.1435 111.221 57.4685 110.848 57.8923 110.583 cv
58.316 110.316 58.8173 110.183 59.396 110.183 cv
60.106 110.183 60.6966 110.396 61.1679 110.823 cv
61.6391 111.248 61.8904 111.8 61.9216 112.48 cv
60.896 112.48 li
60.8648 112.07 60.7091 111.733 60.4291 111.47 cv
60.1504 111.206 59.806 111.074 59.396 111.074 cv
58.8448 111.074 58.4179 111.273 58.1154 111.67 cv
57.8129 112.066 57.6616 112.64 57.6616 113.39 cv
57.6616 113.594 li
57.6616 114.324 57.8116 114.886 58.1116 115.281 cv
58.4129 115.676 58.8429 115.874 59.4016 115.874 cv
cp
f
65.636 111.074 mo
65.1985 111.074 64.831 111.233 64.5335 111.552 cv
64.2373 111.871 64.0541 112.317 63.9841 112.891 cv
67.1585 112.891 li
67.1585 112.808 li
67.1273 112.258 66.9785 111.832 66.7123 111.53 cv
66.4473 111.226 66.0885 111.074 65.636 111.074 cv
cp
65.771 116.759 mo
64.911 116.759 64.2116 116.476 63.6729 115.911 cv
63.1341 115.346 62.8648 114.591 62.8648 113.646 cv
62.8648 113.448 li
62.8648 112.819 62.9848 112.258 63.2248 111.764 cv
63.4648 111.269 63.8004 110.882 64.2316 110.603 cv
64.6641 110.323 65.1323 110.183 65.636 110.183 cv
66.4598 110.183 67.0998 110.455 67.556 110.999 cv
68.0135 111.541 68.2423 112.318 68.2423 113.33 cv
68.2423 113.781 li
63.9485 113.781 li
63.9635 114.406 64.146 114.911 64.496 115.296 cv
64.846 115.681 65.2904 115.874 65.8291 115.874 cv
66.2116 115.874 66.5354 115.796 66.8004 115.64 cv
67.0666 115.483 67.2998 115.276 67.4998 115.017 cv
68.1616 115.533 li
67.6304 116.35 66.8335 116.759 65.771 116.759 cv
cp
f
33.3563 125.618 mo
35.3775 125.618 li
35.98 125.618 36.4412 125.477 36.7612 125.195 cv
37.0812 124.911 37.2412 124.501 37.2412 123.966 cv
37.2412 123.459 37.0812 123.053 36.7612 122.748 cv
36.4412 122.443 36.0019 122.285 35.4431 122.273 cv
33.3563 122.273 li
33.3563 125.618 li
cp
33.3563 126.539 mo
33.3563 129.878 li
32.2313 129.878 li
32.2313 121.347 li
35.3775 121.347 li
36.3112 121.347 37.0425 121.585 37.5712 122.061 cv
38.1012 122.538 38.3662 123.169 38.3662 123.955 cv
38.3662 124.783 38.1075 125.42 37.59 125.868 cv
37.0725 126.315 36.3312 126.539 35.3662 126.539 cv
33.3563 126.539 li
cp
f
41.7478 129.051 mo
42.0878 129.051 42.4097 128.964 42.7134 128.789 cv
43.0184 128.613 43.2391 128.384 43.3753 128.103 cv
43.3753 126.801 li
42.5259 126.801 li
41.1984 126.801 40.5347 127.19 40.5347 127.968 cv
40.5347 128.308 40.6478 128.573 40.8741 128.765 cv
41.1003 128.956 41.3916 129.051 41.7478 129.051 cv
cp
43.5459 129.878 mo
43.4834 129.753 43.4328 129.531 43.3941 129.211 cv
42.8903 129.735 42.2884 129.996 41.5884 129.996 cv
40.9634 129.996 40.4509 129.82 40.0509 129.466 cv
39.6509 129.112 39.4509 128.663 39.4509 128.12 cv
39.4509 127.46 39.7016 126.947 40.2028 126.582 cv
40.7053 126.217 41.4116 126.035 42.3216 126.035 cv
43.3753 126.035 li
43.3753 125.536 li
43.3753 125.157 43.2622 124.856 43.0359 124.632 cv
42.8097 124.407 42.4759 124.295 42.0347 124.295 cv
41.6472 124.295 41.3228 124.392 41.0616 124.587 cv
40.8003 124.782 40.6697 125.018 40.6697 125.296 cv
39.5784 125.296 li
39.5784 124.98 39.6909 124.674 39.9159 124.379 cv
40.1409 124.084 40.4453 123.851 40.8291 123.68 cv
41.2141 123.507 41.6372 123.421 42.0984 123.421 cv
42.8297 123.421 43.4022 123.604 43.8159 123.97 cv
44.2297 124.335 44.4447 124.838 44.4609 125.478 cv
44.4609 128.395 li
44.4609 128.978 44.5347 129.441 44.6822 129.785 cv
44.6822 129.878 li
43.5459 129.878 li
cp
f
50.4314 126.655 mo
50.4314 125.94 50.2789 125.376 49.9739 124.962 cv
49.6689 124.548 49.2508 124.341 48.7195 124.341 cv
48.0633 124.341 47.5714 124.632 47.2439 125.213 cv
47.2439 128.243 li
47.5677 128.822 48.0633 129.111 48.7308 129.111 cv
49.2508 129.111 49.6639 128.905 49.9702 128.493 cv
50.2777 128.08 50.4314 127.468 50.4314 126.655 cv
cp
51.5152 126.779 mo
51.5152 127.744 51.2945 128.521 50.8533 129.111 cv
50.412 129.701 49.8139 129.996 49.0589 129.996 cv
48.2902 129.996 47.6852 129.752 47.2439 129.263 cv
47.2439 132.316 li
46.1602 132.316 li
46.1602 123.539 li
47.1502 123.539 li
47.2027 124.242 li
47.6439 123.695 48.257 123.421 49.042 123.421 cv
49.8033 123.421 50.4058 123.708 50.8495 124.283 cv
51.2933 124.857 51.5152 125.656 51.5152 126.68 cv
51.5152 126.779 li
cp
f
55.3882 124.311 mo
54.9507 124.311 54.5832 124.471 54.2857 124.79 cv
53.9895 125.108 53.8063 125.555 53.7363 126.128 cv
56.9107 126.128 li
56.9107 126.046 li
56.8795 125.496 56.7307 125.07 56.4645 124.767 cv
56.1995 124.463 55.8407 124.311 55.3882 124.311 cv
cp
55.5232 129.996 mo
54.6632 129.996 53.9638 129.714 53.4251 129.149 cv
52.8863 128.584 52.617 127.829 52.617 126.884 cv
52.617 126.685 li
52.617 126.056 52.7369 125.495 52.977 125.001 cv
53.217 124.506 53.5526 124.12 53.9838 123.841 cv
54.4163 123.561 54.8845 123.421 55.3882 123.421 cv
56.212 123.421 56.852 123.693 57.3082 124.236 cv
57.7657 124.779 57.9945 125.556 57.9945 126.567 cv
57.9945 127.019 li
53.7007 127.019 li
53.7157 127.644 53.8982 128.149 54.2482 128.534 cv
54.5982 128.919 55.0426 129.111 55.5813 129.111 cv
55.9638 129.111 56.2876 129.033 56.5526 128.877 cv
56.8188 128.721 57.052 128.513 57.252 128.255 cv
57.9138 128.77 li
57.3826 129.588 56.5857 129.996 55.5232 129.996 cv
cp
f
62.3137 124.51 mo
62.15 124.484 61.9725 124.471 61.7813 124.471 cv
61.07 124.471 60.5875 124.773 60.3337 125.378 cv
60.3337 129.878 li
59.25 129.878 li
59.25 123.539 li
60.3037 123.539 li
60.3206 124.27 li
60.6769 123.704 61.1812 123.421 61.8337 123.421 cv
62.0437 123.421 62.2037 123.448 62.3137 123.503 cv
62.3137 124.51 li
cp
f
67.0005 128.196 mo
67.0005 127.904 66.8899 127.676 66.6687 127.514 cv
66.4487 127.351 66.0643 127.212 65.5155 127.096 cv
64.9668 126.978 64.5312 126.838 64.2087 126.674 cv
63.8862 126.509 63.648 126.313 63.4943 126.087 cv
63.3405 125.861 63.2637 125.591 63.2637 125.279 cv
63.2637 124.759 63.483 124.32 63.9218 123.961 cv
64.3618 123.601 64.9237 123.421 65.6074 123.421 cv
66.3262 123.421 66.9087 123.606 67.3549 123.978 cv
67.8024 124.349 68.0262 124.823 68.0262 125.401 cv
66.9368 125.401 li
66.9368 125.105 66.8105 124.849 66.558 124.634 cv
66.3068 124.419 65.9899 124.311 65.6074 124.311 cv
65.2124 124.311 64.9037 124.398 64.6812 124.57 cv
64.4587 124.741 64.3474 124.966 64.3474 125.243 cv
64.3474 125.505 64.4505 125.702 64.6568 125.836 cv
64.8643 125.968 65.2387 126.095 65.7799 126.216 cv
66.3212 126.338 66.7593 126.482 67.0943 126.65 cv
67.4305 126.817 67.6793 127.02 67.8405 127.257 cv
68.003 127.493 68.0843 127.781 68.0843 128.12 cv
68.0843 128.687 67.8574 129.142 67.4037 129.485 cv
66.9512 129.826 66.3637 129.996 65.6412 129.996 cv
65.1337 129.996 64.6843 129.906 64.293 129.726 cv
63.903 129.546 63.5974 129.295 63.3762 128.973 cv
63.1562 128.65 63.0462 128.301 63.0462 127.926 cv
64.1299 127.926 li
64.1499 128.29 64.2955 128.579 64.5668 128.793 cv
64.838 129.005 65.1962 129.111 65.6412 129.111 cv
66.0512 129.111 66.3799 129.028 66.6274 128.862 cv
66.8762 128.696 67.0005 128.474 67.0005 128.196 cv
cp
f
177.739 26.1563 mo
169.881 26.1563 li
159.136 37.1814 li
@
180.097 51.1125 mo
232.297 51.1125 li
232.297 1.2 li
180.097 1.2 li
180.097 51.1125 li
cp
0 0 0 0 cmyk
f
.72 lw
0 lc
0 lj
180.097 51.1125 mo
232.297 51.1125 li
232.297 1.2 li
180.097 1.2 li
180.097 51.1125 li
cp
@
190.368 16.2 mo
189.279 16.2 li
189.279 8.97563 li
187.093 9.77813 li
187.093 8.79375 li
190.199 7.6275 li
190.368 7.6275 li
190.368 16.2 li
cp
.749721 .679194 .670497 .901457 cmyk
f
194.043 11.9231 mo
194.476 7.66875 li
198.846 7.66875 li
198.846 8.67 li
195.396 8.67 li
195.138 10.9969 li
195.557 10.7506 196.031 10.6275 196.563 10.6275 cv
197.339 10.6275 197.956 10.8844 198.413 11.3981 cv
198.871 11.9119 199.1 12.6063 199.1 13.4813 cv
199.1 14.36 198.862 15.0525 198.387 15.5588 cv
197.912 16.065 197.249 16.3181 196.398 16.3181 cv
195.644 16.3181 195.028 16.1094 194.551 15.6919 cv
194.075 15.2731 193.803 14.6944 193.737 13.9556 cv
194.763 13.9556 li
194.829 14.4444 195.003 14.8131 195.284 15.0619 cv
195.565 15.3094 195.937 15.4331 196.398 15.4331 cv
196.902 15.4331 197.297 15.2613 197.585 14.9175 cv
197.872 14.5738 198.016 14.0988 198.016 13.4925 cv
198.016 12.9225 197.86 12.465 197.549 12.12 cv
197.239 11.7738 196.826 11.6006 196.31 11.6006 cv
195.837 11.6006 195.466 11.7038 195.196 11.91 cv
194.909 12.1444 li
194.043 11.9231 li
cp
f
190.661 20.9063 mo
191.793 20.9063 li
191.793 26.9475 li
191.793 27.7638 191.548 28.4025 191.056 28.8638 cv
190.566 29.325 189.913 29.5556 189.097 29.5556 cv
188.249 29.5556 187.589 29.3388 187.117 28.905 cv
186.644 28.4713 186.408 27.8638 186.408 27.0825 cv
187.533 27.0825 li
187.533 27.57 187.667 27.9506 187.934 28.2244 cv
188.202 28.4981 188.589 28.635 189.097 28.635 cv
189.562 28.635 189.938 28.4888 190.224 28.1963 cv
190.511 27.9025 190.657 27.4919 190.661 26.9644 cv
190.661 20.9063 li
cp
f
194.342 26.3381 mo
194.342 27.0406 194.505 27.605 194.831 28.0313 cv
195.157 28.4575 195.594 28.6706 196.14 28.6706 cv
196.691 28.6706 197.129 28.455 197.452 28.0238 cv
197.776 27.5912 197.938 26.9862 197.938 26.2087 cv
197.938 25.5138 197.773 24.9506 197.443 24.5194 cv
197.113 24.0869 196.675 23.8706 196.129 23.8706 cv
195.594 23.8706 195.162 24.0837 194.833 24.51 cv
194.506 24.935 194.342 25.5444 194.342 26.3381 cv
cp
193.251 26.2087 mo
193.251 25.5875 193.372 25.0287 193.616 24.5325 cv
193.861 24.0362 194.201 23.6537 194.636 23.385 cv
195.072 23.115 195.57 22.98 196.129 22.98 cv
196.991 22.98 197.689 23.2787 198.223 23.8762 cv
198.757 24.4738 199.024 25.2688 199.024 26.2612 cv
199.024 26.3381 li
199.024 26.9556 198.905 27.5094 198.667 27.9994 cv
198.431 28.4894 198.093 28.8713 197.653 29.145 cv
197.214 29.4188 196.71 29.5556 196.14 29.5556 cv
195.281 29.5556 194.585 29.2569 194.051 28.6594 cv
193.517 28.0606 193.251 27.2694 193.251 26.2856 cv
193.251 26.2087 li
cp
f
204.296 28.8113 mo
203.875 29.3075 203.256 29.5556 202.438 29.5556 cv
201.763 29.5556 201.249 29.3594 200.895 28.9669 cv
200.541 28.5731 200.362 27.9919 200.359 27.2231 cv
200.359 23.0981 li
201.442 23.0981 li
201.442 27.1931 li
201.442 28.1544 201.833 28.635 202.614 28.635 cv
203.443 28.635 203.994 28.3263 204.266 27.7087 cv
204.266 23.0981 li
205.352 23.0981 li
205.352 29.4375 li
204.321 29.4375 li
204.296 28.8113 li
cp
f
210.062 24.0694 mo
209.898 24.0431 209.721 24.03 209.53 24.03 cv
208.818 24.03 208.336 24.3325 208.082 24.9375 cv
208.082 29.4375 li
206.998 29.4375 li
206.998 23.0981 li
208.052 23.0981 li
208.069 23.8294 li
208.425 23.2631 208.93 22.98 209.582 22.98 cv
209.792 22.98 209.952 23.0075 210.062 23.0625 cv
210.062 24.0694 li
cp
f
212.083 23.0981 mo
212.118 23.895 li
212.603 23.285 213.236 22.98 214.018 22.98 cv
215.358 22.98 216.033 23.7362 216.044 25.2488 cv
216.044 29.4375 li
214.961 29.4375 li
214.961 25.2413 li
214.957 24.785 214.853 24.4475 214.648 24.2288 cv
214.443 24.01 214.123 23.9006 213.689 23.9006 cv
213.337 23.9006 213.028 23.9944 212.761 24.1819 cv
212.496 24.3694 212.29 24.6156 212.143 24.9206 cv
212.143 29.4375 li
211.059 29.4375 li
211.059 23.0981 li
212.083 23.0981 li
cp
f
219.795 28.6106 mo
220.135 28.6106 220.457 28.5231 220.761 28.3481 cv
221.066 28.1719 221.286 27.9431 221.422 27.6619 cv
221.422 26.3606 li
220.573 26.3606 li
219.246 26.3606 218.582 26.7494 218.582 27.5269 cv
218.582 27.8669 218.695 28.1325 218.921 28.3237 cv
219.147 28.515 219.439 28.6106 219.795 28.6106 cv
cp
221.593 29.4375 mo
221.531 29.3125 221.48 29.09 221.441 28.77 cv
220.937 29.2938 220.336 29.5556 219.636 29.5556 cv
219.011 29.5556 218.498 29.3787 218.098 29.025 cv
217.698 28.6712 217.498 28.2225 217.498 27.6788 cv
217.498 27.0187 217.749 26.5063 218.25 26.1413 cv
218.752 25.7763 219.459 25.5938 220.369 25.5938 cv
221.422 25.5938 li
221.422 25.095 li
221.422 24.7162 221.309 24.415 221.083 24.1912 cv
220.857 23.9662 220.523 23.8538 220.082 23.8538 cv
219.694 23.8538 219.37 23.9513 219.109 24.1462 cv
218.847 24.3412 218.717 24.5775 218.717 24.855 cv
217.626 24.855 li
217.626 24.5387 217.738 24.2331 217.963 23.9381 cv
218.188 23.6431 218.492 23.41 218.876 23.2388 cv
219.261 23.0662 219.684 22.98 220.146 22.98 cv
220.877 22.98 221.449 23.1631 221.863 23.5294 cv
222.277 23.8944 222.492 24.3969 222.508 25.0369 cv
222.508 27.9544 li
222.508 28.5369 222.582 29 222.729 29.3438 cv
222.729 29.4375 li
221.593 29.4375 li
cp
f
225.385 29.4375 mo
224.301 29.4375 li
224.301 20.4375 li
225.385 20.4375 li
225.385 29.4375 li
cp
f
188.212 38.415 mo
190.233 38.415 li
190.836 38.415 191.297 38.2738 191.617 37.9912 cv
191.937 37.7075 192.097 37.2981 192.097 36.7631 cv
192.097 36.2556 191.937 35.8494 191.617 35.5444 cv
191.297 35.2394 190.858 35.0812 190.299 35.07 cv
188.212 35.07 li
188.212 38.415 li
cp
188.212 39.3356 mo
188.212 42.675 li
187.087 42.675 li
187.087 34.1437 li
190.233 34.1437 li
191.167 34.1437 191.898 34.3819 192.427 34.8581 cv
192.957 35.3344 193.222 35.9656 193.222 36.7519 cv
193.222 37.5794 192.963 38.2169 192.446 38.6644 cv
191.928 39.1119 191.187 39.3356 190.222 39.3356 cv
188.212 39.3356 li
cp
f
196.604 41.8481 mo
196.944 41.8481 197.265 41.7606 197.569 41.5856 cv
197.874 41.4094 198.095 41.1806 198.231 40.8994 cv
198.231 39.5981 li
197.382 39.5981 li
196.054 39.5981 195.39 39.9869 195.39 40.7644 cv
195.39 41.1044 195.504 41.37 195.73 41.5612 cv
195.956 41.7525 196.247 41.8481 196.604 41.8481 cv
cp
198.402 42.675 mo
198.339 42.55 198.289 42.3275 198.25 42.0075 cv
197.746 42.5313 197.144 42.7931 196.444 42.7931 cv
195.819 42.7931 195.307 42.6162 194.907 42.2625 cv
194.507 41.9087 194.307 41.46 194.307 40.9162 cv
194.307 40.2562 194.557 39.7437 195.059 39.3787 cv
195.561 39.0137 196.267 38.8312 197.177 38.8312 cv
198.231 38.8312 li
198.231 38.3325 li
198.231 37.9538 198.118 37.6525 197.892 37.4287 cv
197.665 37.2038 197.332 37.0912 196.89 37.0912 cv
196.503 37.0912 196.179 37.1888 195.917 37.3838 cv
195.656 37.5788 195.525 37.815 195.525 38.0925 cv
194.434 38.0925 li
194.434 37.7762 194.547 37.4706 194.772 37.1756 cv
194.997 36.8806 195.301 36.6475 195.685 36.4762 cv
196.07 36.3037 196.493 36.2175 196.954 36.2175 cv
197.685 36.2175 198.258 36.4006 198.672 36.7669 cv
199.085 37.1319 199.3 37.6344 199.317 38.2744 cv
199.317 41.1919 li
199.317 41.7744 199.39 42.2375 199.538 42.5812 cv
199.538 42.675 li
198.402 42.675 li
cp
f
205.287 39.4519 mo
205.287 38.7369 205.135 38.1725 204.83 37.7588 cv
204.525 37.345 204.107 37.1381 203.575 37.1381 cv
202.919 37.1381 202.427 37.4287 202.1 38.01 cv
202.1 41.04 li
202.423 41.6187 202.919 41.9081 203.587 41.9081 cv
204.107 41.9081 204.52 41.7019 204.826 41.2894 cv
205.133 40.8769 205.287 40.2644 205.287 39.4519 cv
cp
206.371 39.5756 mo
206.371 40.5406 206.15 41.3181 205.709 41.9081 cv
205.268 42.4981 204.67 42.7931 203.915 42.7931 cv
203.146 42.7931 202.541 42.5487 202.1 42.06 cv
202.1 45.1125 li
201.016 45.1125 li
201.016 36.3356 li
202.006 36.3356 li
202.058 37.0387 li
202.5 36.4912 203.113 36.2175 203.898 36.2175 cv
204.659 36.2175 205.262 36.505 205.705 37.08 cv
206.149 37.6537 206.371 38.4525 206.371 39.4762 cv
206.371 39.5756 li
cp
f
210.244 37.1081 mo
209.806 37.1081 209.439 37.2675 209.141 37.5863 cv
208.845 37.905 208.662 38.3512 208.592 38.925 cv
211.766 38.925 li
211.766 38.8425 li
211.735 38.2925 211.586 37.8662 211.32 37.5638 cv
211.055 37.26 210.696 37.1081 210.244 37.1081 cv
cp
210.379 42.7931 mo
209.519 42.7931 208.82 42.5106 208.281 41.9456 cv
207.742 41.3806 207.473 40.6256 207.473 39.6806 cv
207.473 39.4819 li
207.473 38.8531 207.593 38.2919 207.833 37.7981 cv
208.073 37.3031 208.408 36.9162 208.84 36.6375 cv
209.272 36.3575 209.74 36.2175 210.244 36.2175 cv
211.068 36.2175 211.708 36.4894 212.164 37.0331 cv
212.621 37.5756 212.85 38.3525 212.85 39.3638 cv
212.85 39.8156 li
208.556 39.8156 li
208.571 40.4406 208.754 40.9456 209.104 41.3306 cv
209.454 41.7156 209.898 41.9081 210.437 41.9081 cv
210.82 41.9081 211.143 41.83 211.408 41.6737 cv
211.675 41.5175 211.908 41.31 212.108 41.0513 cv
212.77 41.5669 li
212.238 42.3844 211.441 42.7931 210.379 42.7931 cv
cp
f
217.169 37.3069 mo
217.006 37.2806 216.828 37.2675 216.637 37.2675 cv
215.926 37.2675 215.443 37.57 215.189 38.175 cv
215.189 42.675 li
214.106 42.675 li
214.106 36.3356 li
215.159 36.3356 li
215.176 37.0669 li
215.533 36.5006 216.037 36.2175 216.689 36.2175 cv
216.899 36.2175 217.059 36.245 217.169 36.3 cv
217.169 37.3069 li
cp
f
221.856 40.9931 mo
221.856 40.7006 221.746 40.4731 221.524 40.3106 cv
221.304 40.1481 220.92 40.0088 220.371 39.8925 cv
219.823 39.775 219.387 39.6344 219.064 39.4706 cv
218.742 39.3056 218.504 39.11 218.35 38.8838 cv
218.196 38.6575 218.119 38.3881 218.119 38.0756 cv
218.119 37.5556 218.339 37.1162 218.778 36.7575 cv
219.218 36.3975 219.779 36.2175 220.463 36.2175 cv
221.182 36.2175 221.764 36.4031 222.211 36.7744 cv
222.658 37.1456 222.882 37.62 222.882 38.1975 cv
221.793 38.1975 li
221.793 37.9012 221.666 37.6456 221.414 37.4306 cv
221.163 37.2156 220.846 37.1081 220.463 37.1081 cv
220.068 37.1081 219.759 37.1944 219.537 37.3669 cv
219.314 37.5381 219.203 37.7625 219.203 38.04 cv
219.203 38.3013 219.306 38.4987 219.513 38.6325 cv
219.72 38.765 220.094 38.8919 220.636 39.0131 cv
221.177 39.1344 221.615 39.2787 221.95 39.4463 cv
222.286 39.6138 222.535 39.8162 222.696 40.0537 cv
222.859 40.29 222.94 40.5775 222.94 40.9162 cv
222.94 41.4837 222.713 41.9387 222.259 42.2813 cv
221.807 42.6225 221.219 42.7931 220.497 42.7931 cv
219.989 42.7931 219.54 42.7031 219.149 42.5231 cv
218.759 42.3431 218.453 42.0919 218.232 41.7694 cv
218.012 41.4469 217.902 41.0981 217.902 40.7231 cv
218.986 40.7231 li
219.006 41.0869 219.151 41.3756 219.423 41.5894 cv
219.694 41.8019 220.052 41.9081 220.497 41.9081 cv
220.907 41.9081 221.236 41.825 221.483 41.6587 cv
221.732 41.4925 221.856 41.2706 221.856 40.9931 cv
cp
f
127.388 26.2699 mo
123.088 26.2699 118.811 26.9078 114.697 28.1628 cv
110.584 29.4179 106.679 31.2761 103.111 33.6769 cv
99.5432 36.0777 96.3509 38.9945 93.6387 42.332 cv
90.9265 45.6696 88.7243 49.391 87.1042 53.3747 cv
85.484 57.3585 84.4638 61.5606 84.0767 65.8437 cv
83.6896 70.1268 83.94 74.4438 84.8197 78.6534 cv
85.6994 82.8631 87.1987 86.9191 89.2686 90.6888 cv
91.3384 94.4585 93.9561 97.9003 97.036 100.902 cv
100.116 103.903 103.624 106.432 107.446 108.404 cv
111.267 110.376 115.361 111.77 119.592 112.541 cv
123.823 113.312 128.144 113.451 132.416 112.954 cv
136.688 112.457 140.862 111.329 144.803 109.607 cv
148.744 107.884 152.407 105.587 155.674 102.79 cv
158.941 99.9928 161.774 96.7265 164.082 93.0977 cv
166.39 89.469 168.148 85.5179 169.296 81.3736 cv
170.445 77.2292 170.972 72.9373 170.862 68.6382 cv
157.82 68.9741 li
157.897 71.9835 157.528 74.9878 156.724 77.8889 cv
155.92 80.7899 154.69 83.5557 153.074 86.0958 cv
151.458 88.6359 149.475 90.9223 147.188 92.8804 cv
144.902 94.8384 142.337 96.4465 139.579 97.652 cv
136.82 98.8576 133.898 99.6473 130.908 99.9953 cv
127.918 100.343 124.892 100.246 121.931 99.7063 cv
118.969 99.1666 116.104 98.1905 113.428 96.81 cv
110.753 95.4295 108.298 93.6598 106.142 91.5587 cv
103.986 89.4576 102.153 87.0483 100.704 84.4095 cv
99.2555 81.7707 98.206 78.9315 97.5902 75.9848 cv
96.9745 73.038 96.7992 70.0162 97.0701 67.018 cv
97.3411 64.0198 98.0553 61.0783 99.1894 58.2897 cv
100.323 55.5011 101.865 52.8961 103.764 50.5598 cv
105.662 48.2235 107.897 46.1817 110.394 44.5012 cv
112.892 42.8206 115.625 41.5199 118.505 40.6413 cv
121.384 39.7628 124.378 39.3163 127.388 39.3163 cv
127.388 26.2699 li
cp
.793973 1 .278019 .337499 cmyk
f
170.862 68.6382 mo
170.57 57.3062 165.859 46.5256 157.74 38.6139 cv
149.622 30.7021 138.724 26.2699 127.388 26.2699 cv
127.388 39.3163 li
135.323 39.3163 142.952 42.4189 148.635 47.9571 cv
154.317 53.4953 157.615 61.0417 157.82 68.9741 cv
170.862 68.6382 li
cp
.861601 .534356 .0258183 .00015259 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 24.0%%AI8_CreatorVersion: 26.2.1%%For: (kyle Hamilton) ()%%Title: (num_pub.eps)%%CreationDate: 6/4/22 9:38 AM%%Canvassize: 16383%AI5_FileFormat 14.0%AI24_DataStream%.((`,!*CKV">2S9*=sc`7&76r!+;D7TMY`6'%0NP$B8[I)B9*XpEH*n-L1m]+\Jd8!!#7a!!!Q1&4mHF&\1j1?$a)qCIg^8[i&<7%Nf.Y_;lki2SR&qb_+/*!JlaJh*0Crf3F#7?DU^@lF;Dg2f7<u,Nt)V)*8Nr?dc`Ac_W\XLHO(BmkNZB?qQQ\M+<cS:_QZ:IMluA,%0@G"!!8hgqPqNnEhug&N)eGc0\rNK3%7#$kj%CHL"3J@++W)717+ZS;\tO6%QsR@!-]hWsOBE_fR4:mPOm>P[!sVF[*=J90&Jg3'%,@4%u`l])hYD?WGMrf#&[?-2b+<b`GJEXQF!uO5g],F[!AsOA/T(7'KP%0cE`S25uQ%iO'p^t^4n:2Xe&u>Z7#-k.c-_kDZ3hj5/%lhY*+KJ3W58]=T5'J>rNSg69Mah"s`X4D'V<?NG^ZC1B-SU=_Z"r7[cTW0Fr2^g\QYH'&^Q-8Ds5"ULe23(W>S9m*S5Zqlr1@YCR%=F$BK^jlHO=6ZC[=\3!:'K9/K%hcI`&ATXRfC7,g)r<J\J51b6bC[#$M'.M8"`ls3;tcI&JYduUN356f\ul^.+C;:TlP^*I?'fFC%>rTRR:1)Uq*^lagEiMrd4]imuf*rQN@))b\q^+("BSggIXAFcsnCDBmGpQJ;('=bkmKdAM$ORMjZA-<#/g5]#Q5akHJFkT*(:bPb%Ub3&bO/.@LQ:pJA%g_/B&mFjY_TAHQ,6pho77^]h1p4V!&2:?.;RSSPAcFUK_Nt/4Xtq"-'@\<PH:ZAe]\H'0F_V$^Ouj*beCSs0%\umi>FBt4B?lfN*kdlfJkdh6JJddUI+V6WEY%'J>]JtH*\dm-O\rN'e]Vq!l'G)`8MLa"gJW3-Q\hFt,f/Xlh7[;eP?0>C!cADec%&RF!/G[8q?=q"\)kdmoi'j]Esbs>OL?.X3$4;Z<:hM0Z>\dlQ$F<-3YFPVHJ")&[uU3+pX*^@Hi.:7S,GU+##7P?flOER1G5is=Q%XH8,Youp=lB07?*-^.GPZ>;_>G3QT`gE>:^6<,DD]gaf4`/p1%QB9QS]2k,=C<^&cd*<MU\IrT</G.'b!-O"@)""`NC7R/2)*1pb%q2(XD?6>36=QJ&d9)qYZ%e`"p()9H5C5p2!cWCTUc!G,N>bSG<N<[C'27BMA>&72;)JoYT1tq'+qlB`$_3@F,];N"l^ag_A!)hV;%S@r#P#llZUd81XHdV*#\UWlsqoj!%se00N?g%n=?juRjc2MF2BBhW)8=rL>=bZG3GA*`K/V#sWF7=3!Ui$q`XX&RVAd8kS5bSu'^%7[pAV._&)NZ.B>c;O&a482Fc?)#shAW@EEu[40VaS@rC5F+qG0`L=KcQ:X_8R&lRA.1dhA=h?`@=Gh7@<h=mo((.oh/X2OK@OlDg%Yu3Fo>\C.j);pIMk3S?g>N\[<6e<3U!`b[\PG+uq"'&NNY"Y/hWjMFu6'Xo4F4p\0!nQuP0LKQXQjTVq0OO.i6rg-g>L?9/-@giB%lcTG3<BX8!Xep\,!?b*%/7m+%eZ>XJZ^D-"kpfu4Z53mCBbAYjjl8eI=YLu+ENZVa-r[q`OJuJ8$Hc>Kl:#_ACSj[s)fD4[e6'pg%cW,joC3g(Ddo[#Y_.I:17=2l#f$$h6Q:V0WW'_E9<-7incl)TH[;]QhU!G#!qHUOgi).a#9]TOG9]S#SL_FaIBWp'e&NP4rii8H;%'f?9-e[\:LeHlRC!T-EZJ6HW"3gN;<:^^kLZ41_nk?^kiV>pEs<\m]tL'4$IR:^$$*%q!R5JOn\:^#@kq0egI;HeAN5\[LU3UWA"%\#mVPqj<f2!^oq5BBZC=VOW/m7['MqNqS@0Chr`bWNV^MMOgC\=[Ok82%&7m:tJWG`A<f8f+b%f\:gpJ75d++)Z&F<Q<A"J9TDb/%45AGDGHK9DRYUbYd:R8J3KerWeR#;_Zd?5]qjj.K"(!FFfslcsZ.M'C(n.UB\qX\!>,`*B+9jiDR'2n!^"/Un6a>9(k**8?\9%A$%XYl>9:DRSC-I("ba-h'j/DY7#RYdrb/6CEE3E6j<PG2`l`2p&(F"t_8RCT=NZ8Ht0i-^NcfB4XAZFX3md,#RClh>0Ai\"nUSXdAR%K"6V2X&k23<bp$,qlapXCCPuscl"CJ47CGCF&bpGLTWLsdtj!K8^"+_>>^gr^1aPg6WNst1Li;q9BFTcB%"2=`_tU&RP@ciEE;1%%YI)7PTUMFN8Q086\oM.&hD9#F36\44$rr_NpK6H=i2%$6k')6m?7Bq1E$B76JFlgeoY]Lc&Ol:b72hVTX)h:3Yqr1j5iN#Q;Blfg%cI/)V/bc\D9T2o4eBU+\q2,nY>nt,U^[^uemaf9RZP.j,UT#op)I.0FRV6G1`Q"IBYP"`dT*BN12@t`W4$i3!KmrA<n]fThRHl:(%!)(#!Q$%+XkdmK;'X`VL%3PWO!aMkZl,'TGo`@D&4@(.2H2kMRY'S(:$NQKMcd6umbgdub(enVBOrHY!5U&Qs[AH!aZ\<_F;W]Je%"5ME5;k^H63\sma:hg3EYEXR+RK61KCsg$E$'MMn.4dn$,UufO8lViQ4'SFIV2DCY<>L<%Q+!hJ%YDM*joAZO'jK'&D)FD7]UH,?%A]80]^/b4k4Bn]L[@/Vd.c=PF]Anr*Lpa$o$+C2l7_"FcCiPc><ZuZeBan(g<5Mh8Z.Nh$KdSI&od*P=+KSQ]&R_cJ!7V9iPt!G;%Ympa52Zj$_!!!#'>(md*i>F^EeLHm9BJOY+;G#A@9I?DJ1BY!rYB15E.oc21M*fLM:hO2e76u'Nb%.I9%.IHF1KB.&KXS%d`^pPG%4]gi`SS:D#cd$VIHb!*fRYp(GgE<"R4kEm&Q*./*3EPDq-54ba"O7`s_!-p^8Bi%K>#d424F*EL$Vu70]::_/GZA)jb@ab%[VZ!n%of:XsN1$<glls6M:,:lgJT+hU\BE\;7,mRAi[htKfAZ)X!5MmcJ[=-dZWdDTc>Fh?"*&K?8_g_CLU1WP-@:H`%DnYkdid]k$u;qV%Z;,G6Yt;GC!74k7\>a*lJ2O^2if?KNLi](CdhUkCZPlH"U#W\tC*>2m=0i^d[@/2cHHsaeB:Z_0:28(ufGWVd;-1([B&R!0lG[bB%<YGJ,'O>(H$Q%a/W_T"OSuS-8Au;\3/7soX.^#c7>0YC;1],*e'Hr4*#b4PiV%t[Hf@<ikWu=7eN2^-!C49^Y.u'p3!JG-"ljPS[%aAS7FOq#^QSZ*JW*OM.>2E43Bp/7;-!dD(HRARe\<n6Grno1XN^ahiTeN)X7'Y4nr)p4U`BJhWcb[.DTluV_%>ANq9B<Uq`6Ocet%g3SKWBFIU"l8h"<13>?SP?c?bT!r"p/kb$BP3h&V1"e.kC[5gQ:6HE3,>1nX,2"W_pWFl)^3/,6(VNr=SG/s8[e<m_0uhm%G2+h*%^$&+pB<plPe@g4VgUpXSR-_M1I^taqD^NY#+8$qhW(Dr]kX@.fh2f/AhT;@5hUm`*Df=sOpFhi/\)PA3?[PA'7pGi<CFnJmH?!`D%kV:)i?bOR%e6'@oq8J9$a(787gW=p7W%[kQ;>Z8?Z<us8f\>ubh-)@5MfDmG)t)PVDAiI,Z/-e`hN(j(V79*4/M9\Sag-,/2d(U7%]OX%f;1%'2oLgS//^$diic;\Bks\idSo+I9=^!F\HJ>AQ`d*cEp>'&\bkpCX0ug[R\&Vr\HJ@:&(3`pPMb.3?I?UM;^K?ftP%F)!%?S?`QgH$r[IEAc/0DKitn(hSoZh]M$Mg8ZgE@+=so4#`VdZTo/EGOIDpYOZI;U"41gLDsb)d21V9@A9o`87pS=^jMYZ5g9]OX8[N%EEeC8%=<KeAU2\a[[FKKp9kUg>[gV.Mt8!6=aKCNA6FfDQe:k6@W@a%B9,Q24W\_m48p!gQC%#Vi[us"93bqU0uhdNN,e;g/5&WZ%D99(7]aaG9e<VA,=dG@)[F\a?i\%LFM;.&f@m'%hZ0904bdq;s]h!=ZnLdJIna<n<43$%0n1I@OajQ)Xhq)YL`7p2\a4lMYlkjZH%j%X]8,J+c"--M=^89V;n99s,/].?HIi_0!*^!2IH8bTI.qifioALVq0=d#?B*q,-2?C"pafSa>:46a_i]NiO`/B<o)[iRE`hI^V-%>'me^P4UYJYujlqhL""hh:p\cee[:]mChB=D;J<ZV75RQD?"re=dJ1Lj&hWIQfU4+5E=dfD)mYe=oSI$30r\+hY-t/HJAI2=dEW%%Q=\/ukF?V=H!,15q)EE?q>];PQCN;+cIS:m=m#X3=m!qR=lrtTj-]EtNapAkpA[,7bkX5ajo7?%j8V.>s*r=as6jf9aa)1laEc)2%F.P2NS<mg43KI[q3WG^mcCF'fZa]%dF'4g*[JuSi[GJoK=^%;9=^#$qj(Rg>Nha#^O/'+QO/'*CO/'*oq7j>tpqO5npAb0DErNh]%3WEHPS6J(8S6PkTkLO\!\[=G=mVQO'ZaKhrCb=g1>FT]Zj(PR&s''7jkLNh+ZaJA1RsM4<=?$=oL;UK=:1C@Ql$8c]Giq3'S0[e`%B.7!.Kb3O"eoo%HSt51^`_*>9hj=*;n[J;NCHZo&Dg;RB?bK@][hiD21"KZ`qrS0nq2S!XYLY5sS1X?mFT@r8d9`B=dqX%,^q#o?%oNYncWSag<T/l&:h3[_>A+&X[\`_aX%I/j7kIL?"?]-uMXhLC5SB&-Hc?\$N>75%<?e`!W*UC='mP2bcpL![p\$obr3PnA5f*Fg4%SM\[7C//9\g,dL*Q^XKH:9<&]SXo'T*Da"Cla32Y<RW`(P9[+GGYU"]?Y_6JW[DIC>H*HububiF=(pc46uT]-jG]M,OD4ueRH)sm%:!Q=?:84npR4(4.23>4L?VYVOG_O^J4Dg)AD.T\4(dFMn!9YlJftI-.GHgP[oo?eprG/SuLqDgC[bTkh0@h!4(Ituo]DWi+I5_?`%a-#!^JQiM2c>BfCH`gt>-9Df7=X3@JrO)L&Ygeobd+#lc6XQm^Y3N'1Jef9[]fb1hs6X#tqa&DR^;&Q-F8iSt?>I8na84]N3G>tJ%^](fcI<#:uK9h]8PWGT&D3gBaXk@Jqcd:?#AXZQLLu--CcBbGe:0Aff>Q:%RUh<;#1K_V&29Q;5NTb45Po6oI!'k&!Zc&9tlti(1%DIs),EY:5uA*BkkV[?-_lg0kd<%.!Vg\nk`h0\%'K0N_'hsWAqT77=4S%&CmA)=>qeq3/nH=]3WZhe]'A'T+\P6aE*Xk@JIX.^<T%$^8okp8K1_NNgOVI9%^d=*#oL3eZ#idY/T/O=gQ%6Fn[DnE<UZ+6bbhak)4d>`c*=5`K[SS.%;jZP-Y<N*T"sY^qU$%7hu*k26h[%mcZnriGR-F$8DcAO#<1X-Oq"%9;ZQuROW^n7*1$@33qlT8!_EXaQd"U$Q_s:8;UlnQS]moi/orD/F.0;.6V)dl,hZu&scf>#T+Cp%80A?JbBd@qEGl(jg()!d+AB"l0KTP],OU0j1O1[B0TuXf!s`8k%tcPh"7j68D;JiU1CSsDH!mj3Xb7RS*$`mfUbQ0CpqU:j`rgs*%)\r_Y@-VG451C=%?pm8-gkUFT\7:8mVaX,>#T[>AU^`TFO6bHXj+_f`66IG50Rn[>E]Cidnp/ubiBUu@GYdI9AKQltK:0eEQq<+`%5\9;\U)$3"Q*Ca9bM@`&;Eua/;2b-9PjUe75][Km.(Ok_q%N4S.!\[?aT]%AkD:U4rCA?oAj:Z3Y&,cp*FU;Pk2C5!KFoM;M'?<L%[ZN-Q#`0bgN=>D+i(>mUW.$F/-D/:X3`mGI,o`)2nZ<]7NOL37PlYY?*8O;"\<r5?eMpt9,iZloFg@&&7'b`E$hGb&B#,.Y5X:Gf%/P!XR62<8A(s.ANC@YqTVY*b)8/D+W=XP;GBSD1o7=&@G/7pb#*CM:H[,.*F^^(e0!\tFYY@,26($8:1.=tXRI@.K0/eFO].*RTP%@7UM0C]Ts'LHXi'cN6)3m,r3p$fh>d]ZVQ:=DA8S1`MMd!<Y,m-d@E@^@D<&B\2"g'P;r"&`sNklY.k!CAGO0KUI32BtE(g!@H8<%>67J]mA457qd:bC[p9d-k=e99S:XE0/gJhVd:"@PUpP*60TjfE]6INg6\CV"cjGSi>=)S\I<\tJ<l.g&!hTHbl]5645XP9;&#fBT%0'!)%I#uN;k6nW9;A_AZT!$Gp/>N!M(6FAr+Pp[];&M"<gW0QBT9)`bJ]cW+#kKF&cf?<NeDb<O.=tXbH$a$Q+L;\aTSq.W3rj]-%bQ?j_+Lcs,C=":CO;Y*aP7M^E<]0(Q)*`':3&i6:i,'*_,]Rc9a>66hZX@_q*>nRXUfX^_ZTpc@98d@-67qFYoeoa.59pj],SM$i%^l,4hM?[N4L(W@R835dP@^0&6#R6uK)p7N[4C3VpWtI]JBs\iK*j4>hW!#;&MgPdI(m07m#@>(d`5d"r#[Ur61Vi!\E1n4Adi+&c%[#CFAKF9N'.)Eu]aldM$UdIc_mE,);KU-UWJX-lf\1!FEV,DjqFUCGq1=i\hh1J@PVfGps0R%Rm=C`*sk_.f)nee.E"SCC"R)=`$%-OU7o?Nr7mUQs.hQ(b$7`bri0EIkC#j!-<#J0<QE;4p`"&"!(,TF_=CO_)4cU)kG)R4ZdI1cu$r2R=\>"n'<eT\tg=/^@<c]IY*N%c(\E]6E-Bq,>C#OG['*6np(\.&gm4Y!t-0d1:5BmT]ch+MEjLs'"k=S;dR=2Nb4tZ8gH]-Q?<a`IA6bW@&]lObTc('.2B]E_"+9\%QnnOu.YS$A)bcUm2AGA+]h+soF:uGJiuY(h(?'?u:[ifoGiQ9s&q!!&O6cAFRYT$ff1:&q8eSL>+j+VM1/EgY3`1R>ANY2[Ti`QM%>O=?4.Aj)8V9CbrF9CB#0M3#sAY<`Kf8^PM$:eV0^3,BJ^lT%C2\E$g[m@S+bq3)&A&1!E+(Za#TPBo./63PF[(2)"LJoet2FpAo%<g5^CQ=J&o-4Kf+3=:e*GN@8QT5*VCA?iG,#XbH[2FPL!De-&0'pZ?`jJB2=k%).WqsTZp*"4#GQ,.cF\_8>7DpuKa$k*OL%B%CF%6P`K2XCjt0:87q^ChP&FJP%B^11u,<0X@("'^EIKC<[TjL-oCci62lX*2emX/9mZ/TsGjt"@A7VNOO=j8&pc%jU0QPgf.D6=B\5@%$psWqa,P2$*De.mVMg9r)c/:r%DbN07"HUaD_(M#aUg$.0g\/[eh$'j1P9rZY(g?+^ee3Qo3`G,d9@p6_#DcJ8fDbS(_50k[Tf1S%<!^N5dLH/MIM+M\F9@I5/*n+VL7l!n+@I-bek3;F&dKgB@RqBL/V`Kq)WM]ocU8pb85['&=iS%dS:JD"7nADYK2ndJU^Eos[rjN?%_r.0oN!4?1*`#*Q&`.\=5q&k7Ud%Mf.h[5[@S:J<.8gTYLoR<.7RIn!Fb(B[M;HjPS)DiHgMk(6n^Jsj*uImT$Hi[Dj<B?.gKY^d%0Y<7.I7Q%Y.sr2;2F9I3*R_ccP#Quh<B2L-WJ3.AULI5MgS2SZ^7+4q:bS35eAX]V"tFBP0N)RkUeXjRo7aUe$%\ISFGl*&+Vsl?%bFCJQ_AIr^$n?BYNY02?#bE[oD#WNdUk%Cp2NG(n9\P#L2Ha9_io<'J14KqSm)_aB98f&P$)'OTH5Ipa<n]F4KLVd>=m<",o6ALq%&s%o_`(mFeZICp-RZ?P[@j`Z87Ai\rY1+Al>u?t%7$SYmUq2CW`?fC=&"O8rWFYED'S6$h+EQI37qKKmVWu>i.7._;Ln+ji)Ujk_%egh^U9+D05BDeDX<jp\F0;A:k,_T&EkTObmZ7NLL$L(-*7a13sJUFu'@b]WOV;K'3/CNGjo-gi6XVc^",Dd_MR`?lo5(LM5$e\X@%P(COgLf%\_HeX*]m.RN=O)'3CKaSdI0T;]Zb[CPNV$ORZU]U?R*sThP9+<DEdunYn^`];!Aud'\,PU8oCetuW1.WE8Lrhra1:!!J%iiFqX6<_L:.i<nsbp_oj<F"PH>&]<8LP%J$eV:JqP%Bb&!@X(]@6TUVX9b%AE0)@N!ucBtd,rkIq81Dng+YCYHl]UBhn9p_gf=G'%_S$jb:";QW9g*'b!G3$4<O3'6?`Gp\?q-ik692)&-+dPSU%Bm$f:#5CE$A[ZlO5@"UCaL!_2L]+!f7eKB'3r@VO5oXS@pngeu=i-%C;^<(E:UG/!'\SIW0mQDV'?2KP+H(L;M;#@Gh<[oJ+0m@pRsFn.J0;[4;QBM-7Kb"O>@ht"Zli5Yb>fD\r=gknJdG?VSip!=_OHP%S&e,+fm.A0Qp8(h`(ZVP$L8lrJurL?%jTH.BF_>o'QVR!52=!/(`\1]CI'.*GR6?'qN[q^QtmrT5;%N?6$@CL$>Z1J+\tapEGjkF%$c]3/&j._q6RK-)!b:T(-kLdOD)_<5/<",?e>a!Z%P7rnR@41V[;aZXb1fCdJQID#O#6MIX[];9#:,Blph4DSkYk>4'1N^oBhE(R%VJ9CM5f)l)7+F-JJbiUseZ%G\k&_2l^m"!0?O\Q?cI7m5VJbTP"I+HN3Y4$A,R+;YhR3D%3edqmAMP^I][>6.#TT^5WaW<^d)lM"%&!_8R30&nj!L5n]'IXrf7"P"d3sCZ](eQ4h"'Omre5oOj?nIO,j7A?P(c%V'RBY*BK]a'_7')]Ai,(McE?mMK(9CAGip)IT6,Ob[%";"JY5p`<LOq]HL7#@&k+\K#j(4rG-q&g)B&3RgB6?EJiLSl;[!em#'BQ8d#NQ=?hU4dsul403`ZCe?%Eq#-4i,)f\HO^U#kmqM[%L@/Gd=APQXM5'ek9Gd[^@$_*/UkW"@@,!qm"Nh5<+\`%o","Ne0Nbi(dD4;tT0Xi4ETl>I#ba%X?B`[5]8hoh_T9]ALl;ncgFW+f%^aZ+o_-(+P=2?gk:r0(rJY586n2(J!kK(&>E$9lm?fISl$ujIr8MT*g1TD3Y)@)$be4^2\+IZ?t+j3P3/lDn>I`T`8n80LpHk2U)%b%&53gLoHk?lFE'@gF';%\p1u<%3Ei#3C&_!i>1D^aMj]a6Opm-IKg&n<V75Z3W+W%Z3`5XonqA"?d]%2=P^.<?is6&LPI82sVA#%-QF[tq-a8`hY*pHRO*Ni1g!XK/$R*0#N+M@)dlcQ-Gr,[-+"<'<bZ[g?OLH]@13U98;##bQ-O/u.ZE0%8r3"jQ#G)K$4/.Ub(i@U%:`*)_#mE4V,*W8u7@SO+mjO\QRR_qFKHWbs9[WtNA<Q\A7So`pSHr1Idt#6=H;"Ua&g]kp;IDWr3)&0Kd&:3AJX=8V);'e#*D!Es%._s[^X9:Kk,_CQh+A%+s1MQqI<hL#n2Ne(!-)%lpOp"-<Ca:$qPXl9VYD369i+\fLEMEG_lZ2K/UP7fZ$;UM=`KU',Q%G>]&==kj%D&E^D/X%(A$(ao1MlDuq+)&7N0K^4q;F(D^HX"%$r6D_7d2/YZ^gi@+MP!3X"<In%--r6ek7l,"_>=?*Y\bnbg($n,g>4eu2PMSs%]foi]<Y\cfWhOV#<Uh2G`)k[V73<Z!hmeEpgT2b'Tm_jZO=Q47O>iL)aWf4U1WlD:SqT^*AgB>H\;/?E`deR4/iARk3-IS8pgXkC%/A</f4SiT#(EIGZif8n6a-rI_EeF^9kV0NugGfY%G@?WZbjKk?Z3b&WA.tSX@nUlA/1_seG!Kk#CoZIc&8m5S'fKkr$=R6eT!0A:%)oJ4Kq(MsR7DaVg6%lMr-3e'M"X^/bi/GI)`i&n0[SCmD^fY?f_9RYo"0Fnj(3+mj=JV-g6:J1oO!5u&<Y.iI0G#I<7+*=;`/@#k%#W"jo!LAm7/fCL;j:=TaP#,."aK&8nO9IHr!&;ib(h-(,)A$iQ+N4,-^>n^..`2*];CCF]OV!/+APqNT6=^55'C,,.cuM+[KbM$]%()UA^LWPLO*XsK#HC3pUi,L5ejoNpKb2\%`i/bgn!doA+V"`M*p>GEu$Gtlc.-OKl,@TAh*%Mm$EN%q#`W<(K'ZYmEl&O(KL(;aJ%@5nf%QF4Q2-._#$2QMST1mo8?cjZU&+hpd),Z%ecX*5\"8GM?WdV",jNaT_;GT3I\>8\dt8&k<rSAj^%C(1STj-@EQ9M?PJ.ceu2%1g49qQimm%(a-^e1J$IB@71aX"XChqW@bmgEjf*&B5=2Jem,")#7:h?a9#d)K983QJe?$S]WE?k.Z9#XOXpVH>q]ls"h6No_&*Ps%Y.B<\`M.W"eB,Pe08Ghe!/i^ZU_Qbt.UWd4%YB:mk;mQj]F`7i]ZJ#u_#)'8HSa./H6u,Ko/HrML$*:U21a$T0e5sq;c,6&X.[@.%/0lL<i\Lp9$B,*]:_9Q:OCBSb*CWB?)$T&`US=Lu9GA!bdoXUYh,ZKL#Zucge*nei,D;au;*5+Q93eD%f*Ifk]Zm,M4!\@1esT(R%O-r8[5!sq\8<a`!!XFC34tqBt"L&#(U9pUf_Qts>'+,5B8qJ@>)G$g(bU:-;fEkp-2j*'m80T5ME[4m(]gsR"&0eqZN"t;g)ZQKS%(ha3nih7WD+g=FdKudY)$?>>t-NkV?RLfOt/KkZpWsCFALk-,KZgo5$)&!5edkGGH\tG`bKKu[PnPDh.L]N\o6'u6s!CVQKi"6ob%_a\m?XE-0a_!G/+b#9Mj9,TsILu`:n((&.cdBV%2Lmk=-&/bmZ]8$O>6\b\*B_P>daL[=9^q/&a>odR`@W`"rC"7o&UJqKO#cQ#_%4)!ihLh,e`bscSLkUmF2e0,fHUJ=4_U/#nhU$a5(%QY&+Hof;<1$DB(am$`IUnCB-4IXP`o.jV5iDXoWFE-P?M1r2Z*th6@h-$Ri%&WA-/B/>rt4^gY'H/#>s$$6WI8CD'kq7D\'(pe_q.MN+WfTRt_,O$XeZfjYsn%kTC?:.TGn6f&+9+Xso*QUXs'rlmLq7s2!]"*c1%Y,s*-(L62?k'@ub+Oq#d*\<]5)JS0`)^*uQ;14t\>X.:1$=""\[@+8SklStYBc;YM)1=Fr"5KSUJ<1W52!Zu_#XZ_uYj\GMSe4\m%;%,7KE>/NoE[B]8JL,aoYYr@G@Po'CD^0fe%-+1m8s#jT<$5tOa!W*c08gkXjFX?PWuRMhQV2Zs>mcC26B>\%EJL5p@cN)+,34Yg%Z^0fGF^CdDXV.\E:^rt76-q3hHG1Mg,G9=\?mpt0"i8TZ_6L6Z65cG8)A5WC=Eu=mf#=Rc+s\_F\'\GB<^@Z=,X-I8md5h&o1Vf!%2%p:4&2*#pa4hj>@^j%*eAWE!\HX2^@oFiZNg,pXU(u/=Fq.Pq#N_ZCYCZce*6e(6LOi*nLr<\.OY&Vu+[^hsj;.+((\p%P]<H%[%gkGq_OY#."G$+/6%*=.t'6)a#NFX.741*m3KZ##:VOk591/D[l&h)FNnSod+PlX*E:M@FYenHC+)7p.j/!,:KZR;JX'kc0_Dh".6%mHSDJ/WR*jhs6rX%O*[nhBjpr4Nc'_[DNp:#7pn<X&dhW6eePEbd@n\MR8,(b@'0o#DGsaC[edFJu'CP!fR6iD$1!jX)+Y"Mdjr'%i.ek*$EZ\58R4t]KqaeZASSQ935ljS,C%rhPsW+2O9d5/;I]Pgn/KD-6^S\/.>:e,IL/un-3b*HmmG`k0>g,I0J@gjLZfCT`<43p%H9S#s4UCY*%T]u5&\LHRBtE(iq$HF;+e_0n[`Tu)[8'-3(PE*3bs>pV%MQs9+-=IaJf7>#LhRuF\/qn$TZEg=_@RS4++^m-gekDq%<?bmd:*e8LHk-XOj)d9JaZODG2QQr\$gjb?Jm;IbrL?XEV`?:Iam=k>e:D]]g&n,qX\OsQ58G0nDb+"(@C"<r&#j];Ju)As_jOCn%V-G7"8]?O>6ENlqAgPJ)/%J7YKsP;^O\VapLJ^uA<U++rXJF;ZOd<S5%YZ36T?4uA;*<A"UX5+"4q4F9jD-G,PWlG$Vi+tghR9"%%"uV)hR7[mpP..,0;J.2A0PReblE72H>%OC<8M;7@O[+T7Z%[!J@+J4o;`JIL#-_O40KQ?^Q.(Eliq.otehG=s1]#c<OTPYqa:pTb%#,7JMicfkU@5Pj6-Ib?_CtQ,"L@ubnR=$mq-`5)c16BToR@#TC)aGaB,G@Jo=_)7PSq2fBE=fqj.kJ8b.T0Op`2!]:#/9_[1sfR=%&Z9aW$.<oX^Q3pfbg:qag=s8718^(r_qP;NMhcgXe*^1]gO4K*QNd[,JnTI\.$?<-6kGuS6,u=d)B4V?1UN_5@)g.U&VHWHZ"GdX%qO:$B1*@,4eb(i?K'9f)Dd[Ubn64mNNLd<K5rQ/l$T_^/i.8`UT>;]Qk&&u;D'KlHZj]n=koa^*kVAqDUg%CbdS7"aks?\NFLGT\%kp-H8NiiLNe^kPO-==f%KTRm/0h"->GrRj;&jn\fW;8PnX+74Rq[*OfNj"BFKbJ("&19YlS0SgZAO0ddW<EVP%Kt=q<'$XD75V=:%3a_roQ@\W]U3W6;H(28t//<)UTHt.Z<'c3KZO6&N1,%MHD;LR[-dP+>3`![a3W[18QU#nJFOo1^[2Ff18oduM%M#"uQqT,7jkU$:%,i_gkJZMU[i&O*)i(IO^X[j3i4sHc2JI".AT2%sVDtCDuKT`4.@O.CQ]F?65RnV%>OKj,$[kXt\!m-O_$_WOT39W\<,NN:\U;fqf%%5C&3)$/Ft^WAdC69BVXIQ/:uoesiXL(RfIUkr%b#`K1jV_U;(RUutqAK5E@DGcmNLk!cb^b"@93\QX'La,K]9%aD)=\JrH+6%Vd%#dt>D>__oN-4GDIM%dNr6#/WpR#fH8N"p]/[i)+tdW/i.WP2m];@LO"b'e[n(K85-+F;e!*4*TUE04*6MNIr4]FFJ*0^pL@TER)b%eH@Xa%E%CH/!/bWPF_KF@SOatk@<(677/Q54Xl-X,!\M'<=D\d,:9qE)JMVg7,7-i6C%f\.^<Gs&CI.]8[r.9>/lL'-F56n<P_d-%jE/dl3u,XJb7a2qUCcP*&/&S%C*4m$`Dg"uE-Nj"H[2,L'2NI.3Yr#5\2]<&F!4Qk(Q`'o(Chkbcsc0'"hZE](a4\fL"CNG'4BGu%BaNmj:+DKR8WdMK,\RQ$H12Dn::hX\<6V0qK2s$aN):m,Pcq@_:ms#g;>LP^'T\-iZd,/<Ad#1i7=d_pj>%$@*[_]r2B=PYDE@Ao%i<*1["tGEu/L56/Jqe)$#U"r[L>&+J)(H_hAO\!\#Z?i%d&H:2Mc=@&61d(\5g(B!16>H!no3*T6Wd-\L7hpR3Cg*/D"2LX*<rCV%-=:C1512_J%nARE(t':PWmB'hpq"`8"R/N!qmoBeiTgmh@ALd`&lK?u*)pT]Bk,cm5[b'N?0"`!"QGTod(nL=,LJb"_HV::Jp<GX%*X@&_AIp//^$Qa)a`kp!k*@ekbi2GC=g18G$*@^UKN9pdO6_$-m)eF)*=QW\@)7*B/_H8J;NTV`E[E:KL)MkC55E'I.tZQ.O'oi_%k`aAj*L3n(<J*1Y0Gm[Xjs$J>T*4]d=4/UPJ0W5mF;5!lTV]d)A\JBRbE:JAmlMOb7V4gNaTj`Tco1OZZtX5M^;tpu$U%)b+TfU`%kq\FUf52@5Uh_@q3&[!/k$C*pJ\>o/]nZrroQR,6+uli]eBl!pfqoE0C+"j>]-;6NlKT;Arr>u'(>`hh)[DbP[i+o#93>)CW(E5)%$A.QJaB1p/^b9':Job]:Xg`]te)c1Uppa]5Q*K;b3l&Ri!ts`l(_2L-9<oBg6SbCO-_Eorad4GFPapG7Hh-tB^6H2t&Lgh$$C``$%;.8=9)"HVG?4=]`TEl=eR"ri:h+EB%1JhSsV,`.+a^bP_IY7tD3&3gf(IFQC(Qq$p/-nk%f%X`n@V&7>-\]\KHh+!R8"fDsW>lA.%"Uk;LXQkJ,L`k+Q\na\?/4AJG+V8WD$:1N8DEd#h(/N%X,KnJR$M`s>)>'-rmeF;aVA*2=W,Q,J3('?LdO2Ee8nGdsV(uEdqLfXF%HpV%qBKi,DD"2M[nafg<@il"V`aTN,[,/76^*8&2HsH!RKJqn!6CWi<(q:_e@N)rf`fWMtX@%U02Tr'Ve/5uA_P&Y;UbX',\D2j-%dV,_`[kT`3,d]Ke?_`<5U1@1h6@kLIN@nQDK&?pVm)]Ju>h1.+-f5$'SrLs+A9O>*AZTY#P=Pb?Z&fX@JedA2$?q>WJI<55VpZhh%Qrg')1s26l+hrbbKE>$4TJFnr<pt)bpd*H^R1<hkDA%:V\qWWjkrr7/F98\gf54oZY="\>7Rp)75e9V+#h"iM-,X3s=e3"mOb(FY%D.M<pi.Jn5'>po\F^>`JQnV5C_?IuhA-f0O@d67H2e700>sqU8eFGD$Y/>k?,8\gs@IVS%CB@39`DD)`>"[)QQ0$($&!KKGqqjr`%;/gcLJ4j=aYJ;9S1Z5T3qOeD16Me\s"t)6[Gp59V.3uR"KEsl?fRY(p%#7JE+;0nYYuDiIFn/A1APO)E5bba08;^5'9/1fD(.q'T%!eD(WbS4/ePm84^=VaM?k\!]*eZ#bo!^\>ZZVIWL%$2`iP\9No``'hh%>4-p&0B''fO.#fcOpo\M@[g54M$g[_l1HK"rU3KonkG(%S>If-LUQ/;[<+7;[8[,`WG-TKe+B<\6!8,9O>=t])0E/8;F?*0+ArX!+bD,p`[I!XCBP(k)dD^NZ<XENNa<V,qf=,q?"_Ak>:^Z4%Sd[Fq)u0^UbB]eX'b:XD.u?5jD!5iK=;:Hqpq3^3&fCEC_aNDr*=0I+Q"aWJio;f*`FnbQeGLG:T`fkac+k5u?D'mMZTM2BY*d84%X[jjVJ6l\[-rOXM2Al76"k-A2=J:b<MPWU*%J]/o/IJ45*fXQ*F4FM>O$X\8,:`hU/.4?]//sTT(go]t,*?nl_UsTr6unr6hH!Ke%86?D"#?([QKeQ:Iij*A%A->KQAK2R=9.SC^(g75%)0oFGNZskUD%;qZg;iFXNf0/C);0!b:YEeC66T6_ZiEr@43B`(fuN]mK$=s+%EWJlYU1D8pK_!e2JW_stLTeeU[ZPDF"a:&@'Y3."2PA(+V(uG<K>ta(d:aN@#"=fM*QY%^Ss[Wdaf(C\PA/uL$e9c)pblMZD8iHE%E.^X6I)1^OM$T6D7kc]?M;Y\6P0].K,^@g:78?N?aG5:s't=r`/p:3%i'A6aO>t$p"m1I^%CDJ[T7MUBJnBjIE9PpUV;ZC\FO:sU%hB24M#$PD,_[n7B0UYrc9I7sA!-L`n@7tqn,_n!(N06cPInHJh$DJB!L^=0e8e\2r[L_MqOShJ>":1]^6A@C2JkXgMQLVg_"G4k[%Qtg2U6rIB8PR@t+Bi(b2JV"&+iMa+YW'Dk/>i9<7%!bC*<#?X@!=PhGe)ab*Ls%9-@ocNpV^K\64f,(F_1]Wb&j]c'jM@'G8n]K#%&EXuT9GeFTZl"c<$'XVj?nkalelKYHM_-2</r$@']eK,d+\Y&$"-p-sO5jcBN0AN&cjDlI-0MF]<o>s!:qhP`YDXh)5XHnJTS9eu%h8hMMi@AZ4]9+tX7'Vkk)A5Ka)d.$!.4]s@F')K'E$AG(VNo%m`d8h2n0NKhi?`m`*G(eCPA^IA=dYHUf"bXf1eH0XP,?F!5t[Ju%O#1/1V4ig3/e&SXH$N'd_T7@7^uPPg/i;![.;PSEPA>M9Q\L9`XOc<kXV=5p`r?\q_GKJ0SA>6<!EX30%';:LF9@h['F+8@!`Ua'%3OH7Ia:o/KN!GoVKGq-5pm(-O\VlOMlT179on$!gklf$3/NiMk5ZB=@+9oO_,ID[FeAX]]`TLcN"Hed`"00)<io#E1#S&IX=8JE0%haG&1/4R3D_[+\]%VCjKgKH)@2+eZ.P`r&/E,dS@dn*['dP*B]&Y.3jBDf`Z-1;o-THaj26JW3#SV+ro**H<:@7lOmW<?'s(E?Sd%"?K*<M6n37h2pQLUt.fH+H[^i5F=-gKEpMB5/_#8>)?:SQ"VJfA5k<imc^bodfk,,YXTnYLQ4(P#T[>#hBj.,*:\#=[1j^,KW1m5%JM7JV63e[Xj9q)b'i`25-hF\mo<]n:['c+,FU&OOXn(rr\[K&5NGO4h^*;/eQa/'M)qbEmE%*Zu=(HGp.GNg%W=7Fq\25Ul`l`fN%'TL#,6.(33PlYO19qAALceDLCH4_9`mip[`9:`.ua36k+!X;\Q(hU1LXHO0iU)(+g=^b8?RsYGXZhh>:/BtIi6C=)L1\o0eK9Rtt%V!13uPV/)][p9n)O:lCe?"T1],o8gbHTVjucQfQJO5#JT'!fJhdK"P2ON#@gYZ!.@#X!o!iE=\>,$+oXM"Hp7BM(fS+Q<]+kA?&M%92-]JK.osTQ5YH2&!UM,X\q`g.IE6oH+:;6-meqo*&)I:Bq"S&P[Z=iGF4+_JpY#([#p(U@<-#u8<IYs[LGH-D0,k6PTUrUb^%cH%A'VEp53qXQXS;CZ>HU8o5NdB#n*g7Kf%9?'3T'UL%W8u%]_;BobsAN*[@d>U_9^s)D9hs'XZM?Hrtb@P6**#1a1q6&22HDC4l>/5%X7-)BDN:k!qf@b5X0&hekKE8chfensmiJk4C;"c`*rL:&\ULaVG\;r@]j>?Dm0BcU3:FS&riuIRHgQ%7(VKUu^AI<O>H9c/oqpaH%pYL&<G@qKQh6l-BD\-^P>O9&B2XC:Op/l5gNd%P=`B*n_4c$MR='L'UpYB0SGP:ajS+l(djB:Ags52C7Cjk/$>Q;,!h"0pBc!\k&%[bL\Np&Ee@]YEUqS,L$,K73L-p#atPln,r`j*YjU=n`?ibi-f,^:daCpYQq>Gk6?u[bGuk6(P^.Qg_R?\9$9tpYUD.Gk6p&WNt]r%?gmmKgjbA>^YS($1Zs"4Yih#;^X_4kI"1i.o[_ms\'>b)CVBGuCWsKR)fsj,k1f`[D8+p)%/.>ngt1/$b<=2Nhjuj!ZbCq`gNE5g%B$U;I+O>N:O*SJ9mL/Teo>eOobW3BWgmS&PHga,;h>coJk82p!;fR-Lr;XMkhgR_e1O&BHGjg.LeQd_fF5-/QmCmj]]Y3u"Hg?*h%*J6Ck*,]8iGOFD7fPf"4"o8,KqV3[krqF&_hq2,Y\]#ThhgOBBKALsFmG;)tCqBq!k'"K5CQ!8kr;(4aemQh8qjoD5*TVKEEPMJO%i6H^WSb)N"l`J!o\c2Wcq;;)>r?#Ckr<IK%7fDf5h0\I1k4a5jD<;hu$gRZW`qa9GD$P.Ug#Ck4s53*iYLS)3Y[\1']57a.[MWN?%pU24%7W*;7_4CQ(T_@2JT5F<=baHBGB$BuQ2>/q8c*mmuhGdaphr`+mmbcdCn,=EQRCdZmMg<<hs(q<*3H%`,bHoOHH^lkrGMZk6%H`X@D3.D>,bd$7mB9#.$*I$neO)anqF5;'&3T%TZ`g6)mp!"H9mB+VMGJ%qas'M:AhYhg"1#<c%q_NKgm@IYphRogGrnlJdJ)8e/%3-1GXbB:;+CORuBET[2lq<H]j[ao=9NrPW]f%jMfq>L3Vrj0!P`-E:^m<Qb+pWN6](iR/LLbmY2cSp(HEQ@ih&G(B7^ECgkMXQPn%h-FB9^YW)mD`Q\S?N.4Li6C'FRe,<#S%"Nl^LqsNLUZZ_B@(89>MQdGs8Li([b'e]0AiGIJ+&l=`n'VXIE*E$GiNa&CMn>#^$K[p%p[7m,m(nar]pI20s*=(h3Jb/,gH',2GIDe[h(@3Ko:LNp5$QA#chI"B5L+cU]PYA!e9DomN:FZ,?YfPZ5B#k7^:AI"J$rKq%Vi)O%kBVPRj%X[jrncAA1Z*@kgc=!Bj8X0*2s.@-giB"$m987]62p]#GMAa6pHI?53<hM#4T!I2brshZ\HY(Vo"H1>]J\iBkA0n=gOakJ%%<B+$\D9<([up!JpRO8;r+<[Vn+Ul%p!u3O^,6/-mMfqX[H2X3rOd-rqu=<GhVI4aZdk[dn+$DoK6hH_p$PlHn+##?KA1n4rPc6m%Xadbsl[,h8Hf)U$*TWf!hK&nu\(p7c4l?$Alac]_j/[+mpu:*]h\tj*o<7Q4TZ>jegA:8$et%<Y1ZfZmmB*f8r1!#%J(L:XS9"r8%jmKSOA"LMs\W";b*<.&Fs8/\Yrd27selH9sp"hUeh(cs_gWP$.(:<r4rj2RuCYa'_h/;-;^K5VqpBUZQ<*/[<\*lKOXZbQGH`]0f%^]3Z.^E6ge?g`)umH.I,s(r#:jfZ<6muCtMqi:'o2XARQIf7:?3*LgHYm#En\8Q6#c/%-^jVrgjF.R_pp&4Z8lbS"YOh889O2&s_%^DuG3g<AsaHKX]^IXf,HDm8+nof)#YDu[5Qi4kf=rHnH*LbY7"h`b7]4guC.I!^hJe\-=25PQo+Hg^h&^@Babj*ggTHZ,NBM`L1p%r>p<Xn&6<SGT43n2=>tSI.Pn??>f/Ns6gKPNB+I3kC#SGrEo&':34YVf9sN^J$7u4K6nOts*s`h>EJ_u_2^PDoC`.\Ieh7H`E`,k%Dk9,E0t6W7Hs^a^f+u#D;fU]D]C!m)>CN^2)fn+$X>TIYkA5Firq[.ScZdt6GFgr%s4pWqF8PjJ=G-TnfPeC8juMmJ5Lu3KY[<FZ%DS<fP?[HVo]=h9qrBIcYJ,;>%pk/KbHJ=H=ru_8X^BQ^4]OT;u:@ld"^;'9P0?ET?Eqo,&n*YU.qsXKSHi(X-\XbbSh.*[)NUOnp%Et7W]EP/p^\]_M,1%'D_h6ZeQG'rtk=`87dgc901N&ok_mI%U`m]k;d?OZ)#qqg/_m5([qf>%=A>2-OdfCB;abjfU/kITi:H/IFb%s1-Gn`0^)qYJ2-kG>mV;otA#mh)bitju2qdC>Ci2H%Yg2g"N"ip)JS^5OR+js09<6o<1H>\a@$&g1SUFcf&`Up"G!:lhiOC5Nd1?%Rd[u\oc;g-DVs6UhVIU;437$lG2p6ODL8iSpYGGsTZ>j^rV-;r"[Dad[QesEI`u[/p#e8Dn8BQ7Xl$^:n71nLSZhaTheR/us6H7r%^0YT%q7RbthYH'%c!8#4qtn3V3PKdZQfH<!etC8m^=d+gEPAtr]`70mJi7]EkItlS56&qpI(?C7^,UJB[C=e/la>>mpT-1G0m@Q^%]4]@P2t(O'#4q<^s3F""^#(g@%=ZO[Nd]6H^>.=%CX+s6So5#%T5E^2[(1[FIK"DBq/SXYIW`]hc.p$9A,\d\Fm^&mcSGdqh,HCI%Xu"AYjp^+irQQq?)Z-W+#&iZ'\%cR8^#ti:p2\f/r\MmYc()g:hlXMu>?fJ2D</4qSni2ZS%7tUkM5),I]e$u\*fp6h#I1RSh9`J%T)H>?B>-;/D<CKap3rUF[G,`KDe&5SkF4C85N[@^IqP9;c[Dn,cP_(Z[fo"Y]&iqgS1Ws8Y.st*GAHruT]^:M@]hHC@,FE`n,0HI%\9i".hq7gqoB/#Ah<jXfK:TV8oD:K?=n<);bl.Q'k#_;:YJm0l7df.!]B)"nX8TFH>MXMteq9R3rTft6cI^q]B$=\DnbkZGNVV,_%n%X)FESioh%,/=mYhn.#N59j$YHu39@h</<G2>=+IH/L(LbG+0mh]19B$B@s\)4Z5bj>Z*h*s#<bP1,Nqti7<0mETRro:^Ik8MR2%j-XW*EPC+U0OmjrY&h>5mZ&lt0=Uhnh/cD&%X6+0jVcQlPB"*Vn+lBpA&#j>\SO:g*TP@&f:]kQUjq5BB7E)=Hs<fSr]+2dq6sC7%mVg_Pg6;PAGMKO>]5*N"J+:k!qn9cD@-1g3bAkl(qn,5?\\@oHn+ZgjK:$$'\&R7mXXsc<n(IHj\_ji>%smXu[^PAsoB0M2V5r;&%NK^h3F@6j7;3o+Q05)RM^7]>1cBtS/*N%V3[MmB`EkD3a0t;GFFKT5WnTQ69A$skoMP)Jg6:$Zl[;i_6qL=Pbk4jR2F8c!mDs"ZY%Nktbq`VTIl\`FXO>3<$.]'#Q$efEh@[6M-eHb=^V*7UGCRV.(*[i=K=IV^[_s7br"mTSe&m0<=arHitac.Dt(rk3;2hflj4?BFJg%GIKKbNPFTECp3!rAo9[80Ag<q[CCG\Z/**Cct@6C^$Wkqmd;rG3I1'oHZV6*6Q:g(f]o'7htd*Vp<6fj5L7'us"aoSh`+g:T=qr4%mdEI/2]9(Zh\Y@@qcrT\2:n7/$hh;W36aI&QeQHqX!3lD8=ZHknSL_SX@osi1slUc$I(I=B/preZ^Zo[,^21IjE,6#7F#cN+E;Q<%3P1ip9gH(_ilQ5$Hf?:jW=c6KOgEf$_`9@$fMW^7EcuMigDg0Adk^ufZ^P/ppMQ/pW3ad@0R0(r'mLZWm`iSJG1a1G0k8!TU&ru/%?5+Y!K^o;8UoCi&Q,UmL*+CT'_&psLP($nr5\G+nb#iT"2ah5Y%DrGsr5)5h(17\gJn'VG=\&hg:s;DhTTUIsN.jM>&/<(;Y'$BW%js-Q$66+kU3?2H5qhf39(2B_.8hqqo)OS<F:\geAJ0U3\LReXnoem)40^i9Y=QG9gl#L2\5n)4eM'!A0/0?9p1-m%'kr3SD6;`^!%jTTY&,8H+]_Gd2@U1+\r1t\!FPgD*C,o`)pgEHiKnjU=ubl%qk"I+ldBoi]<BI8uNbo7h8!&_*EgF1^<&%#Hkbas&f#&M([nDPm<%77AeO7'^4L`'KNrT4C%U#$%m9m4)=f&21HMK9=NAK7O$VM^?9mYi9Ml2!2#Y3gPFl"8+?=-3JOU9*ZBtAm,hg7::n%fQf#mf`@pl%_A%RZb60$ABgWni@Zi!QB\<>U(E#(aTZCB$3j#l.fc"$Yl<MK[iBM?6NDS_fB%W;C[lTFp)><-,,a9XJA_<3mH5qhO1@3+L0sUkG%#02L(]MK#XL$\jJXg]`eA6*BZ-u9V4<%!A_q7',VJoq-pU6[G[m)b#0gk7id*"8ggB+r.84o)tbJA_bo:*Hl3a:4umHJ:m@PL"\Y%$C@*R((shXJH9gA53oWgE"3)pN!!;(:o>`b3@r]NoX:3hW'h9<Pdt1]EXEt$bg=Rm[Qsu4&caU./0#<3-aRM&])rat"BetX:d.2q%/fkX]6a8m-$j8R'U*ttq(o3["MCGTp!)!.)h*mR8far,ni/]$*b-I0eL>4FZ/d>"<J:c_mo:+\e&g`MFKM>LqFsDr)le=`+:_q+Z%dB,-c?BTJ\kDp%@W<)0U[I1!?1,4;P7^mQ0L0?#c+948MZg-I3N[MrR@XVdp>tKpsP763,hH^K?hFLk7$Gn!robkS-+VRpi<G?,A%Sq6n#]]?OCET#'K]&ipVr*@Ca!8eosBSVCMkV%i+/Kc1>kTK7I`!DgrQ`(6K=o(as<"RDEK?mU9[m:2ma9OX:%sY&o/BF=,gMBq4%c18t$Vso!&EM-V&VCj+:4<G1pcW2M0d23JKVmruumg]n$8m0MreWe)2R$;W'h<Ss32<e6dM[>[L-*6>`j2ChH\Xi;]KHi(m4%C/e%kmnDS?!ta=<'2==g5PO$4NA9DpQqql1/QG='%Y$;2ec"$^\<Tk8LXcFCktE:r8\&gq9sbg)kbWj^!d!O>l>h&%Bl;!l7KcSYZeD!%3e]cd:*.*(M=ST_mE(m.B+j#JFB]E!(\m&;]/+3%*T!hg%*9_nC<+=mi3dbh^-K+4D7R:jF]QXXC]sX:aKELT3;&MIABWD=gAA+!%:-$OZeEk?KqNobLnZ2\75f&Ee\c`.uRB!g6%9^,nW^>qU5cjb&KE6jnJOFgp@1W4=rGP`7K)#``gC%POU\\EIrH''IkE\u#Z$]gt%4#p/kX*!gAhUl0;d//egYYK+p8ZU5b3>VB$?/ZaYbD[YHrTlG_6Adj[kq@ONa"st<(IDM(/$2Ku8uC-Y"lh&f;@0CTVd:luckOn_%iVO3Qf]%UQGLTcFPSc';e/+l2$?O50[s[JahFb$3`12p&Q$f:1AgD%U>0=\7&#1C23[;b(M1%;/AqqpMaUcp;YNS0L5H1<nY#T@>%d&2$m9bdbH?!n>U./#%R57K=lP_C"bp+g5:IbepEVOOa/'6fioW#J84:l:Ou2pkUZCI^mF<\HFNJCE;A=tu!`9h,(-d=iX<`kUm?%,qccf.nE\kp]>W>Yqh6?KlEi-JGNh_E#:hQi$jb@%<sk%'Eg@"<89m_5E"\I8l?7XQg&397Kp8DmE9%b'YrU^7AHDJ"=l)Gor%?t%A#Q1].FHk\`n0BUP7tU`IG]+b[G"\"N/(8mFhR_id0p#RZh9p]SE-UtIEJrCQrN`2:8[I(q6tEhGBE)NKo$AEatR,@6#7KF\D9V\%lV.Un\'IF>%$lQ,Zr]euCn%/_DWp>p>Rt0aHJY.N?@+]Q,C7Wa<AD&ZjX<Z\5u(pp5]NR17N6#QW>KEl'b?aL@;pPTOi8(^o1uBp%$Y^_LF%1;2/FC5XMSqrW0.Bl/$W*M$k"9<i<b72e?C_^>6VI'0DPn*;/U!FehM\eQ_dF=7X@riEWXYVNDPWXij@QcRK%kI76s[CO%Eubfh0M@A>"3IL*fbngC<iC,6(O?MhAjpDT1?"'j)-CXH.\lcZ%+dWTBmM*MqDghOjuRA!&lb,]UL(EchJO`[HsR-f7Nn4`3J7q]%0W+SMZ-!c_Gt!"$R:3)$F+#Pmr8+B/)bQp/S(i%*_1(Js[+N^lV1:\C5=L""o2$,i+Rdmm>>%0Ub0+_[`iMuKpF/d9nE]-j#8>]=%8a@"'Vp6_\d[/@P(J's'7;A6K(/]/M;Nc$,R0jan;?MHp)I:]74F;P:U/3jIZs[OB:V=%of^Yoa.Wj$*@^?JoYj5fUCAFoVBo]I\%ND"MQZcSWD9i<Gt+)/-&&R_5/T[lX]<8m&Z6o"=7nnt51qZWDjo%f!]]et>X0JFYCl'qW9Er9%3@3e.@mr"QA(Z6&s1"D\B7/:ZV%FmRt:mQ$H*V2+3b>GB%jfi$OuV!!nk4Ml'%'Zu*HlAj$latQ[capcoc)PAe_ar#^tEq&<ck"Ca"osd+-X!S1m["i.W2PiYm\+8pg%%qVq_>>5a,F'.Oc=<j!.(C\g<e^fTKR*2bgS7oD"gV9#Nq%_EDA^8N=%!J5EA8i8d`p\OErZ>Cakt0f.LPf"+]FpG9O!t&+fm4=&%Kg.$ppDWNKNT6H%P\s[Pc:kO3aU=I<JO5&?"NA6!$tO^#J:N#4>BaNq>M\BLcpL8L?P>D?!+7NG_#3=d[M8>fW0/^I2Z"FIQ!KC,%lJ?RIE/:UZCuZuLrd6";TbRb)=K.t@G)\^-mKm_Ng4ppm!q$cB4aKdeSJ2NW$$/Y=oWn->d.(#[%&NAF/^EIFUm8_\X9'%pXki)e%Me5(F[*4sI],SQcb)Hi(Zf;]Ve*":VC7Y+q+J=UZ$0e,T=mMnUd%.hO\iZHn]h%p%CEm+ZeFcZOV8B=7pqY>,)ZHGu`'2sN[+i+s%+GNd=[2RX,d`K,NrU^HDotoAcX)nU?ea!MH)`N_h#RMdgcua$:g6Z.?e$W&Nq%A-Ilpb]L\e"@el:$SdE"82ch-?=]6$-NIOZEcI%G1W11VqpC:pb.Z>R0."@]IWZ<JRCR;K2mgr3u)q-.KpE?56XqLhi%hoPlbqB0Qo_b@[@.q2(O=cZrdKXp,+N9JNh8-7=ThQ0g3Ra%hu.q"MTO18U44N;q=9nTjqX*JR#Yer=;;JhEXfm(5IRW"kB;N^%Z^oOY*f4&'J<Jrmt.T]b(ikg\[g#A1/3/8P^?(4IP1`:3]I\l%.]*aD"Sc."D;F.qSVn[?oQ0RNQ#H6SV)*;mki.IugJ(6;1)#:O*?$`r9)'nIC<#lGlU:ZnPqF7M/NGAtL(ks:[W-#)E\Hi:%_=IY%)(AFCSoH#IaBOesekC&C5Cj6JgDDE-M.WF?MUXH0kc3$=aH)?:rZgmZa^R&MJl)F&a'LDY@kfAMcXc7,h+CgX_4l_LlDA7pO'3I4%=B'W=Vl`EBY]r)qGUjNA25D.K2_Tdf9DIiX.Pk2E@^eQT73/UlKkeC8@)rV0q1r/(Y/,)<"=$\(X5I+J*nPJSs(r-nd1G-i[N''o%-!FM8gkUd_$Yo(U3o!@&!CmDbNHe-Q?4&guS*NJ-*<M'X:@<>@L<[HYE8/+!4k-KZhl;X_^'@>dO&l30[JBRrV`6J?-tpc31jfu?%"T69En'B*:ZL;&sf9'q,qf_AhHUu"D(_0NWk[t#nqhF8rIjfu^)%8*27a*+Jm@b5[CGi[[$73I51RU\d9:$9IOo4m-k[hB01'F)D%Cp'Yam8>9dIu9VqZ,FYBYYrTdH`"NnE)$a>0>DhKT=+!^K/Moih_UeiXr<ujHndYI?jJjH:;ukD[Ho+MPTn"(<(0FDc@@6-UBGi;%^(f%=e'[O<L55Lgh#1P$)C'[!(bRO^Z'C-Jm^td('dj-V6Vi,SE.s#!D,q4MXqi'\TkRX&UTb@Kem9[a`!Td$)b0(NEs9M,MR6Y,%E$O:oj!0#XRkuIHK.mGLY7t]]'B:*B&Qjb4a_"P`RrEjFaG7S+A>ishL=g#c$T:2)+`:m^FJ5XA&EH,.o)utVAPj=:5$0h+R.!q;%WY&Ype'_Y]/'i>6/55FMK3gEDoreteb$7&45lPt9dF3gH+D=k%bnIn3&Lj"UEeeu:<SeI!DgJTsUT#5iFl#5RT+\6<oPh3AN+`bi%rT,_VQ+H8G06]9-X&#qlMWCg+Nd;TP9`#giU<i&?&=1Tr1<#nSE0QAsXbdhAjE;D^)2)</4(M^/OcIu<rW(MP0A4RR!G7qamf9[>%@\!3h]n`$fUN$A#CYp-9hn8o:keia]/`e-S1s(BH@-LT>`7gn@Qpe^,5>5B#a>SfRSeSQua'Pc*KE6;qbe4,YO_%/faR!*m^6Xtk%N=cr/PsLH.UR)9p'\die&o]cRo4l;R?BJn!lO.&Bh<6`R]kDXmU[.r\\SMb#Fnr^UF`jZu2a(&uJ6;[DG]4juBg%F^oMo[PTEmkj%),>Ca.XD3a"1Zk5e3l3Z\/a9ZN1bX_'S)f(@bf:oqjE9eA4P\p@8Ne1!PG!NmOCg<_18ohc`sN7+8Ls^[8/J+)?F$ef4,p1Of`?Y%'?ZCodf%=aK5h#q)@tWQ>=<buHYDoF5n.T*nj]E2!s^?(>efL57"(B6HRa]0#QDCkdCX^1MTZG4UL%Lp-qKW<o$LmX_PM:iFp;6*%ajqG,m^IV*rDV#94X]P&30g[r<1bh=VO-k%3Uh5&<>!W3&SK[C.<KQ+R4f1.QHOYK;`!Gn!+IGJ&Cf6F(IV=datg(/K\bg6F>:>/%LoN(C)T5(uc_P)hpr<hjpLmq6BD>";drag]g3A&p^9nnI>?B=sr-`M8DCl&EB.1[CYTJM@je::gfJj,`BLaA'h7B?q)n_>>I@mJ`%YY_dbdk-uCBqFl]NFhKT@SV+/5Z1n[bluYgCiUk-4N[V)lK]q'bR@VCP(o-&'/ri],u8Dfa!,s23:p1pJ$9QIDnoQ<lMUJI,D(Wg%E,(B_g'\AdgPd-5n"$]E9E5\i.#1h)m[9Yub$i07C-U-m\`TP0.9VHh"@Yc>mF0S:&>QOh^*%u*IPcU0Q%>FE"bh=L7Nhlj<Ig3a%BMI9D^]2/XKfI"1Y"@&!^D'Wa/WF1H`>TR$FU8W8s,gJ&%:dNInW>Yd:=)!)IKKBuEliDK[jckJduW4LW`gS,+'9*.\4/<[\1^9e%.KUg4O!S8o?Pi%QpM%d,keb]6RH91*cnSWL6`=3<>:2IU8Ui\Sc0S:&rgL)A05Dtr*$tID66t`G;P4VYP/Asp\O^m+*<98?8T,Sq%-"!1,GE=X.J;=;BgSe;]2FAnXeoM31'po8+04)_,$k0GN1h*nXjI?G`UH8l=_P%Fk`0%PRA>3^ET@F_938&nUH-EU2#H-V#)$E.Z%6pOt7W/0T3KR/B>hCBq-f@n"e:LB*?8khH-k,:5u5o=bnD/SHRm7L#0poH"iMHtpK;M^XnmqnYN7ear?>n`qk.rCZ](c+%&V'ue&%)51u>pXnLAJuX)qJ9M>a6?H+ENcREjNmC?GKHM8-EPhnP'/9:Y-Hl)J/EN8M_V]Z9kr4#0?AJ]qXIgc6")W/,c5).P`NB\(/_-5!%.J?O`+lN2C)Rjn)j`&<Lh5.sJq:%&KDF*q_7ur"E\n?<K\41:mJ'IcH,[/p32V)laB1<pck^6#=_S\A-@E;n"IAQHOBm':<(PXH(%j*i.OH21'R4<=MhdYqINar"$,6"f9=dJ4UmQ<.KlmVHuQ8A-Z.[tui!H6%u;@o`7k\G\#&Q9hE1I=T(o:7fuN6K=BE9cPUMog^0!%&uc63["Mp#dp,qur=]&jI@XOepTNd[+\necT<_W!1cbHHCr<o^s85-IO)P@$NU'_iYC-#hV(/*KV<_OiK)1W1Jih''>MpnF8f[]!%?]lLr&l/DS*Q0>F@>[ePb'5]OJM(52gegY)7OE=^l!ml8>BbI60&O3Q<"=N/ha*HtH"I*^rY_GM'54^k.FaUaO=q@hn$Gu?Bb:KG%\(u>Dn\cdCbd.VaXANfn45a9c&@&]aVIk*E]S[7GbCiPnVc^gP-=!)<^@]c@P:ariRA8hL3BgicVaeWPck"3Si$d,njQ9@9B!WL'%--bD*?EilOaD0EmOhCZLZ^_"0-E\![(,3qN;J(G2^BNnEDsE*9.c\t6cpY<ce_c<k75,QZLHR:lRCGNC_(%j`8iX?OQ17r+^t_lr%IiqH=[NtMrq/b`:l]>E!1mKmu-SPeC!b'D[WmHTk-b-gMgq&-f&;*m>'h#"%pL1]H4H[Fc(XY,N>uYq$Ia/J\mZ2_0SYKYJK+aX@%"_/=U1h[[m[%dR@@`X@Pm..C-C-[]VhJc.-be48/*&A?%=HZar2])#PhPKqRM9qkcL<Q\gMhk%S&m:-E*>r7"!Hf90*qVa_qA\/+%:^ddm6X]qbK"YW0LP!LFn]kCp[>$X>o#feM4K`mX1MfsL*.bYCA%IoL*lojaNng4d`eY_GO<2$JB".]Fb+?<cB,nXDYPueIRCNA*%iT:kR#+e4\,F@dX?\[V8W8BZ^jR4@hmUHr,4?F$p::M^&7A[X-\p't:ZET6)ne6OJ[IKN\BdSQcVK^A,&Udm2&aAJi4T",:!P$jC%!;a2'>7?2Fd*Jb[#c\p-.Qm%1-X1&(et_b2PEj#Y;C]Oq6Kc,"0D((:5Q;`-@f-Tf>hkiY%c#ogd\Yu/h.]ZC,"&8tH':Odk*##@%G6Csa@8<L1VRmX\)m.,[VT@*5Y_*,&_/hqdnEI4L?h`!8pD7KIEV9L[q5A!/[@7'j&aaqM0D8-^).U4[=*huEm#gOR:[oK]#23?-%RUTCYpPR[cLRA2Qk`bXudFZDt^u8.@]58=lmB1,V(M(>%'JI7r!'r,Ln:N5uEicdr*Y&8D.]M1a\NuSh=]me.RB0Y;I-P3V`1\6a%1AX7@Zghh!4&*e:MZ8+O5la@je%k\TE$f;4UX<.#6N6>$KM:)^V:8-dd9=C6<d-2"1rO>p;*4tN)=ZIY>"*MT%`I90V.!^):Ws/s%=2Zlc+m^Sn'O4H=R,T-*Pl*E7Uj4Il.XsVD>uQeV($@hM"Kc(Z3Vrd3S7U<q92BIC^RdP;_.`V"H":<f.lWPMF7l\LgR*S]]/KoO%IK)+D@\gdLHTaC\(^-J$]2MT*i<(q9D)s+;$N!l'W5C&<"((COUHFUFj+"IqA\,U,R&XV=Q,M.>r+kr470$AteCft%L[EN:kn4i]%Y<TRCNo?%+%V+l2^T&d2!7HX28F*>LWoSm2#3.9Zk]?AL8jJ2-?`Yc%2A<kY>&)=[DrFlnr81JtlTBW+P5VnMl\nl'cL,oh<lZTI%mZu4?>L:ZLoflqSAW_8f-kHg=k1C"RJs,Qe69JiA_L(ZPTn"ENr[5Zm](n;XTLuqA;.Q3+;uUud6j+;A7^im02"j)E#_R;n:u5<h%q+q+X_N"*'Xcg9:pGS0nDGqm+jY('B>.gn19o3PCIqB8n:?hFe+I6L(?DoiU%hmO5Ub!rPpp`0f;ERgfe'/@h4Afk;-rE#j%#NR1%*AE)UO+BQRV`!-(K3b*LiSK-pHdJ5@aT4H$/5[!T*]'\&C8kGNk['`&;$3>pD&Pk(1nJ)'VKd,DhchH?l"F5H>'V0k%A#(MTt1CN%:ensVfq67LKpWdek-WL3dE/b9[_$"6]c+2ag)@e=,agX&M70n2:jFc1a*Yco-p3'<.oKVN$61U,FD[7jUAB,^[$mbpRj>1Q;dlFG%132J6Q&h9b6];5#H?\h3YE%+Z??]`aQidnI[%oYlrc1<;>$Y-9StDUq5l+VeHkl&EI"uMV#_,#D9HLS/hlCS,1'=jQ>$Rk@bJ;CR%qUtppCcr<g<_;h.D%qbTC^]G)bHlHBCD2&kmj?;X1aN.[JcXl,)-k-A,_8AOkG7nuJ7M"aK/gXlir=+a43;u<g[_B'TA<a,L1ZQH%c3WqQ'PeHPAZTrQ23#/1X0aB8#^F^2ibOAMQn632.7=<ZONCUHj!c\,]6IYO`/c9.K/4&FK&R*bD3Nt9n@di<>ApSjW:@6nFTLZa%()'+]_Rim*KtK)pMC,e>3+5(GN$I)%WWk)2RWpr;AHifJUI@#*>sGSmolpg2'Ai'0)E+2V?%38+'Z1L[Y8TI<@f4]<F`CV]i[6To%"KP]Df@Be"!5CYMg=1's]3hH5Ta8):BInY%*C=r#0BK*D87WuK&S^R.h*U"*29F3Obt2l,;+:ShkZYXhS?o=IS-(A$c4FKh5(WQV%FF#Q`,0$QWq@JOb4-[RVJ@+RckA?^i<BZ;Ac:a7,bR5=+"5^.S7Y4p`dR7oEe6^/P02C]agg_/oj_dFAT,2&`m=L]$$SakB"D(`(%f>C9^H$a7;J#NN8P!qsTrN3Of.]D=apg'ikf+6!^pOZb[ki%[rTRrMoWBMF`l3*pfqOaG:.cjsjr&>f3'1GC%!eY"7Gc2#+<r1^V%`8k"=8pumDWU&CdH#VL+d$8tOEb!Qm(8)].&1*uYYoWeZe!,Cqn*cc#+1ED$"YcPSdaj6/Nr20QA/"^#hi?*76,Q!IW$0&4l3@_M%]ZY)-LosuE4cb`*%USj(GXNuZlkg$"Ag0;=b=)B`*Z;l&=_[<AX6<&d`7Wr(Q$Ut5f`()L")IN-(a+QmnN\,":dpI)5XEMUgmFrX%[e4b?c[0G5Oja/tGJu_>C@kV$lDg]6\#.N!!W]>QYkM0*0D&<7'S%p#SZo_;>tJK#>L!]\5fPn5BZ81Nf3K*IW'3Y-PP#N![&k!f%!:D`bXR)-\d`T3e-]-AMk#aF[4>sQ)i6_4?L*=B9>"n?2nrqY]@\N\TKPDpFB#QO,&dGJ)iMhV'Hu`*M3)rXn;X]Sp&\ptikP[C]%6p'ZW-qgKJgbb;Zhoa=:Cmt`V.F7!j,^'k4EB/K?/'ZUUR;6E!Le$inb)Pd^0J%dTejc_sj%CZr$7Oru5Yb'6ir__F22hCn[*0q-%`n\&h@C2G4ChO(bIXY)_GbK.U?'l)u.W:qPFQs(1a(m,h[bsh03,8)>#d6:@%Ef7U^Om]1[k*jJfKO$kppX3]QG[9O6>C"?k/L>j%1%Tufs/NC14+'n*\iu&3"9cF,@Rl03ip^s\Y<Bn16N:669i6CtJd)0,$st<$b\d>t*<2nbDNtj;K`4E+!\'F$,?C<Z1,f@_L_-jk%ND09I>kRQ-AQ'f07SEgSl<h5H<EoSr#Z.LM6\&HR.+/TUNT&b98AoAbV_[h&J+ZUCZWfpes!!_*5Jk?;(qq@A>l+3#E:+H+fBWCA%bm7ab=UaY4eBlG93FjqT:hdqaD_a;<=duDeG9]c..A[28T3M=0*(_G**[>;*s)KH[r4)a.BZaXZr7a@_'+AH3C><AO"oedU$`t,R%Ja;3uhr56mN"l4@iJ[eT&H<)eT18G$9,$U,<8B:FC1IKa>Q!2,@[6e'=sULB2(_FA<Lcr_>&&ptkGm$0_bpFIfH.M`>u5USHDjG!%Ak]_(H(n?Z-b,?/1S#`k,cb-Dd;&,8.6F[m`Gr&6idVo;j9/I`PQ;-s)FAd"?W%53?,0:Y:rK(cTiqaPTZ%r1#ej?mH]e-AN87WB%m'toj[A*ZGI--bRFpt<@o+]SEa"''o$RD:2>WlKkm#Y/!d>8!U&2P6;8$Z^7P.`=KX/NW.7t/>Q9G(n6nA!Q*+osn;?tD-1)hM0=%+Pmb=DF/]nlLZns2sZutYJ*nf&,n8f5>CB_ZW_K]:"a!d'#[$oR!dG(_5jL#6o[(^f2V0/?7[d6o5&sp"1Q7!c':Ll*@q9G1XT]8%o)_Z;PWHIe%aZO@[imu0l?8rG=Tt06`rpAt0QMRJ32RhH?#!U7pC^io_0:YBMjgFMP-GR<n`$bA%f)Os;$sDX?,7[>T\B&M(MGcl%RI+%YJ@uD%5bc=/_OEok/ZY#'i*TN.:]lEu/:'K-.<cAR9g&2W9es<PXIC1B-)l)CV:mmC)2s7V7M]G<O+HIi9;M[^_OM1,SbJh9%c4gNV8s>XC*8KgPooib#.^X;;;'F!W&?g5"MPWL']hAN.lIBlQ?`7&j@B&].jR'\s:af61q./6:H`(>14Ttu=7T2,@W6mSV!tC&(%GoL!cC_Dkf8DGngNN!uOYp\+D*(e2h@=PN:#Up3n@E;s#*1P+YN2j^Ihr6Q0U)5K=Yq^J-7;1HGPouC85g;kJ9D"shN3(beJ&J)%%N\c`r%bqSk&oo)hdKUT4J4ZKa*CDrt!&8DNKEXe\F4c).?*U0P_>XU$:e#YmgWH7PhYTtX8$VuN)HpA*3[m<W^jGbVJL`(A0-J#f%f\/%]hAVB*^4f$ZZ.ZWu8Keeg]rrFae8]eo\b.\;$,nF?=_,`2g?3eh1$=GUSG%7PA%i96>)inc]^fGC`sUT/s!q\5j-`^KWCQ?W%.8(ikZD3k7#ej-bB`O[\9K!.eZRU8D#KNPW3*0^X9RE!G[5X^N,h:g)>@tdK]#<@Y".MIQW'.EfnAbO0mq0_(^jfIc3\G>c?&Z08%6s,%3%OPG`,t(1J)UITfP!NMX$-lQ3'P>H)s58%4l5a\;m'2)-:Yo-UhDmbjjRhllTL)T/eLQI5JKCb96(&<.IF>m@l>>N-h`r<B%aWdclA`tr%o@\gRG4ju__/9QR'V*93[8a*S=GaqtP[8c#2l3QVDjk7f)rDN2kLqXjn&Z??qs:$l]7@D;_41IGf!3M#P`Y!jirYuc%0i@V(N*TXpZe4]>U/3XH[c!<\QrIN2T_c/hT=CQnTt52.2H!L7T]nJ;nKr]N2GG$]es].oq''.pB,d*9)R&PR?$HZNe$fl8`\5j^%iZfB(od5q$+^)R_>u8F-!H/-#Fq)&d9u$l[ZbYj),T?"XZGss,pHfnVqi=!h\V]4++d^?B%Dg:&]&2bEl*)g09IDj6o$ZO]Csn0/%V=_'11Nkaj']g3O'.+,`GG?:l"JVFa6U>U!,C_`NgHH<=7iGbM-)/K3aq-g+.#3qR^3n[*Z0T+e5r(C4&T_W"Aoalj#7is""F2H0%!+e<n?bMF4g\[$u&h_%a&0T!`XnVZ4/s7_B6"CXd=E\m#D!_tq<ad>@_68&DAY@lF%e8C,L\(pF@gn4`rq$FQ(IV1+"[<fJei0Jk%I^ZNd5@3Gb"Ytmt8K.%M04P/Uj!@QR6,5FGJq!]6TL%J]P3bJkqkZ@\2';/:o39>r>mUr7eMI^<1K%@&o]'k':q1R""/5iQnY>Yf%YOa4'_i#2sZ6XD(/FRK'nkaB,`u2k.gQ#?>'lgUmYq<:gqU=VSBcHKP.r"bCU9?K:im72-HffP4/AY`AB0HNs-4@]amNQ_Z@b!]`%])s]*/(*h.Nd,b_Xq-pGm+neFaqkfY.r+OGa#8DcXZAorW!76o`qpf)[g+l$.'aa]EYq]$k!`YM^mf<Cd9ka,`r.Fl2a$rFefkT(%+^Rl(gYM09B"bUGO*a,!(?QK/.<V'4^Z=$+P#9Mf$Cdp`hTC\TD5(Q0NapcMdT#FZm[JLM6GIa/9mA'^^2^M-M^9FpRrrLRo"PU[%nZCid10AT(IE.D[A.g>m(g]f4,_Q$_%'L[,nn>qj)G3ZTcEKho=J>2_.?F-*#$a6GgYNQ->)E#ak>&=UK$:+o@so$?LFG7/M'9<(%Na]LM9YB0A*O9fR8/Js:=WaGp,q%6<n%EW;k,LdKMSc3$[[No:/Z'a1/CI@(W@=8W>](=dfc'/=8PI@BGgG]YeWLmJ(DkdXWG[!Z%@hBao<;mN/odY\R/I0!Ec^4!Op[S*?_\tM0L$S0$g_@uXE-itd*"JesV'2*s4M$"@!]kR6)nL*4-!W,^Vcru2c^>dWH*[?cicfYd%*NgNr9o;68QNDth+(cI-3@^<B_Sl8fp1.[_)p`]["?uZ+`6C&6AEF/@Kn#>-=-lP!/SH6PmugY2a6jFn[Yfp;Oh4S[_#u<#3^oV&%nOnQ@q&%*^?dReL(].'ojNAM[JpQAb5[.?Idt<h0D*Vj7&:\h]p2%-A'A4h=(Q+;8q>ZIiF1JpMRd@9hf^?M7LrpTZ)Zt,6M?BWU%1qUA))"D#5Shc^$LYp%3f%lk++*Yah-BYd+mWrqEiHEi@CT%^tQrZ>N]gsJ)2BA,=VW`>*be7234J3qJ<ck0Eh:W=<a>Ju1F%i>F%C/g4rn0pa<pdNeG,X&^h`VmK58fh:9I@gl&'_b?NpXU"3UeQB23M(P=EG3L^_q31(f+q_jB<KVHhW#$'16<8\!KVo&p74mo_6$$V%[k$($1gZ*@$s6Rd:_fX*]]f1@bW0,8mTC7MC4&UkQU5J3`Q:bLr`Zf_bXV-'MB(bJS7iW:=aqI4!r'Z87*$2$1N'<#oD#UoI_I\H%LqCYFMNK?5n$f(onZ*MGNiqstRr^G?P-=\=6T#:kX(pQ<k@5;I9#/?W.F);!GRh*b*_RN!5tab_KQ0>c6DmoAM+KO0Nj2tG;e%aN%qtA8$3BIQs'HNdXmGd*o((tNZ-RHjMQ\#Ig-JqB'W(lq5KMM\Mb_FU`:_DrDoRO5q`-JVf1&B8OTMP+`*Ipd&\]al_(3$hd`<p&A%2\OQcn29TZ]V):Rr^l)Xo[`]_,_C$]p+fFaq'Fci56_-i<(0]K.6:ANAZ&$,?kpN#?B1=_BcM*/g,ZZ^@F!4d)om>V8X`JdQ6Z2o%8P9">fR@$f7>We/[)K">#R]b@Cob,%-Xjq)8J5l8m>"Sac@$5OY\BZJXj)2k%!;%[9B(`)D)KcWHQ"e:E$*P/(lcO@Os(&O6K85W%\i%=-G*gub]%RM]V_DCJ<&7'7r*O)NYJ=41A\.W1;\dOuI2qU<mSJb&,1@ia^(9tcR^>L;h7c%#*,k0ZqM.b2X1n4fRI8KGdUl\Y%P;<hcT#"+BE.+p)(NJi+qb3l8H_oA%78G>^Y71>H"XiX=^cn*J,\qC25]flTa(_M'j%=9r1?(Z<pk-BkTeibS#q8d202<>_EG(@`%@m9.trke1g`Wk`;'5jl[9(9OL8hjEZ5G&[c6s\tp:Y$@7+o]:BR?5LeIs2c0)*dGFMN))Sm>G>n[=Qeb\%9Z:/KWei9fofE7&.O-%om3n(88t4TpbSG!;rZIXB!eN0X5Zt.U:^3LOp\p@g_D\il1F.XCaWFg\f$sokghJ[!%b*o5`._\NZmF^dlS\"T5g4^"Z+S#R/QPG%kU_O**"2r]-)s"6<suq`rMLYV"uKdC:sVQuVOs\3P6.Af_CCnZ;Kc%td^Ue@(8+p:Fbj;Xc_RMuLRY>K3Tc>_HbQ`%8)26QO,d6[%JS0t.*3qorL<gF=$bTEF7'Z.FT9FJ,aXWhB\][Q3Mh7U6iN$B?$3b-N&@LFAOMI_.OOTX=]&u&2+J.rI#6XJ.A]&G7c['FVC.\a\%(gku]N8oQMd^!tGGK!N6<P?@1>rT,N%@5/#c@ro`I1kug]DKF\fMGg_EaI;cIqZH!`4KRRlJ-U[>RGT?de5F9I73T"Ko7B`ib/=[%WB/R:D.R?Z:Dm2oGm^Vi$RQuYcJE9a&c*@6N,n9jNT41LPl9TChj#8oEDoV\^!(@+eDC)TO]d*ES)!V5GSo23Z<m4^&tcP>8f8Jj%[tFJ:]Wqr#1isan"$"mB%b#V>g5kpm-?`Z7C2V(4TI@Cs3G3,:G+Ed;RGP-:R<kLL]`uj;e2MT15hbcdN0@X^i!kF%C!:UB\HRLO%btn_J$Tg('ELs1M^*`'*C=83g4nM;7J"I6MkPI2sE\jJDZ=Qia7">=/X?CVSr-E0SSrgBYA#7>e)H,HP]o^=&(DMpC8frrS+PiTH%Ste6cZ[BH&L$+#P/c($AX_[Er#"YFa(L;m:6^ffJh]Hu,l=7l"WOsaG/Te^')]tI)0gRgn79_8uS!_d*m_sCb3rl=k?]7WVqJgYe%2S&[Hi#o>N3Vmndg3Aa<Ld;m0f7?)k*"hB*:@^WHN(auk%(guJ1.f\_Hi7O10*1E-dR'3-YWXEd*4St"?1k.N]brQ6%a/]spW$:T%IaA\W.ad^6l_PXF^tI"m@/%!Ca^/VCSTNV%fBkMM)3=el@K2geK]](42)@AZlT8BS"i1Zd$V+#Nm&YNlOa[qlVq\]Kr3&^#1FPuh%@.Xu#PrW)Nn9UL<>AE1=N"21[q78hD>!Jq%,rJAjZOg'=^i3_eg&H:G>9G]L^p4'PdP\*&GSGU`,Ve/=8=>[Wh"K[M4`PE7OPXW?%OXob-`L9^h#pf%<#h\C3g,GnQWVDqFfDNjuL0jJ<f$s$VAKKWCKYai>(kZm(E<ZNS_S6JUHUW<lf`F7]lMB4Qoo1)mo?/uX;CAJF%fOC3\h$/ggq(Aar/&3\51qjKS^Vp5iB1!erh0ZEPSQA0XAU)P$+)j^DAjP\(mAc`PB6o*.(fW%%6Hlf0c_#`WTlr3N3'Q+f)6rmH%!;k_5GA>CSq0]Cf%T76q>;7O$(qQ]R)^F%IKIX;LT,\=koC1[+b/*#r'8#Hlnm!fgSFVN(V7mQM*ti?fO&)pbj@j0.k=]]HZmZ-!%'GHf-"^0>7(X-LW+2f7*c:Sr!PY@io@sf73&X`W&AJ=Nd1CO"Sj'`TemVnf06&P(Poq_Toj@OVp5f!22#"(Laa$R/Ue;@[*1!IfE%UEu/M"T9GaqWGorY&H.4/>KXS'ThqH2W`cTfSc8!%$(F@:H8s[!>TX+s6Kb=k:pYC1[s%Ve&M&%'!iFj"n9WDW``?QW$@83$j]0r%nA!cO>5Z<-6;-m/(p,.!qZ1P;)h)DLKM/b0:Gl<:Len>K<m.M"s+MoO.Sc[c+,0Y*'gH7uPB3%@8SY%0s'\Yg2(kp<@$.T$AoIVa%2$eqGVZ.S_NYh7(/Lld38I5DN.;okJKHH_KUo'6-*+8;Qgd66qN9Td3[B=f`X3OB<AL(I8n%@e5(GJqiB<jj7eP-"R;C(+]Djihm%r'0H,p!Y`]pg>:&c,?J>Ti?0URq`(E/s*!/fj-:GRuUMOnMYQ;!>Vo#Vr0U*_D/d>TsH89CAKZEi-q@^0Cu[8o)9j7#\T@9IV2Nd%0+I78Q=V4j+'-ZeF58XroZBHK$mt)::TS!p+sPGPE;3?16o6ggZ"c-u&Ar5VChAU_Up);fQ%XK_aHk:e3S\?(nuBRM#^U(bp;O:j%1!)NneT&8E#29SKXB2Pg*&<fJ^EN>=LY32pQlb:5EW@TddTVZWP4p#pne3HuVaL@9]Dqe%UWSokCuN+H!b5JD():hJe$:T0DnJ6e%+(!UNHV($k3!\W116:Q<'fc@9:NH;m#`L?dGrsHqYZ=[L&!6Sn?7K"5K&UC@#Lj+L2^IXP90m6SiIP8dc\49Z6<kpjZli-(]t?4d%)ShTn/f@u\QN4@Y'mj0!6:'<3YjX5!D:,@TUhIk`nQ9h1ks7JLi't3ACtpaqYi4&?O'\0HC]T9j:$=fPhSU5Y"g/L,E>](b0V?#i%"K3Tq0B*i+L!D\e:X2nQoZJ+UlNnQqi3Q[+/3ID:('1;qU1n"DcY$<=^WTRp!_/8OP=^WFX:$J?ZXqK#aTfek>Ykp#R>k1/DcYc8%%)&=$C_?H2cE-umZ;iQ.%TWmoAA:WiqN&_uouN5[7O/f##Hrgu$@PB32,K0I<U.$1]*;)od<?5/$_B+uG=)<<9-l;#Bl=ai(QN9d%8<&[q/E@&Um)'NKS`%J!h/?fEpf"*H]E&n[J7WLW"o&kCU>s)p"0oVVG)g(*YS;&HJOd_Tr1W22D%==OEK[acA%KMUR[KFOr>08A%pI61j+[dQ\oh!X+!u4Oa`\[[!nu^#2<`h`0&4Do\,?gE8m[t^-K2*5Mf7E+/Mu02*DuWP5oik^i=:GY":k4m#M!l?2BH-[)(/=09%gX!@sZ>"I+?HN\NWY7uk03S+WdS[6/=cJ#ik0_Ts0$h&&)X;gqiC#:QhQ34a#dmG8_&Hk)JM7HXGqVMf7B:tK`Wp3(H7.<#b*41S%?dcjH2of3lOR)5RSN!0O`oI@JaFOWZb>`An1Fo!;YenB'78sX58_JN#dutl=?u#If_e-e4RUJ6EPQA5GTt]t3$?>MLp/-uS,C&(o%iTjeQmNOuBkK%]b@Xr'B#?8#QCqp`lW]n]"@Wk[rc/Du;!fl+qp,oZFmp#cE@g*?X#,if&"Fm/>`e``MaJ!(Z72(cD5CK'Z#*0H<%QF'Gu;T,tPW=Ldm^`Y7\GONRB'J>HUP:d!o$'>=Li+the3j'oHJO-I[;3_;!M[>%D^3%+T^%:b)Vkht5!ZiUCk^X0J*&nVVJj(Hd%ihN!9R6abY.;?D7kcsrW52Z:E\0>L2U9\<Q>M[.aCY)!*B+mgk="%DA@2\aghJR8(EBOk[]4GN&=K/5k/LfGU$9N4c@!i0a;6e:)%NtsB&>R-2FLX09V?]pZnC2fcCh!*]LYro(2dVHXF%[@^X=%T`2BZVE0,2>5m#BZUP;,c9""-b/3OA)FIhtHC&mPTleg<XH%-d*a6%MfLM2@#<8j>W@(,s5t0Wp=5C,($33F&5Q\<WV[S.ZZf.g2(:WOfWp'OIOHM,+G_eR$tphZHW+F-^8GQaK@P-"Wfao.*`pUAjo\sj%Q<b.>BWsUPNgEo/*/'\Z]$5d,jHl`V4'l>ZF/q!&KOG.MO7t%V7iR3!"ENQfK[6\J4d-.uD:B\F.aI*@R00_Kg)OZuYP.qG^["3i%PN*+A%lK,mMq"*S@SeGGJeBP:oO\26"HWWp<k5RQ\VR_gp_&\Mk@J'QEB.?Vhc^do:=FRsoQ"OnXe(%j$("A*Bl3dO3GbP'%<O%[%[5b.>"GI5hjCZZ'D-PqXWm2>M%]=]KiT[tN-UePC8,=.d=kiB6_-("R:26suPad^Jk5;H7gU4"%(R_E]);F$aj)<^"r[j(76E2_a%5M)eoB`@Ql`n<MdKQ11[:(^W#ITN+0g`e5<TMD.X^_J`ilaRpo^'EL2#.=89N9mGiS@iAM]pK9*T;ik\[>Xl4W\UM&U_e`=rc_2(%Bcn]5Z@&R.0kIB6RFaoe'Jp7fI2D5s=0+IkbfOgX$tn!9o9c8cajY%7D606h$1,XBF0rWm8XidUAO41uU2rg/7;bHcD^%L$Bkp0E%[$F3$>+:Q?_#fmU:;Q*=01o?P*p\CiFSH*?olmbV1MprYdVP;>K4R`5\qFd+;!`DX<DdE0>*:\;*21*QR[_Zf7Y,XU(jlsd[I8g9%St>/s\a:1&S0]8k66CRJ*5X>9DZAUM3B`[I.1k=4d'Eh>h9Et/ac0$RC<d+c!qukZ7c5iB$]R@W$*XU@rO#@"I1/=pO@h"<!?se*%^]`S$+L](mNI"Ho]</\PV/+";[;Nq\?Z$'[@4Tqc5Om[,I,$n;_/\!Al!gSKGYOrK59L%K<@>_dLt_cV1t!Od#aN"J?TfZM:b9;f%D5+F!R1=BRf_7Ru,6n[2+t&"^6)RGG`fn%BE[oM[fPm4@Gk3Xep:X/Z&-G&O18lXY/]WR"2>T[.jb?[Urf0OcE(]UM=--5sPM(6I%4;7oYd,B-<-"Xka`2(Ja^+uZ1@ElWJoV0ngp=bC-I.SgCs)i@A8VL8BLh/LoEiu.)@4jI7UbL.\:sdEi=u7gf#JLTLa-XG2#G>F:%-c45NH.AXp#]UB%pI3E=C=XF65P#$-=i.^.a>;o%?PboHhbtOkNR9usUfVg52Ko2lVYe\Yc8FKmD<9qai=9eI2t)\[;g'^k/*X`;%k*t)3&<p(R-_`OVB2d7.cNgn/2"UF4W`)FIc?(a]&topEJRJNd\=<mQ:GR$<V?!BZ++7,>'e%3XN77b(*$#DW&.V!26E$GG%i"_i%`CFL?:_$@a_H)r3HaG3Aku_L^0[=."2gTM6/.BH+fP5aODm5t1#`5"@MXaZOL!_k:3WT_JX)$Fd[4jLk4e&J@\Qfa?1+9IIMj)+9%ih,!C=1d=iZHOgLB/snJAMH?A5/&AI($lmH0sanORYdpI8oJ2!PlhT`lrE&;l,]jo#ec:AJ^?pr.g0E1NJLlO^)%4FA]=%Z=ig=3%L4c1t4t;!%O6j6?Jd?QMKP\Y^&<#cXitB1AR:)Tcifc6A%7:IhD1N_JPs_d(Y]ba"_OBO1fQ\pn*UJN?asu%sIcOQ4@9T[u2(`[+%Wj[a-"P9@SL4XZMXiUf'EJjmdc'&:XOZLro-suV-Z<d?:`2-d\NmR.Y_2IXi81Nb7i164@HYo>k8I\Agi(d0(N<VZ40fB%g(R`WA%/8F]!$eO5[%Kj0Od^!DiQ86JhKNEW>Fe_d^A3FgAW3B(bRPDKd#IYoMi4Y'A+^UO>m!YrtUa4pE#?AS\H_5H-l/Kg!7'CA65u[t`%]"EV5?Gsb=S3T_9p3tOO61cMiV#/3@LEutRibLj`WMEVYc\]gF7LV<6,4,]\@\aS.Nnl3JJe%4-'A\$IEACBWa67mp=,KCAet<E8%Xb..#&G.DeV\u`:6d67"XA,I7VSQ@YZU`t:5b!;5=a"/FocW.#M)sWLOcRQS"JLECnV1:;k*/gmFda5e.`*Fm=GGW;$InfH1n@QS%Ieo^7ZNT\2//aDG?*Y?@BFbD-VRNY@CI0a+er^]>h/[D!!.pG+nUtHWElN\*r16kPR\l[n^jZg5!#!KpN/-Q0CdV3$#qB^>WA1LG%I^hfLCQ'VZC"ua\.!I+jQ-Y9<f!b\H:E/c7QrL[[8i&LM$,Y!=PMN;F1BlEUjio+9Pd+=qkQOk6Ofk8W,+,;[:?:KrgfiBPP?]0r%X4DO(_Au'3E8<B6_/^@@,*&,TYIN%l/h>dDg;0s#r/7(I];Q%h5R\o_`Nck(C5/!F!s6)B<?L6]4S`s(/@FI=kg"JMTMn]t!-LAc%)DX93gYj>u^3g4FdU-FF#c+rC5[l8gOL:++!B[e29DSO;6'VPm[K.p]&a5gh9B@AdZD$.9ohj5Z>a(21"RiSlLRg9h%j"XT$uqoe%=<h*VAf-CnR#[p!HR,U,8i9c7SAHhqkEDHOiP(=R+06-/b+d)S,LB&fYRQ'eE`84f3/L;+.D]-<0a7i7"!jIAmfikdj!))9Xp-:?%n%%CQEIS><%j@SJ:j\Y"hubB",bg)Y8:f*jo;0jBI_6rdJ6*.IbUDXYaT8?7Lfk,2Q)Pbe_%'22i-1"9iRZ7]cM&s&<eF`i-Mq`8%hr4`mE$WW%1%5_3;Je,^@tB#0@Zjmp<rQuU;^KY\(C!.:+300a(C8`:]7r3G5_8R>;EA$?/U57m7BN>G8jU+IVrb>Mq25O>nOe-W%H&oWto^EIb48^ld%gW3]KHY3HJl!p(J7U1^rUV,hnW]S_<#g7Goe-h;X=FPL-?,2VVL>H*I17A,/QK1^ds2ZH)A8pb/j4@3D.G"Q%fhJdu2iE=s)-NWe\;qBWjQr`+Wm,!16>Io8\8h"b8]n_a`6Q*K*-d;^rI,GY3\Q,MT@qeM"Jj[PIpnjL;Ie2,#54X.P!!hZHs1Qt%d-B#+*i)9`l(CeP1W0NTKuO`%+p.oknA1cORupjW@.\L4CONtV%6*m2[IdDn8[*uE:]2Phd8'bdT/nYL1B2tliU(YrR(aVDK`@XW%@mRXLhC(nMGr*E9f,;,n^JBRMr/Slp=m/UZ;540ld#p+,$gJb.M9,B4ShH:-qnN'B5)'/2/0[@;<"i6)V.XUh959h5&'5W3b]m$/%Lm2/8`#dM-cH^*HZK$%k)kmt!X>:48O/N5a2uULs1G=F2$8e>?KDZ*,.tdj^'FB!<[>0&t(VdpO+LJ0Nj;Qa[1XDPb=flIT&\`5G%]Kr[82(G;_P1Lt5Vr<><=>'kLNX^;pg[S#T(^((C$Ga'Hn;NCOaKR3.dXm(ICQdp*b"&pah!kb!K2"g@JLgN9.khukm@\%*C^=XC%L!f?9AHMB,#Y]NF:J*`K,b5HS=];g3Y3R6F,Z)q^H9s_7W&3nqL(]Y2RVIp<Gi:on8$eZn\Td]L3HEPa<j=%W;+HB=_Y(d$EVngP%KT+#Ug4GrYFtTc&r"\O"rg6"27$#4,4c$*%=4!]R7=*_+'Y82_9F5H$Zm_f=bJ>&lB1&l*b/9]&C35(L79lf-+).9P?:g3$c8;VV%(D+s5#Za^8f.&#M'CA`&[nhr,2J-g)V8eAe^X*L.@`/oXVh=KBM17&>qpB&.El@A5Z()<o]%`/A/>qVn"Rg'.N/MBLM(a89FOj\E%GeZ-+QembY^\',#VJo:[e'"'XTC3JV.nRZCF2r%ZYRE^7>dW[P!H8iIKQ,6k(=DCchQ?j>*C/DK=.@iQoPhTNKo9(cc,Y;VcS:g-%VfG?*bk)Y@GJCS>F;sm8Zn[nEq]P1>.abeAWuEr/s+k6\?*m#46B9=T5Dn*jUck$b)gh_kIi1mK@A"5m##$;+BoWtTGOe0hhjV<V%`[$/VfI+1K<'6;,^q+A9HKeTXZ/p\>:="YSp<-GsJ^\=uPbZi`dJI1.bN/!+ks].%hcW[+fY'Q/Ff:*DOM(#ib)pk;eo("j.k/kX%r`3Ya*sA"j03'<T(7O!?2rug`nEk(9b?#Dl/lTq/=MfRS<7rDW@mo5fPfblTl)4r'oNFpbfaAYgL#.CH?K4>:I?2:W/iBg'=+Q,M%atHhXlrVK!$[!Y8D)8VBm)@TO%HF^O;`#dKPTk\MFH"pH"EISZ[KjtoEuqp)l93hb@Abl-C[.;qdg/<#GpTQNc+36-n;+JQi-?$j%[\@YeqD/97ObJ5jcSnJ(&tRC=HVG*eI\3U[R+eeEgYF9;IRqD&(j>X-hKbSOHOrJ%kNd?n1SYZ%5AR"G8NP@V8=[B9M[&$u%Q;3+%MniP[`#A#(,jO6LT5AsTH(;Rnl@X07C_hW]'U.P6c!8afP:X!Obk6+c\D_2J:;gIcYhRSlpoT#j62%n>bq4I9b.QZ&9?e&*<Lg2%%I(<c#]gp]en\uS%^$!m\="VbjlcdCNm:s0cS_#FK8AW\S;K5",YHU`G/SLi)O)1[&P;t;3Dj2j.</i0I+89-Lks=mmbMJ$!*m&rs%,FWbn@m%N2OZNrNOX8J"@'.f%0K/OTIt%60K=QGPU#^?lfbreT:"-6)ad\E>r6QMrn4n4-&F)'ls-3r.[2:mX.&Ld;-#kN189`\o%,!=AH.rV1-f/-54qX]I"d,l\AQJ?s80>Y!IqJ#A.("C\q5F9u?-$k1GrIQ'L):CGUU4hL/nD.^s=Y5&]4aOa.cXbn,B;4+MK[\IJ%kd[kes0.$Bea/hcBD7#;Fn#8e5[:p'Vc0;fq?f_]m$'kSe_tlrbVrl*Y4Y#j&f*VI%2+t&S.<G>49uQ!Xb3XnI:<e(nlXa+a;i!A%35$>*6MW9ZiaE&IX%<R5E'-oXiVtH.dG+3Y"P,]+[lrKPpA9oSb<Om2%hDtUTAq:5b('_,C1YI(FQgafO%6ho&!G?&W&sG\2k[6O%1T[cg,"0?42ef_rI@-4T2nD!m_H:6.m67[lU]5dDU:[Qep9.+)5<J40i+kXR_0mC::$m>47ok!kZ?$\41hJWCOkt5qP%,lXY*Be8%_V2>$PAauV0XV\"34<2@+5;Kr=WVo@Ieo\JH2Pf$dI@uk03;R.kNtd;W6jFb1n3bNP7@>>+StWG&7<nSQd0De)p=>^o1B%`$pqC!%;nOHf3_[Ph-b\+L?ltT4;Brq?QL_cNF*]DA]lMt\>>/bF03Rs)+$f`4rs3h,pOTm=9M$O1=Hq-FS@6@g_??SMGD9WYa.L(=",4D9%X_mA^@0oNua^f'SZ;s)rCSdAAF!]GbQ'o#_<4SRR%;)IR'#mn!HqNqOlhmSYq,94F$Y]ZE(@PUj5=#/TJcht><!G<3='d%>Iag*-%<a9SgH^T!WDYgV)lO-&<6O@I";1+)t#A7NtMI6D@->B7%P[og0ljW"BW9BX"SV3l*bp(B[h@"2M7I18\=oMci9/os<TST6a`$Xe`%E9-df`V?)nf%Xra9fDD3'Qn</r,3?/C1)g='-._f3j@@V+>?ZU63e$de^[%0_?j(Dl@+7]b*8&_V0+'a)$(Bd&D79H#/1:HaXC*n%Zme_264J>g\;"rgJq6<edAC@$'Z,KXWN20o[i"8DBXc3=;*?.n^^V'KR/)";Erc:G;+5[6[.Q7?31Glfg"97k4O's6Igk%qhI5CK%L#!slQ.<acdt')90UORd2M&iiI'_gDA76F!@T#RSP1do%Wh[MddXjq9EC+J,dZ3LZk8U/K,4%J<1hni]XI<fidWZNc7AK+#FiI;g%:8e2U<)uoWT\^*:+[5@ZK+fGbA2a#:_HoH\6qM'ic`D7,c-,uSlE0B6\iaZRIE9c1Fi$G/Ortc9"M;e4U1o]e>uE?(U:.%7SI[>X%;:SN8D<,+G%/E*(2isI!W(4n4:?b'`];k'lU_"Q2'U@arQ)].5-^n"<>t6V;QP$-1X&(PoMc(&48eGYuPRK$H=H)20E#_IW*Z29S%P-cW;1irghlh-%sJE*G7[Ls?M,3\q9.s-FBdX$RhctKs4ooq.#CGYFLP'SDUlOEVY8[RTAOt"?g_]Yp[:gcqP/.>/Sl(DOCpch^)%+<=.mMt'0#:nh"p'`tD,/Xgo08.-L6.J%CmQ*I'1CKLgO'X\cgK-CXIC>p)0778VC=YOMY#B&Iu4/2/^KTZALkjc;1Yb-T6%+U_3%CsZNUU*TmJIO$t;*Y0P##mT0u_I;%4D1s3&#F2D4jS=,#_9AnHL8`F+8LmS%,qY7s3j:QHi/lG.C;>stLk-QX26+[Ji/EO9RRDFZ%%46aEdA&!R3d;(2BO$oSe3N4A8qV4^1iLo(o+Pjmd8m23=tkL8Ojl[#5_)-3K#Y%EWdTaL_9W<Sm_j;e:p!WR0\&s/BP:80aW!F:%b!+)k7@b9YWdSRfLSTiTC<S@ei)XQ/h11)gR@BrW,8J4CN]/i\o=/QXP(pmA08kbE,FH8s382BoVSE39#Tib*hX]+Z&YVjZBH_l$%+MiS'1>BmK&$Ls7&S4_&3HA1oi\==X18+jX"tOsH-<Om6=8)K"(E4To+X`aX9IMX6nNY%76`Omt7Mr*L-K3Hsr%/'X##b8K+8Q&@%A6-Q=9T\ke6VUt8.%tI54sf=j2fB!H'`h,2!"&i?'7KX6@$hi;b7l^".de-02>2kT51YE9_GBc,d>$,)s/sFZaA)HI1DP@W]\sDf%8JTOf]\ifog7erFg(F2,%$B_Z-5:d+MY_"d"^aYg./ZNfVjE'!bUFTk=eN644u.18bV(m;r?#HCSbuGeipaGWCZ;m3%"=a6?U^D<%IWhFJM^kX*($%_oeMh"VkgGjGZ3^(u\Jp=7ct9:%bYR(h\`#24E-ZD:_.W\>QRJS:kZLgf"aN3Kj:iUPj<%C[>9dHXo<,AA?dO]j%%rr!%1PS(e@r)nVJdJfU0fB^CWWZ3Si9GI6=_]\`Al4@;7q"N!-]8-E+;fLFSJ<]GRsU]YeRSEmGVCm1DpU63,*'eic*Wu5&oW=`%f,D^F;GlL,-6sYX9>VVOaVldp@_L#t_OG`a';V'_+B*<#KGi"2-i-K1B]gs[T[r"c4RA?5?:`(CKd3m"rp(^K,8+NL(?,K(W*VlC%JnW&]29%"pW2-5h*(<m(O,7P0VDjG=5AR:HdY2[/bu@$]L9h6]?ppl*&c,G`=sQJDIk'2]b"WUSXquBAds%.Eg5nY[hJiLI`E'j#%+=77FT%"T5KlL8gU(IWN6%[\YH9\*"*n[?iLMh0&=3ZflZm#5V+*@>jP#0AW'+srS6n4gS0tGfP>u]NOl`^mL>(-m_5/q6P5%p3`%Se@b&!_6C%06gl$S'oY6V_MLWB%\oqAhuT(pu%(d]LX`RCJ9PfNDi2l0Q2agH4[d.>_j&OL5)TB]jEU\ae>]8)P+rml`]mcQ0`o7%EKDl-hk<T.:K,P=VNeDS/ebLb($>=F0[SfE(F0R?S5+WqLQ#>i"S%>6T^b>'%4R*kh'?YHTseTpC!VKZas^sVA?\_W1"[Qd74%0W%:tm<hctboe;BoXt%J5CL,aL8qFp(ZuSXKO1Jp)n%1c8eTNLeb_O^r)XG6M\L;Kt.ge/,!0Mo6(R9piqZ4?Q+fRj.\MWj8WaTp7?=%'AE98o#'L:BG_`<(^F,sqW^3h,p]5Be(@n,eW6XoALjNOV2Rg8MA['7e%0crFe)qjMta*44d*Co4!JNanrO-\1`Ta-Pt2`s'8>!a%OVeF#`:"jqBW'gE8JS0c<VV,;&bO<a"8*Xk."u(49-0r6#oFi[?a:^O_]0"975VMd8S]f_dATEJ&MG!TmhMW!@E>>/4)FH3eGh5p%<Z$G:/4b[Ud+q1=G=2tt7bBVtRC3X`M.56'0s_FOi(T%KL,Pna&?R'@;41b'6C"WK[)#6P[IK*\r!lR3cN]^INa]?3G^@\4[]jao%=:m])(/d7^"MZ$9@25;qTdq0tPQ)R):D4t7MNDsi<%-;\QD80W%Gjmd.Imh6NgtB$'m16XA<MS]:7)Lt_j#7#FI7:2#f@e,N0DcS%1*c]O.nsYb2`qTs4[d;`RZG*l;g'XFku:;(]Vt='5m!LJ#c4%*^/Q$]L=19bbuJX0Bum<I:rkejBS8#Q;'Z:&R[JGcM9&/@1fTm9%+LM6(#YU0u+qG)c;*kUf%6LpT=<42++0?\UE37MO_8T?YnrW!0XnJ%i,3(-]SM@8i*9@Xk-r@JG)101f=+VJ.cIG<h'qoAp`hF_R%'WC`Ybb%U#A.;KWOR/0(Qs-"H$<&HG5d'B8@ac_fM=B6W%XXd3m81d!:GId%%7VSjLF'e8rQhtf6<7'\n4S>nXSe#kj"Cb%V\9p&%;OmP6LZ&Fa5(l%7K[s<=q1h?P-6!YYh+Xl(^mktAFnGJS'C$MSB181_je!=ppgGRS_#ss`Q#tshZ]],q\qI#A)%`&u1'Fta(B]@X%@3MA]&;bA'?4hciE.C4Z)]/i*fX;uTYlRj!rOjbH=+F\t&V^&g-:!nD#gm=GOpNoX$uhj?(jL%QC2nl_\+Q?4d)\ZKPEK;('`V8]%,lBAu->'H`V9f&l6pi7HU7/%m[#'%6Y)6W:&_!tAPGijEdqlIl)%,qcK3WI)dG#'"Jd85,a,C/sTMm-oL@:I]Hn^euC(k?d)Nh#?%QO@;3U-je]O,8Gkor@]$pEf_>RP?g;.'8o^-)=_'K,Vb!8RlAb1#6B\a(<-MPE7#$Htl**6j.g/*<S6."iUo;&#=m8)2?X'bQj=<%s$.HnG"BNlWH)0>LP!1C-`t3ZM)2JtAnGtg9S\]Jo/_SSr]NfSNkP.K&c$RkZni%%$nA%c6KD+u7+=im#8KNV=YhG7-6\7-4*p*`%0ojT(,qAQJW&[?_r..ul@8o4B5n=9_;,NFQ<C7#Ei?+-uCjg_iG3hYS=:ms&L-_.5s/I.:Ij35EMcM5A>h6+f@crSt1rH=>bQfGj%TB*&@dhP8,4!dG8:-A<ge]`^^q>k=%YCbq*N;h94RM[m(7P%g68EaE9Chu_Ha!O/0Q_,h^&FHD!GsR#_UI_P2c&!UG#5Nf8--.4s%M%4:NAl>Lg7kLL)C$$,q$m/D(S'9"c#Kg'UqB$Q]JL&VbPbh<HYqcaPA^!nc_KF+nB_@)l;_rLk_`qhR%'.G]`G[(W-qW`g0Gb2c%L^8&;A>#jmoARB=fW]R&6G`G=6W!9fTLdik_?VnmX>\C15o"sC&Mq]K,S1<0]<DeoN7s)!a+up_RZCq%,'cj'PRt%)%gd5"Bdb%]%p)sgO4>*rh,:dg@MCD'.+G%^-gj>U^EDJkTD`K#S^_][P+DhNU"A:?7O\+J@6U;t.-b?m4&W.4AKY+D'M,LQP&]'d5KtH7D<_Or)%Y@TOp=ijLd+D!(4L;N11:(b]WNUr57fg$UF$0'5#$Bd8U&IjkCM^jP/;eUj$I]!B=ae<=cKW>l$0_eYV@SB1JKB5h7_iqG@SRmKm%R@&%d*KsnoR.-q]Z%[;WS/%bq\G_T'Rg^)HFXm!HQ9<*)GBgD$&eliOEj3Z*#YXmL1B.jCW'ajP?nbK,W5b0%5q55b-mD$UfI@6f%!F6?Q7!iLV8B!tjOP6M\&8;:\BjO(Rb&U]$`e.8k\Z?Wt_O)'*nn&%SA2EkF7BP[?.GVk,b683P.)F@.9,-YW09fH?QPK<7l@K6F%-O"/N&>>P&en.c.R<B,P*3W;Zk#2I=K.>YLL^0f+B10j>/e;8W;]Cm?K-2"%q3Fl/qS8BOl!YM:`@g9K*p>o7<Dl4rOc#[-`/2'Y%(`UDGRNYT5$*dSUGm3_2^6/iG+6nFa#kqd3KautZVGG.'oP`fV`X'[?`8cf\%4n>;'h$OMH2g_$(.0EF#OTkYX!c/Am[.EbHl1m)%PP/_S_5U9:k"mI\Ub`mG%S[0Z29ID3.cH9afjMsD4k1ZpGHPU]PC":&W%'0WWgN+J+oHk%SBk&o_5F.FHqF>L7A`Pk$)//+L;qUP%[S0O]Tj!P.b4gQ5Ps5oAOV+-P/Ftk[RkmSBn)96o6d@@!n.m,`nA8%[H^lUc%.PRsc8e,<_mHNhR9pXRf^:gf"VE!s2;nj1Pb6kJ%2'WXB#h$M]EZ,c]/eTB16WP@HGRHQ9Bp]f<m@5!Y^gK[n/k"RdT0"oM"paB*V;7Nsi5!j+7>PX$nA9f6'kkN,<N$62&!"^dAB@JX%3^-kM[A&U7AAXQF#Fs`K-rcB^&s[JO14eXc2;n3gATRnJ,EaaqK>\*sg\*n_Ol9hK1c6-Y<.bO3n(48+Sl5%$*G2U&_ULip;Al@?%cFc"8),-g*-'ie#<JH03O`iVA:pnD!9F^29;*n9)SM2pnM$0j,P\<YBs-$8j$EDd9>pCVZF@)^T,VUb^8G%-7&f&jFR"7<cC-#Fn%$9,U3$kfTGM40@"o\cI9>,I&X7Vfn6<J_[T7UW_X+TrTWh60kRY`$n79a@"UKpC.%=TsR[RW2C;Ze@9o_W1!Xm/A5M;@Y-]rJ-eF%KYh=p;4+I\@B8'JgtSVJ38]mdn,]+a`0l=YT!'rG%'NYj7$)T]Ak3\WM9-?7hdo.)?t6d(1G>2jk09D(*J%sEP-B$pN/=l_3cn`J%XO%fqMQ!HdCgsdMC/f1B_lI5YT:GBhbh"I@M%uaX/;^he6;muMAJ(UZdDFC`;mMaWLk-rhRdho@hQK<oE"fe\(Va<]OW=;YT9>Ba%()&t>-tkGsP*u_Z)B'S?8qs#C#psO\oRDr^K+skGn`d=R1S.$$jk<A%9060R'u]%rZ^Rf;Ytt_["(+%rlVqC0G1o]Jc4m!R0c[ZR%&nP0]co!5+FHK,d;INHA,t^@PUkX,&#DimJ;^6qEBbDGGSHt"YI4"sgTs6mkm?8r\e[V('_1bn#DAZZ,,WJhrNAG^7f)u:HqbXqu%Knp1K5E15mlB-fF7@g6SL.GbsTk(tBA8EHYOp&+G%#.`<*-T%J&M\D@b&Hc&d2/g??eE4H%bVK'I8Wr@>cKL'F$DH-N@[Fk7Yfo&%@utF4)\f]g_]#\K(riS/Xd0h$&Oot'Kroq]N_]qS<XA9K&>W:QXi_t%(#gC,:udpT+oDM?3$-Oa]PrS/_d$/1d53[h()%CrS@"8f%&L9AMFH[(78\7INU25g^<.gBblp=O%_-/46TF<Zt_HAJ]pX?#93d;SZ^%2)V';e*&#eh3@b\R($,,nDe2h=SuZY+0R'Sq-B(,'0<%qR_D!.jQOFQOM:j8eI#&I7kRpJp^7G@Rf?i-E7]C$4.rVL.G/N78S%up458QZ$qQDAE*gXfNEg5.Y>a/'8AoTJQ*8M\7^CM1PI7Q%@HKCp"<%M$6XC%ZeNgNFN+3H7/4`T<*bqcF6<"Ca.KkZ-@meHT[qZgN%YtbG8rQ+a&2f6*PWMF=VQQ04=Ft.ln9cR'K[m'7^emi[%U-coj@aV`!@:M]W2tC,F#oj1;IWVfAnR7gbe6.l@p.pTA=m)@j/p-,mYh=d1h39\_kp(T2,[Hq;cuH;37fLnCTu0\NT+eETFVo0t%GhTkT'0MNc+%r$@`tCKM,bU#J3f09d*0b&m%%eUPHpf'(0^3KWi\*8La>#/S16)hKVrc)Aik"*$O]NNk>#^1_Z:I\467nq+.5S;]%6Hmo67?9_+k`.p7U'd6\3cmGPT]"`a'U%^>!X/rE&8.]JJqGi@e6iWW"pHARbW?9-U/8[O)b_F*_+0<$o>_F]S-UiXYpGc;$C_R+%2HnaE.S+M39CNH#0#gO$B./=!d5NUkD]<$PJ.r*pS&Vn]nF)[00sO/8efcq,@rpYAeY3Vk6.&(.+[UCDb-7P[-S/A]JG'0O0+j8M%bojiRG`%)N,'>D<0S+chai)i>(INfY";lfN6OlVK6,[bkAr:IU84=LZj-f/U&:)^^g%WYd?u"B3-t:<iRTG2<g+YD6Ou$O$NX2H`%=dtd$.1T(>)Xj+#RJO`KH1$M<RGtNRnJRM-$SM1Nr^>dM;3]6]%]u;Y"DWOq8nbUg@?C$%^_b8O#e?Kd#ZYA.'fVOX'+-b,:.#`l%h\]+D.RJr&K$oKe1h+oE;kC0ZVjNR'5bFWFUQD`F([%^[,ALY-X&7YXnhegf)1<RbfJ7QN].T%=<Q[#JE*,e",0N(?2OG+96/i0f%3=\[/_pk^1F_8X>UZ$Pn"BV,]b_43JbC^1oUr*Im:=V1G<,uiR:t<W3f=l_e15qo]DM+'$a,:R.N5H'%*BT?h7L:;Yo0_$mUmbk9%M!<o_IN;.j]5$ku4&hcLhO8,1(B"`oZ-AMGiqA29R8td@#!bESz!2,tc%p2(#2F%9K>[YnY$W$g*(MJ=&*\_9C!u=^a#%1g>%K*H!s!>fuGJHZr7JI!gB!XT^Z!%cKI%P.S\Jd,="!tU3<!uet+"n2R*i4oEV!="1]:'6LM0N#Eo)N8VRPTDQ>c6UmiG_#.b)N^H2%"*K56<YiMt"dpA]=B9r[G.3,\,UE%<$=olN8Np*`,UP@E79*_)BVcltA.!c9(eAe)Qk`;&-H':<*DD@1W"1UL$ta$coX50=nqcc,%.f]VW0X-'7'KcqlH<#b09lX\?))iOK>Id@N)*QThK11?Li#5:b,p=&))\iZW"/<PdIT#T9bWCAh+B?T483+)5e"CN_[$WIH-SI$8%&9=a0)2'm$8)%W:dQfTBc)/Y6i#,4rl6DW4c%+$$Qj?Ume*7%7+*1W9KGQfLCL75OMPR6`a(f(LZMgS6-LkK:)@4HD7NUuNES0p8%GFkotk=HU1&MGgX,UGju<'au[1M3M:R=7&2;[bLc<4qg].5#jQ)H\mgBi\N<ml=Dp6jI9>]`LnXY+STHE.sEfc;7Ca,b2PWQ/HN+%6SqX`_K:[.U*)4S+/2/L5mir,R1B'i/IpsFe%6j7&IIe.7;J0QW1@&#'$J0S=C&i[U^ahr8i]^$*d&C$Zo3eVLdL`(6>i/lOFY%L%E@6@J>i\uqW6Fq.7+kUO:*:3MYfDNI^^7Ko?Gi4FkV1jYKK<HD8%-`/)E#!16QmdC5!+IcQc9Oj-:ci=L'SBLg4kte>pHsH/iUK]%l8,SXTW\sEK<hC"n[G=Q#-Hi)<7"]8j+r^fGEF45>(O>cpQ!?iaKT1rlj_&&?AjXT6m>ZON'@De[Zj=aU-_S.PG$:B^L3V@[2Y5#%+ig@4*\Js6:abf$E";*K%8+M;87GJ6kOMT(CJ!t[`ig@sX1BMhQf'kF4I%H3B9_*c-3KugA3*^&.BX@P1R]L>VCIdRP!MZ-9g`KK%0h[7!:[[\S+>j^ei"!]5#Wf&!A8'B,MYL6.FG?OB]H$-4=Jon:k_D6e(?)0#C(s9m$IpJT5G>p)G"=su71V]g#mNf$A)s#nLa8Su%V+[(3K5JO=oT;(s#3#g7@#FV_8#a=(nA(\1kIPUNd"Go=0JoH;&i-)"+_or.C4&]3W+is[U^!.s7@]]hKI/N!H&rrK'8odg:fo=Z%&g8KqWe(H[V[=%L'"8$a#m7m4f\k__Z:!t%F4b$gA_4.q@U^$bUR6iJ71cV0!WtA>?BNDR;AL0P@oQ0kL_)u_M&[lLQ&M`'8;KS%%;@=Ct(i0bQF%V<ieN$is51rEj7+5./qbODY_-Z_"j,GH$B%4$lbGR[]OX*:DRR<h1VB8ZIU`O7`d7ZjSN'aS%7Cnb17j&YK5RU<q%7928\2'RFXT1,EHkW=-UYW'*tAJU#80qC`]W2N=A.QCq;kRjU8KRrdJN?WMN;j9]#$7)('apa[>=gCYWi^ohY5[dd-m6O7?P6Y]o%(ArjE4cE=%=4(Yh/3:b::DN7?BU1-hNFp$@,"?C=6Gu&(2+EN2nJrq7Pk<=V3XMBKC9kYC6<,6V0Si[cMGZnG_u-<6':GOC8;@/r%mKeJX9c,6/79%,I-*Tf_I3I+\.",nF`el/ZNKt\:e=]W1,rH@YYta@X0oZh`'3U;#8L+p^66SWHbM^75UdTsWp`H4S/FBei1*bc2%6OCRITqZZ2NND&#MW4qWHD.'sn=,<?9I_kjThb4u<b/^Cd@k=G&ul/4P(o'5MIaqEMOG.ICG6El;"%/5k]hg&n1K2Xqe2"l@ur`b%A@/sKO<E=7Js8bF]W'SeKNKmPnT,[;@%ebf+[u(tVd>u@Or;,X7LBG+QMAr*_Mg9e9Lcp:I2SB?(=<Z-1O6l;G>42.]XV]gqbhK4%_WF$ue_0-3&^Y#o%M<o1B_BZU-*^mY+VI:C>,Wj8,c@QmkfF$lWbk0_/@K"mT8U<?:^sqM;-[OOU('iacGLDM;(,,gCuhB1,$e<h%W/d!pfO.&9.>??^Z/MLR#o"\\oqmI].e\%YW)HBg)DB#[/E0U70Ti_+7?1;E"622VP1PAHe48.n/1ErF168G<F@$/Q$PK)CK#F$Q%0SH1^$(7t1(,A3b6HCjL1=b"6/W$2u_Jg1m.\`AQ)C@F'(T:#MYTQ5C*-.d/KT-6nWa5U;T"mOi&ECg`]0/b;1Qf@"J=Gj0#=ThI%=YSAoENaR>T,]*n71CCPZC;%B/Oj@*5`2L?!ib]:4sNFr#sT3Jd]=iM*?)#X`t)).;aJ;<7:)BMdEKs*Lo<[O6R"B"1F"G_'%4X,%`[&g=6)J-?ln=EJW0Blp`hes;36IDWKTK22&d&^O!4YQF)AUK9P?KmM'S$?>T-VN4!!#k=N&%MF"oq%&!5Jj?!)+(tTuUTj]q#=#%k@AC*\+])2nuW2oRcErD#sF(>IPQA^[AfFn:?qkO54hrdF.fj@T\"YJkd)<+4a#mfi-mi@_A;qf!o8tg@qLM,\m@^TdnN`'jKVp.%oVP3dVSYcRh6$X@mUMlp[.37Knf\6@]*%oL2U*DBaep(HpVE&OI.DoWS/X^ZV262%Apt;g?8aC%PCmqrn7e[1Q]SPKDdWe[b]aak%>6!r@ikHIbY"e@<@,0s%gm>;roL1b52*,%*(h>lNe_GbPgJ3s3`X9(:o;OfUocI=j*k]uW)dMt1hp_VEe[Jr+2)YA7Y+Tr.I&V@K%nJaj!aXOO0c+OB8,I>:Ad2M&2&JQ@Q%7,U[.q=D+c$&iRDQQ6-!jqh7@`)oI2VkD"cN2qS<[8$4a`j,#L%_]cjQ^i"=NPj=%ER[Z%%fjcV8(i=9DnZ_J&c<,$N"f,N?TsPc'1dB'`JU]IDm!Cs-prP/gf#QYn].&h.%\ND?Ur(3J"(5?<,_tjgnX9.8::WFhM;l%4DHn]%%@F7("#L'lm\)q;fj76"%u\jLNOC)*-o3Cf=R3XJ8L7!-VrO)>+2!0)Ee7c_OC/G^;Kn5p%aoJd`oTeU$0V]uk3%-&qX+GGJaM"c%FjUO#a`85\=73UH`hM[jUGAVHB./XZ6tje@Q-.^==Y6lD1^f9p*T%N/kE[b'&OM^CeD3*AK?gAf'IDjemV`qi+<lrq@[jkm.MFD[%(aiI%ZG:Cs%_4q(-Q1(<W5lbdRF@WQ0F=/?=s/JHs$HFM:EKX$!B4&=%WII@LF!)Mh@!NJY?>Z8e,EKIdlCtM16W&f]QF`mA>1Z`%PtZK:102<d.?(7\(\-__=#'`^:c^fdl`:I[GqC%ne'^%eZH3R_p^'@S'Von]`4D:#*n1_23tj6BcG>aMr[o$TH18$oBVZA3S.)44%KECB(#m")\neKV'jmpe:&Hf&01*\#p`!JhN]r[Lok"tXR%I(T8n<*8DEf]+FN,VUA`N$8Xs6ga!0,ioUUJB<-'`lg3/L`ZYIGBcI%rE\&sP%6\_<$KA_G&NSbH)7EF_h$)tA5H$YZh%74q,P1h?ll.0N"XP<&-hsB+[UcSY`c;`cU>([;"hF%cccDKhtQ5H1DYG>Xu%:f%Dua56@Y:e/)ChMOb%0hQVE79":c0ad*qVHP)U*$[`0VlE9\-a,Y]@6d`V('%<f9\_&mfhF5X6a"(I,5M6dc%<ZH7;IZa$+CfY0)9%gl#GFj^M4N>ga,@&N!0P;K,c2a4?+-fp225W`Lj?0)n.YooU.JEdat7\0F't2P-EcOtNfIK>XDir6jE!gFta9ara(/]0*95+[IU_%"26q5_c;N8?%JZThc04@)Sr@Fk@`eY&IM))Y@^%^1pC9iP2OR'ratmNL87jpE;2$YqsbZJj:Ddi2l$K7&kUHJ<k'nd$,R/M.Fk6V%,gEde;j4S+(#pLaD9GC^\`RHuEb+oL1Y,Q=j*+V-o^*M\T3W3J#]OZ&LDgZIh_E$%4)hA6dajDMAtXNh_3-E'Muak<mRS,sr.ejo%Wg8-Ta3SVOE`30?#L#Kt2lEE##aBQFC;X.7p3\oc>NO3881Ur?[DPT#Qn3'jU'.AuOc$GkBMs*?9>M2G+K<:pV?4H[-2[5k`,RXi%fage50`9:id]qf%f$UnH&Na)<:l\.1A\EA</hH?f"LB:<2e9%Wcb!1LV7&)H=r,dW6`737H(.1;jC6"h#?k/d?n6hZ$(?NSpFN)$%rGCi_T^3[02DWV:E6+gD!6(n`HW'D/?f4R4EYd$HP[t/l8f0W2WSVNiQQ<Ip+FODlp!e=TLP9@]P1iTb-;es%VTYYDJ`2G@JciF_%L;)k#[QnTb=$@hDGlKj7S4'/O8&W#NEMiDi?Bm1_MbsNiE)nZeScAqg#F!m[#<g)\mTMV\j<g.';8pgk-Ep(79H?rhN)S@k!h*\t%\QqT8h*QZ`EW#nnG#Sqc6V<&tFE$u0HZ?'[94dfDO[tWJA/Z[C*pM4M$sh%Zc@t]"3"oUq+A#QtNGbmIW@#l`%p[>+\;i6a$>Id#%Ep0I!?ZLj)o!j4PKD?3Vo?o'oUpeVD24:7O9uJq,."qEo1PH=(gmJ,"geXql4dQWm4XZ8bFF@+LYB;(4]>6eMkHreeBC]esguMXW%?*Tetj;*$[G`M-D_iP$k)#iug*0(l:GoDDdJ.OL@kR&Uehl%>(+W(Kae7fGk*+tKbi)1?<h_-M:;'_pI<cU+CSUOVHjX*Ur=%&4[%agO2KO;p`G,TQLZnK#*pMNpRuj+)F8iUKDIrkU+7,MBu*U^*"doHZp0M7-W>9`Oc-$5edFNTqRY*Eg,g18j+>^&)U4(\gl[aB_+"%lI"i94#]/KPL6M<)<f0)BC./GUCJ>>j]'hW1R#qJYn5n>O#WO9R'k,Y:fY+a('M&$_F`du`UWF4-sX"^,HI@a9L;m%OmCd$MG2Bt%6LS0p'4YeORZM_B^sOL>5ZlWJlW>S$F8jafNYS5f])>BihPtF8JFG8U?0S$+d[;,^*""(78+f[]XWRE5G8Y%Jb^6k`$+,HNl"3u>%-Rm2VL9[*DEj-4Wc0V/`fHf(R[XC>ig>MZ/Hf*E,3!kRsSuK\L.sefC;ehFmU1'M[kJOu9AoE],Xt5X_lg\(sSUAA].ac.0Pjb_T%Lfn..%C:_u[!kn.8J%`+,VX(tL_=-`)7Wr35?oqm/[Ddg$g]d^PRa;uG6%e%/k*o#In.2LU[q0lB^e\F1?Cgl$5F*EBnc7A<78Q+%,ZX>XBOu6K+DS_:\KXh@WstqcbLA_:JfFXQ*k#iX-Ig9bER3TX479aN5e2XmQY[epW46.OjC&^>bWn^cfT10sRK`iY4VuE)mXu,E%R*Sj",W,:&4:)eq]%]:8,)+@E/KH+T:k_`#AGGmDk)QGN)WO\4.Wfm=@QEegC$j\81"=Rr']2EGjFbeqQlu'$Yn`-h^lh6>'UT;U%>eh1R#f#ChfP]bO92rPOTh<6K&/[ngm$i=NZUqX.*o#:&&)c*;IYh4),mb`]r2(\hra8Vo<^:<F?';>48#LTHLqF#K1HcFTCYC]@%G%-*aNL'mY30Nug2[$:t7H'&<rRu+_p0^enpt0_BJM.T$_!`a-T#-p4O!m<Dh=)@`(^/5@i[i@\@2K'UJYs_,/\P]3.+8CRjUp;1%HV6R[ih?*O3l+EF,QVNI-<U%C_Y59<PJC,@+BOJrQ0Yq$b)@e$942=WPSkgH,:nGXJ9PTYbDD168h5:Z_.2jB+Dc7*_kL@hgZ-WO%VMu+'BU&"T]HMO5HoWPLBcRKi?XO`#=/I%$Z-"f@4:s;a.if?'AZ=<*k"Eq"'GU1:b0"toC>kHjmPkc@%Vt\Z8RDFi:&*)kF\+*[%N"aXa#/<iJ>:/L&Ku![9I&$l@s+ouifAEP#KJP?41!LXR4TbhGZD/.Z'Zfrm+XR3^D(AZp2DTT@1L?:c%8kJ>En;=iKWb@5.3as=%65@*A:;p>1,Vgr></.h^9X0rEM8eLtnp->C:38WTcg"qE`'QjNL4^:W0_g\*E4Joih/3N$k[(P[0cc/ZBu3<s>?`m9"=3Y(6pj:q%pCBF;MeMC;>:L2q'O]'fFt/e7T,.dSHHQ6H'e(7l>Vre[MO!!.X!Kp&&A!2/C9P<EoN%*QoY@b.;X=%4V<BX7D]>MkWk6^<p\HT#%J"e3e,H+nB=W3%T,#hLUE^5cL)n_Q<%@u!MgaK;'AWo@>jG`"`\6ol2273nd<M^_(_O;<Z_IKO2S!1%re^DdU7=jK>@\ZH-1^07`%8;snJFfGj<.RMmM.7(GNbE;MtQDGYKrT4X^aC=JV.UO+"P#N!867`;QA)A@?HYC;hn#mUf3&UYR-na8cBP^J'?P#q>:;_LPkSYNA%J]m]M9DDT?@I%\2]]<VgjR@)"MMK\27/i*SI?FWAKQ&/n:Z@r10$6g?qC10X%)WfJ1Y6sn#dfU]4/5)Opnp.;Lc5,jd<lr*_f,5j%DY)Ah&4`.H3I$l=U)+K^11)B5E\SakD1X`CaB1uDD]jl%Zicd5c5B^s7>B=q7A&-d3f81iG_)E""FVnrQ/WF[+DZ%B6n-=U4[+r)%%Ja;]@E<S4YQg\H#p5)hAegr.ZQ?J&;;8XHG8Nu711Hp.QIUKBcDW@U@rBa3+q=[3W.A2F3R*PFA%L,HDmm'HE])UCKSA6+2N:*]%"X4?.f?YWCe)S>8gmFY-^uZ+TWStH^HrH<gR0^U%G/M_=Z\d:Hr,NUWD#4JAV^-tm$$nNip<M=4?&J>cVp,G6B"i$Mk)V<XM,S7O%dt,W3\[Wudo0=FLSmWGT:G,eM'D)f/kZmNF"nGnKdipVKiQp^1QQaPAKoKS;+/s#UM:"bj4Ei74A>lt#n;&Tr_"Q81YjYCl3?sc,%9^agRO`5(('Se]?kmq\g,fa5Y;9qT=--7nr4YcFR)k6%t:c_&!VBjS&goN&j7#e$HS<VJ=48.29/emGfNs?XogLJt&\:HK'3X_-(%Z^GIt//EaM+':h>[0X%aYI!5dL+7AqGbm/i?j]<E(+C4_#qhZHhaJ1"669fM6KS(U7d.FdI/k*a&]"YZ%^:Hm!K<daoAZn[CI.>u%4h?c<-7U,7.n]GkY`8VOAXg;t.j#bMS9/(Y&l1ko6@>H,+Ya"Yn`6#&D\bh5n5)m/GUEcNPTW(JH%[E^KoGJ/JeTj-H].D`Ni)oJ%,E`k\6RRAZ:i6r/Zm$LuB^lZ4[SM%`UM)hb+88kcRB[McZ1\lsBN'Z]U8dNC;HtPa'0HTC<:/841qB^]8WRj.C-;hX\I*6<:@`*F%U@s4g(\&HDUbP=?7Gn^=@8J50D$MeTFO:1YHQ=\#k[VCe*@&/'&WWm>_c0V('m19!LAS./QRBg_1cOp$9o!G=iJTCD?!RRlM6mk*%=X6.<HE.2HfhRTiOZdD^7p0Q8Q-bqpg3J5mcDW3s5R,YhS1;ND)\WTXGXop1CBFA<PWXPnOm&d"`.R<FAMEes]$o<u_2GG9c=hmj%bOF7ca+kaHTl(%34E=@tFad1=InNg>eV$P/b%^$'8V.gG>'=E8p6:n[0Vs$-TM.,LJ'smVhfrM[2Xj0-h>VD3^[[!-W=#*Z(ES`4%-WG/-9PI-XQVuVE4KpnElQ8?!a0nRnE_(CEYidF4C`YPUN?UdUnq%jFL!GXt\!e\*G^qmPPMc@?ch,U\e-ZR:Ha=jW6EEoL3eTsa%g&R:BBn(TQWAh.='S%FUPuGeqTMCUSPaE2'Kf^-Xq=CJJ;Ihr*$hIgCL99XS7MT5Klc0^6%)d72id$oc4*II[L;S?\#$HI'2X$_,%MhY)_P\4F!\-?Lnj]qC79Zs&Z2Fp_^F3P+[agBQAiVPm9l\mKb"3#qh'OPRS3u>YToRP+a+#S9KZU6(MBJfEEa`g@9@1f<7Y"s4E%NrWJ8;aOki_uV9mmG>U`o1^1A``V*d?GLG(bdsJapdaX!aQW;>L?gRDIZ3A+6RdKDm%u1s+!&*Y'.`/^%YHY'S;:"ir&XMj+m_2B%CG6M.R[d,&]_s*QPuj*U"?YZdT*Hd`n8]dS&rE%;#)l`t1lc$68_^?1_+//iMUEKDJfOgaCMh'&KJ3Udo4Q"+d/!S<YM;\1o<V[p%[II^7`DQ8mRjDeM>l=k&g+.m,-R7<"=t3Y^5?PdgH#4>meH7#rJL*A:adrYu]e=hN0_,2:"0+)W+gR$dNs_JW&9[?:&q+&rW$pmu%mQh"V(`s"0/X@R?KS_ea4i`,P*@?gYdrG-l'eaTiT#0SUPp8mcJLTK!q/QZE@ss6*A3/f^Q%UP"e,Z7Fd$[\)eTC7!Yiq%064p@q%).[I,39)E#+sPag[PSaL/c'(B2qGU>1rN,0FB8leCO(\j^T"?1PBHXSXJ%.D)5I[KUB!kuZfl(`=Ch7).t]U\%bN'%=K[e8.;K,r%FoeqhGt7aI"(gj^fm7?bBF#WE!C<^Q3#;1Cp!RJf=O^YhIT94`cN5GZ0D;ftV<Gc!-^+t/i7*`C_CdV)a(?k28`.pj+dNYs-?`0/%;(gPjDP?]-k&1,D@j`mBCd4ii5:VTRlkj7Ebno0#;RD3H3Q4?,D*_/<kVAs_d\'T'^lXZ[;-C\jBnG;+k!l@DEtCo>13!&gO?Vs@%Sm!1=F\*u!AT,O60#'kPeV2H_aAotWF9.u#Ma$F"*1qMlW]ufsW'AhPbJ7m@G+H?jljb6[gRIQakpRURT2+>,6$W5E%JOoSgs0n*%EMrsZ9F4"O#HN0KGUNi5[/Ooo4$ubrd(!*o>'L?ik#K?.B@VmqFEh2++HjdeTd--q7Q$*o+,<qShD_-em7*>bGGsU(^(AZG40!UP%kO=/qWSeQh1_=R:UV2lrF1YF$psf-'SPlZ5h-rVd_ecmM&9.7QS'.%OG6\Y"5P/-rK1e@dJ3XqdQ<QoCV9[+8J!AoiSX_>J^!]"S%\5#+Q0N:<SOEVkqPR*%2"Tb[K&mkKP0(h%%A3t6U3I=?$l1RDOk<pC]6His"S$:BBhVaKM3]';RUZQ#rH5=^gq4;#Pa!7!Q.rs;Z%7\95O`L1kW^>+Y4)MnHQgt4Hd_4=BN#^TbP6<KEajp7n)gT6j)k8YYK2K3BV%5C2^iSp5D@^ms;Cj=`g]W)hneei8&5BXMthd,AN%XR,VTc5H%c*FbUle<*VA6MRo(LE8oc-6iJfan4OC/\cIkTr<WVCQWAQ?OOR_KP_%Mb]ZRu%2$o*'g#]_.&"F'fY>+=ihqWaVCKqF%.5aPm?/)+OO4^@:d!\4I&8g!(IE9CF%83hieiM9#+8-t.O5?FB-@:#@<hepIr?V9N[O31&#)W94b:U*N8_r#ApejM6*h2U\qb)X<%iPn]b<8W&<+"G3<QZVD^$YF>Ge$8i8dd#CJ#%$-#"80Rg^D`2/KoC.Kb3j55F?9SQb-3!gi:.X^Wt/^AQ%[@_j6LH'1&kHnq\2S#%GnPa9I(MMG?N,m6c0@tb5X.2R`%pQ&DgJor>9@Ct0Pj0_4f*KB4L(tV7GUn\_FoQn>sE,$Dng%Des"/dIk%"$Ukb*:^^&I'W:-[o%Fp%iOeX-Ajd_G:p,LP[!eu0fm%@;N.qfJKaq!jV1!eBtcmT_/.JjDP90t6("UkSrqAu-[]9a4lI,8ZQ)$:RhdprI&_UJ:c=K7]-b%0%r*$R2H$T\U>J;%.5V;[<T^_)qbF3@/OrK-3fjW-\nX\mDRi2`ePQ4"#rpdF]nR]%mmSP'OQWRYiPYh!--pZK8J/u'Y[77Z24!G%GNqT[F\,EP<N#aH&6h@8_<jS]3?I)@Be)+L$!CRj;<aHO7)*up".`YY7!)C"/r"BrcEq/",&rK/=[>9/oECtfk'Ko-<ei1g2YH!T%,jK?:/Ji,(J5TS"7gLY?4kp]hW1i(XQC`0]m1&M]V_Y7ojBHLj@,nSE*8i:#lKNu\(49NM\2bamd!u@k/hrobCRE7`P/@\qB+Wn_%hnb/^CclUZ:[[=-O!W6I(GYR,1X$DQ&("UN+fF,BnRp[$C`_Yu^Tu4!/^\>?<B3&'SZ/E42\%-m;_h=*lCnQ*_4@`k0WD:1$[:s[%&P1!Is&J1bh&*jNaf$AMYoof_fsJd#B02D;q[%WGEo#A!f?X;/2=MZI'O(^(VRHPE^M_.\O,\uVP=N#,s%SQ,h60DAMo!si8QDdp%n`.cbis;rclB<Jir87>Tgd[L?do09Hr>lY16Q;*(6#_[6h*i8-E8Og'QIC$4G+P"QEG7Z:gD<56aI6"9LVRa/]T\]*g;,-".m/.7%$&m\o>%h1c_6u.MnYTU^8!/k+!@6]Ep*p7TV[,&OAB-0q`E&p\)0/B;F-!G:Q3=cTcVMKFk.6!bj=H2:I!VB`2A(Q!`8nhXofX<9%r+Y0C*J->.!_+M4dl6i,ckm:MWe>@PS9LL?[TcIkL`R!a,'1M,"M)ifB7,+T)WgX8U='cnjb?@`aUP>t1fF)uV+,MaZ[=P^ZY6p"%QBP!,lV#P;6tqFEmhN48oq7)k<h/)sT`'%/b-Lc]hDWt%658[3br<$i"`jBb!]pC5KacM>s++9J*b).a?/no"!Ts;P$`1S#5*qW4%D8Kr>?XI^6Y+.cXV69"$=V>r,s35SdV^VMW!#,8l3:IYa8e$\ROWZ3n8L(i$T,[@(cY5\9_]*DjZPoFPB0--%jT<&?p%j9Zc:#>X%=!(iN(k8eJC27m>`t$sJ//(4q]\m,siTl'!ed<mT^u$ZUDTRqCj*+P3CdB9nA>-&l5(Fql-o:]_N>-;4U.5WDh?"E:/(:;VZ'=B2%=o&./2=0BfZAWr#3X.*g#D$dX+A"*''$B=aRFGJuF3i6qjgV7s2<cOZ"F5pCiYJu1@PA)WW)L0K4i"\BO)sJdA2lhLVb%9DSAH;X%;_Cs=>YiWL0b)l8/2#RY%%RWAd[k^)8jY=%-GZ41FZ(*4rgX,CA6j"f!.0L(M$!pYnY7ID\CJ/sdM,9*kLt7]DQ9os3h4+#15X.G%F$X$/i'dSdjWcPe13kQp]0gEDb'>$?.Pu*Y0<oU:QCVp5cCo+lI["iZ]r;tRd-f+1B$7;2*>>^!Y$*5\>\:Z1C^p>AU-5Z1,d5WN%>l7PqpHCM/7f@GU'f<L^'hK*@#'k4X[#SjNm[]V#KMI]dF<$6DVQ2cmrCg@T'_Qd(gteTcAr;$`]i+9Ifj%>GN]<e<]0kYm1]ioJ%U]g5h3+m?XCj\!F8KB<1VbZtAT[usNVqBrB2-=(g4"GY_S7C57G!m&qoGG"W@j2=*)J0@f!Gp$l%09=?F4<4FB`]56?Rdrg1S5cZ%V55Y\h&'2OJ'-C;7=V,#`H3`8%B$Do/_l=p2Phr$YVr7#F[k^j&>]C.CmddH+MeM=P/4GsM1s4qim7oeAY*)43<Y0DVBc_WYk;L5%E[_tF0Wlc:c>b2)I5R!J)5T*aYAgG:O6(B'P4b\#]Fr6>f:q]eAYAr1,mo>rUf#5WP_$kT.Nj@pg6bX2nk+N+6G_1t%k`Em\Ar>-%LXE9rU-6'?o3UIL9)jR#_<>d>0E<@5>_R$$3$8jZ<D6<#f.I;,%\+Q\%5f&:8JPZ(iAb!!C?T);@:]U-=XP&(#"mg!##@tGde8:%%<JJ?JbOKjCgBW&i^S+71&914rj&'@mN7I&=o5]QgO+mBoPlFtk)0PP!&\28d:4@?SeQ91Br[r!OQ9V;VW%J3h&CeAd#tEERA@A[_%:U^?.)n_q1r"\"@e-N=RS>18[J6U*t.Vh>)KE59sm\l)8Z*OTO)!LXp+=]P)Bs&IF_]]LnUBOk`DO]N]TJZ@ao[fJM10US-2++2q%,NSsWH4W@*$+8;#@u(!tU10_j"/;d3Q(c6QFSk]4QC9"^c+H_/E[YUf'Y5]ll)M7a0K'4<h63$_-r^dODLQ@^X+R^3eA9@-7d^>-%^f_`_C)Id%5\ofK_gpZd<mW3'pP\"1$Erte?];N$k^K"8#.SWKdr(SoPu<(<GEbKg;GjM(#Q@Op,hCNICma^t4h3%-*G)c>8Z(2E%'^QI&)MtiMgPe*Rh@X@qU&npKAAd/h5na!s^P,89*6jJpB_Tf^kL>A+!q7&WG>[!JMOUaXQ,DTi$J8ZOL2JABc50<i,Dq$*dtt4h%MKS$--K?iK,;mG,=1(gtcfm*2Ecfs6#B%UJ9YT%0:-hpjaGX]B$KgbVR&Dh'&oC-hAu-^*j7_sErlKR+LME*5#8hOsU6fCoo1$+b%2VK$0]ni,5+9[@3AE7&iP2V"]NJWaJMbk]ui\"#F^^3LM_PgIPig^,:2-SaOU_:H3I[uMu"u-1r:C"f<G'uW!$JTu_"OX9c^5U00%![HlWMeIfjB[fU'f.jCe&s#Tf+Vu&<"K)t-.r`<s//OS5lMDK"Q]*c]p=R2Us3D^pU@(1G'>%sc@r\1i.^*D.OY^I*rsN3?`q(7Q%QBQs+q"0`kp4Gl#?4&,&E-'9#qqbAH5H!HR2%@W#C?&5o+Pc#drDN.BJ[aT3IGkgJG_r\&U*gJVl;FS;IFlBS%8^f&fH5FF9;V8e%HWsdA0RAMADb@OlM0\E'Ub(uQ;87?2>O@*8.&)Vt6/f<g4W9>I9QKc7d-M8YbJ">@ViK\oraIN(HJ"FlJUV74C(%\@Lb+`Y"I6HW%[W>r1eeFo)I298?K/Gum,-m_e#uXA@'><6aRpd55.+(d\UU[E"$&5r!j[B@5FjXB1#:"(>oD!'jn\Ua<_ta@Co;4H;G:B!Ic!t0j%Pa/9Z01@Rda,:[<mXZ^[DNT`.6UttJ:j&_h!sK6-<fdENeEl3M@q/X@[[AJDA6ih'k4Vucp8>U:#-!<io1Ub5Ulq=d[>a^.*Q:++%Gf+JB`=Jq:>_ks6IH*;i&nq,-Z]GUcaj%--lm@Z7PrJ3ga5B7u.ZBuY9!u)#TYPYi1Rd#gVmTp8i^-#*UEht;_-`N7ee!I7>Y9NS%@R+-*f#jY*M#Nep6GQ]@>:>&04>*1,pfbI([.I'he\$]8linn5JD6/pA@eso^GsO4f=T[M8Aer:5Y[bI*I<rT'$E?E2PE$"/<$/c%"sfPs"B%1eJ4bV?It?[;)`FbB6-A2@0OKqO<s/,W#&3GsV=AE'@iF@NFih[sr8GReT+C(t3hHSLZ\)FV,"7e[WYF]F/7QkTR!>\#%;p5NQM["+d),A52MCrVndtp;WeTqSQR_qIWCj,d9H;=!>Y7*P8UtYecK\ktX02K:PTN7p*E@p1"X<u<V_j+HLP7tg43#D>(EJ+hR%5AVAj?Nn1;`2u&E<c>?(9O::#j16&HYqe\$(oJ*.+)1&=I!+,;:P\M]*C%43',`cD'ri'P,3"iBg0cs-/B;:`a=?+RAe!L%.g1_5%8*,?mAOD?/G>g[FJf6,k>@;Nd(m1\o4AIC6Y"M)nZUhuJ7p\q]NFN\-_aW0##QSIqT85PZo<5(.b"d<fqs^3l,VuJlbuIafU@=OT%l^K_J@TCA>Kq+"-!6lYO3?VjWm0h6*;'^%]hCnghQ."6!]%ORG8$Hf-GBG&cl,u$)<c2;S5B\KiDC28"<C8kHWTH>fk#9BB&XbZT%0<lg*]M!c-P'6nbfF@^N!Ja@\SAWdR5j[!U?@;0F3hmRSgn5O95N\Zmi_3>BG8K9u85p5Z=T3j>+5;>\GH!/kg"^iV)9FR3Aj^Po%"<AtrFuO4F432(hJt;eX=om;gnojP.Wu7r6`@[hS>RD;5DQnp-<B4Ss=V3o^02^G,&`AM?+:m#K6tIMli7$I@?4e<QA1UJ,(4jNL%QR3G5+fc;L:DtM)*U;cX&\uTm1*qkg<Ei1GWHU9?.NYb[$4OD!lBPC8*QJ00!T]sSU\LBlKut2X4=@)Y!#<#s!ke?.,K-7@TB[+*%H#u+Eb0uk;>3HHN!)]#i-f%Ssl.i^QdM>4>)?TOL!dlIY1Bd+7#i$+'2$@cYQ%$k;qHRVt*^t1**6qZMI3m9+7GON#/OZbss3q!?%hca=;&DY@IQ<IVI?b#tn2_kM4SG!N-5,^0D82m"ELT>A6ji':Z:8k?#VdJ"t+L]ak\3#3K>+=<(Skh+T?b#>Dq)_Ki_i$&Us"Ohg%eUU9+bcbMgTG.jN*4'@ANOH3$K>hIf0%>.>2$'V"M"07>3ESHp9#cpaY0k(>9SjeNGOf5]+<_<0MB5m2qC.'MURhT,gRdNp=ZCkU%s-_Zf^>/L0L*dE^b^u$Cp64I+A41p;QbhooK!pI^#)UTf%sd*(/Qm,`0t8:lg6ZXYI.:0"KF>GsJFa^T!&gct8-?3Zm_RXP]%*/'%LN1J:3jKP^[e@h![/5rPGH%9taG>aA^449WdJM^m&='9.558ks&I5&;UXPRPFrFKi[t%f?nk%"DdL/PG029Hr!2guZ+$]C^=73a8%jZ5mWSU[duP?[ks+fU&+#b&&e'5U4>E<!D(AT6,cEo7:fcG(!ID\UdW!.!26>_0l&^\bkl`=JE5i5+5l_d3)o36/VR<_JR9M2EJ=%K_<+]^nE1XearF,V:u1l#"dlYU"BoA-^P!#J=UHoR7c6u9YR-5V6NI4!Z.$8r-sJYhPHd4)&j4`0d-WJ)g:u%+@^B_os(r]m7=t)%?oki2qae`$pgPM28s/K8:YSgXhc$0[Xih&lMNL'r`d2kDA*PPDAVH8:Ud0ESd!)b_D>cjX617?88Z><-fD@XB^me>B,\S;X-$c2J%$puf<\1L.rrKrE9*o^!hE^NO+j1ga!BnGP/_V+`16^mE-f_o:\`Lu_'NaZ%(h!I+e'oM\c-rLs1</'m89)q9iV'QKRXTa)d5%0=5%(V$i02sl%Mo-""RaN,lt<XZoO_mI/qY\+js(T*O4(NT#40b2QHdq4a&D<A&ZmC8J00r^g#B67k?Re'o\V^dZc6NA`)FWDr+Ebj$$%>*W`.D=T]`$17k=8J<J'@D'$;8NRfu#9d4!QuqkH][5)0!N@mf6Wm'RQa@NbWk=?K-cj!OM%")g:b+Gr1_/0#lr8p%8Q1an"f2[J%AJ9#sa2.P8=s2Ag1@:-fm^T=NT%PcT13`db8k23?'?%mi?7h5dc2]MWd_tZ&aQD91.uf.5[F3o]>t(+h-)(D~>%AI9_PrivateDataEnd