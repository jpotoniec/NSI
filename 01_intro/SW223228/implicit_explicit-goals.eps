%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.2)
%%For: (kyle Hamilton)
%%CreationDate: 6/4/22
%%BoundingBox: 0 0 884 330
%%HiResBoundingBox: 0 0 883.2291 329.7500
%%CropBox: 0 0 883.2291 329.7500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.2.1 x197 R agm 5.5 ct 6.4%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 8108 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD55FFA8A87DA2777753774C4C284C224C224C272783FD66FFA8A2%77774C4C214C212121222128214C2228214C224C214C27A8FD61FFA8A277%53224C2122214C224C224C284C214C284C224C284C214C224C2727A8FD5D%FFA87D77222221222122214C21222128214C2128214C214C212221222122%214C284CF8A8FD59FFCBA8774D224C224C224C224C224C224C284C224C28%4C224C284C284C224C224C214C224C2727A8FFA8FFFFFFA8FD50FFA87E4C%4C21222128214C2228214C21282222224C214C2128214C2122214C224C28%4C2228214C222804A8A8FD04527D277DFD4BFF7E7D4C4C214C224C214C22%4C224C284C224C224C2122214C284C4C77777E7D7D77FD047D8483837D84%52277DFFFFFFA8FFFFFFA8FD46FFA8A87753212221222128214C2128214C%214C21282121214C4C7777A2A8FFA8AEA8A8838483845984598459845A60%5A59F8A8FD4AFFCB7D7D4C4C2128224C224C284C224C224C224C2228214C%4C777DA9FD05FFAE83A883847E846084608560856085608560855927A8FD%42FFCBCBA2A277774C4C21222128214C214C2128214C2228214C2122214C%77A2A8FD05FFAEA87D847D845A845A605A845A605A845A605A605A605A59%F8A8FD31FFA8FFA8FFFD04A8A2A87E7E777D77774C4C224C2122214C214C%284C224C224C214C224C214C212822777DCBFD08FF838483A8848560605A%8560605A606085608584AF84AFA9AF84A8A8FD30FF7D27214C224C214C21%2221222122212221222128214C2128222221282122214C21282122212828%7D7EFD09FFA8847DA884855A605A605A605A8460A984AFAFFD3BFFA8274C%224C214C284C224C4C4C214C224C284C224C224C4C4C224C224C224C2222%224C53A2A8FD0BFF83A8A8AF848560856085608584FD42FF7D27214C214C%224C2228214C2128224C2122214C2222214C21222128214C227777A8A8FD%0BFFA8847DA8A8855A605A605A8484FD0FFFA8FFFFFFA8FD31FFA8274C28%4C4C4C284C2228214C4C4C224C224C214C2222214C284D77A2A8FD0FFF84%8384FF84845A8560605AA9A8FFA8FFA8CBA8CBA8A9A8CBA8A9A8CBA8A8A8%CBA8A8FD31FF7D2721222128224C214C212821222122214C224C4C7777A2%A2FD07FFA8FFA8FFA8FFA8A9A8CBA8A85984A2A859605A605A847EA8A2A8%A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A8FD31FFA8274C284C4C%534C775377537E777E7DA8A8FFA8FFCBFFFFFFA8FFA8FFA8CBA8CBA8A9A8%CBA8A8A8CBA8847DA8A8845A8560605AA9A8CBA8CBA8A9A8CBA8A9A8A9A8%A9A8CBA8A9A8CBA8A9A8CBA8A8FFFF7D7D7DFD28FFA8FFA8FF7D2777A9A2%A8A8A8A2A9A8A8A8FFA8A9A8A9A8A8A2A8A2A8A2A8A8A8A2A8A2A8A2A8A8%A8A2A8A8A87D7D7DA87E5A595A59847EA8A2A8A8A8A2A8A8A8A2FD04A8CB%A8A8A8CBA8A8A8A9FD05A8FFA87D527DA8FD26FF52522752A8A8F87DA8A9%A8CBA8A9A8CBA8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A2A9A8A8A8A9%FD04A8597DA2CB7E5A595A5A85A8FFCBFFA8FFFFFFCBFD07FFAFFFAFFFAF%FFAFFFA9FFAFFFA8A8FD2BFFA8FFA8A8A8FF7D2777FFA8A8A8CBA8A8A8CB%A8A8A8A9A8A8A8A9FD06A8A2FD04A8A9A8A8A8FFA88359A8FFFF5A605A60%5AAFFD0CFFAFFFA8AFA8AFA8AFA8AFA8FFA8FFA8FFA9AFA8FD31FFA82777%777D777E777D777E777D777D77A27EA87EA8A8CBA8FFA8FD09FFAEA8A8FF%FFFF6085608584FD0BFFAFFFAFFFA9FFAFFFAFFD3EFF7D27212221222122%212221222122214C224C214C224C214C2122214C224C4C7777A8837D53A8%A8A95A605A84A8FD09FFAFFFAFAFA8FFAFFD43FFA82728214C224C214C22%4C224C4C4DFD054C4D4C77537E7D7D777E4D4D214C5253224C21222F605A%592877537777A27DA27DA87EA9A8A9A9FD46FF7D27212221282122214C21%28214C21282128214C224C2228214D4C7777A884837DFFFFFF7E592F532F%847777284C212221222121212821222122212221282128214C224C4C534C%4D4C534C4D4C5227FD04A8FFA8FFA8A8A8FD27FFA8274C224C224C224C22%4C224C224C224C284C4C774C77777D4D4C214C5959214C537D8485608584%FD07FFA9FFA8A9A8A8A2A27DA27D7E7DA2777D777D77534C53284CFD0428%222927267DFFFD05527D52527DFD26FF7D2721222122212221222122214C%224C284D284C224C214C4C84837D7DA87E7D4C28215359602F5377A8A8FF%FFFFAFFFAFFD0CFFAF84AF848584846085848584A984A984A87DA8FFFFA8%FFA8FFA8FFA8FD28FF7DA8A2A27DA87EA2777D534D284C2228214C537753%7D4C535253284C4CA2A8AF5A845A5A7E53222221222853537EA8FD08FFAF%848B848584AF84AFAFFD4CFFA8A97D7D4C282152595952A27EA2534C0022%35605A84A9FFFFFFA87D534D22222122214C4C777EAF60845A8484FD54FF%AEAF84A883A87D7E4C4C21537EFF845A5353595A224D7DFD07FFCBA87D7D%282822532828214C4C77537777A27EA2A2A9A8FFA8FFA8FD38FFA8A8A8FF%A8AEA8AEA8A883A87D837D8483A8A8FD05FFA8A228222860608560AFA277%2221214C53A8CBFFFFFFAFAF8485A8FFA8A2777E7753224C212221222122%2122212221222122214C212827A8FFA8A8A8FD28FFA87D7DA8A8F8588383%7D837D84838483AEA8FFAFFD09FFAF855A532F5A2F7EA8FFFFAF7D772822%21537DAF848584FFFFFFA8FFAFFD05FFA8FFA8A87E7E7D7D537D53535253%535328532827A8FF525252FD28FF7D7D52A8A82752847D847D847DA883A8%83A883A883A883A883A8848459605A605A85847721214C84A8FFFFFFA277%222828284CA2A8FFFFFFCFFFFFFFA8FF84A9848560605A84606060856084%60856084605927A8FFFFA8FD3CFFAEFFCFFF848460845A8560605A84A8FF%AEA9774C2177A2FFAFAF85AFA8A24C4C214C4C7D7DAFAFAF848B60856085%848584AFA9AFA9FFAFFFAFFD48FFA8AF84845A845A605A8484FFA8AE8484%84AE837D2122536084FD05FFA87E28280028355A2F5353A8A8FD50FFA9AF%848560605A8560845A8584AFFD04FFA9FD04FFAF84847D77527D7DA8A8AF%8485608584AFA97E4C4C2122214C4C777DA27EA8A8FD3EFFA85259AF8484%5A845A605A605A605A845A605A605A84A8FFFFFFA8AFA8FFAFFF84845AAF%FFFFFFA2282128605984848483A8A8AEA8AEA8A87D774C4C212221222122%214C224C22534C53527D777D58A8FD30FFA8F85960855A85608560856085%5A85608560AFA9FFFFFFAFFFAFFFFFFF848584AFFD04FFA88B6085597E29%4C77FFFFFFAEFFA8AEA8AEA8AEA8AEA8A87D7D777D52774C4C284C284C21%4C21462127A8FFA8FFFFFFA8FFA8FD28FF7D272E855A605A845A605A845A%8484AFA8FFA8FFA9FFA8FFA9AF848584A9A8FFFFAF84845A6060AFA9FFFF%A84C222177A8FD09FFA8FFA8AE84AE84A884847D845984598459847D59F8%A8A85227FD0552277DFD26FFA827598485848584AF84AFA8FFAFFFAFFFAF%FFA9FF84AF848584AFA9FFA9AF5A855A8484AFFD08FFA87721224CA284AF%A9A9848584856085608560856085608560855A8560605A852F277DFFA8FF%A8FFFFFFA8FFA8FD26FF7D277DFFA8FFA9FFA8FFA8AFA8AFA8A984A98484%5A85848484A960605A605A8584FD07FFA8FFA8A984AF845A2F2800222F60%5A605A605A605A845A845A845A845A8460845A846084847E52A8FD2BFF7D%A8527DA8A8277D85AF84AF84858485608560856085608560856085608584%AFA9FD07FFA8AF8485608560605A605A606085607EFD04532F597EAFAFFD%3EFFA87D527D7DA87D272F605A605A605A605A605A845A845A845A8484A9%84AFA8AFA8AF848584845A605A6036605A605A84608484AF84AFA8FFFFFF%A8A8774C2122225377A2A8FD41FFA8205960845A8560845A856084608584%8560856085608560845A605A605A605A846085848584AFA9FD10FFCB7D77%28222128224C53A27DA2A2FD3AFF7D272E855A605A605A605A605A605A84%5A605A845A845A84608484A984AFA8AFA9FD1BFFCAA877774C4C214C2121%214C214C214C224C27A8FD30FFA820596085608560856085608560856085%6085608584AF84AF84AFA9AFA9AFA9AFA8AFA9AF84AFA9AF84AFA9AF84AF%A9AF84AFA9AF84AFA9AF84AFA9FD05AF84A97E7E537EFD06532827A8FF52%7D7DA87DA87DA87DFD26FF7DF82E615A605A605A605A605A605A605A605A%605A605A605A6036605A6036605A6036605A6036605A6036605A6036605A%6036605A6036605A6036605A6036605A605A605A605A6160605A606059F8%A8FF7D52FD077DA8FD26FF7DA8A9AFA9AF84AFA9AF84AFA9AF84AFA9AF84%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF847DA8%FD97FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.b0f8be9, 2021/12/08-19:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/">
         <xmp:CreatorTool>Adobe Illustrator 26.2 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-06-04T14:12:23+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>96</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAYAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYqlOuebvK+gpy1nVbWw2qEnmRHb/VQnk30DJRgZcgyESeTzvWv+cnP&#xA;yysCUsZLvV5NwBawFFqOtTcGE09wDl8dJM89mwYJFg+q/wDOWupSM8ejeXIoyP7uS7naQsPExIsN&#xA;P+DOXDRjqWwabvLEdQ/5yY/NO9RmtruysKdfq1upp7KLj16nLRpYBsGCLHbz84/zNvU5T+aL2EEn&#xA;eM+gTt2EHprkxggOjIYo9yTnzl52vDW41nU51cfE017NKDTps7UyfBEdAy4R3JbPq88sjtPf3Ukh&#xA;2Yl6k02675LhTSAjozkRRLIO3IMSB78eIwpZ5+UEcifmP5ZV0WMnUENF6dvc5rdZ9Q9zh6jm+38x&#xA;HHdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUbu9s7KBri8njtoF+1LM6xoPmzEDC&#xA;BagMD8w/n5+VuiBg+sJqE4qRDp6m55U60kX9z975dHTTPRtjhkejzPzF/wA5aXB5x+XNCWOgJW51&#xA;JyxoOtYISvQeEpzIjo+8tsdN3l5f5i/Or8zdf5R3OuTQQtTja2NLVKMPs8ogrsPEOTmRHBCPRuji&#xA;iOjCmZ5ZeTsXeVmb1XNSafaLA9z0y1sW0qg57RMT6qD9n+VR3wqibTS7+/me1treW4unPwmFGlbj&#xA;tRQFFScBICCaZVp35OfmbqyIkXlq9hdPsLcILdT0FWaf0xlRzwHVgcsR1TcfkN57ao1dbCxkSvwy&#xA;3cbUrT9iAzP+GVnVwHVrlqoDqqR/kf5hjkVJNZsbhFFGSBZ6Upt9uKI5D87DoC0nXw81WP8AJNiv&#xA;xahAr919AkD6Sw/Vh/MyPKMmk9qQ/Bd/yo0KPh151ruVS3oAfolGHx5/zPtaz2vDu+39i/yn5UPl&#xA;n82PKdkbxr31bqOb1HTgRVivGnJ/5fHMTUSMjuKZR1Izbh9F6v5V/MKW+u7jRvOBsIbosyW01lDc&#xA;pCealPTLmo+AMprtvWlcoZKX+GPzRj9GRfOUc8iuPXjewgjR4y8dacefEqivTbctSooDirOcVdir&#xA;sVdirsVdirsVdirsVdirz3W/z4/LnRNXvNK1K8niu7GQw3AFvK6hx2BQNXJ48ZmaDKMDLkgJf+ck&#xA;/wArEICXlxKCK1SBhT2+Pict/KzbPAkg5/8AnKP8r4mAU303iY4UoP8AgpFyX5Safy8kvm/5yv8A&#xA;JPEG10fVZK1o0iW8a17brNIafRh/Jy7wn8ue9Jb/AP5y5hWq2XlhmH7Mtxd+ku3sIWr/AMFkxou8&#xA;shpvNjuq/wDOVnnuTaz07T7GJ9leRJZpO32T6gX71ywaOPeWQ08WIav+en5q6kZEn8wy20dK0s0j&#xA;gVR2pJEsclfm2WR08B0bBhiOjC7/AFPUtRnFxqNzcXk6qWd7mV5XC+zsSanLgAOTMCkOFccaUDce&#xA;S02qT0U18BvhSiNP0q+1G4S0021mvbiQD6vBAjSu1NyoVQT8RwEgc0E09F8vf847fmdrHGSSyj0i&#xA;B/3izX8gRgx+0PSQSSjwFUGUS1MB5tUs8Q9M0H/nE3Q4lDa7rU9ydm9CyRIEVh25yesWX/YrmPLW&#xA;HoGo6k9Az2y/Kb8o/LMXrvo9qT3lvuV0zMO4SYyDl/qrmPLUTPVpnnPUo6TzUkFoI9EsI7awT4Uu&#xA;JgsEAp2RBx5dOg39srAlI7buJk1FC/vY1qXmC8u6rPey3IIoUj/cw7eApVx81BzJhoyfqLr8mt7t&#xA;0paYtUKqqDvxUV6dwW5N+OZUdNCPRxJaiZ6oq30bWbzi8NnNKr9JCrU/4Jtsnxwj1AQMOSe9EplD&#xA;5H8yuQDbpEp/aeRa/wDCknKzqYd7cNDlPRFL+XetkV9e3Q9wWcn/AIicj+bj5tg7Oyd4SWX8m/MM&#xA;n5gaD5k+u2n1TSWRpoqyeowV2Y8fg4/tdzmJnyCZsOw0mA44kHvev5S5TsVdirsVdirsVdirsVdi&#xA;rsVdirsVfEP5vKjfmP5nDSmIfpB/iBp47Zl6P6j7nI0/NiUEcO/CdpCPtGob8CDmxLlqTNqPM+nH&#xA;Re3LjX8KY7KpQraFgZ2LXBfdRXrXxwpVGim9YespmUk8IUq5r2wKnWmeSfOGoSifTNDvr6N+hhtp&#xA;WjQbb8gpXInJEcyxMwOZZbpP/OO/5pX9EbSltLSX4vVu54o25Gh+NEZpAP8AYZUdTAdWBzxDONF/&#xA;5xN1I8Jdd8wwwup+NLKFpA495JDFSnb4DlMtYOgajqe4PQNC/wCcefyo0cq9xbvqcyHkr38/IAnr&#xA;8EfpIQf8pTlMtTM+TWc0iz+wi8taRB9X0+OzsIK19G2WKJK/6qADKDZ5tRsqkmvaPGpZ7pAo6nf+&#xA;mCigimPan549TnHpXFIl/vNQnBEajuVUj9f3YACeTUZk8uXexm61vTw5mh9TU71ut9eD92P+MUJJ&#xA;rTtz29szMWj6ydZn1YBqO570Az6jqU/qyM879PUc7AeA7AewzLJjAVycWGLJmN8/NNtP0bS46Nfm&#xA;WdhQ+lGQifSdyfwzHnqD0dji7LA+o2yOy1TQ7ED6ppixsOjggt/wZBb8cxpGUuZc+GmhDkAij5xj&#xA;HW1NfDn/AM25HgbOFr/GFeloR85P6LjwJ4Wv8Xyf8so/4P8Asx4F4URYeY5Lu5SH0AgYgE8iev0D&#xA;IyFMSKTzIodirsVdirsVdirsVdirsVdiqX69earZ6VNc6VYfpO/Qx+lY+osPqBpFV/3j/CvFCW+j&#xA;oemKsW0vzZ+ZF5qAiufJv6PsjLFGbiS9ikIT1/TnfioDHjH8abb071xV4vF5a0PzB+dHnK01i0W7&#xA;t45JZUjYstHEiryqhU9GOW4pGJ2Z45EHZmMP5V+QIRRNIQDpQyTMPoDOcv8AGl3tviSRUP5eeR4Q&#xA;Qui2rV6+onqH/h+WDxZd68Z70bF5W8rQikWiaelKCotLeu3ieGR4z3lHEe9NLOV7NOFjS1j6UhAj&#xA;Xx2C0yJ35sSr/X747m5lPiebf1xoLSw3NyRvK58AWONKtpPIf2m+81xVetpdt9mCQ+FFJ+npja2l&#xA;99dT284tYbWW6vm2W2jU1H+se2RMw1yygbdULe2WqWkC3GtoBK+8FjGy1r779vH8clDEZlxs2WMd&#xA;5n4JEYfMWsXscMdsHUH9xZofgX3anWnic2EYxxh1uTUSzHhHyDNdO/LrUQqveyQ+pSpjUtxHt03z&#xA;FyavucnB2fEbz38k5TyhcqABNGoHYA0H4DMc5HZggCgvHlKUfauVA8eJP8Rg408aw+WoFrzvgP8A&#xA;VSp/Xh4j3MTlCw6BaLstyxP/ABjH/NWGyx8cNHQ7ftK5+gYsfH8nfoFT0dv+Bw2vjHuVLHT2tdTg&#xA;A5MCVJJFKbnK5shO0Lq35am/1K6v4fMut6e12rK0FpdmOFCWZg0acfhpzOQSzCCL0oY4ubSemoX1&#xA;HNWagpVj3J74qvxV2KuxV2KuxV2KuxV2KuxV2Kvif81NY1XS/wAzPM8+m3k1lM986PJBK8LFevEs&#xA;hU0qOmZWkiDI33N+nAJYwPP3nXoNdvz87yb+LZsPDj3OXwDuVY/PXndno2uaiq9ytzK5+4sMfDj3&#xA;BeAdyKh87ebN2bzFqwK040dmFf8AKrMKYPDj3BHAO5Hf8rT85K9G8yagoFPi+rwHf/kZkfBj3BHh&#xA;juTiy/NfzywVj53htivQ3FizdOlfTtZq1yJwx/moOMdzIrP8yfzJuAGtfzK8vuW/Zltxa067n6xp&#xA;0Hh45WcUP5p/HxYHHH+afx8U+i87fn7Bbeva6v5f16CM09W1mtJeZPakLRHb5DK5DCOdhqmcUedh&#xA;ko80fntdeWy0vltpb1+j2zW1spB6CrXUkpA/mVBX8coMIE7Gh8f1NBiJHY1H439zHNC/NX8wNEuv&#xA;0ZqHlCO1epju9RgWa4YMKmtIzNyp0oGpX7syo6OHMHZpyyxQieCQ4/Mr9d816kLQaqNJ1TVJblm4&#xA;8LS4Unh9olnjARV+XyGZI4Y7WA6vDosmadyIrvsH5InRv+cjPKGiw+hL5Y1SzNR6shWN3YdOTFjH&#xA;77dMxcmCczdh3uLQjGKimo/5yu/Lk9bHVl8Kw2/8Lg5X+Tn5Nn5eSLH/ADkt+XEo/wB65rZexeBy&#xA;fuXl+rH8pJpOLJ0CrD+ff5TzryuPMDRmv2Gtbtj/AMLEwxOCY5BH5WZ5ouP88/yYAqdfr/rW14P+&#xA;ZIyPgZO5kNKe5E2355/k5LII49fgVjvWSG4jG3+U8Sj8cicGTuT+XkOiNH50/lSOnmSz+gt/zTg8&#xA;Cfcnwpdzf/K6vyr/AOpltPvb/mnHwJ9y+FLuROm/mx+XWp6hBp+n67b3N5dOI7eFOZLueig8aVyu&#xA;UDHmxlEjmyiK5t5mkWKVJGibhKqMGKt4NTocixbNxAIzIZF9MEqX5CgZTxIr4gimKuhngnjEsEiy&#xA;xNUB0IZTQ0O48CKYqvxV2KuxV2KuxV2KuxV2KuxV8+ee/wDnGzzH5j806rrFtq1nDDqFy1wkcgl5&#xA;qD2NFYd8vwZRA2W3FPhNsZH/ADiV54BP+5jTaDpvOa/P9zmX+cj3Fv8AzI7kLdf84tfmPBGTFLpt&#xA;21CQI7iVd/CkkUY/HEauHmn8xFI7z/nH7807WNpJfLwmCknna3EDuaA/seqzduy5MamB6shmj3pJ&#xA;deW/MOgyQzapp2u6BGjANeKjtQ+KVW1U9OnqZMSEuRBZcQPcU40rQtbu7ebXNM1iyvUjNCmt2sEs&#xA;jBurssy30S7/AMzg5VPNGJog/D8BoyZ4xNG/gn9t5YnvfLAv7jyUuvzl2CXuiLAsbFd/TZdOnYCl&#xA;ephrlcpy4tpcI8/2hhKUydjwjz5/ahYfM35c3NodA8xWvmPy0FYRC1tJLeWL4tj6gkginCg/sUb7&#xA;8kMMgeIVIpGDhPFsT3p1pnkjV9G1NZfL3mnUG01H/dadI8kHqof2JfTd1IPcenvmQIj+IC3UZ+1R&#xA;MGIjV9fx+tlur+V/zdhsLW40bQ7S7uXYtNBNcrRVHQFZDaH4u/xbZUdRDlbDS9nwJuZNd36+amn5&#xA;4fmn5fQw+Y/y9f0rcUklsRNDCgA7NwuY6f7PKDp4S3EncjFj5RKMtf8AnKDyVdlY7+C904t9sCNZ&#xA;kUe7Rty/4XCdIRy3apaeZ9zJdO/Nn8ldU4sdbs3kICk30bwUG+x+sIgyqWLIOijTyj0TmeH8ppYI&#xA;7hrXRruGT4opIoLe5BrvyHpq/XxwRhlPe0z1cYbGSCby95Guf94fIVnckmiyS6fawxkeId0P6slU&#xA;hznXxa/zsz9MZH7EPJ+WWi3cpkXydoFmpp8EsKudtv8AdKov4YfFA/ikU+NqDyoe8kqMv5H+Wrr+&#xA;+sdMtwNwlvZRgf8ABEhsP5kDv+a/4Qf46+Cj/wBC7+QXNZ7ZWJ6+mgjH0AE0x/OHoGQGbrkPyC5P&#xA;+ccvywH27F28KOR/XB+cl5MgMn8+X2fqVtM/5x/8haV5g0/XNNN3a3GnSLNFAkkZhZ1NauGjZz4b&#xA;MMoy5TM2WQvqSfenmv8A5VeRdf1KXUtV09p7ub+8dZ54wfgVPsxuo+zGv3V65WlCQ/kv+XUHAQ6a&#xA;0YjlinVVnnC84FCIeIeh2H379cVTzyn5L8v+VLS4tNFgaGC5lM8ivI8p5EAUDyFmptXc9ScVTzFX&#xA;Yq7FXYq7FXYq7FXYqw2L8xpG15dIby5qwLX0ll9dW2ZrYIjtGtw0uyiNitd+xBFcVY1D+b+vP581&#xA;vy62lwiz0tnWC5/eBpOLqu9Tx/a7YCWvJPhCdf8AKwNXOwtIV925n9TZHiafHLm86a3LQLJaW9f2&#xA;iku30kOMbXxZeTl1S9uqC58wiEDciGML/wAN+6xtPETzkrw6f5Skf1by/kvpSd/WmUVP0EN+OHZI&#xA;jDqbUtY8p/lLqVsw1HRtPkVvtThI45iR/wAXRlZf+Gy7HkmNoktwziA50HknmH8r/K9nfi+8hanq&#xA;WiXykkTCVjGBSnGMgpP8yzn5ZscfER6w0T7YA2riCKb/ABPeaMW816bPr40+MK97HEb9XCr14BAy&#xA;NtVqpTuWyz0Q2GzgnjzZOLETv8K/R+OSH0hPyW836Mnl+DWNQ0q/Y8vqokW3QvsFjRZy0bqGbaNW&#xA;BPWgyieTKDdbO0xac4jxyHFLv/H3oy2/Lr89/Kop5O8wy6npkahI7C7eNPh5ciscdw00KfNXU5X4&#xA;uOX1CnIGaE+YpH6d+eWv+XbxbP8AMLyw+nTPIVS4iEq1XpWNHV4pPi/aE9MZYOL6DbDwIjkbZDqP&#xA;5ofl35nuBp3HSLl1RZCdae2KDenFQ7FGYE9A9fbIxwGAs38HHM8x+iJA7z+rmqf8qO8gXkyX9/og&#xA;u3ajKll6NnbkH4h8EEsasPfInVyGw2+1ljOUfVIn5IPVf+cePJmqfu3/AE5a2wpwtY7u2aFaU+ys&#xA;vrEdMRrJtuOfCbERbHLr/nHGx0x1Gl+bNQ0hBTisxgJ612Mdxbd/bJjUmX8NtktYB9QCFm/Lnzhp&#xA;pH1L809RYKCQnOUpyI/ljvJl+mmTEr/ybTLtHCOdIFtO/Oi3QLb+ffWAJ/vJJ6/e0L/ryfBE/wAH&#xA;3frYntPT/gOe6/5yB5Hj5xgK9jxX/slw+FD+b+Pmx/lPT9x/HxVX1z/nI1VJXzXZuR+yLa2qfvtA&#xA;MHgQ/m/j5o/lLTd0vx8V/ln8xfzhtvzA8v6D5i1uO5t9RuE9aOO3tQGiZuPEskKMN1PTMTUQEZbC&#xA;myOeGTeHJ7HrXmD8wLa+mi03y4l3aLKFjuTOgrGSoLcCynpU/h+zvjsmXoWKKWHFiAWWtaHwrire&#xA;KuxV2KuxV2KuxV2KuxV2KuxVJF87+Um1S50pdWt/0jZ1F1bcwHjIIB5A+5yUYk8mE8kY7k0qP5u8&#xA;toKm+Qj/ACQzH7gDlngT7mk6zEP4kNN568uRiqTPMfBI3r/wwUZIaabA6/EOt/BLLz8xbA0EFg83&#xA;h6xVPwHqZYNGepaJ9pR6Bj2pebb68BUQW1uh68IlZiO1S4b8Bl0dLAebiZNdOXcEFYaJqupNW2tn&#xA;kXvK3woKdau1BkpeHHnTXCGWfK2T6d5H02D49Tm+syf74hJCD5vsT+GUz1JP07OZj0MR9Zv3JpFo&#xA;TKnGyubqzt0qQqzHgB1/aqMxCO87uZGG22wYH5z/AC48m+ZJmDytf6uRtc2EC+uCR9p54yisO3x8&#xA;qeGZGPxI73Q80DV8O0Tx+VWlejeU/wA4/I2mTJBe3Wt6GVpHYxSJLd2yr/JE/wAVKbUhm/2GTOTH&#xA;I8hf2OTk4ssR/Aev9vRN/Kn5qflzf3M9h9RlbUQG+uR3CNNKdyG9QzpGB7jK8kcp6beTj+FHCOIj&#xA;43aW+bfJf5V6+kstt5Xe1mcUN7aN9U4t/wAY4+cJr3quW4zKI9Uq96D2pIfQDJjXlr8nNd068M+h&#xA;ec5NHtGI52hujA8iruAzwtQ/THkp6nEee7dHW5Jx3jEH3/o/anvmU/nZGjpZ6Ums2se/rw6ityrg&#xA;DtCfRkr/ALHDDNi6bNMdCJ/XkJY1B+ZesaHAq+a/y9v/AFyd5zLPbRsD/KrQ/P8AbyZJl9Mg3x7J&#xA;w9Df48mQWH/OQn5NpEpl0HUIZKD1FeGGYKfm05JH+xyqWLKerYOzIDkAymw/PP8AIuWNZRdxWj7/&#xA;ALuSwnDjt1SFl3+eUnDl/BT+SA5RH2Jnbfnh+TUjiKPXrVD1AeGaJR9LxqMicGTuZflyOiaWv5vf&#xA;lfcyGOPzRpqsByJluEhWlQPtSFBXfpkDhn3FfDl3JlZee/JF9cRW1l5h0y6uJ24Qww3lvI7sf2VV&#xA;XJY+wyuUSObEgjmnmBDsVdirsVdirsVdirsVdirsVdirsVfNei6dd3/54edIrYKXVpWPI0FPVQfx&#xA;zI00xGW7h63GZxAHe9CXyhq7V5+kntzNPwGZn5iLrBo5+StH5KviaS3Map4KC36wuROpHcyGil1I&#xA;RSeT9NgUteXbmPx+GIfjyyP5iR5BsGjiPqP6EXF/hGwAZDbFjtyJ+sNt7fvKfQMgfEl3/c2DwYd3&#xA;3oqXzFCyF4obm5jGyyhPThr4GSQrx+7IjEfINh1A6An7vtQsvmCYGhnstPVh9oub2ZfcCIGP7xkh&#xA;iHcT9jWdQe+Mf9kfs2QT6ppV1JSUX2vXIaqxN+6gr05LGlSPuyzgkO6IajlhI78WQ/IfJNbebzjP&#xA;GItO02DSLUmqs4AZfmp/6p5SRjH1EyLkRlnIqMRAfj8clX/Bt/e/FrOrTTg7mGL4UB9uVV/4QYPz&#xA;Aj9MWX5KUvrkT+Px0Q2tfl5+X9xYzWt6otJJl4Nex3LW9yKAgfvAy1pX7JBXxGAZ8pNhvhjxY+74&#xA;/teV3Gg+f/y7k9XyL5si13R1fkdCvmEhA5Fiq7+nvU8mjeMk9syBEZPqjR73JOuwH6iPgmejf85J&#xA;eW5pEsPOvl6fStTPEMwiE8LEjduMnCRAT0FG/wBbK5aI9CylCJjxRqQZpJ5p8kXCBotJZwwqCI0i&#xA;6jb7LVyH5KXk6qWuxfzShH8xaFGa2+kzIezLdyoffpyyQ0Xm1HXR6R+1KtSudC1JgbrSmmA3Hrzi&#xA;an/IyNvAZMaQj+Io/lE9AR/nJDdeUvJdyGDaBbAsKVRYlPj1SNTlgwkfxFI7Tyjl96XN+WvkxiSd&#xA;GT4uvxyD27NkuA/zj9jL+Vc6j/yqrySTRdGqT0HrXH8JMPDL+cfs/Un+Vc6X6X5JXRvza8qfonSp&#xA;oLATRy3Dqs0iK3NgSzuXpsB3zB1P1c7c3TaieWNz5vbda8rfmZPqU1zpPnJbKzaSR4bF7CGUKjBS&#xA;sfquWJoyn4iu1enjjuQh5/Jv5qSwyovnzhJI4IlGm29UQKKKgUqPt1JJrUUG29VWReUtH8y6Xb3E&#xA;Wua0daZmQ20rQpCUUIOYIQVNXrSpNBTcmuKp9irsVdirsVdirsVdiqWeYtDTW9MNg9zLaqZYpfVg&#xA;NG/dOH4mv7LcaHFWM6Z+Vv1PUFvp/M2tX8glhkMdzdcoyLaf1o1I41p1Vt9wT0rTFXjljc3Fv+dv&#xA;nN4JXiYvKC0bFSR6qbbZlaQAyN9zgdoSIgKPVm36W1P/AJbLj/kY/wDXM/w49wdP40+8qD3M70Ej&#xA;u9OnIk0+/DQYmRPNcnpkVYsCetI1P4kjEpFKqXAjaiyTmMj4ghERJ+guMFMhKu/7lRLnSQwZrKaQ&#xA;jqJLgcT/AMDGp/HBUu/7EiUO4/P9iMt9VSN6WeiWrk9pFlnPv9pz+rIGHfI/c2xy19MI/aU0XWfP&#xA;JjCW1i1sn7IitSF/4YMMq8PF1N/Fv8bUVtGv81e9p+Y90tXeVAf5XiiP3KVODiwhJhqpd/2BzeSf&#xA;NN0oN3fK9eqyzSOR/wAKR+OP5nGOQU6HLLnL7SrxflmKD1L/AH/aCxfxL/wwHWeTMdmd8vsR0f5c&#xA;6KoHKa4Y9/iQA/8ACfxys6uXk2js7H3lVu/y38lXtv8AV7/TI7yL+Wcu+/jQmgPuMh+Zn3uRj0sI&#xA;G42D7yxPzB+QOg3kATQdX1Ly8yACKK3uHlgWn+RI3qfdIBlkdZIc928QhdmMT8GKD8uPz78r76Hr&#xA;Gn+YLVJA6Q3kcfrsO/JrhCyg+AnyfjwlzsNox4D/AAgfBGQ/mx+cmhySxa9+XTTxr/uzTBKsanxL&#xA;Ri9Rh8jkThxy5S+bMYYdCqWX/OVHlUJx1jQ9T066rQxKsMq/8E7wH/hcB0cuhCTpz0Kb6d/zkz+V&#xA;N2QJ7u608kE/6TayHoen7gTde2ROkmGJwSTRfz+/KRvs68D/ANGt5/1RyP5afcjwZdyO0j85Py21&#xA;fULfTtP1lZr27kEVvCYLmMu56AGSNRlc4GJosJRI5szyDF2KuxV2KuxV2KuxV2KuxV2KuxV2KvHI&#xA;fyb8zJ+Yev8AmRrqy+o6qztbxiSX1VDOrDmPS49F7McvwZBA2XF1eA5IgDvT7/lXGtf7/t/+Dk/6&#xA;p5lfm4+br/5Nn3j8fB3/ACrnWv8Af9v/AMHJ/wBU8fzcfNf5Nn3j8fB3/Kuda/3/AG//AAcn/VPH&#xA;83HzX+TcnePx8Gx+XmujpcW4/wCekn/VPB+bh3Ff5Oyd4+39SKj8n+b4q+lqYjr143E4rT5JkTqM&#xA;Z6fYGwaPMOUvtK//AAt51/6u5/6SZ/8AmnB4+L+b9gT+Vz/z/tLv8Ledf+ruf+kmf/mnHx8X837A&#xA;v5XP/P8AtLv8Ledf+ruf+kmf/mnHx8X837Av5XP/AD/tLv8AC3nX/q7n/pJn/wCacfHxfzfsC/lc&#xA;/wDP+0u/wt51/wCruf8ApJn/AOacfHxfzfsC/lc/8/7S7/C3nX/q7n/pJn/5px8fF/N+wL+Vz/z/&#xA;ALS7/C3nX/q7n/pJn/5px8fF/N+wL+Vz/wA/7S7/AAt51/6u5/6SZ/8AmnHx8X837Av5XP8Az/tL&#xA;v8Ledf8Aq7n/AKSZ/wDmnHx8X837Av5XP/P+0u/wt51/6u5/6SZ/+acfHxfzfsC/lc/8/wC0rJfK&#xA;HnCZOEuqCROvF7idh9xTD4+P+b9gX8rn/n/aUnm/J31yxmttOlLbNzTlX51iyX5uHcWX5fU/z/8A&#xA;ZSQkv5D6bIQW07S6jb4UKj7liGH85HzZDDqR/H/sil1n+Quqaf590LXtOOnWumabIkt1bxtKsjlW&#xA;JJRRFxJ406sMxc+UTNhy8EcgHrPEWdav+WUd/qNxf2/mHWNOlupPVmjtborEXEiuhEZBUceHHp0O&#xA;+UNzpvy0M/rCfzHq8ySuzhJbgOqVkgkCoCvQfV6f7JvHFU28s+VZdDeRn1nUNV9SJI6X8iSAFHkc&#xA;yAIiDm3qUY9woriqfYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>885.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:InstanceID>xmp.iid:8fc52152-d46c-459f-bc29-6d743fae2422</xmpMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -329.75 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 329.75 li
883.229 329.75 li
883.229 0 li
cp
clp
181.615 244.233 mo
441.614 244.233 441.614 48.5593 701.615 48.5593 cv
701.615 50.2119 li
441.614 50.2119 441.614 245.886 181.615 245.886 cv
181.615 244.233 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.60058 .0573434 .119661 0 cmyk
f
181.615 293.809 mo
441.615 293.809 441.615 259.61 701.615 259.61 cv
701.615 261.263 li
441.615 261.263 441.615 295.462 181.615 295.462 cv
181.615 293.809 li
cp
f
181.615 245.886 mo
441.614 245.886 441.614 50.2119 701.615 50.2119 cv
701.615 51.0382 li
441.614 51.0382 441.614 246.712 181.615 246.712 cv
181.615 245.886 li
f
181.615 245.886 mo
181.615 246.386 li
311.746 246.398 376.928 197.367 441.915 148.448 cv
506.928 99.5305 571.745 50.7242 701.615 50.7118 cv
701.615 50.2117 li
701.114 50.2119 li
701.114 51.0382 li
701.615 51.0382 li
701.615 50.538 li
571.483 50.5256 506.301 99.5562 441.314 148.475 cv
376.301 197.393 311.483 246.199 181.615 246.212 cv
181.615 246.712 li
182.114 246.712 li
182.114 245.886 li
181.615 245.886 li
181.615 246.386 li
181.615 245.886 li
181.114 245.886 li
181.114 246.712 li
181.114 247.212 li
181.615 247.212 li
311.746 247.224 376.928 198.194 441.915 149.275 cv
506.928 100.357 571.745 51.5505 701.615 51.5381 cv
702.114 51.5381 li
702.115 50.2119 li
702.115 49.712 li
701.615 49.712 li
571.483 49.6994 506.301 98.7299 441.314 147.649 cv
376.301 196.567 311.483 245.373 181.615 245.386 cv
181.114 245.386 li
181.114 245.886 li
181.615 245.886 li
f
181.615 285.271 mo
441.615 285.271 441.615 211.64 701.615 211.64 cv
701.615 212.466 li
441.615 212.466 441.615 286.097 181.615 286.097 cv
181.615 285.271 li
cp
f
181.615 285.271 mo
181.615 285.771 li
311.657 285.774 376.75 267.346 441.751 248.937 cv
506.751 230.531 571.657 212.143 701.615 212.14 cv
701.615 211.64 li
701.115 211.64 li
701.115 212.466 li
701.615 212.466 li
701.615 211.966 li
571.572 211.963 506.478 230.391 441.478 248.801 cv
376.478 267.206 311.572 285.594 181.615 285.597 cv
181.615 286.097 li
182.114 286.097 li
182.114 285.271 li
181.615 285.271 li
181.615 285.771 li
181.615 285.271 li
181.115 285.271 li
181.115 286.097 li
181.115 286.597 li
181.615 286.597 li
311.657 286.601 376.75 268.173 441.751 249.763 cv
506.751 231.357 571.657 212.969 701.615 212.966 cv
702.114 212.966 li
702.114 211.64 li
702.114 211.14 li
701.615 211.14 li
571.572 211.137 506.478 229.564 441.478 247.974 cv
376.478 266.38 311.572 284.768 181.615 284.771 cv
181.115 284.771 li
181.115 285.271 li
181.615 285.271 li
cp
f
181.615 295.462 mo
441.615 295.462 441.615 261.263 701.615 261.263 cv
701.615 262.089 li
441.615 262.089 441.615 296.288 181.615 296.288 cv
181.615 295.462 li
cp
f
181.615 295.462 mo
181.615 295.962 li
311.634 295.963 376.679 287.408 441.68 278.858 cv
506.679 270.309 571.633 261.763 701.615 261.763 cv
701.615 261.263 li
701.115 261.263 li
701.115 262.089 li
701.615 262.089 li
701.615 261.589 li
571.595 261.588 506.55 270.142 441.549 278.693 cv
376.55 287.242 311.595 295.787 181.615 295.788 cv
181.615 296.288 li
182.114 296.288 li
182.114 295.462 li
181.615 295.462 li
181.615 295.962 li
181.615 295.462 li
181.115 295.462 li
181.115 296.288 li
181.115 296.788 li
181.615 296.788 li
311.634 296.789 376.679 288.235 441.68 279.684 cv
506.679 271.135 571.633 262.59 701.615 262.589 cv
702.114 262.589 li
702.114 261.263 li
702.114 260.763 li
701.615 260.763 li
571.595 260.762 506.55 269.316 441.549 277.867 cv
376.55 286.416 311.595 294.961 181.615 294.962 cv
181.115 294.962 li
181.115 295.462 li
181.615 295.462 li
cp
f
181.615 307.581 mo
441.615 307.581 441.615 307.581 701.615 307.581 cv
701.615 308.407 li
441.615 308.407 441.615 308.407 181.615 308.407 cv
181.615 307.581 li
cp
f
181.615 307.581 mo
181.615 308.08 li
441.615 308.08 441.614 308.08 701.615 308.08 cv
701.615 307.581 li
701.115 307.581 li
701.115 308.407 li
701.615 308.407 li
701.615 307.907 li
441.614 307.907 441.614 307.907 181.615 307.907 cv
181.615 308.407 li
182.114 308.407 li
182.114 307.581 li
181.615 307.581 li
181.615 308.08 li
181.615 307.581 li
181.115 307.581 li
181.115 308.407 li
181.115 308.907 li
181.615 308.907 li
441.615 308.907 441.614 308.907 701.615 308.907 cv
702.114 308.907 li
702.114 307.581 li
702.114 307.081 li
701.615 307.081 li
441.614 307.08 441.614 307.08 181.615 307.081 cv
181.115 307.081 li
181.115 307.581 li
181.615 307.581 li
cp
f
181.615 75.25 mo
441.615 75.25 441.615 .25 701.615 .25 cv
701.615 3.55508 li
441.615 3.55508 441.615 78.5551 181.615 78.5551 cv
181.615 75.25 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 270.398 mo
181.615 267.093 li
281.812 267.093 343.402 245.67 396.134 219.338 cv
397.303 219.851 398.471 220.367 399.632 220.883 cv
346.117 248.013 284.034 270.398 181.615 270.398 cv
406.03 217.598 mo
404.895 217.08 403.764 216.568 402.621 216.053 cv
410.023 212.255 417.268 208.373 424.449 204.451 cv
425.72 204.852 427.003 205.259 428.27 205.661 cv
420.944 209.688 413.56 213.684 406.03 217.598 cv
436.271 201.245 mo
435.012 200.842 433.745 200.436 432.485 200.034 cv
440.373 195.677 448.225 191.291 456.14 186.949 cv
457.648 187.228 459.145 187.505 460.659 187.784 cv
452.473 192.239 444.386 196.75 436.271 201.245 cv
471.925 181.732 mo
470.374 181.454 468.829 181.176 467.287 180.897 cv
479.223 174.498 491.434 168.255 504.307 162.377 cv
506.466 162.505 508.64 162.632 510.838 162.758 cv
497.228 168.729 484.403 175.131 471.925 181.732 cv
524.433 157.056 mo
522.026 156.93 519.659 156.804 517.303 156.675 cv
563.767 137.139 619.736 122.888 701.365 122.86 cv
701.365 126.165 li
623.875 126.192 569.496 139.041 524.433 157.056 cv
.118257 0 .0197147 0 cmyk
f
181.615 273.703 mo
181.615 270.398 li
284.034 270.398 346.117 248.013 399.632 220.883 cv
400.785 221.396 401.935 221.911 403.08 222.428 cv
348.774 250.342 286.24 273.703 181.615 273.703 cv
409.399 219.142 mo
408.282 218.627 407.154 218.11 406.03 217.598 cv
413.56 213.684 420.944 209.688 428.27 205.661 cv
429.538 206.064 430.807 206.469 432.072 206.872 cv
424.595 211 417.057 215.115 409.399 219.142 cv
440.048 202.456 mo
438.787 202.051 437.533 201.649 436.271 201.245 cv
444.386 196.75 452.473 192.239 460.659 187.784 cv
462.173 188.062 463.698 188.341 465.219 188.618 cv
456.743 193.186 448.404 197.821 440.048 202.456 cv
476.631 182.567 mo
475.051 182.288 473.493 182.012 471.925 181.732 cv
484.403 175.131 497.228 168.729 510.838 162.758 cv
513.089 162.886 515.357 163.013 517.652 163.139 cv
503.22 169.192 489.703 175.759 476.631 182.567 cv
531.954 157.437 mo
529.424 157.312 526.905 157.185 524.433 157.056 cv
569.496 139.041 623.875 126.192 701.365 126.165 cv
701.365 129.47 li
628.125 129.495 575.551 140.968 531.954 157.437 cv
f
181.615 78.5551 mo
441.615 78.5551 441.615 3.55508 701.615 3.55508 cv
701.615 5.20763 li
441.615 5.20763 441.615 80.2076 181.615 80.2076 cv
181.615 78.5551 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 142.288 mo
441.614 142.288 441.614 161.081 701.615 161.081 cv
701.615 162.733 li
441.614 162.733 441.614 143.941 181.615 143.941 cv
181.615 142.288 li
f
181.615 151.763 mo
441.614 151.763 441.614 200.513 701.615 200.513 cv
701.615 203.818 li
441.614 203.818 441.614 155.068 181.615 155.068 cv
181.615 151.763 li
f
181.615 246.712 mo
441.614 246.712 441.614 51.0382 701.615 51.0382 cv
701.615 51.8644 li
441.614 51.8644 441.614 247.538 181.615 247.538 cv
181.615 246.712 li
.60058 .0573434 .119661 0 cmyk
f
181.615 246.712 mo
181.615 247.212 li
311.746 247.224 376.928 198.194 441.915 149.275 cv
506.928 100.357 571.745 51.5505 701.615 51.5381 cv
701.615 51.0379 li
701.114 51.0382 li
701.114 51.8644 li
701.615 51.8644 li
701.615 51.3643 li
571.483 51.3519 506.301 100.382 441.314 149.302 cv
376.301 198.219 311.483 247.026 181.615 247.038 cv
181.615 247.538 li
182.114 247.538 li
182.114 246.712 li
181.615 246.712 li
181.615 247.212 li
181.615 246.712 li
181.114 246.712 li
181.114 247.538 li
181.114 248.038 li
181.615 248.038 li
311.746 248.051 376.928 199.02 441.915 150.101 cv
506.928 101.183 571.745 52.3767 701.615 52.3644 cv
702.114 52.3644 li
702.115 51.0382 li
702.115 50.538 li
701.615 50.538 li
571.483 50.5256 506.301 99.5562 441.314 148.475 cv
376.301 197.393 311.483 246.199 181.615 246.212 cv
181.114 246.212 li
181.114 246.712 li
181.615 246.712 li
f
181.615 296.288 mo
441.615 296.288 441.615 262.089 701.615 262.089 cv
701.615 262.915 li
441.615 262.915 441.615 297.114 181.615 297.114 cv
181.615 296.288 li
cp
f
181.615 296.288 mo
181.615 296.788 li
311.634 296.789 376.679 288.235 441.68 279.684 cv
506.679 271.135 571.633 262.59 701.615 262.589 cv
701.615 262.089 li
701.115 262.089 li
701.115 262.915 li
701.615 262.915 li
701.615 262.415 li
571.595 262.414 506.55 270.969 441.549 279.519 cv
376.55 288.068 311.595 296.614 181.615 296.614 cv
181.615 297.114 li
182.114 297.114 li
182.114 296.288 li
181.615 296.288 li
181.615 296.788 li
181.615 296.288 li
181.115 296.288 li
181.115 297.114 li
181.115 297.614 li
181.615 297.614 li
311.634 297.615 376.679 289.061 441.68 280.511 cv
506.679 271.961 571.633 263.416 701.615 263.415 cv
702.114 263.415 li
702.114 262.089 li
702.114 261.589 li
701.615 261.589 li
571.595 261.588 506.55 270.142 441.549 278.693 cv
376.55 287.242 311.595 295.787 181.615 295.788 cv
181.115 295.788 li
181.115 296.288 li
181.615 296.288 li
cp
f
181.615 308.407 mo
441.615 308.407 441.615 308.407 701.615 308.407 cv
701.615 309.233 li
441.615 309.233 441.615 309.233 181.615 309.233 cv
181.615 308.407 li
cp
f
181.615 308.407 mo
181.615 308.907 li
441.615 308.907 441.614 308.907 701.615 308.907 cv
701.615 308.407 li
701.115 308.407 li
701.115 309.233 li
701.615 309.233 li
701.615 308.733 li
441.614 308.733 441.614 308.733 181.615 308.733 cv
181.615 309.233 li
182.114 309.233 li
182.114 308.407 li
181.615 308.407 li
181.615 308.907 li
181.615 308.407 li
181.115 308.407 li
181.115 309.233 li
181.115 309.733 li
181.615 309.733 li
441.615 309.733 441.614 309.733 701.615 309.733 cv
702.114 309.733 li
702.114 308.407 li
702.114 307.907 li
701.615 307.907 li
441.614 307.907 441.614 307.907 181.615 307.907 cv
181.115 307.907 li
181.115 308.407 li
181.615 308.407 li
cp
f
181.615 280.313 mo
441.614 280.313 441.614 170.555 701.615 170.555 cv
701.615 171.381 li
441.614 171.381 441.614 281.14 181.615 281.14 cv
181.615 280.313 li
f
181.615 280.313 mo
181.615 280.814 li
311.681 280.82 376.811 253.338 441.809 225.895 cv
506.811 198.459 571.68 171.061 701.615 171.055 cv
701.615 170.555 li
701.114 170.555 li
701.114 171.381 li
701.615 171.381 li
701.615 170.881 li
571.548 170.875 506.418 198.357 441.42 225.8 cv
376.418 253.236 311.548 280.633 181.615 280.64 cv
181.615 281.14 li
182.114 281.14 li
182.114 280.313 li
181.615 280.313 li
181.615 280.814 li
181.615 280.313 li
181.114 280.313 li
181.114 281.14 li
181.114 281.64 li
181.615 281.64 li
311.681 281.646 376.811 254.164 441.809 226.721 cv
506.811 199.285 571.68 171.888 701.615 171.881 cv
702.114 171.881 li
702.115 170.555 li
702.115 170.055 li
701.615 170.055 li
571.548 170.049 506.418 197.531 441.42 224.974 cv
376.418 252.41 311.548 279.807 181.615 279.814 cv
181.114 279.814 li
181.114 280.313 li
181.615 280.313 li
f
181.615 80.2076 mo
441.615 80.2076 441.615 5.20763 701.615 5.20763 cv
701.615 5.86864 li
441.615 5.86864 441.615 80.8686 181.615 80.8686 cv
181.615 80.2076 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 80.2076 mo
181.615 80.7076 li
311.658 80.7109 376.753 61.9402 441.753 43.188 cv
506.753 24.4402 571.658 5.71089 701.615 5.70762 cv
701.615 5.20763 li
701.115 5.20763 li
701.115 5.86864 li
701.615 5.86864 li
701.615 5.36864 li
571.571 5.36534 506.476 24.1361 441.476 42.8882 cv
376.476 61.6361 311.571 80.3653 181.615 80.3686 cv
181.615 80.8686 li
182.114 80.8686 li
182.114 80.2076 li
181.615 80.2076 li
181.615 80.7076 li
181.615 80.2076 li
181.115 80.2076 li
181.115 80.8686 li
181.115 81.3686 li
181.615 81.3686 li
311.658 81.3719 376.753 62.6012 441.753 43.849 cv
506.753 25.1012 571.658 6.3719 701.615 6.36863 cv
702.114 6.36863 li
702.114 5.20763 li
702.114 4.70763 li
701.615 4.70763 li
571.571 4.70433 506.476 23.4751 441.476 42.2272 cv
376.476 60.9751 311.571 79.7043 181.615 79.7076 cv
181.115 79.7076 li
181.115 80.2076 li
181.615 80.2076 li
cp
f
181.615 155.068 mo
441.614 155.068 441.614 203.818 701.615 203.818 cv
701.615 204.479 li
441.614 204.479 441.614 155.729 181.615 155.729 cv
181.615 155.068 li
f
181.615 155.068 mo
181.615 155.568 li
311.587 155.569 376.523 167.748 441.522 179.934 cv
506.523 192.123 571.586 204.319 701.615 204.318 cv
701.615 203.818 li
701.114 203.818 li
701.114 204.479 li
701.615 204.479 li
701.615 203.979 li
571.642 203.977 506.706 191.799 441.707 179.612 cv
376.706 167.424 311.643 155.227 181.615 155.229 cv
181.615 155.729 li
182.114 155.729 li
182.114 155.068 li
181.615 155.068 li
181.615 155.568 li
181.615 155.068 li
181.114 155.068 li
181.114 155.729 li
181.114 156.229 li
181.615 156.229 li
311.587 156.23 376.523 168.409 441.522 180.595 cv
506.523 192.784 571.586 204.98 701.615 204.979 cv
702.115 204.979 li
702.115 203.818 li
702.115 203.318 li
701.615 203.318 li
571.642 203.316 506.706 191.138 441.707 178.951 cv
376.706 166.763 311.643 154.566 181.615 154.568 cv
181.114 154.568 li
181.114 155.068 li
181.615 155.068 li
f
181.615 161.788 mo
441.614 161.788 441.614 245.178 701.615 245.178 cv
701.615 245.839 li
441.614 245.839 441.614 162.449 181.615 162.449 cv
181.615 161.788 li
f
181.615 161.788 mo
181.615 162.288 li
311.565 162.292 376.461 183.114 441.462 203.959 cv
506.461 224.809 571.565 245.682 701.615 245.678 cv
701.615 245.178 li
701.114 245.178 li
701.114 245.839 li
701.615 245.839 li
701.615 245.339 li
571.663 245.335 506.767 224.513 441.767 203.668 cv
376.767 182.818 311.664 161.945 181.615 161.949 cv
181.615 162.449 li
182.114 162.449 li
182.114 161.788 li
181.615 161.788 li
181.615 162.288 li
181.615 161.788 li
181.114 161.788 li
181.114 162.449 li
181.114 162.949 li
181.615 162.949 li
311.565 162.953 376.461 183.775 441.462 204.62 cv
506.461 225.47 571.565 246.343 701.615 246.339 cv
702.115 246.339 li
702.115 245.178 li
702.115 244.678 li
701.615 244.678 li
571.663 244.674 506.767 223.852 441.767 203.007 cv
376.767 182.157 311.664 161.284 181.615 161.288 cv
181.114 161.288 li
181.114 161.788 li
181.615 161.788 li
f
181.615 171.814 mo
441.614 171.814 441.614 298.381 701.615 298.381 cv
701.615 299.042 li
441.614 299.042 441.614 172.475 181.615 172.475 cv
181.615 171.814 li
f
181.615 171.814 mo
181.615 172.313 li
311.536 172.321 376.392 203.909 441.396 235.547 cv
506.392 267.193 571.536 298.889 701.615 298.881 cv
701.615 298.381 li
701.114 298.381 li
701.114 299.042 li
701.615 299.042 li
701.615 298.542 li
571.692 298.534 506.837 266.947 441.833 235.309 cv
376.837 203.663 311.693 171.967 181.615 171.974 cv
181.615 172.475 li
182.114 172.475 li
182.114 171.814 li
181.615 171.814 li
181.615 172.313 li
181.615 171.814 li
181.114 171.814 li
181.114 172.475 li
181.114 172.975 li
181.615 172.975 li
311.536 172.982 376.392 204.57 441.396 236.208 cv
506.392 267.853 571.536 299.55 701.615 299.542 cv
702.114 299.542 li
702.115 298.381 li
702.115 297.881 li
701.615 297.881 li
571.692 297.874 506.837 266.286 441.833 234.648 cv
376.837 203.002 311.693 171.306 181.615 171.314 cv
181.114 171.314 li
181.114 171.814 li
181.615 171.814 li
f
181.615 143.941 mo
441.614 143.941 441.614 162.733 701.615 162.733 cv
701.615 163.394 li
441.614 163.394 441.614 144.602 181.615 144.602 cv
181.615 143.941 li
f
181.615 143.941 mo
181.615 144.441 li
311.604 144.441 376.579 149.138 441.578 153.836 cv
506.579 158.534 571.603 163.233 701.615 163.233 cv
701.615 162.733 li
701.114 162.733 li
701.114 163.394 li
701.615 163.394 li
701.615 162.894 li
571.625 162.894 506.65 158.197 441.65 153.499 cv
376.65 148.801 311.625 144.102 181.615 144.102 cv
181.615 144.602 li
182.114 144.602 li
182.114 143.941 li
181.615 143.941 li
181.615 144.441 li
181.615 143.941 li
181.114 143.941 li
181.114 144.602 li
181.114 145.102 li
181.615 145.102 li
311.604 145.102 376.579 149.799 441.578 154.497 cv
506.579 159.195 571.603 163.894 701.615 163.894 cv
702.115 163.894 li
702.115 162.733 li
702.115 162.233 li
701.615 162.233 li
571.625 162.233 506.65 157.536 441.65 152.838 cv
376.65 148.14 311.625 143.44 181.615 143.441 cv
181.114 143.441 li
181.114 143.941 li
181.615 143.941 li
f
181.615 297.114 mo
441.615 297.114 441.615 262.915 701.615 262.915 cv
701.615 266.22 li
441.615 266.22 441.615 300.419 181.615 300.419 cv
181.615 297.114 li
cp
.60058 .0573434 .119661 0 cmyk
f
181.615 286.097 mo
441.615 286.097 441.615 212.466 701.615 212.466 cv
701.615 214.119 li
441.615 214.119 441.615 287.75 181.615 287.75 cv
181.615 286.097 li
cp
f
181.615 309.233 mo
441.615 309.233 441.615 309.233 701.615 309.233 cv
701.615 310.886 li
441.615 310.886 441.615 310.886 181.615 310.886 cv
181.615 309.233 li
cp
f
181.615 80.8686 mo
441.615 80.8686 441.615 5.86864 701.615 5.86864 cv
701.615 9.17373 li
441.615 9.17373 441.615 84.1737 181.615 84.1737 cv
181.615 80.8686 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 119.152 mo
181.615 115.848 li
332.355 115.848 395.712 109.316 473.001 103.828 cv
470.942 105.071 468.894 106.319 466.853 107.573 cv
392.276 112.964 328.341 119.152 181.615 119.152 cv
481.394 106.545 mo
483.541 105.288 485.7 104.039 487.875 102.8 cv
493.497 102.423 499.213 102.054 505.074 101.695 cv
503.103 102.911 501.166 104.127 499.225 105.365 cv
493.16 105.749 487.223 106.144 481.394 106.545 cv
.125002 .180667 .0336919 0 cmyk
f
499.225 105.365 mo
501.166 104.127 503.103 102.911 505.074 101.695 cv
505.711 101.656 506.366 101.616 507.006 101.578 cv
505.016 102.789 503.039 104.014 501.08 105.248 cv
500.459 105.287 499.843 105.325 499.225 105.365 cv
.678645 .290715 .143587 0 cmyk
f
501.08 105.248 mo
503.039 104.014 505.016 102.789 507.006 101.578 cv
507.514 101.547 508.01 101.517 508.52 101.486 cv
506.509 102.699 504.522 103.92 502.543 105.156 cv
502.049 105.187 501.572 105.217 501.08 105.248 cv
f
502.543 105.156 mo
504.522 103.92 506.509 102.699 508.52 101.486 cv
509.383 101.435 510.266 101.382 511.135 101.331 cv
509.104 102.538 507.072 103.769 505.074 105 cv
504.228 105.052 503.383 105.104 502.543 105.156 cv
f
541.439 103.027 mo
544.077 101.775 546.731 100.556 549.439 99.3575 cv
589.571 97.593 637.657 96.4224 701.365 96.4195 cv
701.365 99.7246 li
633.359 99.7278 583.17 101.06 541.439 103.027 cv
.125002 .180667 .0336919 0 cmyk
f
181.615 172.475 mo
441.614 172.475 441.614 299.042 701.615 299.042 cv
701.615 302.347 li
441.614 302.347 441.614 175.78 181.615 175.78 cv
181.615 172.475 li
.793973 1 .278019 .337499 cmyk
f
181.615 162.449 mo
441.614 162.449 441.614 245.839 701.615 245.839 cv
701.615 249.144 li
441.614 249.144 441.614 165.754 181.615 165.754 cv
181.615 162.449 li
f
181.615 287.75 mo
441.615 287.75 441.615 214.119 701.615 214.119 cv
701.615 214.945 li
441.615 214.945 441.615 288.576 181.615 288.576 cv
181.615 287.75 li
cp
.60058 .0573434 .119661 0 cmyk
f
181.615 287.75 mo
181.615 288.25 li
311.657 288.253 376.75 269.825 441.751 251.415 cv
506.751 233.01 571.657 214.622 701.615 214.619 cv
701.615 214.119 li
701.115 214.119 li
701.115 214.945 li
701.615 214.945 li
701.615 214.445 li
571.572 214.442 506.478 232.87 441.478 251.279 cv
376.478 269.685 311.572 288.073 181.615 288.076 cv
181.615 288.576 li
182.114 288.576 li
182.114 287.75 li
181.615 287.75 li
181.615 288.25 li
181.615 287.75 li
181.115 287.75 li
181.115 288.576 li
181.115 289.076 li
181.615 289.076 li
311.657 289.079 376.75 270.652 441.751 252.242 cv
506.751 233.836 571.657 215.448 701.615 215.445 cv
702.114 215.445 li
702.114 214.119 li
702.114 213.619 li
701.615 213.619 li
571.572 213.615 506.478 232.043 441.478 250.453 cv
376.478 268.859 311.572 287.247 181.615 287.25 cv
181.115 287.25 li
181.115 287.75 li
181.615 287.75 li
cp
f
181.615 300.419 mo
441.615 300.419 441.615 266.22 701.615 266.22 cv
701.615 267.047 li
441.615 267.047 441.615 301.246 181.615 301.246 cv
181.615 300.419 li
cp
f
181.615 300.419 mo
181.615 300.919 li
311.634 300.92 376.679 292.366 441.68 283.816 cv
506.679 275.266 571.633 266.721 701.615 266.72 cv
701.615 266.22 li
701.115 266.22 li
701.115 267.047 li
701.615 267.047 li
701.615 266.547 li
571.595 266.546 506.55 275.1 441.549 283.65 cv
376.55 292.2 311.595 300.745 181.615 300.746 cv
181.615 301.246 li
182.114 301.246 li
182.114 300.419 li
181.615 300.419 li
181.615 300.919 li
181.615 300.419 li
181.115 300.419 li
181.115 301.246 li
181.115 301.746 li
181.615 301.746 li
311.634 301.746 376.679 293.192 441.68 284.642 cv
506.679 276.093 571.633 267.547 701.615 267.547 cv
702.114 267.547 li
702.114 266.22 li
702.114 265.72 li
701.615 265.72 li
571.595 265.72 506.55 274.274 441.549 282.824 cv
376.55 291.373 311.595 299.919 181.615 299.919 cv
181.115 299.919 li
181.115 300.419 li
181.615 300.419 li
cp
f
181.615 310.886 mo
441.615 310.886 441.615 310.886 701.615 310.886 cv
701.615 311.712 li
441.615 311.712 441.615 311.712 181.615 311.712 cv
181.615 310.886 li
cp
f
181.615 310.886 mo
181.615 311.386 li
441.615 311.386 441.614 311.386 701.615 311.386 cv
701.615 310.886 li
701.115 310.886 li
701.115 311.712 li
701.615 311.712 li
701.615 311.212 li
441.614 311.212 441.614 311.212 181.615 311.212 cv
181.615 311.712 li
182.114 311.712 li
182.114 310.886 li
181.615 310.886 li
181.615 311.386 li
181.615 310.886 li
181.115 310.886 li
181.115 311.712 li
181.115 312.212 li
181.615 312.212 li
441.615 312.212 441.614 312.212 701.615 312.212 cv
702.114 312.212 li
702.114 310.886 li
702.114 310.386 li
701.615 310.386 li
441.614 310.386 441.614 310.386 181.615 310.386 cv
181.115 310.386 li
181.115 310.886 li
181.615 310.886 li
cp
f
181.615 281.14 mo
441.615 281.14 441.615 171.381 701.615 171.381 cv
701.615 172.208 li
441.615 172.208 441.615 281.966 181.615 281.966 cv
181.615 281.14 li
cp
f
181.615 281.14 mo
181.615 281.64 li
311.681 281.646 376.811 254.164 441.809 226.721 cv
506.811 199.285 571.68 171.888 701.615 171.881 cv
701.615 171.381 li
701.114 171.381 li
701.114 172.208 li
701.615 172.208 li
701.615 171.708 li
571.548 171.701 506.418 199.183 441.42 226.626 cv
376.418 254.063 311.548 281.46 181.615 281.466 cv
181.615 281.966 li
182.114 281.966 li
182.114 281.14 li
181.615 281.14 li
181.615 281.64 li
181.615 281.14 li
181.114 281.14 li
181.114 281.966 li
181.114 282.466 li
181.615 282.466 li
311.681 282.472 376.811 254.99 441.809 227.548 cv
506.811 200.111 571.68 172.714 701.615 172.708 cv
702.114 172.708 li
702.115 171.381 li
702.115 170.881 li
701.615 170.881 li
571.548 170.875 506.418 198.357 441.42 225.8 cv
376.418 253.236 311.548 280.633 181.615 280.64 cv
181.114 280.64 li
181.114 281.14 li
181.615 281.14 li
f
181.615 84.1737 mo
441.615 84.1737 441.615 9.17373 701.615 9.17373 cv
701.615 10.8263 li
441.615 10.8263 441.615 85.8263 181.615 85.8263 cv
181.615 84.1737 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 144.602 mo
441.614 144.602 441.614 163.394 701.615 163.394 cv
701.615 165.047 li
441.614 165.047 441.614 146.254 181.615 146.254 cv
181.615 144.602 li
f
181.615 122.458 mo
181.615 119.152 li
328.341 119.152 392.276 112.964 466.853 107.573 cv
464.837 108.813 462.805 110.071 460.802 111.319 cv
388.735 116.601 324.373 122.458 181.615 122.458 cv
475.076 110.291 mo
477.174 109.033 479.272 107.788 481.394 106.545 cv
487.223 106.144 493.16 105.749 499.225 105.365 cv
497.326 106.575 495.429 107.804 493.557 109.034 cv
487.27 109.444 481.133 109.864 475.076 110.291 cv
.125002 .180667 .0336919 0 cmyk
f
493.557 109.034 mo
495.429 107.804 497.326 106.575 499.225 105.365 cv
499.843 105.325 500.459 105.287 501.08 105.248 cv
499.156 106.46 497.244 107.685 495.347 108.918 cv
494.752 108.956 494.15 108.995 493.557 109.034 cv
.678645 .290715 .143587 0 cmyk
f
495.347 108.918 mo
497.244 107.685 499.156 106.46 501.08 105.248 cv
501.572 105.217 502.049 105.187 502.543 105.156 cv
500.603 106.369 498.676 107.593 496.764 108.827 cv
496.286 108.857 495.824 108.887 495.347 108.918 cv
f
496.764 108.827 mo
498.676 107.593 500.603 106.369 502.543 105.156 cv
503.383 105.104 504.228 105.052 505.074 105 cv
503.103 106.216 501.166 107.432 499.225 108.67 cv
498.408 108.721 497.575 108.775 496.764 108.827 cv
f
533.943 106.696 mo
536.413 105.45 538.909 104.228 541.439 103.027 cv
583.17 101.06 633.359 99.7278 701.365 99.7246 cv
701.365 103.03 li
629.236 103.033 577.15 104.532 533.943 106.696 cv
.125002 .180667 .0336919 0 cmyk
f
181.615 85.8263 mo
441.615 85.8263 441.615 10.8263 701.615 10.8263 cv
701.615 14.1314 li
441.615 14.1314 441.615 89.1314 181.615 89.1314 cv
181.615 85.8263 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 277.009 mo
181.615 273.703 li
286.24 273.703 348.774 250.342 403.08 222.428 cv
404.225 222.944 405.345 223.453 406.483 223.973 cv
351.37 252.663 288.446 277.009 181.615 277.009 cv
412.731 220.686 mo
411.623 220.17 410.512 219.655 409.399 219.142 cv
417.057 215.115 424.595 211 432.072 206.872 cv
433.336 207.276 434.596 207.679 435.859 208.083 cv
428.211 212.318 420.537 216.539 412.731 220.686 cv
.118257 0 .0197147 0 cmyk
f
411.512 221.332 mo
410.399 220.815 409.287 220.301 408.168 219.787 cv
408.585 219.569 408.983 219.36 409.399 219.142 cv
410.512 219.655 411.623 220.17 412.731 220.686 cv
412.325 220.901 411.918 221.117 411.512 221.332 cv
.871 1 .229892 .104494 cmyk
f
408.168 223.092 mo
407.05 222.578 405.912 222.058 404.787 221.548 cv
405.912 220.966 407.05 220.373 408.168 219.787 cv
409.287 220.301 410.399 220.815 411.512 221.332 cv
410.399 221.921 409.287 222.507 408.168 223.092 cv
f
443.824 203.666 mo
443.138 203.446 442.454 203.227 441.767 203.007 cv
441.196 202.824 440.62 202.639 440.048 202.456 cv
448.404 197.821 456.743 193.186 465.219 188.618 cv
466.749 188.897 468.292 189.177 469.831 189.453 cv
461.052 194.126 452.426 198.896 443.824 203.666 cv
.118257 0 .0197147 0 cmyk
f
442.469 204.418 mo
441.207 204.013 439.955 203.612 438.693 203.207 cv
439.146 202.956 439.596 202.706 440.048 202.456 cv
440.62 202.639 441.196 202.824 441.767 203.007 cv
442.454 203.227 443.138 203.446 443.824 203.666 cv
443.372 203.917 442.921 204.167 442.469 204.418 cv
.871 1 .229892 .104494 cmyk
f
439.293 206.18 mo
438.035 205.776 436.773 205.372 435.514 204.969 cv
436.571 204.384 437.638 203.793 438.693 203.207 cv
439.955 203.612 441.207 204.013 442.469 204.418 cv
441.406 205.008 440.357 205.59 439.293 206.18 cv
f
481.416 183.401 mo
479.814 183.125 478.219 182.846 476.631 182.567 cv
489.703 175.759 503.22 169.192 517.652 163.139 cv
520.01 163.268 522.39 163.394 524.799 163.52 cv
509.436 169.645 495.155 176.374 481.416 183.401 cv
.118257 0 .0197147 0 cmyk
f
477.361 185.492 mo
475.78 185.214 474.213 184.937 472.644 184.657 cv
473.97 183.957 475.297 183.261 476.631 182.567 cv
478.219 182.846 479.814 183.125 481.416 183.401 cv
480.054 184.098 478.713 184.79 477.361 185.492 cv
.871 1 .229892 .104494 cmyk
f
476.411 185.986 mo
474.837 185.709 473.272 185.431 471.709 185.151 cv
472.026 184.983 472.327 184.824 472.644 184.657 cv
474.213 184.937 475.78 185.214 477.361 185.492 cv
477.049 185.654 476.722 185.824 476.411 185.986 cv
f
539.945 157.818 mo
537.242 157.693 534.588 157.566 531.954 157.437 cv
575.551 140.968 628.125 129.495 701.365 129.47 cv
701.365 132.776 li
632.55 132.799 581.969 142.933 539.945 157.818 cv
.118257 0 .0197147 0 cmyk
f
537.101 158.837 mo
534.468 158.712 531.854 158.585 529.284 158.456 cv
530.164 158.116 531.067 157.772 531.954 157.437 cv
534.588 157.566 537.242 157.693 539.945 157.818 cv
538.995 158.154 538.042 158.496 537.101 158.837 cv
.871 1 .229892 .104494 cmyk
f
534.299 159.865 mo
531.711 159.74 529.171 159.613 526.645 159.484 cv
527.527 159.137 528.395 158.799 529.284 158.456 cv
531.854 158.585 534.468 158.712 537.101 158.837 cv
536.161 159.178 535.231 159.519 534.299 159.865 cv
f
531.579 160.884 mo
529.053 160.759 526.547 160.632 524.079 160.503 cv
524.926 160.163 525.791 159.82 526.645 159.484 cv
529.171 159.613 531.711 159.74 534.299 159.865 cv
533.385 160.203 532.484 160.541 531.579 160.884 cv
f
181.615 247.538 mo
441.614 247.538 441.614 51.8644 701.615 51.8644 cv
701.615 52.966 li
441.614 52.966 441.614 248.64 181.615 248.64 cv
181.615 247.538 li
.60058 .0573434 .119661 0 cmyk
f
181.615 288.576 mo
441.615 288.576 441.615 214.945 701.615 214.945 cv
701.615 216.047 li
441.615 216.047 441.615 289.678 181.615 289.678 cv
181.615 288.576 li
cp
f
181.615 301.246 mo
441.615 301.246 441.615 267.047 701.615 267.047 cv
701.615 268.148 li
441.615 268.148 441.615 302.347 181.615 302.347 cv
181.615 301.246 li
cp
f
181.615 125.763 mo
181.615 122.458 li
324.373 122.458 388.735 116.601 460.802 111.319 cv
458.799 112.567 456.816 113.81 454.823 115.065 cv
385.11 120.226 320.406 125.763 181.615 125.763 cv
468.89 114.037 mo
470.936 112.786 473.01 111.529 475.076 110.291 cv
481.133 109.864 487.27 109.444 493.557 109.034 cv
491.709 110.248 489.87 111.473 488.046 112.704 cv
481.543 113.139 475.175 113.585 468.89 114.037 cv
.125002 .180667 .0336919 0 cmyk
f
488.046 112.704 mo
489.87 111.473 491.709 110.248 493.557 109.034 cv
494.15 108.995 494.752 108.956 495.347 108.918 cv
493.476 110.134 491.627 111.354 489.78 112.588 cv
489.2 112.626 488.623 112.665 488.046 112.704 cv
.678645 .290715 .143587 0 cmyk
f
489.78 112.588 mo
491.627 111.354 493.476 110.134 495.347 108.918 cv
495.824 108.887 496.286 108.857 496.764 108.827 cv
494.882 110.041 493.014 111.264 491.158 112.497 cv
490.703 112.527 490.233 112.558 489.78 112.588 cv
f
491.158 112.497 mo
493.014 111.264 494.882 110.041 496.764 108.827 cv
497.575 108.775 498.408 108.721 499.225 108.67 cv
497.326 109.88 495.429 111.109 493.557 112.339 cv
492.752 112.392 491.958 112.444 491.158 112.497 cv
f
526.868 110.366 mo
529.2 109.123 531.559 107.899 533.943 106.696 cv
577.15 104.532 629.236 103.033 701.365 103.03 cv
701.365 106.335 li
625.255 106.338 571.459 108.007 526.868 110.366 cv
.125002 .180667 .0336919 0 cmyk
f
493.557 112.339 mo
495.429 111.109 497.326 109.88 499.225 108.67 cv
499.869 108.629 500.505 108.589 501.153 108.548 cv
499.228 109.763 497.325 110.983 495.427 112.218 cv
494.806 112.258 494.175 112.299 493.557 112.339 cv
.678645 .290715 .143587 0 cmyk
f
181.615 89.1314 mo
441.615 89.1314 441.615 14.1314 701.615 14.1314 cv
701.615 17.4364 li
441.615 17.4364 441.615 92.4364 181.615 92.4364 cv
181.615 89.1314 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 92.4364 mo
441.615 92.4364 441.615 17.4364 701.615 17.4364 cv
701.615 18.2627 li
441.615 18.2627 441.615 93.2627 181.615 93.2627 cv
181.615 92.4364 li
cp
f
181.615 92.4364 mo
181.615 92.9364 li
311.658 92.9397 376.753 74.169 441.753 55.4169 cv
506.753 36.669 571.658 17.9397 701.615 17.9364 cv
701.615 17.4364 li
701.115 17.4364 li
701.115 18.2627 li
701.615 18.2627 li
701.615 17.7627 li
571.571 17.7594 506.476 36.5301 441.476 55.2823 cv
376.476 74.0301 311.571 92.7594 181.615 92.7627 cv
181.615 93.2627 li
182.114 93.2627 li
182.114 92.4364 li
181.615 92.4364 li
181.615 92.9364 li
181.615 92.4364 li
181.115 92.4364 li
181.115 93.2627 li
181.115 93.7627 li
181.615 93.7627 li
311.658 93.766 376.753 74.9952 441.753 56.2431 cv
506.753 37.4953 571.658 18.766 701.615 18.7627 cv
702.114 18.7627 li
702.114 17.4364 li
702.114 16.9364 li
701.615 16.9364 li
571.571 16.9331 506.476 35.7039 441.476 54.456 cv
376.476 73.2039 311.571 91.9331 181.615 91.9364 cv
181.115 91.9364 li
181.115 92.4364 li
181.615 92.4364 li
cp
f
181.615 155.729 mo
441.614 155.729 441.614 204.479 701.615 204.479 cv
701.615 205.305 li
441.614 205.305 441.614 156.555 181.615 156.555 cv
181.615 155.729 li
f
181.615 155.729 mo
181.615 156.229 li
311.587 156.23 376.523 168.409 441.522 180.595 cv
506.523 192.784 571.586 204.98 701.615 204.979 cv
701.615 204.479 li
701.114 204.479 li
701.114 205.305 li
701.615 205.305 li
701.615 204.805 li
571.642 204.804 506.706 192.625 441.707 180.439 cv
376.706 168.25 311.643 156.054 181.615 156.055 cv
181.615 156.555 li
182.114 156.555 li
182.114 155.729 li
181.615 155.729 li
181.615 156.229 li
181.615 155.729 li
181.114 155.729 li
181.114 156.555 li
181.114 157.055 li
181.615 157.055 li
311.587 157.057 376.523 169.235 441.522 181.422 cv
506.523 193.61 571.586 205.807 701.615 205.805 cv
702.115 205.805 li
702.115 204.479 li
702.115 203.979 li
701.615 203.979 li
571.642 203.977 506.706 191.799 441.707 179.612 cv
376.706 167.424 311.643 155.227 181.615 155.229 cv
181.114 155.229 li
181.114 155.729 li
181.615 155.729 li
f
181.615 165.754 mo
441.614 165.754 441.614 249.144 701.615 249.144 cv
701.615 249.97 li
441.614 249.97 441.614 166.581 181.615 166.581 cv
181.615 165.754 li
f
181.615 165.754 mo
181.615 166.254 li
311.565 166.258 376.461 187.08 441.462 207.925 cv
506.461 228.775 571.565 249.648 701.615 249.644 cv
701.615 249.144 li
701.114 249.144 li
701.114 249.97 li
701.615 249.97 li
701.615 249.47 li
571.663 249.466 506.767 228.644 441.767 207.799 cv
376.767 186.949 311.664 166.076 181.615 166.08 cv
181.615 166.581 li
182.114 166.581 li
182.114 165.754 li
181.615 165.754 li
181.615 166.254 li
181.615 165.754 li
181.114 165.754 li
181.114 166.581 li
181.114 167.081 li
181.615 167.081 li
311.565 167.084 376.461 187.907 441.462 208.751 cv
506.461 229.601 571.565 250.474 701.615 250.47 cv
702.115 250.47 li
702.115 249.144 li
702.115 248.644 li
701.615 248.644 li
571.663 248.64 506.767 227.818 441.767 206.973 cv
376.767 186.123 311.664 165.25 181.615 165.254 cv
181.114 165.254 li
181.114 165.754 li
181.615 165.754 li
f
181.615 146.254 mo
441.614 146.254 441.614 165.047 701.615 165.047 cv
701.615 165.873 li
441.614 165.873 441.614 147.08 181.615 147.08 cv
181.615 146.254 li
f
181.615 146.254 mo
181.615 146.754 li
311.604 146.754 376.579 151.451 441.578 156.149 cv
506.579 160.847 571.603 165.547 701.615 165.547 cv
701.615 165.047 li
701.114 165.047 li
701.114 165.873 li
701.615 165.873 li
701.615 165.373 li
571.625 165.373 506.65 160.676 441.65 155.978 cv
376.65 151.28 311.625 146.58 181.615 146.581 cv
181.615 147.08 li
182.114 147.08 li
182.114 146.254 li
181.615 146.254 li
181.615 146.754 li
181.615 146.254 li
181.114 146.254 li
181.114 147.08 li
181.114 147.58 li
181.615 147.58 li
311.604 147.581 376.579 152.277 441.578 156.975 cv
506.579 161.674 571.603 166.373 701.615 166.373 cv
702.115 166.373 li
702.115 165.047 li
702.115 164.547 li
701.615 164.547 li
571.625 164.546 506.65 159.85 441.65 155.152 cv
376.65 150.453 311.625 145.754 181.615 145.754 cv
181.114 145.754 li
181.114 146.254 li
181.615 146.254 li
f
181.615 248.64 mo
441.614 248.64 441.614 52.966 701.615 52.966 cv
701.615 54.6186 li
441.614 54.6186 441.614 250.292 181.615 250.292 cv
181.615 248.64 li
.60058 .0573434 .119661 0 cmyk
f
181.615 302.347 mo
441.615 302.347 441.615 268.148 701.615 268.148 cv
701.615 269.801 li
441.615 269.801 441.615 304 181.615 304 cv
181.615 302.347 li
cp
f
181.615 304 mo
441.615 304 441.615 269.801 701.615 269.801 cv
701.615 271.453 li
441.615 271.453 441.615 305.653 181.615 305.653 cv
181.615 304 li
cp
f
181.615 281.966 mo
441.615 281.966 441.615 172.208 701.615 172.208 cv
701.615 173.86 li
441.615 173.86 441.615 283.619 181.615 283.619 cv
181.615 281.966 li
cp
f
181.615 156.555 mo
441.614 156.555 441.614 205.305 701.615 205.305 cv
701.615 206.958 li
441.614 206.958 441.614 158.208 181.615 158.208 cv
181.615 156.555 li
.793973 1 .278019 .337499 cmyk
f
181.615 175.78 mo
441.614 175.78 441.614 302.347 701.615 302.347 cv
701.615 304 li
441.614 304 441.614 177.432 181.615 177.432 cv
181.615 175.78 li
f
181.615 158.208 mo
441.614 158.208 441.614 206.958 701.615 206.958 cv
701.615 208.61 li
441.614 208.61 441.614 159.86 181.615 159.86 cv
181.615 158.208 li
f
181.615 147.08 mo
441.614 147.08 441.614 165.873 701.615 165.873 cv
701.615 167.525 li
441.614 167.525 441.614 148.733 181.615 148.733 cv
181.615 147.08 li
f
181.615 93.2627 mo
441.615 93.2627 441.615 18.2627 701.615 18.2627 cv
701.615 19.9153 li
441.615 19.9153 441.615 94.9153 181.615 94.9153 cv
181.615 93.2627 li
cp
f
181.615 166.581 mo
441.614 166.581 441.614 249.97 701.615 249.97 cv
701.615 251.623 li
441.614 251.623 441.614 168.233 181.615 168.233 cv
181.615 166.581 li
f
gsave
181.615 129.068 mo
181.615 125.763 li
320.406 125.763 385.11 120.226 454.823 115.065 cv
452.846 116.309 450.864 117.562 448.894 118.81 cv
381.371 123.842 316.47 129.068 181.615 129.068 cv
462.81 117.782 mo
464.833 116.527 466.852 115.282 468.89 114.037 cv
475.175 113.585 481.543 113.139 488.046 112.704 cv
486.238 113.923 484.458 115.138 482.67 116.373 cv
475.942 116.834 469.336 117.306 462.81 117.782 cv
clp
181.615 112.704 mo
488.046 112.704 li
488.046 129.068 li
181.615 129.068 li
cp
.125002 .180667 .0336919 0 cmyk
f
grestore
482.67 116.373 mo
484.458 115.138 486.238 113.923 488.046 112.704 cv
488.623 112.665 489.2 112.626 489.78 112.588 cv
487.962 113.802 486.152 115.028 484.356 116.258 cv
483.791 116.296 483.233 116.334 482.67 116.373 cv
.678645 .290715 .143587 0 cmyk
f
484.356 116.258 mo
486.152 115.028 487.962 113.802 489.78 112.588 cv
490.233 112.558 490.703 112.527 491.158 112.497 cv
489.33 113.71 487.505 114.937 485.7 116.166 cv
485.25 116.197 484.804 116.227 484.356 116.258 cv
f
485.7 116.166 mo
487.505 114.937 489.33 113.71 491.158 112.497 cv
491.958 112.444 492.752 112.392 493.557 112.339 cv
491.709 113.553 489.87 114.778 488.046 116.008 cv
487.259 116.061 486.482 116.113 485.7 116.166 cv
f
488.046 116.008 mo
489.87 114.778 491.709 113.553 493.557 112.339 cv
494.175 112.299 494.806 112.258 495.427 112.218 cv
493.563 113.431 491.707 114.656 489.867 115.887 cv
489.262 115.927 488.649 115.968 488.046 116.008 cv
f
520.148 114.035 mo
522.36 112.798 524.61 111.569 526.868 110.366 cv
571.459 108.007 625.255 106.338 701.365 106.335 cv
701.365 109.64 li
621.401 109.643 566.05 111.486 520.148 114.035 cv
.125002 .180667 .0336919 0 cmyk
f
489.867 115.887 mo
491.707 114.656 493.563 113.431 495.427 112.218 cv
496.372 112.157 497.317 112.096 498.268 112.036 cv
496.374 113.25 494.496 114.472 492.628 115.705 cv
491.706 115.765 490.783 115.826 489.867 115.887 cv
.678645 .290715 .143587 0 cmyk
f
181.615 279.814 mo
181.615 277.009 li
288.446 277.009 351.37 252.663 406.483 223.973 cv
407.604 224.485 408.729 225.002 409.844 225.517 cv
363.446 249.948 311.955 271.56 233.511 278.213 cv
217.412 279.253 200.18 279.813 181.615 279.814 cv
.118257 0 .0197147 0 cmyk
f
181.615 280.313 mo
181.615 279.814 li
200.18 279.813 217.412 279.253 233.511 278.213 cv
217.406 279.579 200.181 280.313 181.615 280.313 cv
.60058 .0573434 .119661 0 cmyk
f
416.029 222.23 mo
414.931 221.713 413.834 221.2 412.731 220.686 cv
420.537 216.539 428.211 212.318 435.859 208.083 cv
437.122 208.487 438.375 208.889 439.637 209.294 cv
431.813 213.633 423.986 217.964 416.029 222.23 cv
.118257 0 .0197147 0 cmyk
f
414.821 222.877 mo
413.722 222.361 412.616 221.845 411.512 221.332 cv
411.918 221.117 412.325 220.901 412.731 220.686 cv
413.834 221.2 414.931 221.713 416.029 222.23 cv
415.626 222.446 415.225 222.661 414.821 222.877 cv
.871 1 .229892 .104494 cmyk
f
411.512 224.637 mo
410.399 224.12 409.287 223.606 408.168 223.092 cv
409.287 222.507 410.399 221.921 411.512 221.332 cv
412.616 221.845 413.722 222.361 414.821 222.877 cv
413.722 223.464 412.616 224.052 411.512 224.637 cv
f
447.603 204.877 mo
446.344 204.474 445.082 204.07 443.824 203.666 cv
452.426 198.896 461.052 194.126 469.831 189.453 cv
471.385 189.733 472.938 190.011 474.504 190.288 cv
465.385 195.072 456.482 199.961 447.603 204.877 cv
.118257 0 .0197147 0 cmyk
f
446.246 205.629 mo
444.983 205.224 443.73 204.823 442.469 204.418 cv
442.921 204.167 443.372 203.917 443.824 203.666 cv
445.082 204.07 446.344 204.474 447.603 204.877 cv
447.158 205.123 446.69 205.382 446.246 205.629 cv
.871 1 .229892 .104494 cmyk
f
443.068 207.39 mo
442.636 207.252 442.2 207.112 441.767 206.973 cv
440.942 206.708 440.119 206.444 439.293 206.18 cv
440.357 205.59 441.406 205.008 442.469 204.418 cv
443.73 204.823 444.983 205.224 446.246 205.629 cv
445.182 206.218 444.132 206.801 443.068 207.39 cv
f
441.525 208.247 mo
440.271 207.845 439.003 207.438 437.749 207.036 cv
438.257 206.754 438.785 206.461 439.293 206.18 cv
440.119 206.444 440.942 206.708 441.767 206.973 cv
442.2 207.112 442.636 207.252 443.068 207.39 cv
442.553 207.676 442.041 207.961 441.525 208.247 cv
f
486.294 184.236 mo
484.66 183.96 483.034 183.681 481.416 183.401 cv
495.155 176.374 509.436 169.645 524.799 163.52 cv
527.283 163.649 529.799 163.776 532.342 163.901 cv
515.923 170.084 500.776 176.979 486.294 184.236 cv
.118257 0 .0197147 0 cmyk
f
482.159 186.327 mo
480.551 186.05 478.954 185.772 477.361 185.492 cv
478.713 184.79 480.054 184.098 481.416 183.401 cv
483.034 183.681 484.66 183.96 486.294 184.236 cv
484.91 184.93 483.531 185.627 482.159 186.327 cv
.871 1 .229892 .104494 cmyk
f
481.192 186.821 mo
479.591 186.544 477.998 186.266 476.411 185.986 cv
476.722 185.824 477.049 185.654 477.361 185.492 cv
478.954 185.772 480.551 186.05 482.159 186.327 cv
481.836 186.492 481.514 186.656 481.192 186.821 cv
f
479.252 187.818 mo
477.665 187.541 476.078 187.262 474.504 186.983 cv
475.141 186.649 475.773 186.319 476.411 185.986 cv
477.998 186.266 479.591 186.544 481.192 186.821 cv
480.54 187.155 479.901 187.483 479.252 187.818 cv
f
476.868 189.053 mo
475.296 188.777 473.719 188.497 472.159 188.218 cv
472.939 187.806 473.721 187.394 474.504 186.983 cv
476.078 187.262 477.665 187.541 479.252 187.818 cv
478.454 188.229 477.662 188.64 476.868 189.053 cv
f
548.503 158.199 mo
545.615 158.075 542.753 157.947 539.945 157.818 cv
581.969 142.933 632.55 132.799 701.365 132.776 cv
701.365 136.08 li
637.15 136.102 588.827 144.924 548.503 158.199 cv
.118257 0 .0197147 0 cmyk
f
545.448 159.218 mo
542.623 159.093 539.85 158.967 537.101 158.837 cv
538.042 158.496 538.995 158.154 539.945 157.818 cv
542.753 157.947 545.615 158.075 548.503 158.199 cv
547.487 158.533 546.453 158.878 545.448 159.218 cv
.871 1 .229892 .104494 cmyk
f
542.447 160.245 mo
539.694 160.121 536.981 159.994 534.299 159.865 cv
535.231 159.519 536.161 159.178 537.101 158.837 cv
539.85 158.967 542.623 159.093 545.448 159.218 cv
544.442 159.558 543.443 159.9 542.447 160.245 cv
f
539.544 161.265 mo
536.851 161.14 534.205 161.013 531.579 160.884 cv
532.484 160.541 533.385 160.203 534.299 159.865 cv
536.981 159.994 539.694 160.121 542.447 160.245 cv
541.471 160.584 540.511 160.921 539.544 161.265 cv
f
536.285 162.439 mo
533.662 162.314 531.076 162.187 528.517 162.058 cv
529.535 161.663 530.551 161.273 531.579 160.884 cv
534.205 161.013 536.851 161.14 539.544 161.265 cv
538.451 161.653 537.367 162.044 536.285 162.439 cv
f
409.844 225.517 mo
408.729 225.002 407.604 224.485 406.483 223.973 cv
407.039 223.683 407.613 223.383 408.168 223.092 cv
409.287 223.606 410.399 224.12 411.512 224.637 cv
410.959 224.929 410.398 225.226 409.844 225.517 cv
f
474.504 190.288 mo
472.938 190.011 471.385 189.733 469.831 189.453 cv
470.608 189.04 471.379 188.631 472.159 188.218 cv
473.719 188.497 475.296 188.777 476.868 189.053 cv
476.082 189.462 475.287 189.877 474.504 190.288 cv
f
532.342 163.901 mo
529.799 163.776 527.283 163.649 524.799 163.52 cv
526.027 163.03 527.275 162.539 528.517 162.058 cv
531.076 162.187 533.662 162.314 536.285 162.439 cv
534.964 162.921 533.646 163.409 532.342 163.901 cv
f
439.637 209.294 mo
438.375 208.889 437.122 208.487 435.859 208.083 cv
436.494 207.731 437.114 207.388 437.749 207.036 cv
439.003 207.438 440.271 207.845 441.525 208.247 cv
440.898 208.594 440.264 208.946 439.637 209.294 cv
f
181.615 206.013 mo
441.614 206.013 441.614 40.8476 701.615 40.8476 cv
701.615 41.9491 li
441.614 41.9491 441.614 207.114 181.615 207.114 cv
181.615 206.013 li
.48127 .12842 .425422 0 cmyk
f
181.615 213.725 mo
441.615 213.725 441.615 210.538 701.615 210.538 cv
701.615 211.64 li
441.615 211.64 441.615 214.826 181.615 214.826 cv
181.615 213.725 li
cp
f
181.615 214.826 mo
441.615 214.826 441.615 255.203 701.615 255.203 cv
701.615 256.305 li
441.615 256.305 441.615 215.928 181.615 215.928 cv
181.615 214.826 li
cp
f
181.615 94.9153 mo
441.615 94.9153 441.615 19.9153 701.615 19.9153 cv
701.615 23.2203 li
441.615 23.2203 441.615 98.2203 181.615 98.2203 cv
181.615 94.9153 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 132.373 mo
181.615 129.068 li
316.47 129.068 381.371 123.842 448.894 118.81 cv
446.923 120.059 444.958 121.306 442.99 122.556 cv
377.527 127.447 312.535 132.373 181.615 132.373 cv
456.81 121.528 mo
458.805 120.275 460.803 119.028 462.81 117.782 cv
469.336 117.306 475.942 116.834 482.67 116.373 cv
480.907 117.59 479.156 118.812 477.41 120.042 cv
470.444 120.53 463.595 121.027 456.81 121.528 cv
.125002 .180667 .0336919 0 cmyk
f
477.41 120.042 mo
479.156 118.812 480.907 117.59 482.67 116.373 cv
483.233 116.334 483.791 116.296 484.356 116.258 cv
482.58 117.473 480.811 118.698 479.054 119.928 cv
478.503 119.966 477.959 120.004 477.41 120.042 cv
.678645 .290715 .143587 0 cmyk
f
479.054 119.928 mo
480.811 118.698 482.58 117.473 484.356 116.258 cv
484.804 116.227 485.25 116.197 485.7 116.166 cv
483.911 117.384 482.139 118.605 480.369 119.836 cv
479.932 119.867 479.49 119.897 479.054 119.928 cv
f
480.369 119.836 mo
482.139 118.605 483.911 117.384 485.7 116.166 cv
486.482 116.113 487.259 116.061 488.046 116.008 cv
486.238 117.228 484.458 118.444 482.67 119.678 cv
481.901 119.731 481.135 119.783 480.369 119.836 cv
f
482.67 119.678 mo
484.458 118.444 486.238 117.228 488.046 116.008 cv
488.649 115.968 489.262 115.927 489.867 115.887 cv
488.052 117.101 486.242 118.327 484.448 119.556 cv
483.85 119.597 483.266 119.637 482.67 119.678 cv
f
513.73 117.704 mo
515.848 116.468 517.99 115.242 520.148 114.035 cv
566.05 111.486 621.401 109.643 701.365 109.64 cv
701.365 112.945 li
617.642 112.949 560.895 114.969 513.73 117.704 cv
.125002 .180667 .0336919 0 cmyk
f
484.448 119.556 mo
486.242 118.327 488.052 117.101 489.867 115.887 cv
490.783 115.826 491.706 115.765 492.628 115.705 cv
490.793 116.916 488.954 118.147 487.141 119.374 cv
486.239 119.435 485.345 119.495 484.448 119.556 cv
.678645 .290715 .143587 0 cmyk
f
442.99 122.556 mo
444.958 121.306 446.923 120.059 448.894 118.81 cv
449.545 118.762 450.214 118.712 450.866 118.663 cv
448.894 119.911 446.925 121.16 444.956 122.409 cv
444.306 122.458 443.641 122.507 442.99 122.556 cv
.552636 .323613 .409186 .0273747 cmyk
f
181.615 159.86 mo
441.615 159.86 441.615 208.61 701.615 208.61 cv
701.615 209.436 li
441.615 209.436 441.615 160.686 181.615 160.686 cv
181.615 159.86 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 159.86 mo
181.615 160.36 li
311.587 160.362 376.523 172.54 441.522 184.727 cv
506.523 196.915 571.586 209.112 701.615 209.11 cv
701.615 208.61 li
701.115 208.61 li
701.115 209.436 li
701.615 209.436 li
701.615 208.936 li
571.642 208.935 506.706 196.756 441.707 184.57 cv
376.706 172.381 311.643 160.185 181.615 160.186 cv
181.615 160.686 li
182.114 160.686 li
182.114 159.86 li
181.615 159.86 li
181.615 160.36 li
181.615 159.86 li
181.115 159.86 li
181.115 160.686 li
181.115 161.186 li
181.615 161.186 li
311.587 161.188 376.523 173.366 441.522 185.553 cv
506.523 197.741 571.586 209.938 701.615 209.936 cv
702.114 209.936 li
702.114 208.61 li
702.114 208.11 li
701.615 208.11 li
571.642 208.109 506.706 195.93 441.707 183.744 cv
376.706 171.555 311.643 159.359 181.615 159.36 cv
181.115 159.36 li
181.115 159.86 li
181.615 159.86 li
cp
f
181.615 168.233 mo
441.615 168.233 441.615 251.623 701.615 251.623 cv
701.615 252.449 li
441.615 252.449 441.615 169.059 181.615 169.059 cv
181.615 168.233 li
cp
f
181.615 168.233 mo
181.615 168.733 li
311.565 168.737 376.461 189.559 441.462 210.404 cv
506.462 231.254 571.565 252.127 701.615 252.123 cv
701.615 251.623 li
701.115 251.623 li
701.115 252.449 li
701.615 252.449 li
701.615 251.949 li
571.663 251.945 506.767 231.123 441.767 210.278 cv
376.767 189.428 311.664 168.555 181.615 168.559 cv
181.615 169.059 li
182.114 169.059 li
182.114 168.233 li
181.615 168.233 li
181.615 168.733 li
181.615 168.233 li
181.115 168.233 li
181.115 169.059 li
181.115 169.559 li
181.615 169.559 li
311.565 169.563 376.461 190.385 441.462 211.23 cv
506.462 232.08 571.565 252.953 701.615 252.949 cv
702.114 252.949 li
702.114 251.623 li
702.114 251.123 li
701.615 251.123 li
571.663 251.119 506.767 230.297 441.767 209.452 cv
376.767 188.602 311.664 167.729 181.615 167.733 cv
181.115 167.733 li
181.115 168.233 li
181.615 168.233 li
cp
f
181.615 177.432 mo
441.615 177.432 441.615 304 701.615 304 cv
701.615 304.826 li
441.615 304.826 441.615 178.258 181.615 178.258 cv
181.615 177.432 li
cp
f
181.615 177.432 mo
181.615 177.932 li
311.536 177.94 376.392 209.527 441.396 241.166 cv
506.392 272.811 571.536 304.508 701.615 304.5 cv
701.615 304 li
701.115 304 li
701.115 304.826 li
701.615 304.826 li
701.615 304.326 li
571.692 304.318 506.837 272.731 441.833 241.093 cv
376.837 209.447 311.693 177.751 181.615 177.758 cv
181.615 178.258 li
182.114 178.258 li
182.114 177.432 li
181.615 177.432 li
181.615 177.932 li
181.615 177.432 li
181.115 177.432 li
181.115 178.258 li
181.115 178.758 li
181.615 178.758 li
311.536 178.766 376.392 210.353 441.396 241.992 cv
506.392 273.637 571.536 305.334 701.615 305.326 cv
702.114 305.326 li
702.114 304 li
702.114 303.5 li
701.615 303.5 li
571.692 303.492 506.837 271.905 441.833 240.267 cv
376.837 208.621 311.693 176.924 181.615 176.932 cv
181.114 176.932 li
181.115 177.432 li
181.615 177.432 li
cp
f
181.615 148.733 mo
441.615 148.733 441.615 167.525 701.615 167.525 cv
701.615 168.352 li
441.615 168.352 441.615 149.559 181.615 149.559 cv
181.615 148.733 li
cp
f
181.615 148.733 mo
181.615 149.233 li
311.604 149.233 376.579 153.93 441.578 158.628 cv
506.579 163.326 571.603 168.026 701.615 168.025 cv
701.615 167.525 li
701.115 167.525 li
701.115 168.352 li
701.615 168.352 li
701.615 167.852 li
571.625 167.851 506.65 163.155 441.651 158.457 cv
376.65 153.759 311.625 149.059 181.615 149.059 cv
181.615 149.559 li
182.114 149.559 li
182.114 148.733 li
181.615 148.733 li
181.615 149.233 li
181.615 148.733 li
181.115 148.733 li
181.115 149.559 li
181.115 150.059 li
181.615 150.059 li
311.604 150.06 376.579 154.756 441.578 159.454 cv
506.579 164.152 571.603 168.852 701.615 168.852 cv
702.114 168.852 li
702.114 167.525 li
702.114 167.025 li
701.615 167.025 li
571.625 167.025 506.65 162.328 441.651 157.631 cv
376.65 152.932 311.625 148.233 181.615 148.233 cv
181.115 148.233 li
181.115 148.733 li
181.615 148.733 li
cp
f
181.615 207.114 mo
441.614 207.114 441.614 41.9491 701.615 41.9491 cv
701.615 43.6017 li
441.614 43.6017 441.614 208.767 181.615 208.767 cv
181.615 207.114 li
.48127 .12842 .425422 0 cmyk
f
181.615 215.928 mo
441.615 215.928 441.615 256.305 701.615 256.305 cv
701.615 257.958 li
441.615 257.958 441.615 217.581 181.615 217.581 cv
181.615 215.928 li
cp
f
181.615 208.767 mo
441.614 208.767 441.614 43.6017 701.615 43.6017 cv
701.615 45.2542 li
441.614 45.2542 441.614 210.419 181.615 210.419 cv
181.615 208.767 li
f
181.615 217.581 mo
441.615 217.581 441.615 257.958 701.615 257.958 cv
701.615 259.61 li
441.615 259.61 441.615 219.233 181.615 219.233 cv
181.615 217.581 li
cp
f
181.615 98.2203 mo
441.615 98.2203 441.615 23.2203 701.615 23.2203 cv
701.615 26.5254 li
441.615 26.5254 441.615 101.525 181.615 101.525 cv
181.615 98.2203 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 101.525 mo
441.615 101.525 441.615 26.5254 701.615 26.5254 cv
701.615 29.8305 li
441.615 29.8305 441.615 104.831 181.615 104.831 cv
181.615 101.525 li
cp
f
181.615 250.292 mo
441.614 250.292 441.614 54.6186 701.615 54.6186 cv
701.615 55.7203 li
441.614 55.7203 441.614 251.394 181.615 251.394 cv
181.615 250.292 li
.60058 .0573434 .119661 0 cmyk
f
181.615 305.653 mo
441.615 305.653 441.615 271.453 701.615 271.453 cv
701.615 272.555 li
441.615 272.555 441.615 306.754 181.615 306.754 cv
181.615 305.653 li
cp
f
181.615 311.712 mo
441.615 311.712 441.615 311.712 701.615 311.712 cv
701.615 312.814 li
441.615 312.814 441.615 312.814 181.615 312.814 cv
181.615 311.712 li
cp
f
181.615 251.394 mo
441.614 251.394 441.614 55.7203 701.615 55.7203 cv
701.615 57.3729 li
441.614 57.3729 441.614 253.047 181.615 253.047 cv
181.615 251.394 li
f
181.615 283.619 mo
441.615 283.619 441.615 173.86 701.615 173.86 cv
701.615 175.513 li
441.615 175.513 441.615 285.271 181.615 285.271 cv
181.615 283.619 li
cp
f
181.615 210.419 mo
441.614 210.419 441.614 45.2542 701.615 45.2542 cv
701.615 48.5593 li
441.614 48.5593 441.614 213.725 181.615 213.725 cv
181.615 210.419 li
.48127 .12842 .425422 0 cmyk
f
181.615 289.678 mo
441.615 289.678 441.615 216.047 701.615 216.047 cv
701.615 217.699 li
441.615 217.699 441.615 291.331 181.615 291.331 cv
181.615 289.678 li
cp
.60058 .0573434 .119661 0 cmyk
f
181.615 312.814 mo
441.615 312.814 441.615 312.814 701.615 312.814 cv
701.615 314.466 li
441.615 314.466 441.615 314.466 181.615 314.466 cv
181.615 312.814 li
cp
f
181.615 135.678 mo
181.615 132.373 li
312.535 132.373 377.527 127.447 442.99 122.556 cv
441.023 123.806 439.061 125.052 437.092 126.302 cv
373.566 131.044 308.599 135.678 181.615 135.678 cv
.125002 .180667 .0336919 0 cmyk
f
437.092 126.302 mo
439.061 125.052 441.023 123.806 442.99 122.556 cv
443.641 122.507 444.306 122.458 444.956 122.409 cv
442.996 123.654 441.019 124.91 439.059 126.155 cv
438.4 126.204 437.751 126.253 437.092 126.302 cv
.552636 .323613 .409186 .0273747 cmyk
f
439.059 126.155 mo
441.019 124.91 442.996 123.654 444.956 122.409 cv
445.941 122.336 446.923 122.262 447.908 122.189 cv
445.946 123.433 443.967 124.69 442.008 125.935 cv
441.024 126.008 440.043 126.081 439.059 126.155 cv
f
442.008 125.935 mo
443.967 124.69 445.946 123.433 447.908 122.189 cv
448.893 122.115 449.88 122.042 450.866 121.969 cv
448.894 123.216 446.925 124.465 444.956 125.714 cv
443.98 125.787 442.984 125.862 442.008 125.935 cv
f
450.866 125.274 mo
452.846 124.021 454.822 122.775 456.81 121.528 cv
463.595 121.027 470.444 120.53 477.41 120.042 cv
475.689 121.255 473.955 122.488 472.248 123.712 cv
465.023 124.226 457.936 124.748 450.866 125.274 cv
.125002 .180667 .0336919 0 cmyk
f
472.248 123.712 mo
473.955 122.488 475.689 121.255 477.41 120.042 cv
477.959 120.004 478.503 119.966 479.054 119.928 cv
477.313 121.145 475.582 122.368 473.857 123.597 cv
473.319 123.636 472.785 123.673 472.248 123.712 cv
.678645 .290715 .143587 0 cmyk
f
473.857 123.597 mo
475.582 122.368 477.313 121.145 479.054 119.928 cv
479.49 119.897 479.932 119.867 480.369 119.836 cv
478.62 121.054 476.881 122.277 475.148 123.506 cv
474.723 123.536 474.281 123.567 473.857 123.597 cv
f
475.148 123.506 mo
476.881 122.277 478.62 121.054 480.369 119.836 cv
481.135 119.783 481.901 119.731 482.67 119.678 cv
480.907 120.895 479.156 122.117 477.41 123.347 cv
476.656 123.4 475.899 123.453 475.148 123.506 cv
f
477.41 123.347 mo
479.156 122.117 480.907 120.895 482.67 119.678 cv
483.266 119.637 483.85 119.597 484.448 119.556 cv
482.671 120.775 480.911 121.994 479.152 123.226 cv
478.568 123.266 477.992 123.307 477.41 123.347 cv
f
479.152 123.226 mo
480.911 121.994 482.671 120.775 484.448 119.556 cv
485.345 119.495 486.239 119.435 487.141 119.374 cv
485.345 120.591 483.562 121.813 481.786 123.044 cv
480.902 123.105 480.031 123.165 479.152 123.226 cv
f
507.572 121.374 mo
509.61 120.136 511.657 118.915 513.73 117.704 cv
560.895 114.969 617.642 112.949 701.365 112.945 cv
701.365 116.25 li
613.963 116.254 555.966 118.455 507.572 121.374 cv
.125002 .180667 .0336919 0 cmyk
f
481.786 123.044 mo
483.562 121.813 485.345 120.591 487.141 119.374 cv
487.742 119.334 488.351 119.293 488.954 119.253 cv
487.143 120.469 485.348 121.69 483.558 122.922 cv
482.969 122.963 482.373 123.003 481.786 123.044 cv
.678645 .290715 .143587 0 cmyk
f
483.558 122.922 mo
485.348 121.69 487.143 120.469 488.954 119.253 cv
489.868 119.192 490.784 119.131 491.703 119.071 cv
489.873 120.284 488.049 121.51 486.24 122.74 cv
485.34 122.801 484.453 122.861 483.558 122.922 cv
f
444.956 125.714 mo
446.925 124.465 448.894 123.216 450.866 121.969 cv
452.846 121.821 454.822 121.675 456.81 121.528 cv
454.822 122.775 452.846 124.021 450.866 125.274 cv
448.894 125.42 446.925 125.567 444.956 125.714 cv
.552636 .323613 .409186 .0273747 cmyk
f
181.615 253.047 mo
441.614 253.047 441.614 57.3729 701.615 57.3729 cv
701.615 60.678 li
441.614 60.678 441.614 256.352 181.615 256.352 cv
181.615 253.047 li
.60058 .0573434 .119661 0 cmyk
f
181.615 256.352 mo
441.614 256.352 441.614 60.678 701.615 60.678 cv
701.615 62.3305 li
441.614 62.3305 441.614 258.004 181.615 258.004 cv
181.615 256.352 li
f
181.615 314.466 mo
441.615 314.466 441.615 314.466 701.615 314.466 cv
701.615 316.119 li
441.615 316.119 441.615 316.119 181.615 316.119 cv
181.615 314.466 li
cp
f
181.615 104.831 mo
441.615 104.831 441.615 29.8305 701.615 29.8305 cv
701.615 31.4831 li
441.615 31.4831 441.615 106.483 181.615 106.483 cv
181.615 104.831 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 169.059 mo
441.615 169.059 441.615 252.449 701.615 252.449 cv
701.615 254.102 li
441.615 254.102 441.615 170.712 181.615 170.712 cv
181.615 169.059 li
cp
f
181.615 106.483 mo
441.615 106.483 441.615 31.4831 701.615 31.4831 cv
701.615 34.7881 li
441.615 34.7881 441.615 109.788 181.615 109.788 cv
181.615 106.483 li
cp
f
181.615 109.788 mo
441.615 109.788 441.615 34.7881 701.615 34.7881 cv
701.615 38.0932 li
441.615 38.0932 441.615 113.093 181.615 113.093 cv
181.615 109.788 li
cp
f
181.615 113.093 mo
441.615 113.093 441.615 38.0932 701.615 38.0932 cv
701.615 39.7458 li
441.615 39.7458 441.615 114.746 181.615 114.746 cv
181.615 113.093 li
cp
f
181.615 178.258 mo
441.615 178.258 441.615 304.826 701.615 304.826 cv
701.615 306.479 li
441.615 306.479 441.615 179.911 181.615 179.911 cv
181.615 178.258 li
cp
f
181.615 316.119 mo
441.615 316.119 441.615 316.119 701.615 316.119 cv
701.615 319.424 li
441.615 319.424 441.615 319.424 181.615 319.424 cv
181.615 316.119 li
cp
.60058 .0573434 .119661 0 cmyk
f
181.615 258.004 mo
441.614 258.004 441.614 62.3305 701.615 62.3305 cv
701.615 65.6357 li
441.614 65.6357 441.614 261.309 181.615 261.309 cv
181.615 258.004 li
f
181.615 261.309 mo
441.614 261.309 441.614 65.6357 701.615 65.6357 cv
701.615 66.4619 li
441.614 66.4619 441.614 262.136 181.615 262.136 cv
181.615 261.309 li
f
181.615 261.309 mo
181.615 261.809 li
311.746 261.822 376.928 212.791 441.915 163.872 cv
506.928 114.954 571.745 66.148 701.615 66.1356 cv
701.615 65.6354 li
701.114 65.6357 li
701.114 66.4619 li
701.615 66.4619 li
701.615 65.9618 li
571.483 65.9494 506.301 114.98 441.314 163.899 cv
376.301 212.817 311.483 261.623 181.615 261.636 cv
181.615 262.136 li
182.114 262.136 li
182.114 261.309 li
181.615 261.309 li
181.615 261.809 li
181.615 261.309 li
181.114 261.309 li
181.114 262.136 li
181.114 262.635 li
181.615 262.635 li
311.746 262.648 376.928 213.617 441.915 164.698 cv
506.928 115.781 571.745 66.9742 701.615 66.9619 cv
702.114 66.9619 li
702.115 65.6357 li
702.115 65.1355 li
701.615 65.1355 li
571.483 65.1231 506.301 114.154 441.314 163.073 cv
376.301 211.99 311.483 260.797 181.615 260.809 cv
181.114 260.809 li
181.114 261.309 li
181.615 261.309 li
f
181.615 291.331 mo
441.615 291.331 441.615 217.699 701.615 217.699 cv
701.615 218.525 li
441.615 218.525 441.615 292.157 181.615 292.157 cv
181.615 291.331 li
cp
f
181.615 291.331 mo
181.615 291.83 li
311.657 291.834 376.75 273.406 441.751 254.996 cv
506.751 236.59 571.657 218.202 701.615 218.199 cv
701.615 217.699 li
701.115 217.699 li
701.115 218.525 li
701.615 218.525 li
701.615 218.025 li
571.572 218.022 506.478 236.45 441.478 254.86 cv
376.478 273.266 311.572 291.654 181.615 291.657 cv
181.615 292.157 li
182.114 292.157 li
182.114 291.331 li
181.615 291.331 li
181.615 291.83 li
181.615 291.331 li
181.115 291.331 li
181.115 292.157 li
181.115 292.657 li
181.615 292.657 li
311.657 292.66 376.75 274.232 441.751 255.822 cv
506.751 237.416 571.657 219.029 701.615 219.025 cv
702.114 219.025 li
702.114 217.699 li
702.114 217.199 li
701.615 217.199 li
571.572 217.196 506.478 235.624 441.478 254.034 cv
376.478 272.439 311.572 290.827 181.615 290.831 cv
181.115 290.831 li
181.115 291.331 li
181.615 291.331 li
cp
f
181.615 306.754 mo
441.615 306.754 441.615 272.555 701.615 272.555 cv
701.615 273.381 li
441.615 273.381 441.615 307.581 181.615 307.581 cv
181.615 306.754 li
cp
f
181.615 306.754 mo
181.615 307.254 li
311.634 307.255 376.679 298.701 441.68 290.15 cv
506.679 281.601 571.633 273.056 701.615 273.055 cv
701.615 272.555 li
701.115 272.555 li
701.115 273.381 li
701.615 273.381 li
701.615 272.881 li
571.595 272.881 506.55 281.435 441.549 289.985 cv
376.55 298.534 311.595 307.08 181.615 307.081 cv
181.615 307.581 li
182.114 307.581 li
182.114 306.754 li
181.615 306.754 li
181.615 307.254 li
181.615 306.754 li
181.115 306.754 li
181.115 307.581 li
181.115 308.08 li
181.615 308.08 li
311.634 308.081 376.679 299.527 441.68 290.977 cv
506.679 282.427 571.633 273.882 701.615 273.881 cv
702.114 273.881 li
702.114 272.555 li
702.114 272.055 li
701.615 272.055 li
571.595 272.054 506.55 280.609 441.549 289.159 cv
376.55 297.708 311.595 306.253 181.615 306.254 cv
181.115 306.254 li
181.115 306.754 li
181.615 306.754 li
cp
f
181.615 319.424 mo
441.615 319.424 441.615 319.424 701.615 319.424 cv
701.615 320.25 li
441.615 320.25 441.615 320.25 181.615 320.25 cv
181.615 319.424 li
cp
f
181.615 319.424 mo
181.615 319.924 li
441.615 319.924 441.614 319.924 701.615 319.924 cv
701.615 319.424 li
701.115 319.424 li
701.115 320.25 li
701.615 320.25 li
701.615 319.75 li
441.614 319.75 441.614 319.75 181.615 319.75 cv
181.615 320.25 li
182.114 320.25 li
182.114 319.424 li
181.615 319.424 li
181.615 319.924 li
181.615 319.424 li
181.115 319.424 li
181.115 320.25 li
181.115 320.75 li
181.615 320.75 li
441.615 320.75 441.614 320.75 701.615 320.75 cv
702.114 320.75 li
702.114 319.424 li
702.114 318.924 li
701.615 318.924 li
441.614 318.924 441.614 318.924 181.615 318.924 cv
181.115 318.924 li
181.115 319.424 li
181.615 319.424 li
cp
f
181.615 262.136 mo
441.614 262.136 441.614 66.4619 701.615 66.4619 cv
701.615 69.767 li
441.614 69.767 441.614 265.441 181.615 265.441 cv
181.615 262.136 li
f
gsave
181.615 138.983 mo
181.615 135.678 li
308.599 135.678 373.566 131.044 437.092 126.302 cv
435.123 127.551 433.151 128.801 431.178 130.047 cv
369.477 134.632 304.664 138.983 181.615 138.983 cv
clp
181.615 126.302 mo
437.092 126.302 li
437.092 138.983 li
181.615 138.983 li
cp
.125002 .180667 .0336919 0 cmyk
f
grestore
431.178 130.047 mo
433.151 128.801 435.123 127.551 437.092 126.302 cv
437.751 126.253 438.4 126.204 439.059 126.155 cv
437.091 127.405 435.124 128.653 433.152 129.901 cv
432.492 129.95 431.838 129.998 431.178 130.047 cv
.552636 .323613 .409186 .0273747 cmyk
f
444.956 129.019 mo
446.925 127.77 448.894 126.521 450.866 125.274 cv
457.936 124.748 465.023 124.226 472.248 123.712 cv
470.542 124.935 468.863 126.148 467.168 127.381 cv
459.688 127.921 452.314 128.47 444.956 129.019 cv
.125002 .180667 .0336919 0 cmyk
f
467.168 127.381 mo
468.863 126.148 470.542 124.935 472.248 123.712 cv
472.785 123.673 473.319 123.636 473.857 123.597 cv
472.148 124.815 470.444 126.04 468.748 127.267 cv
468.214 127.306 467.701 127.343 467.168 127.381 cv
.678645 .290715 .143587 0 cmyk
f
468.748 127.267 mo
470.444 126.04 472.148 124.815 473.857 123.597 cv
474.281 123.567 474.723 123.536 475.148 123.506 cv
473.431 124.724 471.721 125.948 470.018 127.176 cv
469.597 127.206 469.168 127.237 468.748 127.267 cv
f
470.018 127.176 mo
471.721 125.948 473.431 124.724 475.148 123.506 cv
475.899 123.453 476.656 123.4 477.41 123.347 cv
475.689 124.56 473.955 125.793 472.248 127.017 cv
471.501 127.07 470.763 127.123 470.018 127.176 cv
f
472.248 127.017 mo
473.955 125.793 475.689 124.56 477.41 123.347 cv
477.992 123.307 478.568 123.266 479.152 123.226 cv
477.417 124.44 475.678 125.669 473.959 126.895 cv
473.389 126.936 472.817 126.976 472.248 127.017 cv
f
473.959 126.895 mo
475.678 125.669 477.417 124.44 479.152 123.226 cv
480.031 123.165 480.902 123.105 481.786 123.044 cv
480.026 124.263 478.287 125.481 476.543 126.713 cv
475.684 126.773 474.815 126.835 473.959 126.895 cv
f
433.152 129.901 mo
435.124 128.653 437.091 127.405 439.059 126.155 cv
440.043 126.081 441.024 126.008 442.008 125.935 cv
440.04 127.185 438.078 128.431 436.108 129.68 cv
435.124 129.754 434.138 129.827 433.152 129.901 cv
.552636 .323613 .409186 .0273747 cmyk
f
436.108 129.68 mo
438.078 128.431 440.04 127.185 442.008 125.935 cv
442.984 125.862 443.98 125.787 444.956 125.714 cv
442.996 126.959 441.019 128.215 439.059 129.46 cv
438.075 129.534 437.093 129.607 436.108 129.68 cv
f
476.543 126.713 mo
478.287 125.481 480.026 124.263 481.786 123.044 cv
482.373 123.003 482.969 122.963 483.558 122.922 cv
481.792 124.137 480.028 125.364 478.28 126.592 cv
477.697 126.632 477.125 126.672 476.543 126.713 cv
.678645 .290715 .143587 0 cmyk
f
478.28 126.592 mo
480.028 125.364 481.792 124.137 483.558 122.922 cv
484.453 122.861 485.34 122.801 486.24 122.74 cv
484.448 123.959 482.678 125.176 480.905 126.41 cv
480.031 126.47 479.15 126.531 478.28 126.592 cv
f
439.059 129.46 mo
441.019 128.215 442.996 126.959 444.956 125.714 cv
446.925 125.567 448.894 125.42 450.866 125.274 cv
448.894 126.521 446.925 127.77 444.956 129.019 cv
442.996 129.166 441.019 129.314 439.059 129.46 cv
.552636 .323613 .409186 .0273747 cmyk
f
480.905 126.41 mo
482.678 125.176 484.448 123.959 486.24 122.74 cv
488.049 122.618 489.873 122.496 491.703 122.376 cv
489.873 123.59 488.049 124.815 486.24 126.045 cv
484.448 126.166 482.678 126.287 480.905 126.41 cv
.678645 .290715 .143587 0 cmyk
f
486.24 126.045 mo
488.049 124.815 489.873 123.59 491.703 122.376 cv
492.632 122.315 493.556 122.254 494.49 122.194 cv
492.63 123.41 490.791 124.63 488.954 125.863 cv
488.049 125.923 487.14 125.984 486.24 126.045 cv
f
488.954 125.863 mo
490.791 124.63 492.63 123.41 494.49 122.194 cv
496.027 122.094 497.595 121.993 499.15 121.895 cv
497.244 123.109 495.354 124.331 493.474 125.565 cv
491.958 125.664 490.455 125.763 488.954 125.863 cv
f
493.474 125.565 mo
495.354 124.331 497.244 123.109 499.15 121.895 cv
499.983 121.842 500.8 121.791 501.638 121.738 cv
499.711 122.951 497.798 124.174 495.898 125.408 cv
495.089 125.46 494.279 125.512 493.474 125.565 cv
f
501.638 125.043 mo
503.601 123.809 505.579 122.585 507.572 121.374 cv
555.966 118.455 613.963 116.254 701.365 116.25 cv
701.365 119.555 li
610.363 119.559 551.236 121.945 501.638 125.043 cv
.125002 .180667 .0336919 0 cmyk
f
495.898 125.408 mo
497.798 124.174 499.711 122.951 501.638 121.738 cv
503.601 121.616 505.579 121.494 507.572 121.374 cv
505.579 122.585 503.601 123.809 501.638 125.043 cv
499.711 125.164 497.798 125.285 495.898 125.408 cv
.678645 .290715 .143587 0 cmyk
f
181.615 142.288 mo
181.615 142.288 li
181.615 138.983 li
304.664 138.983 369.477 134.632 431.178 130.047 cv
429.196 131.299 427.214 132.547 425.224 133.793 cv
365.257 138.212 300.712 142.288 181.615 142.288 cv
.125002 .180667 .0336919 0 cmyk
f
425.224 133.793 mo
427.214 132.547 429.196 131.299 431.178 130.047 cv
431.838 129.998 432.492 129.95 433.152 129.901 cv
431.173 131.153 429.201 132.398 427.214 133.646 cv
426.552 133.695 425.888 133.744 425.224 133.793 cv
.552636 .323613 .409186 .0273747 cmyk
f
439.059 132.765 mo
441.019 131.52 442.996 130.264 444.956 129.019 cv
452.314 128.47 459.688 127.921 467.168 127.381 cv
465.498 128.596 463.816 129.828 462.155 131.051 cv
454.398 131.618 446.733 132.192 439.059 132.765 cv
.125002 .180667 .0336919 0 cmyk
f
462.155 131.051 mo
463.816 129.828 465.498 128.596 467.168 127.381 cv
467.701 127.343 468.214 127.306 468.748 127.267 cv
467.06 128.489 465.388 129.708 463.711 130.937 cv
463.197 130.974 462.669 131.013 462.155 131.051 cv
.678645 .290715 .143587 0 cmyk
f
463.711 130.937 mo
465.388 129.708 467.06 128.489 468.748 127.267 cv
469.168 127.237 469.597 127.206 470.018 127.176 cv
468.327 128.395 466.644 129.618 464.965 130.846 cv
464.546 130.876 464.129 130.907 463.711 130.937 cv
f
464.965 130.846 mo
466.644 129.618 468.327 128.395 470.018 127.176 cv
470.763 127.123 471.501 127.07 472.248 127.017 cv
470.542 128.24 468.863 129.453 467.168 130.686 cv
466.434 130.739 465.697 130.793 464.965 130.846 cv
f
467.168 130.686 mo
468.863 129.453 470.542 128.24 472.248 127.017 cv
472.817 126.976 473.389 126.936 473.959 126.895 cv
472.248 128.115 470.552 129.335 468.853 130.565 cv
468.287 130.605 467.733 130.645 467.168 130.686 cv
f
468.853 130.565 mo
470.552 129.335 472.248 128.115 473.959 126.895 cv
474.815 126.835 475.684 126.773 476.543 126.713 cv
474.825 127.928 473.101 129.157 471.396 130.383 cv
470.544 130.443 469.702 130.504 468.853 130.565 cv
f
427.214 133.646 mo
429.201 132.398 431.173 131.153 433.152 129.901 cv
434.138 129.827 435.124 129.754 436.108 129.68 cv
434.139 130.929 432.163 132.18 430.189 133.426 cv
429.193 133.5 428.212 133.573 427.214 133.646 cv
.552636 .323613 .409186 .0273747 cmyk
f
430.189 133.426 mo
432.163 132.18 434.139 130.929 436.108 129.68 cv
437.093 129.607 438.075 129.534 439.059 129.46 cv
437.091 130.71 435.124 131.958 433.152 133.206 cv
432.167 133.279 431.176 133.353 430.189 133.426 cv
f
471.396 130.383 mo
473.101 129.157 474.825 127.928 476.543 126.713 cv
477.125 126.672 477.697 126.632 478.28 126.592 cv
476.547 127.808 474.82 129.034 473.102 130.261 cv
472.533 130.302 471.964 130.342 471.396 130.383 cv
.678645 .290715 .143587 0 cmyk
f
473.102 130.261 mo
474.82 129.034 476.547 127.808 478.28 126.592 cv
479.15 126.531 480.031 126.47 480.905 126.41 cv
479.156 127.625 477.412 128.851 475.679 130.079 cv
474.821 130.139 473.957 130.201 473.102 130.261 cv
f
433.152 133.206 mo
435.124 131.958 437.091 130.71 439.059 129.46 cv
441.019 129.314 442.996 129.166 444.956 129.019 cv
442.996 130.264 441.019 131.52 439.059 132.765 cv
437.091 132.912 435.124 133.059 433.152 133.206 cv
.552636 .323613 .409186 .0273747 cmyk
f
475.679 130.079 mo
477.412 128.851 479.156 127.625 480.905 126.41 cv
482.678 126.287 484.448 126.166 486.24 126.045 cv
484.448 127.264 482.678 128.482 480.905 129.715 cv
479.156 129.835 477.412 129.957 475.679 130.079 cv
.678645 .290715 .143587 0 cmyk
f
480.905 129.715 mo
482.678 128.482 484.448 127.264 486.24 126.045 cv
487.14 125.984 488.049 125.923 488.954 125.863 cv
487.143 127.08 485.348 128.301 483.558 129.533 cv
482.67 129.593 481.787 129.654 480.905 129.715 cv
f
483.558 129.533 mo
485.348 128.301 487.143 127.08 488.954 125.863 cv
490.455 125.763 491.958 125.664 493.474 125.565 cv
491.625 126.779 489.784 128.004 487.957 129.235 cv
486.485 129.334 485.017 129.433 483.558 129.533 cv
f
487.957 129.235 mo
489.784 128.004 491.625 126.779 493.474 125.565 cv
494.279 125.512 495.089 125.46 495.898 125.408 cv
494.023 126.624 492.175 127.842 490.324 129.077 cv
489.534 129.129 488.744 129.182 487.957 129.235 cv
f
495.898 128.713 mo
497.798 127.479 499.711 126.256 501.638 125.043 cv
551.236 121.945 610.363 119.559 701.365 119.555 cv
701.365 122.86 li
606.826 122.865 546.688 125.439 495.898 128.713 cv
.125002 .180667 .0336919 0 cmyk
f
490.324 129.077 mo
492.175 127.842 494.023 126.624 495.898 125.408 cv
497.798 125.285 499.711 125.164 501.638 125.043 cv
499.711 126.256 497.798 127.479 495.898 128.713 cv
494.023 128.834 492.175 128.954 490.324 129.077 cv
.678645 .290715 .143587 0 cmyk
f
181.615 160.686 mo
441.615 160.686 441.615 209.436 701.615 209.436 cv
701.615 210.538 li
441.615 210.538 441.615 161.788 181.615 161.788 cv
181.615 160.686 li
cp
.793973 1 .278019 .337499 cmyk
f
181.615 179.911 mo
441.615 179.911 441.615 306.479 701.615 306.479 cv
701.615 307.581 li
441.615 307.581 441.615 181.013 181.615 181.013 cv
181.615 179.911 li
cp
f
181.615 149.559 mo
441.615 149.559 441.615 168.352 701.615 168.352 cv
701.615 169.453 li
441.615 169.453 441.615 150.661 181.615 150.661 cv
181.615 149.559 li
cp
f
181.615 114.746 mo
441.615 114.746 441.615 39.7458 701.615 39.7458 cv
701.615 40.8475 li
441.615 40.8475 441.615 115.847 181.615 115.847 cv
181.615 114.746 li
cp
f
181.615 170.712 mo
441.615 170.712 441.615 254.102 701.615 254.102 cv
701.615 255.203 li
441.615 255.203 441.615 171.814 181.615 171.814 cv
181.615 170.712 li
cp
f
181.615 150.661 mo
441.615 150.661 441.615 169.453 701.615 169.453 cv
701.615 170.555 li
441.615 170.555 441.615 151.763 181.615 151.763 cv
181.615 150.661 li
cp
f
181.615 265.441 mo
441.615 265.441 441.615 69.767 701.615 69.767 cv
701.615 71.4195 li
441.615 71.4195 441.615 267.093 181.615 267.093 cv
181.615 265.441 li
cp
.60058 .0573434 .119661 0 cmyk
f
181.615 292.157 mo
441.615 292.157 441.615 218.525 701.615 218.525 cv
701.615 220.178 li
441.615 220.178 441.615 293.809 181.615 293.809 cv
181.615 292.157 li
cp
f
171.615 206.013 mo
181.615 206.013 li
181.615 219.233 li
171.615 219.233 li
171.615 206.013 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.615 206.013 mo
171.615 206.263 li
181.364 206.263 li
181.364 218.983 li
171.864 218.983 li
171.864 206.013 li
171.615 206.013 li
171.615 206.263 li
171.615 206.013 li
171.365 206.013 li
171.365 219.483 li
181.864 219.483 li
181.864 205.763 li
171.365 205.763 li
171.365 206.013 li
171.615 206.013 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 66 /B putdup 104 /h putdup 111 /o putdup 116 /t putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/B <1C60D8A8C9B64EDFF43B9E1D43B76E7425A98F23F483468D5596DA760F1554BAD296AA38A849FEE692D78BAC3B162E2013F61317550246D6F77AF27886D4E04AB44C473130F6FA990DAC6640A48EC2A80691207E5DDBCA7196686E7CD5C980FB78081AA13952C8D8F3373FF54323A4853D0F014ED4C5A1024912E545AAB4BA7F36D08386B7A08B38C3035C03383BB204897FB23E6B597B4E784900841F1858E5E1740AFA815171FE44AAE751E7961222B185E93D26B02E1EB5C1FF9174E0C619907BEEF9FED49CD2B96F29B7B01884> |-/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SEJDTY+ArialMT /ArialMT findfont ct_VMDictPut/SEJDTY+ArialMT*1 [66{/.notdef}rp /B 37{/.notdef}rp /h 6{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf141.293 217.173 mo(Both)sh171.615 75.25 mo
181.615 75.25 li
181.615 181.013 li
171.615 181.013 li
171.615 75.25 li
cp
f
171.615 75.25 mo
171.615 75.5 li
181.364 75.5 li
181.364 180.763 li
171.864 180.763 li
171.864 75.25 li
171.615 75.25 li
171.615 75.5 li
171.615 75.25 li
171.365 75.25 li
171.365 181.263 li
181.864 181.263 li
181.864 75 li
171.365 75 li
171.365 75.25 li
171.615 75.25 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B96470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 73 /I putdup 99 /c putdup 105 /i putdup 108 /l putdup 109 /m putdup 112 /p putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [66{/.notdef}rp /B 6{/.notdef}rp /I 25{/.notdef}rp /c 4{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o /p 3{/.notdef}rp /t 139{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf130.751 132.682 mo(Implicit)sh171.615 244.233 mo
181.615 244.233 li
181.615 320.25 li
171.615 320.25 li
171.615 244.233 li
cp
f
171.615 244.233 mo
171.615 244.483 li
181.365 244.483 li
181.365 320 li
171.864 320 li
171.864 244.233 li
171.615 244.233 li
171.615 244.483 li
171.615 244.233 li
171.365 244.233 li
171.365 320.5 li
181.864 320.5 li
181.864 243.983 li
171.365 243.983 li
171.365 244.233 li
171.615 244.233 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B64EDFFB83C6241DB110BEE5AB2FAD9D94B39ED5E81E7411B66E9361DDE78FC667AB91EF9824> |-/x <1C60D8A8C9B7A73DB920A1A3B81DE7234ACAA5546B4C65820CF3C50E1629C5A6423BAA34A2ECA8C7FE4B71726AC6704CC23AF1725AFB30D2892FC1BDDAFEAD7BE7BD65F1051699CCF4B0> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 69 /E putdup 120 /x putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [66{/.notdef}rp /B 2{/.notdef}rp /E 3{/.notdef}rp /I 25{/.notdef}rp /c 4{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o /p 3{/.notdef}rp /t 3{/.notdef}rp /x 135{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf130.189 286.791 mo(Explicit)sh701.615 .25 mo
711.615 .25 li
711.615 71.4195 li
701.615 71.4195 li
701.615 .25 li
cp
f
701.615 .25 mo
701.615 .5 li
711.364 .5 li
711.364 71.1695 li
701.864 71.1695 li
701.864 .25 li
701.615 .25 li
701.615 .5 li
701.615 .25 li
701.365 .25 li
701.365 71.6695 li
711.864 71.6695 li
711.864 1.49012e-08 li
701.365 1.49012e-08 li
701.365 .25 li
701.615 .25 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F632B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2BA15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609FBC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D295257B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0B222> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 82 /R putdup 97 /a putdup 101 /e putdup 103 /g putdup 110 /n putdup 115 /s putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [66{/.notdef}rp /B 2{/.notdef}rp /E 3{/.notdef}rp /I 8{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p 2{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf722.714 40.3848 mo(Reasoning)sh701.615 200.513 mo
711.615 200.513 li
711.615 220.178 li
701.615 220.178 li
701.615 200.513 li
cp
f
701.615 200.513 mo
701.615 200.763 li
711.365 200.763 li
711.365 219.928 li
701.864 219.928 li
701.864 200.513 li
701.615 200.513 li
701.615 200.763 li
701.615 200.513 li
701.365 200.513 li
701.365 220.428 li
711.864 220.428 li
711.864 200.263 li
701.365 200.263 li
701.365 200.513 li
701.615 200.513 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-/O <1C60D8A8C9B6FF86E621E1FAD9CC02A23AF5AAF7451327A9277DAE8170AAC8E603A02E3EEFF561DDADE9FD6F6F16B77EE709DD797791A73F1C532C58482F9C51E1EAE7EA6E4D820E6AA1026E7BE345B1C97C5D9EBBEF4840C4188F96B5380E7625249BBAD172254404F6F1CB17CABA1F131B17AAAB56C5D3B94E3AC2C2E9F0A0D079C435D0249DF6C47E18FCF00E7FFE3C519BB35DF797EF47286BDCA762289BE1> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 68 /D putdup 79 /O putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [66{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp /I 5{/.notdef}rp /O 2{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p 2{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf722.713 214.896 mo(OOD)sh701.615 245.178 mo
711.615 245.178 li
711.615 273.381 li
701.615 273.381 li
701.615 245.178 li
cp
f
701.615 245.178 mo
701.615 245.428 li
711.365 245.428 li
711.365 273.131 li
701.864 273.131 li
701.864 245.178 li
701.615 245.178 li
701.615 245.428 li
701.615 245.178 li
701.365 245.178 li
701.365 273.631 li
711.864 273.631 li
711.864 244.928 li
701.365 244.928 li
701.365 245.178 li
701.615 245.178 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 98 /b putdup 114 /r putdup 121 /y putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [66{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp /I 5{/.notdef}rp /O 2{/.notdef}rp /R 14{/.notdef}rp /a /b /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t 3{/.notdef}rp /x /y 134{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf722.714 263.83 mo(Interpretability)sh701.615 298.381 mo
711.615 298.381 li
711.615 320.25 li
701.615 320.25 li
701.615 298.381 li
cp
f
701.615 298.381 mo
701.615 298.631 li
711.364 298.631 li
711.364 320 li
701.864 320 li
701.864 298.381 li
701.615 298.381 li
701.615 298.631 li
701.615 298.381 li
701.365 298.381 li
701.365 320.5 li
711.864 320.5 li
711.864 298.131 li
701.365 298.131 li
701.365 298.381 li
701.615 298.381 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 32 /space putdup 100 /d putdup 117 /u putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp /I 5{/.notdef}rp /O 2{/.notdef}rp /R 14{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf722.713 313.865 mo(Reduced Data)sh701.615 161.081 mo
711.615 161.081 li
711.615 175.513 li
701.615 175.513 li
701.615 161.081 li
cp
f
701.615 161.081 mo
701.615 161.331 li
711.364 161.331 li
711.364 175.263 li
701.864 175.263 li
701.864 161.081 li
701.615 161.081 li
701.615 161.331 li
701.615 161.081 li
701.365 161.081 li
701.365 175.763 li
711.864 175.763 li
711.864 160.831 li
701.365 160.831 li
701.365 161.081 li
701.615 161.081 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D3927> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 84 /T putdup 102 /f putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp /I 5{/.notdef}rp /O 2{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf722.713 172.847 mo(Transferability)[5.7373 3.33008 5.56152 5.56152 5 2.77832 5.56152 3.33008 5.56152 5.56152 2.22168 2.22168 2.22168 2.77832 0 ]xsh711.365 135.83 mo
701.864 135.83 li
701.864 96.6689 li
711.365 96.6689 li
711.365 135.83 li
.148226 .112093 .11783 0 cmyk
f
711.864 136.33 mo
701.365 136.33 li
701.365 136.08 li
701.444 136.08 701.535 136.08 701.615 136.08 cv
701.615 132.776 li
701.535 132.776 701.444 132.776 701.365 132.776 cv
701.365 132.776 li
701.444 132.776 701.535 132.776 701.615 132.776 cv
701.615 129.47 li
701.535 129.47 701.444 129.47 701.365 129.47 cv
701.365 129.47 li
701.444 129.47 701.535 129.47 701.615 129.47 cv
701.615 126.165 li
701.535 126.165 701.444 126.165 701.365 126.165 cv
701.365 126.165 li
701.444 126.165 701.535 126.165 701.615 126.165 cv
701.615 122.86 li
701.615 122.86 li
701.615 119.555 li
701.535 119.555 701.444 119.555 701.365 119.555 cv
701.365 119.555 li
701.444 119.555 701.535 119.555 701.615 119.555 cv
701.615 116.25 li
701.535 116.25 701.444 116.25 701.365 116.25 cv
701.365 116.25 li
701.444 116.25 701.535 116.25 701.615 116.25 cv
701.615 112.945 li
701.535 112.945 701.444 112.945 701.365 112.945 cv
701.365 112.945 li
701.444 112.945 701.535 112.945 701.615 112.945 cv
701.615 109.64 li
701.535 109.64 701.444 109.64 701.365 109.64 cv
701.365 109.64 li
701.444 109.64 701.535 109.64 701.615 109.64 cv
701.615 106.335 li
701.535 106.335 701.444 106.335 701.365 106.335 cv
701.365 106.335 li
701.444 106.335 701.535 106.335 701.615 106.335 cv
701.615 103.03 li
701.535 103.03 701.444 103.03 701.365 103.03 cv
701.365 103.03 li
701.444 103.03 701.535 103.03 701.615 103.03 cv
701.615 99.7246 li
701.535 99.7246 701.444 99.7246 701.365 99.7246 cv
701.365 99.7246 li
701.444 99.7246 701.535 99.7246 701.615 99.7246 cv
701.615 96.4195 li
701.535 96.4195 701.444 96.4195 701.365 96.4195 cv
701.365 96.4191 li
701.365 96.169 li
711.864 96.169 li
711.864 136.33 li
701.864 96.6689 mo
701.864 135.83 li
711.365 135.83 li
711.365 96.6689 li
701.864 96.6689 li
701.365 122.86 mo
701.365 122.86 li
701.444 122.86 701.535 122.86 701.615 122.86 cv
701.535 122.86 701.444 122.86 701.365 122.86 cv
.132479 .102602 .106935 0 cmyk
f
701.365 126.165 mo
701.365 122.86 li
701.444 122.86 701.535 122.86 701.615 122.86 cv
701.615 122.86 li
701.615 126.165 li
701.535 126.165 701.444 126.165 701.365 126.165 cv
.251286 .109773 .133883 0 cmyk
f
701.365 129.47 mo
701.365 126.165 li
701.444 126.165 701.535 126.165 701.615 126.165 cv
701.615 129.47 li
701.535 129.47 701.444 129.47 701.365 129.47 cv
f
701.365 99.7246 mo
701.365 96.4191 li
701.444 96.4195 701.535 96.4195 701.615 96.4195 cv
701.615 99.7246 li
701.535 99.7246 701.444 99.7246 701.365 99.7246 cv
.265202 .277226 .152193 0 cmyk
f
701.365 103.03 mo
701.365 99.7246 li
701.444 99.7246 701.535 99.7246 701.615 99.7246 cv
701.615 103.03 li
701.535 103.03 701.444 103.03 701.365 103.03 cv
f
701.365 132.776 mo
701.365 129.47 li
701.444 129.47 701.535 129.47 701.615 129.47 cv
701.615 132.776 li
701.535 132.776 701.444 132.776 701.365 132.776 cv
.251286 .109773 .133883 0 cmyk
f
701.365 106.335 mo
701.365 103.03 li
701.444 103.03 701.535 103.03 701.615 103.03 cv
701.615 106.335 li
701.535 106.335 701.444 106.335 701.365 106.335 cv
.265202 .277226 .152193 0 cmyk
f
701.365 109.64 mo
701.365 106.335 li
701.444 106.335 701.535 106.335 701.615 106.335 cv
701.615 109.64 li
701.535 109.64 701.444 109.64 701.365 109.64 cv
f
701.365 136.08 mo
701.365 132.776 li
701.444 132.776 701.535 132.776 701.615 132.776 cv
701.615 136.08 li
701.535 136.08 701.444 136.08 701.365 136.08 cv
.251286 .109773 .133883 0 cmyk
f
701.365 112.945 mo
701.365 109.64 li
701.444 109.64 701.535 109.64 701.615 109.64 cv
701.615 112.945 li
701.535 112.945 701.444 112.945 701.365 112.945 cv
.265202 .277226 .152193 0 cmyk
f
701.365 116.25 mo
701.365 112.945 li
701.444 112.945 701.535 112.945 701.615 112.945 cv
701.615 116.25 li
701.535 116.25 701.444 116.25 701.365 116.25 cv
f
701.365 119.555 mo
701.365 116.25 li
701.444 116.25 701.535 116.25 701.615 116.25 cv
701.615 119.555 li
701.535 119.555 701.444 119.555 701.365 119.555 cv
f
701.365 122.86 mo
701.365 119.555 li
701.444 119.555 701.535 119.555 701.615 119.555 cv
701.615 122.86 li
701.615 122.86 li
701.615 122.86 li
701.535 122.86 701.444 122.86 701.365 122.86 cv
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTY+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTY+ArialMT /Encoding getdup 78 /N putpop%ADOEndSubsetFont
/SEJDTY+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp /I 4{/.notdef}rp /N /O 2{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]SEJDTY+ArialMT nfSEJDTY+ArialMT*1 [10 0 0 -10 0 0 ]msf722.714 120.8 mo(None)sh0 329.25 mo
883.229 329.25 li
0 0 0 0 cmyk
f
0 329.75 mo
883.229 329.75 li
883.229 328.75 li
0 328.75 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SEJDTY+ArialMT*1 uf/SEJDTY+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 24.0%%AI8_CreatorVersion: 26.2.1%%For: (kyle Hamilton) ()%%Title: (implicit_explicit-goals.eps)%%CreationDate: 6/4/22 2:12 PM%%Canvassize: 16383%AI5_FileFormat 14.0%AI24_DataStream%.((`,!*BX<"J5;ih%(lp6q!IS!+;D7X,`WO*s7BE#QVa&]DSo3PY-W<YlFb(!!E?'!.Zp;0+dsjDg[W=pNk)VC^-A92''<C>CNhl%p34]`p^Q`4[4B-G(\Z!-H+rCNp"?]FcfS8h5F\f_QQ*7qS%`8,ZY@#M2=.(Ah";UOSnU0%IC&tj^1DM+]lqXhcQ=`hT&1KI!Pl/$%R\jlo7go**!AVc_hj.NRD-;$H]6;`-Gm;%GRV%MRfgh=0#h"RM7_H2=J$YFlJ6=CGcekfMQsXlf2-U3'm+/A@SmT*Y"2&arcRkRO%`[i$ofeD*]?^OK9XEadK@=+;K_(5u<hGXGGp()rWHoS4#K/U.Ga/B!PAQ2Jl4TYY&9Z+,=5m=u(d+`^upT+B!Y1H\"Xk*X^*$Si;%?r#ss<]Q!bOT`nm7._'6aK`*f\Gb8875K).F6ic1G[5@OI_?SL(m^unnP58>%!oUS>D?q)IKRf9*5CdkIjld;hYRi,fOY?j0P]HW%)"uM^!H1ZXk*COPitdElE6O&J=7c]ID`<+_[sNU4)\rVH?L7QsD=ifjmTn/G!#E4On;7c:ka<Z?@;ZN$]9nuaAcu]Lm<=Q(CRZue%>JZ10b\FBJbm5G<BpKr3Sd3((9G)\i<o`sT]54Wg]=pLL>\bjgm.9,u&M>'8!r/);nIrsHb.iK$(;)CBhmHT`^FoV+\b(Ur8cN-N%-7);>KZWH4EngKa@UAs)g=5^6[k2iQA!RLKB<ES)>;O9*/+n84Q.EV)/gYs2#_?K+^KsV.UMn9BD8RktL&pe\,$p#m/V(NE0\@Un%s7'!?j\Y<P"Pn.6?Ap:m+SYl6>];h490kL`#nu+%=k9$Q=l%%MMIZVA[d+OLG7>9d:k[#ga)ASrH`$0@VHm^p[mE&tj4XpM"nbO#%[(q'!QJfI4Gd_#][fnCoL'[opa`$Rp[d;SS^oX4-X^Nc3(Y!Lg[p4JeqTt-&i!T>(5P?%V@?u6JGX6p?5lKDTbn9SS5uIBY;0oBF%f6b!`q#/h[&'F-CnBJ?R$CNOGEj6lSaVl%.X&UoY^(iD,]mL\D2da>dAe.U6@"opUX5-GLDG8gSau-A<DS^?!'I:9*<P('QY#.TR%BD@5KR=c'L]$3$`in&7pnBBir'R5i#,+.fc]%m1R!T7P`[oM&Bci&/EZh_=Jei]k'TEc$Y!!+ekr5M.q1]<Bj/f4Snqg(Ln(m="\%h)%dn^L*9Y34:mK?FIW+ci&=JgKi^(T"0"h5U/O(2W&\[V6X[M)m`eZFp%Ajl]nm?=J"W.k'fP&)kb)"HfiJZ*7"c;@Q+9\L?n^=%$5*i\Fp"[Zfmn>3!:JGrbI:^W"^ZXn<t*,QDI'$1WnS;@K`0ab(0ob+bBR=!*7"a1"HM(kCG6W(!4<3<TW6`b!`3I>A6'HAd,-a?%8NC"5ZY]e8/<55gq"ES=)nR)Vbc8kog3&XeGrk5NC[ULo"ZdK)k%Q@fK5.Xl<aR_"%CB\`kd%E#SG?9TWZ'3-eRnJ&duj_?Um![-%73#Q>*47RFO$3R%e2T/9!#k^)&;rGe%:nbmW\TX:'Yr.kiE11-?LJ4.2@$b&803qED_;&\#m`9fh?<ljFMWKX$S2@n"[E^ibpE1H%$V\s;ginnAUA.COirVH&ALW)6*'Nb>r4&D`j]Ih@jC\2c+$VCQ,QFAe^$kuVk4nI`,N*K6ceo>D/HkOdeUW5SUf4QEmitbIYm]Vq%7M/il+9Q#;0ApHWE<,arY#1D!&3kcb9=qHi^a7TEH8_hm%G*dqqK9pL.sANEdf%=+bdh<;`RM'W`bthoA%Ue\:'EAA"_2#DgBGBj%So<9#$3J"el_X"FD8C02]BW[sGE'U[QQpEZ:-?jqGb.3QQsHak62fZLgNmd"JBo1Di4F.m1E34Sp^J@PZ[.)6.mf=/]X8]f#o[tO%KHL;ZiKd]#">@ui<=jc#h0K<.)hI;q!8$huH:<FP27l]'2S\;[?(:/:%)Zg77o`U:DPK'.9SRI'XuZ'S;2LqqSlrB"4t:MuA"%R,%*dYX1PMZC^%#3RGgcKsdYV`sW^g,?q$^,*<`,5s+\MYe(I1s,pGI@OsZ3t-NL:t&)K.mbkXdX%.BlGu2g#20"]4)SjCR56@1U*3o%X5DZ[CD^a>D]HP%bOA/Z_3+)9fWEQXH^;KDG!R4^_"Q1WJDOH='"DK'";5Yb'Mo)S0H#&Y/X_%K=X.UmZ^M>$=[X%4a`HjX5hR[6%YSk)hDEOuM/kiFe^oc_TZO;-_]JU(]kITd#5S1Bk2nip+-ktBO2O+WZ<@TPXZ7*5nACn!/Z+GJLf61<fgN(PXrR,)tElB[CIY$6Y%f3#M2Plc29DueN*ZWsgQN7k@,I_kEB6$@mTi7i9d)mj%CL?&'B?Z1><ZT!p')@YD3\=Va44j1+bJmi^_F5rR:(R+qS]AsjDmC,QS%_:O*H33KZ*GNPo<n<IE"T"QdY4kF;=r!#u]iL*u0kq-MZZ+U0@'R[TsH^6lm<kG]ijjlA8a'`j,!'ReVf3?!I\CiU[-+gM[Kn1u4%X^Q,7dbt)DEK(.E1OQZ<)hc=P>ed`WhX]D&hm\?R0!Ke50\9;,[p#m<cLX0Ei$Q>q%);6=DK!^@5lkp%RakS!gi>^4"[h4V!FJn:%h\u!tCFtkVh)L-pDbC7B10gTI%GPh"_CcNRI2BNsg_pBWVVmGB12O`">bcl4hZPjKG/#-O*7$L_^?'PsRoT3+=-q-Sh.Eg,[rko5%Rc6rJ/K]>KF^#qj?a_1d=ct((2=/"E;718i^:#Bbf@H^(,^Ea$'+MJ_^Z`^VU1$Xi[G+g3%(e)B7Bp)hd[+X(G2#W8OX7oNotL)G%)M[D,[U*dtYk4k4HI5,b',=)GU1.96VRVdtBsMDDP2-PaP3m],43=e,kulFK92R89BSn<3Y%1Y'@W,Hb'hcr4-/,fo?[WcWU+(Pr%or';<dW8akd^,aja"MbrrC['P7Dl??__PKO<_V&jMkrp8Z?nGS8Q0J1(2[:KY:Uj./M-]7QDH6_)3uNcQ=<sNh<%/SYG;uJkf(u"%nVc3MMC\MA?FCmi>Q7,k'[)doIp%Y?>G@s,gCjIZ)YOpu4^+05pF,o-mn7$aDHk5*-.gLj<&DQIrjHC[06[&UCaekZ79NReh<$l`%CA:5YZD:"(BSr\N9f6212D!<4/A&#paY/+Jr$"e.@S:n!(O_-pV&>S.)4"\[Q="Gk+&29`h3VFW=)naCmmSn4U_cJ6Nh5lTksN16%;%::MP2;D"BSpT8P+M;]li$\!ZBHP*L1Rj%remm;7@*is=dl;R]d^Br<5\.UE",rj%Fn;9CV,=9pqtWMb:g$Z02)#BD;2L9M6c27%P,*"nZW6hT[O<VK>MG$bjD.DchF-,,D:,d<`=bmFO059-G+4>S^>$l;ociY6kf'tNrS!S$8pYJ';meGN<&@$CAB>H9]nq'Blo'on%-qX9C?+[4,9sd;eFX>]oWo4c+9b#Y"UYWqQ@;1TFlHugm`KK:tld9V9[Lt/d1f[2u6r>Zi_m4-snsA/JQ>PBZT(IDI__Nc92!*O_%OsJ_m&(`]j>I6dkoTsEao(@ptHXCrc)Nqg&gG]"GgR9N4=#)="Zu&OO[OetPh,]iUgY.sC'5c.$CsfKJA%/-U+8I=N@9K=A>Oo0r%eWhCOmoPYt=ct((e??XA9TbB`7)cAu`H!7t[+j*WUT']^D<o)W1I[Fe@EF\IAC7h#q:_;$g23Zn8Mi7m<9uM,U8Ae,Z:%?M/Q%RP%hu+?_Z:)`PojYCaj\#OCQXRFf+^\H:>fi7AePH]J^QL/$[V<7[.nTT&oO>nhOI*]R]i7@bQY>,jjVj:mM5G%BRUrOSA[cfF>fdUq%gMU4ad]9&p]D'$hZ.hgTO)%soU`0*XGON.F_bQBNk/VIYIn=t7HSm@f)QFrPIZYmId\A<qU*\O%U:@X@W.nXF2U:'CF-bqRg2/rH%3Js,6=`T\dU=a<F%(Z,'oA7*]gUaM(gMZo'gJ"s.g9tim;cVT'1tu&29iG%l[G1[^e[@>0do=l+29g"p9i^R=dqmdID;2L9gMn4R%E?*#=CtiqL7o^SMEAYpXCYNjq[f8@+gU@(<1u%a(EGXD0gK%>S=&i9!^Y;F\<W=.2<Gbshr*NGuo7,4Gc2Yi31qTl,a74XZ*QS1S%Eub3%a)PqMs8Q0Ns8P%&s8O1]s8VPrs8R#l[cQ:$gQqGK)ooDKr;X4e]PUZ6F&c4?c:q5;3?LakjnsU.jh,G)PB0_]:!UAq1ej2*%EAUD8s#832*CnCTFW<D#c#Mfl*6435s2VD!g@g$A:%Nk[a74Z)s8QG+3To0S3Tkc03Tp<ic8k>Oqn3)&"Ti"fT]Ed#1u-hk]5B,&%ALJsT(GoURQ!(Fs%.qYhS7bfdQf%[`j49"!'`1FiVDl%EHfsMB"XP84c]9]gSu>3MGD<p5cY1BR%'DNBbiNpl!+&bQ\mCNA-*mSr%Dca+!4%<4\(ILLa7ka(2m"2MO]g+E$.JRC+]k@cL82:=-(Db7<q5$#"hCE9KKn@Z1DO=%f@CpsjW*Z^nQJYo<<L"!1hGcpe]7'j$%0sd=G'K"kg^2*7T^Rk=VeLmd.\:=tB\;akIS2%XKn]#J4A%MbP=++MbMc#2BJp,lsB\56pL[$h$GrQ>P/nhm"i6P](.^=SK>ME1D%.S%hc^^CBlb:a4@Drd^er!\/OOe*0&ib+!P+F[Snn*S-elihA]$GK(=\1Oc;)*QRXPWZjm>Mh=IHT_E961<k&+u_S4L7OeU(RUt2%QD+o1d0t;&L>aP(dYDEnamnBmEAU$=,fd-9dL=6Y$Q>@07d[dH$Q:osL@>$<]J+P1;3;U#gB<KPk1V!/YFs]@RU+:=?e2<UEQ)lK%<V]re>q[2HFR91Q`%G;iJqe]sF";%:E@Lt(*62thi84#4F#*mN%6tXbm!=\)e[FAd>]XfYS^gp8g3&nK5L)Us.1e^=$:I[=Eu[V)%%/]gBqt7ahY1kuJ"l:L.S.p43+_V.K;j\!*jP$,I?1gX''`L]<dYjL6\F`>$N<>'U]2_=s*S;HXL?s6&4Y".0-3W*;7i8q\%5H(M%%5G@P87h#ig462(0@5G_`A&_Ii]R!R;n*ZCJl3pZ91>jq26C;+EL)0=E!(il[*2pDLJ$CBH(V7*)&:[Tc-;1gcu^3O[Sa\"[4\^@%:m#Tk-r_Rj@aE96?8%EQhqWj@8i3d!h$/-qg/.Mu&,IL0P>:HHP7JkoD2<j:5k@l+K7rO-)$9_chFk?VKB)">e,tj<X^\"=)8;tO%Q]*2K2Y_EaCD+F%R[d`BiY-pV1Iqq(R(DYf#rN;eM-uPl$c6298Aoj?q.*lk<f79.94;+MS!oIN*FWb]W0VB"bYoWmm6JS6QBt5&%j@p/AQrlB[p&YmPKdi0`g>-@f%D,ASO2L,aOr=lV"i=Lf;:Y0?7&V$CZ;<uN-R:*&*&qT)JZ?>!%Lk%>\Adls#*UfNnZ>_1b(LVT%JM;6dAgU26)0jUfk]U?X;GbP4V9jTMb!NQL`^b]kr8]<2&;>%&X6I06YRQ4T\&m"B$n6U(g7I8L7[=t(BrJVt<jh:<`,uK^jDJpV%7DfX&P;aq-oi6,RiY-o+ZR/L+a`c1ANFAq]2*WNG[^SU+2`\QTM>:L,i1B5dk^dF63@/5^OEVYVL37?C4HQI1G5DRg/P:Kh,#OWA%U&Q;jd=;>;fBRHIET+4o+A)q29.&WE(5OoP;NFK0oHQYoh0*IC-ajO".-;CC`7(Ip.OVAFK*u7<<p%&4:lUduT]@>49rfO\M\?7F%)]G3s83o&>bUT`7Oh+S#'npkd\_9G<:=mW:9`\aMA91t"CW@nXHVn*UC$,ma+?tXjW7p`2*!$Rbb1J+\L[:cFJPmGO4&'$r?/hEA%K`q.0c6M*i<)2d<Q*[4SR705$7a$^kMhpF\I_99X$H0Tug,28*8eG:V8n2#/G^H=q<sM'MT$HOkYDatB#SM9m++r)J3:2?dhJJV0%)+,ts8Hs#pGEtg"d9UZ:^ohY\V1&iZ7/E03ieU$(dqWJSW(+6Z?oBG']]k6+9L(,W+Ic<$;o1"jdkG=DW`XO3`&o`$qbhllB%(/d%_Vid:b"-1YME>uciS.cgTlT/J5S[S$J_btM$;*`KR8p8[=g:L0D=Eakiorl_.giJ6K9mCeO4$TM_r>#QbQB1s0`;WO3pGITc6s"V%J?Z[]i\2q?ielNMd7/)(QM>6<+W^\R2DJQSH@mF!dJ8dI,P2iajSt6/4>>fH*+XmM*k;nZYP/A2DRY-4e9_A,=ga;`HQ-k92.n-0%r76gH]rW)5&Uis=1>asR,iAi#7(5:f'@GtHj%Mk5'sp_(+8LUrDEW!]XpefNfP@\)=&=RcU$B'B!9U=TfFq/VW^Wj^;SV,Pl@E.W%dDU*+d^m]?Gr*-3I5j&l_`drX=g<8E.@0f/aMeSH?qW]V""PHe`'Li=4uJgX*g52:,7S7'YEe+Q_`hOr*jB3$\r(%$fO2iE'c9(f%o1kp/8rGJ8FP?hkO^Wf1Vuo*oV\$"H=WA+"5YfNHGCGL?D&H#YphX?'mm$/3?F!Xl1toTG1s1;n*,>DK-4&cL\KuV:!hu*`k,jYZ%!4E_MDWNX_"M4PGFdqUGPV!D=;6r5+Q\`W>GT<dpVc%S#*/VcXM'N]-`2XO,eh)teah"RVC6^KXnm\D\MX6.VM@G8'<CfEmWL&Ir%U^3_7VT9T2UG/<8#fUOl*2ma2HmfJId]Cp>"F'-fCI&T2PEg.pUgX3HTWhd/!0^f'VR`r3R3J##_t8Odc;])j</D>VXX19Wnk-$C%$q>7[]FAQT72\\`q5Qr;Xu),)0,Qb8[d]J-7K]aN--Da_N2T*AU.FDHeY/#a@gY(G!bmH5C+2KNf*qh!&.K-5&HS.>mkirfFCLI1%YWUk)'/I5Y`tHhE4;"e3H,tOYnSeton0CKle`jLP@;\,Y\LfnN(Q.P6WE[?@SK\dY_2W`c6,q>2MqUF(j*>Cq382Tc=\k*H7RI_W%)?G"L2),s4BfJUDOR[8qPYkBSb_Wd#a:&?1@Mf8ppgCZbodU6E<0mm7%2WIidsX@q;9B$PfE*#1ja9KO$RuAW=?OHI=u<sZYga>-%TVAjt6C!*i!j.t/d%UT"'f4"S`^geHbulL\`T37EiR'!?<em,cS#8hW-E3.O:*>At2mMf\Wt!0W9l%a67r&Wo%W,pWJ6A*uL"M'Q%9Nh-IJF"YiU/s006ET.SZ)kBG6a!R1WN_7,XI!\4muMd(4K<jak#8n:CXmN!R&$^gk4BsjeN.;'+F>*VR!TZ8?R+2/Kp>mo$4F?c%Q(_(q9$:g!$.g=aP/AYE#rpUg'%<]CaLZ'@#R<_8,,e[d7V"!$&M_WdI<HQt0r`HUihAG1X;,d,Qc\7bU4n>,$6g4\'lu6oKM-;O%e5Cr#=d`U'8)dLZO%LqBH,'N^j<5-Ir%[4!m5S3;/dDTgJfOJm>oi<#%39M;.6+nUKn/(c*ICG=8Ru4CE.bUHk`fIDA+:s]'309Y%js.lh9Nkst:!VknVO)*)k()LoQQ!nY.`56!PVe*b-qBa8UI86;RoIV>Mj4$97$91%$/'0t.q+TNGZ'WXP"?U&7*HQL*tN&_J8%)C%<kTItWBr>&M?Q`80Le]/Cqu.bWTlkkO<[]:'f&Rl$f;H]6KnsJJq=[H]TOQtO:OnGWAbZ;)rHSY@0sg[HqD.BI7m1QIV:%-J!C;[%07VQk57fM*:OZW:T6q!/0;[0VO4j@$h>uV!$I_$hi_\]"X.@d(3JVp8]9OF1HlsG'BR9,*%&20m)'^AInTS)_[),5$^pu&0Fi=WQ%&ON*S:]uBV;B-T'*XXPSAI4d?IlB8nMGdA=Ol.]TQH-lC+5\gRA(_KEPgIDJ$4i*Z)^.V9YM2T/-M_,:@Jhk^WV:BGXN$'A4rGS$%3is8!,`3H1/&!],1_%Sm)%DbfSK3>+"3CYb8B.)MfY;/Q4pP(k&F@t[!Oju!&==>rKr3;p77pB"(>VH+#.O>lR/sLt#Hh-l1*\GY%(E2b]=0'@[:`Q'A0"m$l,ncf"C;(Da-s3?+\M6a>HKUI.SIHUY>PJnd/>PZJZkYGJ#Qf`ViR-4O+dOi7d;9KB#q%@\]Ln,^$Rt%t%I@Pu(dO'gs:.5dC#"'^sSdHfJDgFq_0'S?4Go@n][)I`4\Yg+Xn<$"mF7h9oP+uS#G<#Xh1e)OSONc=3i#q1`d;9JPloq?tR+];+%NNY\r<_FHH"?\_5c4fC!qJ7X:E5&-'PG@.tHmhj:+Fu3+^_kaZ_^N@")8=KJ)[+(qAdDi5)H`2`aT,H\5R(@\aqub*EFS,i":@d1%!hIdo3!No,TP'#*cuI/;L<t'_L0<h2GFXq5TGuhj=%AInWK)'28tG#f5@">2a`Od_Csm`<4RGmrk0\J<4a+-3l.tT#o/_hbAE^T6%;KHg52nA0>c!JL!YtO4Z&0Ngb!_3Bb$BrIg.R<?SV]_#49S%bD9&\,u[D:1VZTqH[bebpLM1pM=K,8!\PZNC7MaQG<faJ3Ae6ir!%W^eCXgVCc=&8!$:9;l-V9,Q#&MJu)t8d#?/!(7)S-Op/$)ds"(s%it?Me49&#!<O8bHZ@)Cj/nm]Pe>fAa+C?Ac+4f,8Qdl`$1n+%:oHS\_AG>hK5R`S*.!.0$*sZ7'S6S(ickn\I`<;)\;tAYLsa\eiUYCs,e?>F\J';o@E,\mCa^[T+Kh@eKCG%=#9Q`8*RIEdAFOOK%kMRUE*!=,F;[t@<!HHJ'ZV:B$LR[7T<G+)l4JI.S&1N>N(^R*LO@a0'T]T:b!Q?^0N](Y"\B24J3EiC:j!`\*j)0($EL>5JiX.Na%`I0im(:Oi@/++*q;B-PuS[`Qq5u]1k?-FR30MiF&+VG<*@A`VS@$K4#.\hR4-+o%g;fs^I6YhVg8"_dUmR275:."!J>bO'[S;JG^%EiYpsEaG(Y*"4$KE#ZuGEob:AiO\Do[2`G/$T0n9fUCUA84p$cFcoB0(*dI;(dr6MeNR'E$(lQ9]5o"<N,oOI#'("Slf/3%'8$sp%6jkUfF?Ju4>SPuk@2#.r*'nNWhDfK1->jq1Nf0#?a7=V/e#WoYf0C2XS:T][Y%)Dj2kYgMCl&ra7cOJTcA7e%E?'a#E!$:aV_B%s%N^hGB\,f3a(iUJ8h3J>eWAVk=iFq>_!K([.buu6@A+TnT)_g3oACC.C(pA)O0hR[Q:aI0Xmc``ng!kq"[1><.(*D&S)0"A]!@Un/%oh)8Ss2tU<P1>D/qI<*eG2&_MWiQ7BPEC.n1_BL-PV-Wd_--,Z@TOP;:`#L]U%c-KZ2mZeP.!"W91J8lrQ`lNm'bXPK2l'[pn/(S%9\/t&E>ONA*&+$c/,W8n@T\\-7;.jEafo*(!eF?KlS=Ki9)E:;Y^(uOA-Q,ED$CCcOMW<4ADq:Eda`S7-OS:<?m2gsohmX!LZl/I%"%!(1VM9oMK6g4fFOECul'IN.-RCp@"37B!*61&X"'EQ_>j?@f\Csj=\,kE_ni2Za$j[jIl[h^*G_HbM2djFO!<]pX4(g9%AT4_0%Po-/+#$])E;AX#aJ,u5o>4I>4@J-$q=ac5RTO,,+e?<0/NcKBH!f[8>73OPuM-$KhgY"Cpb$fhb=%"bB6Yl"_*H2RJNR=M8)ur:<%e931!+Gjd_XI)dPPN+V=5s&.!,=JS>[:MFPj#EOeq,Xa)5rPgM*63&f"ikUi,O6\J!QT2eK&a?EqAgp=#(e*[NdD4S9(Xjr3,X9)%30+!/&oBL0-BMaOEKi\1==UEfHT5saQ_:$?&s;36/nUK`P&sS330*<H*66#P'T%E$NoTC+a)Sf@W?n.r3,ZNd`JA*7%4hdF)]TP3%\#p>`2djE$)Da+TZ!(j?%QJ$'fXrN"L;ZFc%3-J?*2de($mG6=Ul`0/>DGf'JEoGG&uS>R*4*Y**7o$8_<[OomjaWgMY]V)5sp`c%K!>:-mF!JO$jW.UD[aZUZn$W6$395@kDa3NNbb%AJGXV!oui2!!AI"di#_i!o)O9t3,Qq+CY)mr3KE9g%+k%8RV+7Aro2[mDk!Wa%gTG8Ep!knT8!>L9.=NqoS\\Z-dp=;8R]bNJE4lS[?jU)A%):X6!+/ILF6orAqQ"=6L;ETLqH3=hbIb)"B%cT(__l)O"(*(Xpe9:Z%X6%@&YE!PsL$Jd4*2DKfossA=kGhajHA9sgm.LE_0eKk<p?/G[0mnJR\ePVBd;E4(!Tq^.[fX'VI`"*[*dD6UI_@B6eZG/H^G)"W%5M6HG]<"ddK5p=*hjF'D(fp)ViUf+;Xi$/W&l8G.^(;b&+5nY5i5!g9`86;X<'HP=hop`^RR"+o*i"PNTkeel-X(a=-(H%=<Mof'%9rn:B$jiaT]\'$(gJ'/F5l866,jZpNGhM/pOiT??jfBuOlK,'L<*0q8BQ.;'L_*>-Cp76mA[ZoDjrd9,oY?Ss>S@Q+R2&o=4U!t3%m"=:g'_eUN61>9#lSacX21125(ELn?S]*mZF>dDUTcH,1[pb!@\!W!V"O/j+f.%h2.B-q@&"RC]72TM@Pq9T&crk#S#nU*Y$Y-m>%M5`uE-fjJsJ8r'uL8?5F1HKZngErCg"&=*;eIA/*n11@P7riQ?R!q$!p=SXX%*%QRKX1GGitV[@dh2*YQcZ-.#mi:dmgsoc4'hNr%;Zd^)/8^Tn>99&_+!aJBO%TkAf'(!9CBdrH*7=&5K_E0>GHUH.-d8Z!3')SXFK^H8h'%khFi27F=')EcSWUq]5>He/%jiK,\!^n8%(k%Jc$R_;MPWg6lR:JWF2'>U9`TjO6]l88Z3F"jgH63hR&8tg)53j;$aheo2P:Tj]U'i?M/)_B3)ZqhW?[:#`K0a2k6c*WgQqUs"%0KpUmiFkdKR"<[c:A/.!pdeDY8KKNHP8B5;[fok-'bS=ISIh4@4[69Kk%!MjF%,&&ThG0<4f;T:N=rBPF!MB"B[Z;!VYsa*9`HY1%FYr-M)URCYXB3M30KObA$=D0m:[`WS'TI?`]k(#d.hCW]TL;D#U+uap[jBNq6D4ueDZf;f_NC-ZqF*N[aFtp\N]CCDCo(#tjQV5^%*a82o#<>WfndN&?oQei?,2^7`N<K_/DA!@154ullSE/T=F6W<Zg>U!a'_1h.GMkV\DUjNP6&l420<\%.kqQj(rD=\0&C=5R71p!2%gF/&Ma&rlpK0u"_M,B4K8.9Ge8i3j`l]l_D4"GBn3)*!g]Xjt&i8rp3Fha?cBX`OCd_8"bdUXr\d(tHtkY+`I7#@g3i1p`!Os1DC%aR3AM9UV;<egmTr_f!e@@f(qTMZ+2g'FkK*+Rc`D`Z$t7M0TRNA6?b=E5@fJ)GdPAM5NjX6]o\-:#bE&):,`7/.s_7T&j5q6nPnh%JY(N>-rEG%PC_K'O::2i\"[hr#\/!]j\\D@OpaRJP]'1-iWD2cL1oN=`Hl"jK!;!=cbfh[lnc/]]>1XOh=a.ol.$cn+b<4e6qSVa%H5#?+E$V2$PeN56Flb<1:pg<1NB@>i8g#bnAXmquVB'13/!5,ujY,*_D+]hk._8\1JNWH;&t]SiHkH\F[`_/9cE^<=HT3-TL`_?R%nf":?!Vo&M(#;eKk3Z'VK!:tg+.@`XSsb<$M5[0?ble/('9LfhaMFdcNR:L!Sn+!,X=-3YQuJ!0<C?Sc4[IqA-RNm'$d#0+@_8A^%5Tj;OKa:J9GL2&oPSQ^eBf*Do'U":F5`0f8hkr(Tior$!rM?0CVl,X00B,5/6,JMrm?;cM#V-6hW(<m@LaC-Y?N_"Ap,";0]i(OH%g01sf^!p_;6#Fh.6VGQ"nq2epTD>lWmaR@:g_n!9/nG##*9X(*c6584c6>>5Y1j.5"2U*hR0BS@U(j1.VLR&5XaI!'i:):!1&5'k%&kg`*LrrXqN">\LCE@W*Ldb)K>eM#b*CR_dl^cZl@).j4p@M5mh%g[EN55oGQ-\a"b+4H#Ad-nFaEXR0C10dB8$'Kfn"L\>RSfC#%ZpH27$%)Rk0HXHKTsNr]BT/q=T\D_-MfKkBH:YCc.&=hTX_GK9NWi>Z\!b=9S`-;Rp.Am]%#BfSHPO9O@OfjA@T6Ck1l;Z"1Ygc&%1IjPjf3@/R#h5T=S>gLca%@7XD%(#YkuoeBT`NESTTd>'QH=p2V6QdHF;p"b)&+(7KG$j_VM;CM\7!>8p2te16BEEa<NR%Y]iI5W%P?ifW?.U)bB#P:V^Z,"^W;):89(C/VL#Rs9_Sd$1`e`4h.1qVZ0&k^\MV0.*Jh%s]rlg/<hKZqHY8N(q1_gF3R%4Q(^iR]HcDBV3%`W42u!LDiR$jLu'O5o2e[+"!-"-AS%;,RW/<V-B+n4k!*],Zq,)3l5M4DmssHVVfK8U,/-d#cJOVu[Qm:*d)A",ic^25Y<+"@p=_%/Gdo9H#(ED"7l7TA8'%U@UbPJ`^EG#.(hqrJY1*[<7-J7]P>uM6m?ok<_X,7&rCe#OD'Ccm5-#l#&[LB"1P<UdNYB.RgOUdM(Y&]%rc=`i^6h>&:M.?JRJeVlJX:kWC2b2B6KPp'dYIH<I4GY+B:Kk&Ep5oQheiB[2aWXVkVOJ"Rc&lDs2&\NjBH5^OCf:-Y?<D4bJhmI%^..'gHGn6KA%./W!AJ,\I&4+m,+dVPgb4?_Zd5+-JU,"&q3CCt^QQ,uWM`ERS+<n:F*[q$2/j\=H3d.Tp7<3E=$HsfeER2BEps7i%L00b"/t13U.8>K@A1UDRX&TgVKTYl9[/>""5pD6k,)AW\X:=7,MjsqEJ:4NAJM;gPKF.[#4#iL%#nL/]N#;e;H#Kd!2(;B8:`CdY%jHN%8gCqu!lejmM=*l-2-=14'^"!MlID!YtZ+Pa4A-#W:b>o1-,0IW##,TuEU`1)';)0Pu)A3KoJGq?p1LS45TQH)Bn`[)_HREB@%P]tcI'AHHT2$(NhI;taQG3V=^8kXj)m'^*JD7,7ERP4r:1$GeQBg`kb#&[L<'9PRK31\^)*Y'jWiPeH)B^e;&1Ag/gqj#hfT1+qr%O[q/AMStCh'.W`>W8*_HkY:D1OUHS/F;g977tr5&dth6]1g%)+bKTN/1ITkDI*9`CcRGScpm.>BgMY)i_G;?;`@D%bMNiDolr.<K%5"V`Ocq(/),Rt4m,5:>mpZZhT+tUer#b0>PDI61U?VbL9(F:uYHAiK+@MS'_m9B$;OKf-@el;]ICM*qFKIV9d'/q0p73dc^XHlK&%>UD<o.::F&dgj)/M0KPa0sje,5P#Qp,<&iJW`GH!!j_sqUm,eV@"2'KBtIOu9/h5TY<H>Dq$tV54N=k1eV:o8Y.Mqppd%G"l`T!M%TjV@/Vg?ntBDG^P-Q.^l37'p,_3I\%CK_Q[lD"cJ9o0XUWZs;ZR-f;2CIerBh>VRU-@G2$TYKKTBL'b9dd#XH%iDRI@pLA6XVm-%%oe.T1gL3SU5LjA28>Y3\rDPpYXdY>BSiT1p?AQUZ,9!s(jPX#NaeN7BSM.WAIrW%fQfsTg1annsF`V"Vg>Sm,WC1'+(/<(N=2U\g%Y-t:'WskEpnrP%=J)nr:1H@\VL\)b?,V'4'h3Y1tQ`Jp9cT%,+g\uop[[Mk](B.p6dA=rV1CLs0l&eW"I*9_h\F^\V(;=YMh3Ri$%J_5NB6k"lu6UWC+/0\!f=>n<#m.9ob$Ht^&e*CmLl3iaOm%D>^Fc`N:2Z(.&;Z9?bD_dFu#@B/rVq5d7ij(si5B0Ea3OMN5`9"D/%gX\mtQfTQlf@#Qi]dU.bou-RRj3ihub:&ofLD+._7>Y&@CmPs7PCEs/9f4nL'K&U:.QX9XAd6QFfcV'$9NA,RaCaoS2QiL'd6igU%W"##8YR$5A'1Wm(_#gt/#+rCV&LcrNUPFG93JY"p;CSCV,DdTkg>ForBL8uA,O(FNMPHEN<)4hb2bB:ODBk+00l8oqeXdDIN.[X<%9<]P/CmE8,;cI$>S16T`NoO"h\6;3!_1>jk"ntTF(0n>.4R7UbNf/Kf0hMY*Oe!Qf)2Kk(ZJ\#fGDZ-fBHeVIOJNU^#4p'$=@s)A%^#`,rSO$@aT5\HSW$"6*mf?-("V6@[dl+8f)$Zr0;dZ0nir;rf(b,,mM8Ug);L]6D%ULH<``i%N<NV]4)R!?FEq&@LBIj^SDY&fQ%Is%>#\-)KK%,=.HSM"UcFdegFP(JE+\DCcSp4H`!%PPTL5$\e`6mN@YX.7hF/ng"V=3qF1m`Fg^6bGD`ILHI]kR%Qpk[.qGgFVX6%U/40E(&d&"0!9ds+;0Kp8:6@jJOljj>j\u&EaM#j9[4Mg1?2'R%r$c#;7LAeWHTJd./`SHNU&DF(]"bfTBe<X(YXt$KH_6/dVXXY%MYqA(cs.BEr0u1)=Q6MeHGhS.7?c3,E10r))3?9;/[O:^r#W,e#(oD(c^BJup<cX!e#V,B)RE:iCBma+^K3h!16=J?2p*3PSB=*N%E8)euD3Y.T7X<QJ\9MRm@\+#*]N#;T@\-mp9)YZ^fQ2q\3!u8Z93bRe`1m`OUsr=,lguTpVnc3+eC2_?'_p1E$.4![BSY21ArGMs%QVUj0Q2>Sg5pff1RDh"Z*l3HD@(1-QN,g>VIH!ReC_GgelV^1[4.D(P$@M,sH\cc`I[Xo'*IIcY>!r,:7<I9."$--D9iWoZVq9?Z%Ms`K=1:[WB(qO',WE%kk\4f(LP1_L$;\Sch(hT;[l*5u(oC?cD0JJh7nQ=1q]b_t^@`9ad*_S.Yo>eJFgId+ticJmTHJR`Q*.M#=%<"tqg1a:dkc`,N5*fbk&H>UJN.Qhb@K_:=Uh>5.,ZrU$m:He-9=`j"UHC]nP@f%W/0i*s*iSE'&<YWgc:!E4E3PBPk@R4D+lU2,I%HtEKDoK"%37H"<+*a3XlaG$;5DG*-1>\j:onTO+n0N:dk`10.aUY?-J&EJ`R!<riJYG6,c\M+WBYaj4jPclV2@LRo%"I`QOD1:%G%Ck5K/Wf8h:@I,nubjk2:^8f_;:P]iMiX$r$$G29qIY,Do1)Z9U.I8rO")g6;#eJ^jW>*Y5UJo+LbbjLk(`^W5%r+k7;qgR<<V-D%%!e];ua?3drrs<Y*\uq/<+@!qY"r)mX&:ma5i-4sLo7')gdi\,P]F1+,h57Wp<;dl>Ba'c*domq?TN452TVUn3cHLo],*c2Qgm/@n%6!ZG_b3C.tH=6<BlE)gu``/^?DTQKfe]+.0E,]es_,*:QE$I)+\h-fV`)+E`"epg6:Q=!IO@Km'Ldju;@<o=Z`($KZ3OB;@hI:_4%)3d!,:)*kD^jK7)X!=1/[re@>F*_-WCh9qJl:!H8c++(jX[&bp'r8++7NBM77c#VX58I:u1$GeA#OI.<g>U#_bmllb#"hHq[0@Sj%CW"$aM!SQ]X^s84oT4*'jiX@fjf),9OJG09*XQ=*ZU(TtNeEOB#@?8(Sa%(P_J!%K7B^ha$BL$U]i44)`gef;.,q1G?dS)/#F)F@%Lnp"2dI&p<@W:l57I-Cl6BKAA\#p+oUCNO65t3&\kdGBp2UKLtPVV*gUt[kOS4F7`#1XQPJOBgcolVMfg24UB79R=dieA(lVDDU'%L:D2*7YqaU3."Ih`^]cYg25ZsD(KQuIE@<,a9ZDDE7pmpi)2FB[uicdPY-7+doo\^nN72R(LNQ0L4l>;XI]`8]T5VnX&g6]#%RsH%XM-I$<l_:.)-9d@095*iq1dd!#TE2B)PMYh.PCWr_+_Ec>ZeN"//`ni`m1B6\FSrNC=6=mp4/),/L5%)Yi0eqb^u!Ll>hUJSGq`#%!`%U]DJ,:UEbl+L=H_DV!*^W*GUBU`4?]o7:HCifSuJVb5UNJE3C1sRLLoQs^%fCcM3+6LV_7gW-1aR'S[X0>^=8qt&h==hBP-4I%S&Cms/g@.kF:K!54V<Pos6L94%@dG-IKLJ/4W.tr,S$lqU[Z<Y34hI_MDB#&-;&2V9;5G@#uT^HKs6NpGEd>uLf*F/3(c:r^.B1@%L[q5Rk(;taYoc^"J.1Mp<fjH@Pk$>Ci[.SsAJ.dWS2j[nNb3W5]g!-*D]\S6G^9Z1l_bdU-/hc;o4i8A"mh.G:Ubnndpn&iKJ1h)%$7@qAVtWQL<ptjB=&pNI%X,e>lOZOdB,1r^d-BH<&Pqle@'&6@.(p`P:d0jhKM<5NDIXhV$<fLT0U2iL1:?>)MhbI-bAAkXihD;N%(7eC>p&Ld:"1K@C&^_'F,3GEP8gS+J,m_R&Us/-1HVQ`L#W@'PTKq`]'YEq6*U1!BBHaN,SE*#`BD?]g5)YPKh(L)W[tEO&,-L`:%Rqfrf_BY(YCT6k+/Y-4b.Nr*j_]t&n^M-hO?crS5`Yj$LD*CU;R?U&52+)^U7-LuV:i"JIJWs9BiOD"K-c(Tb0uqZ+S!0&`MJ_WB%=#r43m;Q5'^^XZ.D66A0*XBJ7'dj2%?b%iK="`aGZ%j*C%C'<&P4mGaie9edoL(GI-1X=9@RU[d7B,%ko>EpP*[2)oYn7utm"!$3%7F9aZ4+n;8',3sB?qEIa(K_Osn0Te9FP$[.=tnNAnu($u'-WYe8-9b09F=^qR+50M5dGd/,7Up7D)X#?nqBV'"/`::WtQg8_m`#T%X>bQ2hEND@Tq;c'FX8m\>lpe&^=u=!jPV>U&e&M'Il4b2_rY!Gng:3HLDHFD<)c%t(P`t#brCongHog`o.UP\67`Y*ahc>CN:IaW%&U_(<?AJm7PMU/kjW`)@IsKCoA!KW#Tnrsn>ZRpi4$7gb4YTq"<YnU73a<R?^X+Mm'b[@*A/7@[V)"]Qep;g4iDtDfEAD2SZ9ie'%C=E0=Ghs(>k&Hj@0.sQZj1a+p+n2IJLh5NYp>L%n4:2[/n=hYN)s&.Q1)0NoQtLh5oF^PM:2GF(7#'T9N>HX)-Dm!rR"K/$d91,T%1m':50g>9L]58]qdr)K_&dqI29fro6N<h00)A*qu)&P>5\JD\mUPWj0_A=V5jh#A.H5M@7L_n[]KFE/bjpVM:=RD`_m%e\<&W[hu%N4>8"d&ptpp$WN/86?_H_Wa\8"'-8%<^0/,$\q0W9G2O%UE8.kn\u:J[%PoJdC;`q[*q?5.PJ)21?jUsEKLVl=hG])EsC*CHMXFm%&TRo)h8Wls7;jF;b+iiPl:$P$jVsp-gJ-+RI[\78K1=h/U^7H]T>j=)ndu:BdN^!VX\$)u2FG!pJc9QQ6BV<<&NCD!%obWkB=,`N%(pAj]!7)p+L/p!.k>h7a].Lu^=\bu)22A4M:!_`ILq#erHN[6;oYY9Pp]T$QqV$q-4F:1U^]\l!3j&!Sr(Jrj,bOp=4b$l_hRF1Q%!i4>DOqZRb$\O@1>j@5_9VID0_Dq]B-4WnYG$sskXHt>lE#e^3%N6q`2O[glGa-%DK8uk@]F=6$-qFs2#FYOV49u`>0-D&tjhABc%W1qTXd!AN]?_^^V4OPE[*(.VGI?Fp_I#3\[rW4Ud@(1,(MNo8^"m[muMTVEH7)UT!DM,hs][3pXE/2WAncqZ/iq\dk0Nrn!L`BM-%il)iRbbUkq_Z3%^$id<L?9W\=%-S;6JBFL$TChPd]X[(]lMf^OS0/'o7P5UA-ZsO#$&Q/1ngqGEE?iIL#fu8E!`KAB.Vck.A->N\%`dLMeT-dN47(?&=WX2&Ua?egRn>N(*S,j%E=IB7-^/bQCgDl63Jg8;RK!Wh2"c"74(*$DY"[e)0E-(CPGn6AEI\6k\iT`'[>@:M+%es.Jb&3?8u:8t>/[W;Z65(RiNYq4[7d+g93l#Egg_&#g="s`i\$(jQ(c,%96eHsG%-7"aT^O$:ch.CAK4s+j7h@kUgWX1b0PZaiT%P?V6/TEh;]>f8E1MR.Nbj_<a%V-_'$XT"_EaNhrteUjk!NCDsX(;6Gn%3O-aDNm(IhXJ(e,U7Fb'`%.[9)-;[o3cgSY7qg:opd^L%L_(!R.@VKdeY8M+*#2C\ptZ^JS/RE$]QbX_>50!s@?@5d\#ZnL`QX-#WFI]eI((P(m`QW+b,?"/\JhK"Tdgg.^M0g`@TpO/G^:Hb%Z7\U%="WAoW09grml"6Y"hb.4Vk[W:WS5ogW*ZY7SF!]W5qgU;D\:QeMmKD)Knuf]aB@+/#iso.>ii6uW#`79P\-i#,guG*G->9p%@]PT$KI1(@A$W38L.UdY&6'*1mD,E&L+G1>W$FX&K`k)6cpT\.MWUW<;0#O4(7bO^A3)<->'(*GB>BCZ?$V25A+a_<aBUGVnbFSc%6O4A;S>TMu2b?gW>m.\fE&`4haD5$/o#Jj`[.7bl`-.HI,Wpe?9)/!c8:LkTqCqX-0t:(%!qWK@&59"bgQp!C?_d,4[\`QN<pLA1%cf>uJC9'j'//Sf-bu9S4N@neLd%h\nbu?h.(O:uGNa^?]\<Ufni&34<K&^<"!HN0-`9S9UNHN0cU]2[g*jFB)o0nl`)CQ634]<oj%9W3td;!c?NS]OP=+mad:&#pf(2&Zr#/$/i->:L3Q8%aP0_^`k4IV(tD3B=K\X_:O_8T.GBhpD!Rnd0&JRK7j[Wotf5jZii2"R#Gi%i:b&9Xu'b</K.^-4$oK=7iNW\E\r:-cdujl;4=6MNEZQ)BafK%+"MiLS<l1M7)[h.1,%LE$<A9YWslc$'+kaA,GcG:F0NCM[F6Wd%W1l@])8dPH52qPALoiH1)T#!,P<1KpqW$,OlIS`:#6/DqG0=B]n;7^,+XUZR78N<87kdR;?GGuo,etO3I:FC<.1*24:)I6c'np*r%>5:,TLud'9?:+k+?PtU3a@fB#6ku9lLaQEdbUbVc&kJs)PCT[sZO^((b98%kA`uf_O$ni&2hnE#G8hp75RrNN)]$NNcn2@\83B&\%ELBq=;#?oiZJ-Lh:;WnOc2\(/F`D__Rd)91b&"l/R4sX)(F")8gjt\mE/t-'E2Jq9_0)5_qmn,q8-:CVC@W-"\!Tc3$(iV[0$%`J%aMHKb=XIk'g$62/14s/R0MY;*>3K-1F[IgR@TZsG8Vfg%GSmo.@!q!(H&g%hFP$sK(gn=T%lZ1GRn;I,3Mm7H+Y9fq$CqC^Qo$H[%TYN*GitG3RU1T["lHC_p\2G`aa_krIZ+S.=&Gf?<jP;.l]H%Ja@'3,LN"je6V/"T2Lk&[]F4Rbq/g)@ZD2H*J\Hi)r);asl4DRa;%5XNWf?jF:QA:WTq_SHt@UB&ifA70U#@J#JlkVg.WX=/H0E=n"ejF<)*@k8CR7:OXnr*su/(&-o+0gm34:eL&B"_WkFD%s5(CL4Fm%56o?T_KY;\&Xd?JUnF[.<Q\lN=hbaA8/m,Kj7KV.a35.Ad(nR,;(d]i?t0+*1'lMUa)SLY3,gsZgYBWW!BKFGI?ffg7&8=bRFJ#c%eq)SfJA^joNYC.ZKGB3]'*O8780eNj%US##1Lq+Y#D6A=&Y=sr<0)_L$/:@BW&g;7K>aWah):b6XkRTcnFg<J$>m!sHXJ2Si(&,k%A5'\o6_@'aDSV7Z<Y<MSD7?2qOa+/E@9mrS[bF[^+V8rtGTnBq2,_dqBgJ^?,Ore_=1u+S+L:i$KZS`O=jrHD3\HSsis>UMc_8,.%(,;7+0hX=5G?_P!>IW:=(i=m</g+'='1im6:)RP^FBbc-WnBhAABiFM+tHl=&_9k0,E<3@<O3/RoTElg,6^NlX_BpTjooK3]u\oB%3\==Jkln(9V'FR_03'IV4_dMYT8rZXNPg(`ki(LkTXG#(GoD7"!=N?^QGdtrL5lVE7h6IVjW31.D;A6c@4H$[li['c-i"lX<L)u1%5.V#8[l)ain:a7;HAUFM"S52T/8!nmf#Q$[4?/Bl-rGr;N.*/U&nN#c$qR_#*(dU[:6"m=#!/fGoZ>9:6S!n31t)o^>`a:J+bG_Q%$Ei,u!_pM]"Ie<CFkpn`oQ\>$6Y7<Uhe`N8VVo%F<N&5s[rkm[2%Wu2LMfI)@%md'6"=3Z!n1Mc8F9dK>5'0l@a[%YQj9u[U%](U%81_;W;X1lR,su!R^%-QO.X#i''WRIkTp0GYf5;h#+L02$@QDf;C+GC(8FhYL/c;\<EG\Pcc6efXRkmH3dH/TgS#6qSCK]1k\L_Mr%ItL!*?>I#m3/pI7GM?:4L!FS2/ESPhd_r>K4<t"sm=SS3J]`ieE.H;uk9,qh5aj6dYq).eQlt33P*&"Y=E+^d;:c,76HUi=f1-_6%q,%@jC&NW6aA.fNd'NsX#gim[gGY"R_)V]?O4/J.NuQKR"ih3%O0c>q$a'qKO-:\[*iD#K%*j4N"X-=OoE&m=s1;6DP*u8JI#V%!%hZBE)ZmJWEJ;/_+L3?ed8kg!.FldB1gFu(*75h9ub8J]^.0_-]J"9')?4SI0p=Pqf=pS1@MKuuq."S[#[AB<I95(,R85^C1=I%7e%'AIdDcC7_Kmr8/AU\tp\arlniH<L[mLZ*>C]Rea%+Clr!Z42WqdiaUL(?@9pjQ$`We*FGnl&f*gP)d+RmHF(gWum>!#HCshX/NSh%@\X/@)a+`c2K5):n)1c.`^?G^ZJ'[Hogf3P@j]i<D8LOD)B3#3*j;[TcRLFPU,5Gs3>D1O;F.6r<Ia$s@iLRt@6D5@.p!gKQma-`%0<2oC?(A-fK0lf8<0sLj[\lYM>=/Y/.Z9Xt2V-R.kV`l9ZV&]e83nQ^83ogLTk#?0.-'lk'cXLCEVR\,-&2p-)heNl'nWG/iF!oc%[,r*]meG":NT3BFhX*&V-Z5C6W3k#BZ:pOH9IXLaAk$=<%2,EK5X6G7*"kmke)<!-#8@.@:f\uP9M-ie&;Z"%5St7@JfkCd'ZEq2%;3!BLcrko"#^VRK_'`RM@cN]b=n$u"QP24I+aW3'[K*E<"L<974N(hW?"gZIR?JF!;acM`))jOsQY*IH&Z(=*</r6DK[1&M14#Td%L9q=ToFQ>DB8YRI@qM8VHFPL4;@q^F.%<MsQSK]\,4Z:.i&5o\K\B=8Ln6mkHGiFBW!TtJoE6GJb!s^]K]j",UB_.Pb\W*,=^gq.%n^khm5aI3IW1D-1Z`,ngE#O.!p/c/CprNsGT=iM)Pk&l_o$-.M-;?Z_k0#f(ZYRhq4qQWM2D1.3p8pWXIT+1"M]ND?$=Z`>?5=T1%@tg<?+HLlq"$iO*O47N>4@D:"P.hqJ,7fPE(s/O'BMC;pF9j3b1cg#\h+#G-F-&7>"[n+jF-;uE@>>>39%\Q5=B3bbL!S9hTQDVP%#K]`)3]<>R#s-QpmMdN7<kk/dcLdOBCF^qZLAkT4chUNB]HRVuQ\>P-Ak[h8?13j/O_c>Khk3]a&DD;cS[=E2<hVn([`dL3X[C9s%\mS)[08)QEW)Xclhq$rF'6ZH?hXpsVjimXeR:mG#@hV95S$tM(\soQWq:O)9$/meii"lHtJ?LI2VH]se30?]&S?-,O38&He<6@(:%ZG1W[1K;J267AWb7`e^+X)K-u]q=08_>n1g2&`Mo141;K5^:[V!e\eU;)B=m44!:ZUElaM'I*Zm$^f?6GnOE4.=sEDZ\tFI="2&"%%)*Fmj>FQD&GYeH!(MGg_q(2:<Qt^>H&=r?b#-a6]m7?'XG-lU>#9<3%jY4U)0gUeiMX,Pdbt&C&=IWlGEKA:AgMC/#;/MZk*tQK%o!F?=OhtK*E9iZ!WH5;f,X&+][k-+da;bY<[Mjs@9/PN1nrA44$sAe#We=1m[8Pg4[*mHQ$^BXb%aYnQP?g4gQZ]514mmgUkd.#G%D=g6V+Oi\r<ohIY<p3AV%,dP5jCUK#SW6^VA+EXZXhKrc(0\>m?Cad(mqnL<a]JqAXi*R0]?MUBO2s:B*$:<+N(Gr3gV5MM<%)V0%rP/l<9iYPSQ-sD\M86+l<GFtapp>e!g?7LrTGfIUVJ/c(1K9@#6TtFEf%CC$XsMGpgkcP:gBVH1\Y;PB&2`Y5<q$'>F[\"$1!C15%f6eqS?20i)(rs/ePU[k$d]B1'%`7mc!dca?j(9+jp)"FRf*bKFi/eI_5S>7ilX\$%k@tc%/42@_0mio1\KXd&NG[=&EDEd6$!VG%%87<HnlA+i3#YjO*#uj.<F#)B[T!GuUKGMp*ma`pafUqke9fNZRd(Ab#U'Y1k'+0^AZa25s_LunqhGECBZ$qF.1ZMs..S`P72"[H+%J$2T;L&!HC32m,IHNBHd^u#6=;=C<L(.T]b+NaW?Vg)aoN/if6S?BU6Z;MkE^UJ%f(-LTG=5,@VmG/,R2]NVF)fA9G5,]d$_M!k/%15g@B"GiJf*@&+cL>Qb0idm&f4Uo/XH(3mDrj#9dqJ(8Q,:gE@#]E-;er7RNMe`>=<Oum)";F46lon1eM$:(p<l.\B>10eol1R^[%PT'4pW&#uOc+&5"Fk0\;jEJ`R?(#of;9_Z4!pcn)b^a8b^IG`+Umj%I?X[4h&$<M?chJ.M2R69gRFtkV/Gfi5]m$)aXSLK'dL]Hs%H?pL*YD2'T3mL1C@."3*C</DcBJQp"Va80GA.CTGV3\S/e;OT@>OrJak.&f`;'*'i(u6C)75*j1UjY^_7DC'Nqd'/4Pigk,Jn[!(%7[R[NUi*'rk+qOm\gKEM,*0eTNFhWucKo3dO7SQDMZG#;_BDs_<b-6T+E4BqNc^[E6EPM^q45HUL1/_nkS_WG3KqMJ636pmYq%VD%;i>;-XNL/]4+;t>]o\%$T7P7=l*pA,VQ%5Y"8QHT-IT)n:oa>$\Q+5P/ok8s!+l(1!*6mRQ>Vu]e-hoMIuG/F`AXj23r\bk'(*aX%;qgMJqe9%GSXCm:c,m>;IQDV]['8m"F%":V_N<p/(R9fd9.2^`iqYYsZnZuk!SpIPSDRLB<#P$RBZgS9Z)^;Vm,@H2\kS^pdSU,Y%d#X&o9]m$j"l)O>(M0@3Bj&YZ5%dq&p&H'3V;!)U]"(1b3gOU+:84MPhC.A2(p8,&WHTVfX$jZ"RkqX&,.R7N1c.nFVS9>/CR4*;%q7oiZ8:=_lYoO(XNAZD/!*:V@.JYB(B]M\'$Mes6DU]Lr*ETA:0c0qb5^?e744"iu]3&<;>&GNd0c<UQjBX/G'V5H/e8n"&OOV.J%X=%CcOnkYa[;"-I4TEq&9<upZUTtf5k^EUt&3o4e8M>g8_;/r#]dund6l.pr/%*6%GC5pCjkc^0,=+qpkTX"H?pNKY]@$s"Oc,pR%=L'Ri$%#^*!9?IIaiRNf/PEs^?VjhC:pS0U"$%%4H,;V'CqT(mja+X!Ml>c-T%ZY''VS+`V1FCN'UZ/.k]ehrRW_?>jQW'>l=0.@%[b_WCcsVF,r$n8B7"LM4=?Vb!KpX`2`,H3&ag3s2,5Ka<8h)XL9\a$mpYb:A"])I&n"K?Q51_6baQ:/GbBSR()Gjj'1lnr2Ak)>e%FM=fF^'Y<\:fR41]1P93?Ds@3%TZkV-h3XPR$PrLW(2H&(QuD/Kq*8%d-oK;>p)UWRCsaM]72ORm0Y,:7eY#6I"!Umc%l"&IO`ZH%\lORdKg?Q55K<UsnkQZ5o*^4=$s#Ysq=^*`+XI[n&\0$hY<"4,a9b%6fU70'ZqAR06Z@JEKe0F7r6&pb7D0s=[Km4t<d7]/;(0g0%1?j#K;I/4%=+:V[n(8W>CZ/_Rr5$H9m7Jn2nfK=j;ZJ,j!.*5=;rR0Zr>%#:Kf&gZ0mLV<6Y+O!]@Q!J[diZ`p/.AfdEAc8[AjeN%f5>?#KkJ6.oV6#N!!#NPA4.]O.)-&Wrr8RY`47j_rD0hU460RnV#+DD^l"V=_M(PCN9nm!`>/@b!DHB&1M>sbF3$qEK!:#7i#+0[%BDNf9/Nbk6MKh/A?2"0Eo^oH>1@I6@W>S-9+39jDh`9`IRWg.N@G7Y'mPn9'/W[QI]N\r0Nb5Y&<At2hWH3^#-YbB)X(tIdD:/8G%C>^RCAq&bS$Ypf_l@7TJlQrctX.O1pKa7,m*O^+^1:1(;=N">$Us.le@p)M&H3H`fT8r$1-uRb.TLJfD+pO1ue;0[V;H2'U,0"(L%4=Ie$)3't;VcX`!nr8p7c%@`fWlnlr5rFBIDEoeHe2'ABBtIKl1SS8C0A(EJAQo.dX`<Q^?S%;k.`I7e_UEH<\i8J22hi3ca?LbD%!4='@.GB418K^-Ni+DB$TknRNK:WbR8*P29GMHE+;ZJN2;b3p_j`:M6Oqe0D*Z%K'rFRO%L+UYL+%ga8a=?^OBW8T^%:rna#U<r4%X`D8tjFc'@;`os.=.*hs4a'#8=s,I)!qkh^&;qFN..]`#F7,Z]g,237,-?gu:s78?]^Sr''M%9I*]pILIEZPQW]XqO3S70c:+V'@%_cAhrf[l=<:jKQ;gnEF*5*LjTW`l-UGPld,GRV`k.oDWYJsbL=j%L084N-&N[&1].@_k)eHENG^En35Qp:\I&;K2#5GP6?qU$jmL%.g[Psj+YkiO9/:=bcrodE[GUuW7XSgG\'>VXuglGar2NWDr;p,7lToPQIJHel&VqPRUWOB_J`%WYp#AtbQHDr.4Jh5q(\M,5>Qq&%-&59?]pF/r5e>/_VC@bnnr5TkX6>DU'ik3[j,uf`qUt-O,VGj#\1EWb0'puDOmtGaOiV*s+P?8f5Akkbq-$OX;`27q_80ll)rMo#%UY^T>#f6jnJ=%3j!!NUD4_;m<%"JW?farTK*uMOdAJ`!FG)Dg8o'sJ*#h/rMhj=FhgY]8.[dUmC-7>*bEb^^U:(JFJMYCm'96,n:%Rf(TGh!]r`!lkcU3uCa&&ujQYo`4;rVNBR\MM9o4%:@8p3f+,jU+?"*pk[69Lb4<MZ,2A&Au`*'+2Va_-0kkf"Q%<b[FZ^K*Dd[6%!U(GrbA)h2dK`XOO=_?pLZR\;4`,pQZQ9b]@p_.Pc^d\.$c33<F'8f`VY=WR!E2<h8U).QDTGSIFW*;%d%`r/(WV\ZOY+[8\LN?c%%dWtF]tgM7BPnEYolGi>C:UAeB5+Ma,lW4%Oc+7(duUUfkk/o10(#'2j;:daEM:S)GeD"$AE(c[OlQJ-*3tl/>R1-"1?*%/QfuGQ%gd:Z2EbC+@$3u<Omp0ZE*T9^>C`cDPcKr.rRsO2VFo9gaZt_<VBP=Ns-(cr-6M^R]J6.7c#XGGZ@\q9IhiP^1^t\`*:4m,DUJ1Zh%s//:iN;a%V\^%_Ae(!\`9/H3CG#FLH8?/TT]pf[nbNN"58fs8A%MP'#:&80?KVBRYfdZFoI<`&[Uih$<E2Fe^d#GQ1p"*q.`d!F`%k1O-4Vc7Y4M8d\8P@WBnE#<tM%>0AXDM3Oom_?9OgLLoQ-QGZB[Yr,1LHWiY217Y50!MgnU*.Y#?Ei6YTsHbsEe4`7HVHBM0J#_9%MDQ#TJaD;4me<E[?B2&!/.RN3Inrs+iNNHC.CM;IL;$94Aj/K+;06W7A3L*L^M?4m<(TUYF8*h,?df)#CbP?EQbkAA">/\^GEodp%?`MjZ!k3k>&?*nK*9f!69DoN7W&JV[D\P3Ap"ZKq,>)mEV.`rpBUS'/5,+*13LZ1]eO]c/rZ`[_?Clr/d(uJ;)BZ_*E=l^^G43u<%(Er]&)cH^PKCaK[qZI..%D[Z/D7%1ZJ&?WuB>pNK^N?*HSKeaa9W6f\]SiE4%;:Bd;"gG@ED`7,:kAL)f.FQ^*9j))s3P\ENHCn9%+q/)5\!hab=%$eff+(Y^B<E<:Aa4OWc4*0U>M%4L2kmYfPr%do0V<WlGt%:rAo$V>4NCkDmoD(\RfD=9aP#g1HFF]l5!Ht]3Nh<F%U]7Ohc/KoTd1n?a.8WE%rR/_3K'j.7=)ag7juMWlE];f\.ka6$#E%u6dV:hQ.m24gpYtnbHF[jiPF&5;W`1dck`Nqt`BC0NO')d%%X)cn8+7f/VPKZO9AelkV$[d!>p+91%1=tN8-i8.ubmo0>7le*YTZf'oKK%Ro1VFmM-bgA:2s\UnnsYd&iuj_i;#>a._8<<=,>;Jl%4ta:4huX)B;>C>*Pl4uA*oqpQREq9W/(kYo!(?CY6?qFmS^8PRk1hBbjLYEZf5]UfXi[,+;RVrc*gLdA[?"]!]0PcbqYg-o-"eiU%1p$k?md<<<L$5OHVr',bRh&G'<TKBG+eaJepJJ..Q[sAONW(Gm4g<n=A1GQ2%01J]*"/FW7hdg'J.>BV$hje81s9i]b0K2naA@T,%$58Y_Lg=o=!S'S1HI9"d)e4S"Td+c&4W[WeE:9&@BZ9lKQ.&`<Z2CBk)LOgcA%f3:k(aRGn^e/H[cPb/?[N>T0ir1144l4M7n55W%iaE,u,UB$JQX?OYj#-A+(#abFYH!8:quhUlr<rEcJ6tk,@<JBdk6;c''OW0`N8^)G>IM'urTC*C$_`D^Vo0,J84UAOEW+;BdGa(;%'EGf?0@]BOY";s%]D/aon=0f9Pn)rPm74`jBug,R;p>p3)tBiJ#6kmrN0Z1sA?`)^-b;PCg$q"+moY6^)C3J3CU4TF-&I[9Z]F,u%%8'3-NM9Di:op@R&2cF-_eGd><!U:V"_9bl?D'#"@VcP$0G]H`*+E>F$MM7`(N9rWPTClC<hm/9PCZ?4O_%'cOaV;1m'-F`UFpJi%7lD:Vaq\#plrW]Vo;_.<Id%M]SlK*Qb@(MjX4LQ`DKu-to.G0hgQL(P:CA:nS@sl;)-LqrE$M0Q?PVpsOEsnGs5u85%NCK;9At3/%.b]_9'c?C11S&END8R^j[>\POLrV8Q4#L\'k(?>G4lZ.?iK__JMps1]$s!2mJm7(SX+GLL?giB@%'au6=O+>kLsKU9cI#at*#7nR%!%_CpK`F!oD:*J6>f\RqR9E%\*HZ<?o.'gm$K\[1&uaGqjA1'^>3&[eZ&<\5OU;%5mY1/^Sm>TRGXDX\;5#_Mj`ZYLD1hW^+>dR/%#,$Js+>uG83fKJt%"hsmrtiZ4WNcjCUltc+ZoPTJc2U79&i&IuqtW/3@5V.5K=4^kD)F;"cKmbAAff^cLI7EsNQJfh]U!8DU)H8P%'Io-G1"cV;\X#oG1Gp@"7DHBb<.Jbs8i5EteLX=SF"Z!ELaUWuo7FsG6Q(N$ROa;P8J[Bi7eXM"%$#S$&s5a-K!&^V,+bmck,6rb%LdlA3\a&V6>qE*=Yc%%\WaR2'#PgDc%KOpt*&?RuMUKchR0Z.D4*.?cR'(E.$aD6r8qjq^:<:PU035S`Z:hp^:1aU+$?6#Sr)DLX%Q\/q`?0&an@;#!dh-U;8_J.jgYLto#rZCSRW]JRq%14L$?\[>SoD%*J3%]=DZ=b&&1h6**.FrjBTRh`e[m=i9r200Hj_]E5Z4Jn<%1.Oj,H$9!p:!+<k<amC()@i-Ff+1R]WcF#RYjlC0k69^LYcS/]k8p*ni'>VUpGnX+oh\h!1n^>q#4B0VC7l&uDR"Bcj!(1`'fi^K%V<okng(b^bV[TYU#@#?!%GV;*,e(=)*')N4^P4!t\BUip@+Q-6<3;iQYOj<t"("h:rDk<9#2<!@&g<_'WQ'8c28$nZT$A0VMM[@;%X+aEZ*X/p8^gDGf8B2a/F"#Tsb1%Q*%`Rr3GRESY[o]4_5!/,=E]O$q1#_/l;fNIM[rn_@Zm#K/WPIPn*.;Hg1%E:KQ=Gp9JS[G;%_!iE&j,*1'_\=i@6+L+*.Ce]kQT4?OPMO(Me\_c,0OuDZB"98GTf!.OHp"O;:.(^1qf)#.Y`07uP3]%!!\u-fP5u2D[F2P$bgh"B%FGfAS]U52JXN,@-E\;NQjgQUVP"9eu,-pK3KH$gUZi^t1Yf6>,T@g.f.`SC%Do'MLq%4/W*5Z7!*V^sg&h&TB-LK;`;O.t"7.B')%Ue-;-6Z_7.mM<$qlP"8M#*=)=$JtFJCPLl2mX?0SGZBWqcdlNlTn]t\q$/W!kd?eAM(rk`AiEH%D&Xd*P%TCX2T.G]*;o6QRKG$g%GkdQhG?Ni00Snm.j2lOii:da/Ql%n`7J;MJ!h>Gt3Z)FDc]>QrQc\K4XDJKmF&K!N+3q0hmT"H9nB7p7?%C92-hFfh<Okc%l_W\i%H5UD'kK1tCA/_I'[E`C<HM]*Bl@)7_Q&k$M9^,3%Po4lR<'Oj&>n'EC7aK$r[R4V\iH.pF79se>HIS\n;?-V&']-->E(](*c[$JP%MQMIEGZY@Xd;*?#/>ej0W,o.lo:L>QP:RGs6s1Rb;bifGCc\MH?HQ49Kl096XjQ1C^MXEKngdA7oKFZ9N`qs2q4ha\AQ4:r/2Y@'%EF2$2o]sGY&d@H-FkQmNJ=^[<IIU9m$4MlXDcfDf-,akR;O1AL=&#LSb^K'^/u<Iap#9iS7")OG=.N@R!+H\XF/6,Qg1t%df=e5p%`27:AZuRmpNcpWck^`i<oib,i8j%3UKO?8;ifB9F^q6,,4iEsaJmh6<j(I+Q>7GLClHm:YAU<Uabt*n/Kbd1:-G!o*T9*ml/9@ue%df`65m6D[/c_4)+FI2*ll2MC'mY'h4pp*jp:1;1S[diE$V4?gnMe6>A(d:4-d%NT)$+5[H6h5IF<n%8ATIW=d,$i7HYU3-kpHiD%%WS&7'kIMi.YjC?G%ido\7UCh5rdFWLE5`jJ>]YQ<:39Y49^DY-J6J.@0E82PD0(oUl$3U5gYW-cT?kZZ,pYA;j53?IrjDa5D@+U!%Lg9'X/c'\<Ah8&omk.q?(g(o49D^Zd^EO1VQr!bA<iS.<?Y$7K8M^-qn-"VJ.]E.GF;5!&btY6g_)R$rH,;C'LB@j:GQ>*fo=L&&%N.1q3',MKmY($nMDNH@[*Y`_N$KRSD/:/7*4T;I86TTtQd._85?Xse^Yif0f>CM1UP7-GK*0aI;:]GTMkDl*:"lh*OdjHX:-@Li&%V+5RW0BlhCnfIWBKIm,1\sgc\KuK?S_S7>ud4Z)K^&BUcB$AO29q0j(oDe\AlRePrr7fT^?Sr2XGo@"`.9P^f+bGq)TAVOs@$n]_%"m=PS[Z?PCkmtoMlt8m=-J#qa%in/-Meq?=h7jXb_\T"e/36b^;gM0]?=knJXd!Rt):=Kj]UFZ$-M'tY.q?&e>d.N1G*/o?oXc"l%UICE[E\7dX((N&*`</c_9[5)Fl*;YY1$euOO*e'K+UY2-+a^b>p'erD>&P>Z=%Je;_-ZDHBu1+Y6oltl'OiCa=u)[H&0YM[oF:60%T(*24b1Yds^do%QS'#^/4C95a^8<%GYuCaPm:"#F\s=G.WZHjdV[UFl.8_j\<$\A^1o\K_KU*J[:*S)LDh2+#=8'l#2P=f7o.aBJ%X/^frJEQ<LF(M]+;\r+q;.HK79q*ZBZ<X^anc!Q4Th*#+5Tt!]ca7u5]NOh:#Zl(!+!Y5]$H-'^^9_q4/h/<+<8Ef0'B`a,._EA]%o`Z-IlE43!Li^sd"F_R\*"GH;0b$_[JW;pdm(#N]_IF;8_,@aN7;ZAu2@Gb=1@K4F2Q*d\*=2u?*&r5_hZYM`]b,WP[mKS;1pipK%Tq`+@AgZ$NX9:R"b\rrin:Q&KUCE@K=&Y*7bUoOFf=G7m6a1&uYLm&SVk@Ar!.nlWX37RZW0_)OX.)dTb`9gq=e8H<=/uKK`rVHO%a'X[m'C*h<ej^T;9Grqk:p4AIMZO1a_jF]J"C[9(Nc&jSgL"r>GV+r"!#qo!;a^drfL4A=MOf`oAtM=YGN*0'.>=:_3Ji;i0ePPq%][W$S!R``3h2Qb![6jgUrgo=b\7'2]SMtOsB_<+Y<nK*ahXdg?V/.hmQOsJD^H04Inl8r^!S"C,6$keHbs5hmKR5lEE;UN=dCqB/%1b4G>S#rW@A=4bG'N;@q>.W=%o`SX?ihQ9fERq\Ve_`bt>u[=Ac;tZ>T]9aF'0%d+S^@#P..%B7[l9%2;(R/A']$khGr,kA_/VJo%TakHmiY^HV@>6=+2eE@T,otcRf7/.kY5i2!b70%APIn"'gc=r,6GLt,Hp2i?'j+34!hpCT=1=F]'bh#7P_Wr%-E@.:V<4l5g07QH%E;PWp,F`LDf&sVt@"`0]hh\8Fa_,$;&[N05^uNe2[](_44D\!1_HspK?@e(+BMj"@H<%/nBd!`&&tQ9f;YB>>mt:N*"MpdTGkef6%bq8N7hMQue2[j=f%VK7]BeW;>SreF?`6PDB"Yq;26g&VqXsB+bDCO'0/UC.6]C7\,omV@(9q.*@kjs.TXp(Z"FE?tb'NK'I(bblh%2q'`90-Xf"WYZ/';'24B<:sue@Z5R)Q41)6iN(j"42\-lWm'YF,fXF598+'4d6njUkfYT_n6e'#/*/I]ge.odX]Fc9$B+P6+cP2M%gCNpin5f:3l:h'"2i0?\]qc9fnfHOJCX_lB]H+lmhKJ@4Fstp$)Ginq((pSs4J"]^LUu=R&2DdmFo[(YqUE.h".^Q%9OE'nga7`H%=e?R:k=-AY3UcJ@:r)G7l2)@Z3kc[W6?Q$5aq:Ll]tF(mr'+[cAt:eYPt1/Wj4%2/Q6>Z7P:J;1X[h/tVB<*]fi:N$c)()G9dimj%(h'@3bZ;oDJuP\=OaiT]5Lc1XQF]6=bI;j#q\1.#&L4YL>&'R#S-g#AF0-5epRB8(:kRErY"546/`lL\IlSgu+m_rJ)h7igW.^Ho%G[A+/OPF"HA^T_*\k5E;W_pVL5_j''aXYUg05aJ6&Q9>1$PD+LZQ_=^7uq5"Hm7)CP26LPX<[C'bKBoJSo-s`#Q^70;KTD^K4"mm%i.n\.''"rr>6`Gn7.B`<;nT^CG7UrL,^(RNRN,F>GG1_$CB:t+K6S4)91cG2NJ'Kj>^tkKq!RiMfR0b:DR4=!+A/Ookib]Yqf/K]%GEkcCLmdA\(tkhLDIVP]?'R)\GBh*=f.uZ@TmqM<qU[mC]5#70H7l\smXR9=ZX5e(aR.Nl)"\C.L'42An(r>?C;i]2P4:0+Z2fr3%GPBKr^*9aZ"s!*77#:9)cU3s6oq!d8n;Z+]Vs7A\<3oOPfQ"Bg:4eeeraFDj,<li0@7E%(<ljjlB,oT_=E$nV1VA8Q!RE)'Hp<-+%\'9S.,g]6nDRP`=/IX1-')Mp[mAlY2\(5<5N#ZE?('V=_"]J\_SZ1n+j#<>iXTVk?UoSDmij5E4EYZVD1[=B![q`YY0kWid=DYd;%\Ti\S(612jagW>'4g+85Fj.-*CLiK.dpgJjn\55$3b=m]ZJVb!Zt44JEr$Qd<N7n%&!,*VJ$[RD%.TqrV@]rlM'#cubM.FoMT2S;%][H]_6`bJ?4<-lXLE6=1/7?"'@k;%h%LF&VN6gd3SMHZ4?%$'nmb@&>g1LrPcT3q#n<Lhed71Dqej`sq0/d_Jn@45(a8pblRmhM_%PHneR%:F:qSmNH+8t8A7A4;Ni4XRiX4t-s!:Hc#D+#)(ZQe]O7n:iPJ\'F%C+Vc?ZXX:L&!G9s]pdP3L9>8EriUj_o"n7s&a^(sa%ifk"!<u,E+0G$$!mht&DK\?/Gq8faMNVZr/kjJu]0-:Cb:bV3Id:fC$\o((eR",uHdOo.F%$8nXmA'F"1TV!OX_bhV<:#faTU6GD%-MD[2Q*gMlfnYAf$*?$!<3hb.oM`RIr09aF+iCMfI"BJ$l+qp3V#c-FdK"3iY)f7cGXH?NJeX@CCVH`*;9.m;_K%ESS.<deZga-2%#>aZ<%F:an0,]A/S:X*_+)$0Bg<arb:"lBPX&1b(@lS#"_A1q98*c8s3S:Vu7=7B_@q#SVW(ABa+ffs!F=^J4(EDOV_;rfUFaoI$%3`Mmo!1Ud8kO<u$2GTj-nahR$'=g0UNMLkO=$YH9QmcGpiYsBh`hP&P1o0NhYmR"DO)EH([V/3Em*Mq\#F=&[4k?=KOh]5pUV#k/%mZ?AEdG=)]$%m;HE.kbuRLX2r/h,B$HZZShOeG3&9';7QOON>;V8eE<Xfh[oGM"?c7e$\8D62qn_0?V`2_uFuVo5NOP-'NePa!95%`MOB^)"a[:?=d(.^@PP.:n)HdC^:4#@Ka<[EN-*#n.9^t=Z-k"TjkMF7N.YTo,Il5Y*c0,.!l&5j!R#laWI"K/rFS,<hYhq).Rj&%1^(dl(fRbqYh4+XJmAMrWDgAn4I^7g?(>BWkhT@E#kX_s8[6*?1Z[!0ekjHL8Ym=?c\':K'1\Qo*;XP+In(Ip0g:8Pb.C?qZP^3q%"T!NLS5#04!NGP'UaPbb94=;f5ZMrK]Vrm2or98$J'3g>.A:dUN@Mp6q=MGoZ38l.E2bR,Lfe3-5mVoWao"lu?d/3=%5@__,Tloo%`-dYC54b(\e+h_F>[GRVkR=uB]]L-ZZnjpd^uOPHrHV#;MM-:9\9Cgi1@ic`lQ%q;(0]rTN*9+M+ch(-OP>MP7nh7%#f;`f/9hbW%-%0>S8MmLtU=doi4_k>i"(5+6=1FC$(jjj(:Q>.ZO<IZM(hJI8+86Cm_,C\=NSs=O]=o@A.?45DB)31[;cW]QWhTX6i-Or(FiT%U%!n2R(2oHXfe*M@4R\NP81oDm;H4rn\RV04cV``eBi&[cfA!et+B(O_9p>R]uPcejJ:l-'e]Bko0/m2ttR-oF:7U.7MPqKDJ4!CKu%d4iEa<_'R;H>*f:,oLC8b8YP(ST_^S>.b0BVC;qtY.!TlQA&DTdLChU(6]h*MjEoP!`_^IpB_$cj`[ZfKqe8c?%(QHT\4.U4_U*(%KqD9=94]Y@hTRE*f^n:a#o]I%L/b3qpX13N)(0638:`BUlbG;*VK1JnoUc,AFq+&0;45\n]ja4F1_'J#Dj1sh@76*=jh6sdV+nLd%H<rT0fNLC@i?FrY^qePPp$O>dat#/4N9qLl.4b.0XE[b^hDr7aK$E51ouG\mf90lC6&"JK+6E`D33b3A9Bfl@-\`J+Fb7\=G;EP"%[3Y/X>@=q-U]WkJjH@6NhQ,.7dO;5FaFIS^d$itjpId?.it+`_C57=_INqHW(gIg%q1!-n@f2gHQ,npCTm*@3FB5#OKRlZCX[MI-%dN1Yb=.B8b%9"2ShiVN,>in*B6([CZ-EY+Fr:%8U\Yn<f`2"5Tp#!*D_R%,<T=NZ-q6MW&m#NKg-5QjbPn^VKot_9`/C-IoU.>t@%ZfZfpQ_dhML=gd]^_61rI`Em(`DC*M3fRl?LA?_EWWkI4p-:MAo^nrJiJjkV$qMemQ,?gm'2j]5$t>mUZD;oN1*uO'^ADQAS]VM_%C!<`e9%`A)L`*"i1#^fp1Zf-@k;>5EQUK0geCO\uA+]?h0(hR?I:K:lYVuXBWO`e,+r[*,6_r#W71HZia4W2/9ZIS`AaO!e--4G!%]QI9k;ROLnE_=V/BC]fq0<Ff6l#k>86TG6=@_0]ADUtgcn1))g=(lkQaQ]XESOj[9p*pEIY/0TX-?jQ0Q+qanAn]WH?Oppo<lO:%%)&.gfaWG$$A7i[(5a95$>`pAER+Z7QH+!Ds[*gW?`f'cp8?sSj3\^l:=[rP)=W]00`?GeZg2UW]1<..(^IQ:`bs>umOPhWnq?uos%(&LMbKU#T@&WcANPQA"_M,(`78kO?@d]&ac=!!2OPk+6h(2d1W(+8tp't4'rcF]pP1B<V-rs_>B<uiMl"#k)S=sUggN4C0aaMRHT%1.*I@9A<-19HkfXcG`doFtEqG8`e$6+W."(^@?B5H9@**See#8(S@NPH,m_;.j'tj6Y9.qm.l!)W3"1:YqFqRmecRGis>lfS/>6R%j_^DeF(@'%r+c]*i)IH!jVO$9'[V52G^Ce!Fc4o]<E<&6mTt2\9"1?6/kdr:M2_QM%N@(?)HT2-^,CYPDZ;?LBMs))"gp#*h'\mm%4<<ebJPo&uqQGbF@&P;Pq+&*#.!k@5!h(ZW>$/sc8WbGAeVCIt6P_*b])U2tZ4+k'?/`Bu>eEsFGjudj^t%(cbn./"2bN)i.:gj)%rUZM*JaS-Z;Bg+=/91)<V-@s)@S3m*5X>dWk-DI6RI2r:9MW,F2H`bh<W*6Q5,Z$3W5jTO@.p3B`2()j<G5Q`%6Df(6I+t`TM&3B%du+-AQ;0d[>@3A`D0c%e5YC"SM()MoeKAT)H#pYL$"*@h46?A6^'>YDfDA<%"CZnUkSU0\7-9Bc3/`Jd*&5TiXSEN=6'?Ht)Fs/b%@3->Jplic2$XW>5N,bob"<h\eR)O3%j;I#Eao:(\,[MCd5R,Mo0gLaEr`s&+X6-Xp+9B-rps(T/5/(ZQ*Q"NS'%=n_2](,S2'60t%I0#>Oq]t0&?G9aKLZ.f[$g?-2RRH2.@#r7)RjjBY<kT]aU2m/=\M9#nl5+1:;:)_`N:+AjE>-#`B*.Ku!`4I0$n"^t,FRp'I#]Uq%iK$c),+^cAchLk6o7+Q"P<9"Y<@d9_ks\7)+OpgRX[Xt>K8@n1kCn;T&T6D>0pZ.mH'\qdJ_,l.)Q4$6o\kK8"i^KCd"2?Z]r06p%;?5oCouk>hQk]O8#UYYkWXF(?1PC!367ncJD]p5KQ9]Zo'90#0L=\,pWY'G)^4j&r,u&7thRY_^<KV%m@J_SJTrLsZkZJ7-nto9"%IMsA'hkt,t'&t>K[Z&P5At<eBn..9UO(pQoF"ThNDrl/%CGk0h@:2C<WC8>#USXg#]Q$`#o,)P4M2%Ka6[9M0D=b7k98Jo$]%LM4%oBM&"H]O:>D=`!0&p!iSjPkAD9s*)ieKo727_ClH68nl&c02BZDn\'DD=:">ff=C"b&BDXKtD&I2HcXEIe8>:;W<S#ecbo_EZVWN%C9IVZ3cS*p"\f2?iC0i#Cj&6MY4HLPQ)bP(>A0L.e;Gr0Z=.e!'QRUr.PR/9O's$MAadKRn5G:"/(EFu)!a91dN13oe5kFF>,04V%/<Yh<rEVspl>'U9RZ1KaE6Q9@4rKQ#i(`rBVZX'='Ed/Vf#-ssD()eKM::?)LT=(YT/l"?`Be0TVF-H>5Do/<F/G8-+g=Es-#m3d%<o'eV=NalJShp-,f=S1;__.hN-R]\fORWrhMj2js7/O:L;9SJmS\+]jKZf_*I?V!P?JN?_/r\C;b2cdE,FI>cLn!95<Mj$,ick;c%(YuC)"-fD?S;ZY_T=+on!Nid1^$u:B*V@Kb2h1`J?qiNYZ%*/:U8L#dX3a56,k8@fp%h>u$>_\Xs!]FSUpL!()+qq5,,N+R17n#K%L"/r;"5Ie,:6J4'@4oZ(QK]b0*qZIT0`L6#jZAdu4:0Au@7AK'hj7]DMU!&$q,F?s;_F8I!aQZ6e4@?\_//[^Ba`(0YrnL(D#]ME%F7i^U:i*S,-MYa'YnnuRObW_I'pSYXfrNTCc6HJ%Q.MndS@KM`N/JXSVgc(<nnPmQ:.uh'gHj*-nB=b-GR3a4*&VkjYj;'f^[M6c%#fZZ5K-bXI(^BMZ'pY,&oe3I%q>QcGAGE=TIDbqmAW^VdpA`T=,3<":`5l>NGt47/C/C'6Y6l:*,s)DV8S$jO=i]N+*UBmkB>Xa2%WR1`0Jk1)MoDuL@q-1k5l(8U,IET+[N&6H&c:=7&/`@m&+l'lXiY6tW;rL2pD=`;YM<ie_7gn76/"-@u7Q5HGOd[Z6rL`H>0pYS;%1RX"5_u`-@=o1!tRCF98=iT`O[#uCcF);qW@LG!k^+65H2Xlfm_.NgBU^aMZa<uJR8Qb9O9U;22?Tj!P0YX"4G:7sRHt&JWUf+H5%Gu75QcgG7S,m_,(?mI<'YT_Um2\A[3*^@n,gmjE%,.H1u5[O54VL[_iIfOpg]h%rQK^WbY2&kCB^d%#N]aF-^6/G['nC@Ua#,pNh%Rc_@f3+3MG<0kbnNbMdh"]IQb?/-_so7=)7GHc'od:/5#gk)DZ*LF1tVEE-1g]6@tM:k#pi,QWd`0Q6\&i0M+k'[5H.L[O6/:W)T%R7+NtJlpU@>OCOI&i;k?$i(PQM[%qsGU0L<nu9J["j-L+TJC#Q%J]K&,DI]OU7#tAXl;\J#A6KslJ"?M35c'*&Y-!WG0ZrBcn>!d%Hh0GiW5scr.JH4.?beQmh9+<Q.(Gfo(n=m8"+E64O[Y1./e)r+Lr9,)ebtQQ+;JfrqGR)R6_I)uiKiZ24NA?U6hSHte,WC];m122%;"olE>U(8h0b72si>&uU4Odg#fus'DFHlJr9/8_YZikTlmke'9g2gt;@GX:+&#<KQR9/s3Ws%5B=1ZKhdU5'Li><lR6#.V:a[(F4%=1nT`!\i-ocISOSjqbJZ[BM^qXO3oWJ$s94q1l'h*#/"P5CP+g,6?.J8_mbn/2T[\\croiibraC;Jlu8SK11i?L`FdCBl94PbJ8R%2Mu$p8,`r]!4)ZjD1)9>a>a?2")0g`0afUCCa73/]Qb%Vm444f,;L\tXL&:Afi>O)-E`1tC0K#Z_nRmi$5PJ=KQ+67rR#'%oK@.h%m@5Yn,I'9aI!$V7@ci<aEI]]\rug:k6qmC>/ZB+dG-EZBTA!_U33q`U8qsaF`9&!6_FWa=P;h94S.^d_%@qFDH^JG`Q8i+i"W1sc%,jW(bY?9ai%hE3\s*pp/AKndnS\ttdF7\p247MQ&3aq*!.g#]H#/$";k#"*Xs2K<OO">jq0g!t&"D*&6BTt'_L:J)%Iq*dT@A1]A%)=$&BQRM>A`>Jhm'rEQR'WJYW36P6X<"[`l<6@oaC?WOi1,SX$<D\)/93e,jHt$%C,jXio8<a(7s8B+$^)9sbWmmn5/?)s3E4RF(%!;[pO^n]jqO^#O:.A,l^ns[I3N0`ctGG06[i>>bV:BmgY,!b_[L+2>d9%J$LI]kS]>;O$I17d4e1r)3(^``=DIc7T`ff9/3DPH@#%+t.FtfBe7g&FbIU`\dWdc"2MWh36!>_(3>K]>0%/j\-R]0rcU(*#i"uGE:CZ'K/d/['27ZpAE!%;.os3onGkDW5GH$$sI.0i)2tq%SAo0#B#.,9GImI^m>l\@q#Ohu+*2]kPUs4Sptpl-4dI'(d*g1e11Jnl[>eTfO"gfQi(T2!%N:fd@+-pX_gShfJ1m.U[;AP""7Tj=%U:;(?iXol&OUNJ(ED)Q=pnA>D(O*;nM`QEGNR<Y%?>bP_g_/3D5""h-N0MVeK!X\LAi:>1lV-NDGKBd"<!Q\U?uLL\Mb#C<K]QOE%K&kj-97#F,a]H#h#1$#nM#5)G_J?0?*&iP7R<D>Yr4j3?I75&Keh8>c3I*qOpPuB;b(hs#Relksr@T?"d2.?\1H$Q6dLhNJk8,66%iolAhFRpid;Qk-=MjN7d)1t'eZY8bPQg#6*pF'FS%*QI^nLCt$FP`"74A)T7VLjV?'$HT`Xu!AZ030>,r=GGs#4bsHaZMs8?U2;2%%N,7mj<buXD-WYTG]lF;RFom5,J`>X:LMDjU?emQg)Gqe-H4OB5#^q'5!2R&5S0\,:@tFTJfIJs*obN%.f&)dmkD.5hF(It,FOZL%YGBjqHd%k<j8&@*.0@-/aIpGK<;5YXGWt,$hVqH]BT8uuXbG:O`7Ljlf:H/24\g3MQrEV,Hs`g_<ctCV#U9!DesA>AJqS/Q/VXmX%Ii\tV/H-=m7K2gf%QCGol@"Yt=H'8mn&@?nQ/"h=)8>+dJ>%osPB%"o4cmgGe?H!Z^BS6p@`DVr\+QQ!%L^]YULP>GI[)E-=ka5"%kl:Hq&InuP2hd1`.aG[n9,>`I7m?e]W\E01dL*k$13uY%UjH9jYj7l<n`2ac]Yg1c9A\`]-,MAi?+#b_*_QKE3/uTn(_R(lm3T^<%EG7XX1$1-qHM.q;L+rbB4)Rm]]uS;!,9c**"`btG>F@W6Y_s$;hd-M09Z.\p5.@LlH*D6"IW(Yh@^+)@XVXr:2QRt'FL?:%!FQ`Z%;G9@iA`b,f5""Tg+d*ZKm'HOd[9lV*<PWsLh])&d6XW9g$V7LR8hV&>fdd'jc\F?^e]QbSM2XDii8m5-k*,eo7L<#fIh-^;OJEO?%2a@l-r)GHf&)=O6%XM&5!"X'kgR=*Tj7<<4nOc'_V"ljrGIdCWbkYG/Du;45PDgh9pR(j+U)3[sR+qr?"1;qWMTP$&M7";+URfLZ%IQ%YG3c,qFpqHOII8ko*B;3S<[E,n1<5#&f#ip)U!#UC:Mu7FY4#-h[kACA&Rr^io^IIti]QkAE<FMJ<!1eCX]Rqa_LD$o7Q4TE_%_5smZ'#Im]ZHN%E(P=q?XpF4kK^6)DmGV3EW9G^>2C\EBf+j#:C^M9c#;5aK9u6MQEfp`(6=-/`[MDZ&.N5b8Vn0)4`T+7IY7MZc%B`6Ep9:A!V$`o6I.seoI#?.lS^XE#)BhNTY4ufg!:om6,6Vn*d7$-L%g;WA;Je#3O4QVqu=omXYk+^^rK<p,G]Pl<I5NY?)p,27D%&ZRSjb'Y0NJCp:[P:Fq3U_(i'-.pq1Ks`?`.%b#[[0nc6Q)ltf5g$t$G47.tf&H&IMCPR9cPf`"".L#9'_rGB#lh7Q0%'-_E?dj^%J$PU>,IB4*QZMdb_;V5!-'q4IofoR"%TpGG5XBTtr!24B4)@0#WI*,f)_b3VeX=f"gG77r-i9R<]eST3%RtMbYRCHO\S5e3^?#n1%bnd&/`ltDg/lEu`$=l.rG&G4JlX\GL&EsXq`BjQ_=dDCe2!:,@0sAS.Kg1W,Z?hTZT<FhrKJt>2B+[PHJ"XGfD-;I/<rQ5"@h1Uj%V<^2YrkE?,hiE[X"2<Pr4EcB8.g!_F#dIS[)TTP,6c3#NSB=ZqbNG39$=I%3?(F`h+H#IF#g=hrGV_]LGkWmo/F.$o4Y[ag[l\3(%Z0^+k:LYYg,5>:@3%E?$0LPdO#IuYo.`jAimLJ!*B_+NY`-S=OJTQ:IU8CJu1<E>[gVeAJk67jX:o\'40OU\FHtddIM[9C>Y,Ib`%rGQ+t5OcU'G.]\da.Nn_]EgfV_4DL&_F?&H?'q,6%J<4_"gmk29HV=f%<5iG@hA#/)US@_>Y"B-r^FeB;NthO5H!.m2+N#rG&@*S%)oZ@DKHT2jB*6aVL3j12]hY\>ZqCP&^m'`1c'UBTrsd5RbVMUSmkO4OGBW2="8!\V6Gil.9_50b`WRQL@>_9-/#[bX!8X^?egM17%iF'E_Ctp<97O;W9>BGA@fg_$eAk`@o020BBEH([`Qi$`BS\;f#_`@P'mn#(41B7YL^nS%p2Z@._[41"5b=oKen'5OX"Uo-uC;k2!%6lUZpX2#8L1Z?M7nn'TdYs2diV4gc(mSop$$UVKJ:N\i;J-u?)-/T$S9r(Tk"W58M`uqiU%9Ro(oXmY`Z@#\WAU0h-]]2Tho:KEJ%mOq$*#OP1EAA\XH&D^;<>.S[S0X@?gPi:uPZ5qBgMY)^MRmW$**D%l6!(Z3U`.&cB#bdOR%HZWTn6S(bHbCNc<BmdUbRqPRa*YoJ%gT,e!QctS<F_ml>]b5j,3R!rml/te@G4VusPg_r)['8%YlTHB?2M2o=X2/!`Z/)FqEm+rIk4#mW8[l;9:Ima>;%q9Y@\\2QTO/9a%e/8M9hA-Z3Ee[f&e^Hj7Weg\O3l-/66>$ThR!->lILstaYBi]jBR8Kq.CO4>2G%]jUL>n"mMqankra92-#$X0XVMbSOkZ-n4Fp4e%@a\LX(<r*NEu0ccTP\,L1n8KZ\$Ve0FRn;ORJpV?/RX8HT9=%tO*23B%4rB)b/r2:e2Pnk)OK(uS%j@ulTUL&PT.`MdM+mo!UU>6%F^aS@"%>ss/4>l)W/H=N:R&269F[6=NhYu`f$MS-+\JF*462qRr=G/3BJkt1>*I\;*?i93,;+/F/bdYE:N^S]2r>K?%(W$?\*[#(%+r.J:"dmR38$1Eo&[/QlUu<J<ZnCg#PB6#*NO?<Bi"\7#G:mQa=G&(W5<36X#GsbH:j$01&i@c/f,a;\`]2p59?I67p4/GC!Pkgq%0*_4hjtH'($DohJ#X=MC>&>C4-CE,XEW<rG5*7KDa8bXEq:B;/??h+g5OPJXjEicQX>FG%>:J[q9*:!oa=#_)0ei8s$aE!0NZA_Z%agQL`qh3+^14MOI)&p#o!c*_C/c9Ma%3*.(!RGq9BoCd@Ht6Cq+"#qk)`<$Qq+AWAP!]*sXh#iDd*p^a``.UnDi;(''uS!&SbSGq%DCq.A)G'.GcYu-<@VOoqHejEG':Li$iZRhYG<*9uoe*K6RN>G5Xnjun?#k'2=:);'Q5lNS\P;NBI.O]Pp2gp*=``/T69nM`-)W!)%`U!rt31rr)QHo=im3GfU!D4GOWh2C/Lck)eA(IU0JEdR'obZ4*:i>@&?WUR%IsV\b$q_no`1Y44Aj'Y0PY)f=0WjpPh(]7Oq^=")%3E\qffecX;Y:/b[fV9^`V.RNsSO`:5#PC%kh,3RtqW+O))e=$m"F&De92o!Vns\2P8[0W8V('KAQ0GjH>P4nPEp>=5bGY!tC\+:h%SDF'VX4d(QQHGcq#l;rK4Xm!V&TZu-^pn"TBnIYrao=TIq#5n0W`d6DWT+p2ed(Lqh+-b`n`o!G=gQXqOg:p=ZQ_R'@drtFT20C3%[rA:V8uVbcjb4`oX`;`GHbnmWXX1LGWITBnD<]:f]V+%@[]Rb@[Z'dd1;mhf$XQ]tnMCB!'"l*h3?VSpm$#grK_Db/"7'6hqZ4(o%R-*b[p[ql)qK9"/qm^@jiQ+NiCkjW;ENeUrQ*UGg,-@>>j\IL#P4W&S5Q;o6rRg4(h*"`F&Uo.&=U*3]I*f'5]=ps]I-'erjAr?<%EH-aqk'SZ1FpR^-Nk)8gk!%iRT5@JLNE+;0],g*84jX$n44QrMk.?j@(X?"DF)q6X1tcL6AFrC6G^DMfUAc^_*h!.#PK?UXb9u-;%1NZu_mmoKI[pj5)$broQ)/V6H3&>].Xf+OGcKRt``/=mVl+ud$[cKQP\upF70q?t=)j)%g,ri=+p,2Pkn"X3ANbiuH$hE?*&J]@=%)kMgkejGf]d4No*"e!RtpeY\^L`FuMCAUm]$R#Y$FZ]<m`?2JUEG63nD99N9XLgT9[./)/ZYN$30F[6o^EGbcM^'@>WT?Q'!he&C%ff/a;@F:6Ql7'K\Um.4Pr","_YeG131#lQ:jfs,54f>tHfAk*W<Meh&Ek2[;q6[!n7JB8\:E'L1O*L7Cgn2,UiK*I>C4?9["g_X6%S"hMb[1Lh0U)<'om+lL@in(ct-d9'$k[@,kY5i9?>J(>9/cQcPl8,?1e#$JHLZdJ5B3dRQ&'&V'VnBV0Rp7Pamh)gaau<M^(JXd=%f1&-p(Y-^\hQiT*b-I"96="Kr5KR?4(YXA/]9kbF^5Md<*Q(h@p(EGLS!6K;Z'2&kAX:'cULSal,4^#LJAB9(>H-bP@tIp;@3KM/%4RVcrE3@=j1gdct<:Wg(#c7DU<KSu@?/<@IK+M00ZuZr<2d+tWFIP%*8EAZA/.1t6*YF_lDHAO(ke<=9;e,9?6*&E.ElPQ.I6+<A%p:7Y*9r6lS>B=^+03Fm0FsGosqZ/,VfCA.H!htl.C0,XQ[==3enDiqV$MaXB-dR2*"\#2'%LFY+M\s<l%[#?"HcE[DY"Hl98/dMN%4H:93KE#H,!BB6_fEXd7+tjdbjYl7YGJ"I88!=n`fYU5+Nn-_Ncq^?AGK>rb]!iJBDcp>\)9l'ULrhm/=*&W);=XLJqAdL3X\5,]%lVF@0?*]XNE.sjR\`TJWQ-)S7/Q09;3oaP2OL[D!q!QG`M&T@[ENU[dmWm8HDt=_kEIRfjQdq=gh4Y`[RIuIr:],gFM$rHCGAM#M%E]qt_6XDb,1V/O>AAc6("PYGE(!*!4AA9Ogl\o1fjQ#^CTuaRT,![T\_$W!!;C0cJVQS#gm`Xa/JQe,s5fQ<7EdLE,jg4=rq#8MO%%H5F0R(4S52pcWL>&'^VZ$`tsqZ4+kKsbXX[>@RuZmU%.nE,EbHN!g9S5r=MAs:,TO^^KMmM86fj6gU":B#g!dcol)`o8(fXqm\)%&au)r2]5%DFU\/c-H\qjQ@B'3]KD.N-@";9,=_64UZ72ELfXfNp19#krGT&@eoeRV7pVMPVdX4V[YiIfh"si'o$.en9Z+S!RB&>i%1Mbp0I:l'8l?91SJioQ"D,9c7GpE&LC:-#8BCOnD`].5c;S2,ldt[-WZVS0jO,#cBh$ss;I]i+GY\bqLZhi8K6KgXiYTF@]m2D\2%qb5CSUP;T.0.R$V6#s"i"cFb;^E9Bdi8*]-nA,0d&$V+;Ek/99R>>%4IVmrG>HE6h;!(!m*=2M?s+tj.qa>[k8Z>?dVIDNc%W8l_%"rB\lmHg%<;"q`A1cY3@-u<D&)2,e-mnE)n9%5=(lq6p@:0bn@B'&hrJd<IDp4b%(JcA'7QjEpB_`fhVqh*/^X]$n-E7X!6m;Rg4%@K:/cnhNR$Ht[>RRoFWu.7HDX!k06EQSsB31+WH\K_e8M_%u@n;BO;#r7."H[UBu3\oWL>l=J'o+3Qi^!+F7o"<9)=04LI0d=/EC%-6&dL#qt=)D[5LYk\]-u'26i#@a7'Kd6rq)DW?:ONqT1PLt*WPNZFCl!8=9n(Fnp92T5m-i;3JqJ="Tk26<WB2%7Oj%jllgY3bT5%):;*9,>\T9%ieVpGQBo-7KH\Vq5\B_-D%-X$#QY%e#tU8rHW7"E/Ven/9qsJ=XMp8RUk1P6O@'lmAF75W`):(>*J*h78A5JD%>qo%D7]%E3o32,4keU6cI]/g<2[a,,$!N`9Lb(D)HBhprB05tn*+LYF&H;.B8S%rW*5BUl)M:(Ag!""/Z6cq2hbg<1K=7XL+JE'idcg1%7C-`hdD(UJI-Q`X(\`)*h81?,h0Q1k1)hJdZkO(-i.2,D!?ptKOcdnm`m0L\nFUp9/K-qu(mA<FR#/10^.RVS$@tatd!WSse)36[%I6re:nu-g4Q6tRZf'Z[$P[%Me-k4Y6ROn<eDT&r<Os;iJaiZ)oL(`&.YFD"OFMT+T"9[`DO:["P6:-Jq63m_u14Y#a#mUg%"CMR.%6XkQI&gee^,_SQ:OoV!PJ1q`F-$0G>GMfdG,K$g+6psj"&4]+k$8t5d"r@u0!!b7KJ0n)8$:KFn&-\d6E74nXJWKs=$7&!9pA))-%Q)gaR2!`=STC#Rd:#ag%8=295p!(VV-hf]F\*]LGR;5jhUUL0&C3rsh[N!W\de3*.Ko'=:W93_1`$;t.[BUp:c\5n9XJ3),+)*+s%QD^0a\MVmM+f_7tfpEgdHfpO_Qo*Z'>.qI0hkK]`bN2$termA"N_3sY1o@=<-7UmC]0EQJpq>.md_)&t]?JA5SdB8$oJ'o[rChEH%U\F"k8u.YngXt3+AViiORQK8;rPn3]oqn9?2f#g2NZen([>ero=fA9os8IggW\23C=aTo8mTJBmgqD7Mne>(uQ?/WsAuiVo)HG,:%Db]l!^MIk5SU+LgWf>^Gg.QQ,?V<8$^WH%_Pu4`PpOr7d_kPcOMXjn/RbQQ'faV8':T4maF!tCnZ`c0+V55W#jTB5H.^IkTh='2s%@^^#PR<Q4j_1X'6!"q[>',$HnHG*IVqYF\IrDgmqMA3f^9")I8[]4(4bLWg`$DD`P?*,%ACN7O/VanG.DKJ8/]q+dtM2+Lr_qO"#%jkF'?>JqN#279O6.5REA^K$#chpWSlhct#4?9G.#WKm57q*!M;\li`aD*nk8pITIbQ0!%ddF<82moQEQ7\r"Ln""@TdH[+E]Ak"$%H<`DAft%Wp:1ELfoJGsZHB"2`*YFtUNTSH_X5<O60%K19?B)'#>/VDlTnF%A6T!6E:kJC4l+8jeLD!OdNL=+n;=bikPO(hgJ'Q/O%dbV:T[*J]j5D:Y5R"kCf/KShrHXiP?s54BP/+ZedbhH9AiLHT_l-?B8HIY5Z[UY4p=T5/N!Q(Wic-s5bmhC79n'pd<e9lRKa8l];%:ad"bjAB?r!.tF^/gLr6$PO<t&f$R"L#mp,`0*5<=>!Q<,T[_#YXh$P-jp:h)@_H'$BTL7i.tJJJ64(_"r\C$)%9=bij#`G^]XoP%%?H;P((C]f/6PS2JJ<Vc&nd@57,gTi9Xr@%3(-,h.M'-@%STfKL!!nRhpTSMBVkAKnf$PJa5`l_<k7WJN'^Ig7>_rlbrn*L.T/YY%`uU1fi,T?K.!@"+BeUC$BJrOe)Fqe1UbD`t.oKZa/O%g>To;tE_4c`R*Mss);2RZMV*oPI)3&t:,;BtO#;I'^B'"nNE>4g]`^n'\%i5:65\uO@5SM[,M=pBUfqTs3F.bX<cggnPpihAF%(Ai^d(Q0L>nW:3/\;+nuPVXm`H8/uNTIO#Mes;)R@cj)Qaa;jW*n@F`E%5"O%7:@=-Oq"aLWJoT7W"t;%R#oZMYo&""EF;+c#6]lh!Jb-#_\eDU4SV3fY_PYme=*\1O\1a!30rY,!/Cji*Y;kDYV>U_KB.i@7"^7>%6@fB[iZPMaLlh+N80%+A+f$9T7A<bg8;IWZ72AEF_3!GKIOM`a?KPkr=#Q;qiTpKSLr-)93b&qI&eP*D(c)<q#@eJK!-f*58!>Wn%[8o@'J.k5!3(=Sp&.As_<b0818;7-F!.Y%L!!%NL!f3OAFUUefr&5bp5Vo"Cr^B,ZpN)(2@Hpt'PV^K)N-%+8OZW7I\oF*%ba$R%%^Y*`=LYk-<1$P]I*<?d?N\5pn:>!i[XX3O^2kd^1gUJ4J^7&S7b[!V,JKip-QK#G]D[8["1Ep+<#0:5g(C,ht;#l;="`gdN/H;Zn%<:p811%ta*:C8mK#AJR%4_N=f8i^f@k^cGlCGHN'<68<Icq8s5"t>&e>;Q("r50p=&id;ME^s`!e6UV+8F-G6YunI8btDNn4d+ri%*\fFF:;f7E?5GNpP9a]O8_+N4H!eqF'$OPRVMRh65KHg5K:NZ/OYFEp#!FL`&q`q>7gHBM[q,&#eH^[q^d7]__;Eog3GDqB3<irl%Do1RMT%fOWq:0Ir,_Mk<4TP"qSWTqd)&!n`)]O:'nD2f\0o`nM&L>VjA7n<&7S7e.!`&h&FRY1%OgN=0N<0&OM`Ed_:39@))Z8(9%m8g"kN4)4<C$BRZd/f'L1R^9FSIYGCpqKQENb6*`j:-u)T26(QEA1[kE^56'E:AXp5OQr#j$Iq6MO9afdkm"F?ups@Y]rFQoNmP&%'K>iMISGIYggH*&&d;*HqQTUQ6/HLMUH[(%*j@u;$GV![M2P2-32[cW/PJjnWmW)+Wn8)Rd=/S^hf7*g)SE'/8&+K*O+TE\L/Fsr%,#0Qkr.&Z>:!k%.V5IdtNbH"'MbmVcmT6d<RdMr"&00:EqsC5Zojf<ecAZ&->osKO@,IYts02@al^k\$PHmp(/9kO+WWtkSrW*@c%rsm]SW,hQ/&fDY]AaZq?2U77!Z>Vl;oM=f])K'rRopZY#X7g$)[VQ&&I)'NE>1W$,>c*.%)X\NE`WCb(NPI8V3PNs/Sof%I7BK/[%YJ`bg9EM-H8^6S!'=O1YX$C2eh*ffue9ZNV=kbGD%0(OA(S%4*6f[_L@Hf+jjsKao!P+*`/p21IKtF;K/=c/;IfRfFN>^WLD3Cfg%[c/W:S,b,O.$[J@3#2e_/MikWkGQ-kbM2OHCoXPM&Ia2h#NuB]/6L\'eU7'TeI5sr0<g=-+3b]WB/f8[N&dU'=hUBuYh1K.bst\u%g8$^?_;STe+_/[U@M&U$lGmB0eUb-k`m_n-ZZu.<g)IFLA54'k1!Z*X*-/;u4JAjHW(kdSotn-AEMV^[rN[3XQHi9!4RWb!N>RJE%'^TiU4-QS=JP!VWL/HiY#1Qh_`A>2=[5+;A0;F^oIrV'okBuLN9frh%5W@a"*NpN3LT`)lMJ)2^C3kE(]_FpM-0='VQ!hfD^;(gu%`#R\=kc^R/C-k5J':r+u-_2#\IC0HZm&unZR/5VOn:d$I/.!TSAJJm&;>c`\!;>_o@2*T^=0?/6qF,$pM_JVJF]EB/7LU>=Th5I%%,9?%"me7b9q1-3!)(OJ9;5CB]T]F@ol!PFZ.CC?[--9"@QAfOtBfliW0(>a-\U-d"nHt-s7un[?l@`&T'[*]BmoR&:\4&asH\7Z8%q%5E5o+>MpD1@]Y@EpEYqEU71E6$,Z^mUF%Z7u2UX*73"cs't:CDo0m\f@lKO07re1QM*:hP.]6IQb*UM34F)/k["\>Q$0o!Y+c`%a&5+S^M\0sQWGtas/JjQ5qG@$iK8_\VgNM%J\Of#fnI(<B3be3LNS];S\b,>)@iuj+B]Ha@rViJa\HdV(l&'D-n0CP)G'R!ec@WU%SK_qQ\<Y.LYqu@']>T-#k2&?T@YG2(YM7[@Rf1!F-EPs99Y/I)`5c.[`c$mH;mP&Q]P`UH"$l1[mnJ)p],R$/HEYo672>A`4SCJU%oF39Jj^."8mlU4a`ZbD%]Bd>Zp/P1ZL;)itb.s)7#P*`PZMoP[?-*"M6\@*%3.S5l)cmVSc0/u<palAhn%j+o9hGVmE[?obB\7gg%EI:MD_IU1).#'#EXJ=dd)YMEHBLoq(nU)2f_i'FVDh,Lf_br]X=UuNs6L6#b$\tX5G=1Lf4RSCk1;DCUh"0J/f$$$(cO6_d'N5E@%9Aj%^_?M"J\hq!c\<tfi@1;32FT(mQ#Y)h1R%rV*<oHZtASp4oAepDT3#^3d=esm;ZmO?tcT!I&J\,8dQ*kft)$1#XD4<\qT//4p%6u*q;A@=(gOoWg;_;tcd>2r:[;j/GC&1-msNQ./Y.,9VN!IGk5-rM$b@tD(IlHVLTFYR\&f,CJLhV%Qi7Rj,e5U6_#'&P.Dh^re_%WjDeZRZ"ijh&6bT.X&X=9YmKW+Z(RX&JFJgf,7i,T?Oau$-MRNHH9Ch_'-W!%?]O/V@,3#XP6K.Ian=JZ;cBY*4';(@E^)a^YTA]%Y-!BKeY5N4W.O.Z-;X^NG79@0@/dJ]CR5/B)uY?s^e[>H\:L4o0Y[m`MIk1ap<m,-"_\=(*Khe;*hXZYGc]1D*=-W$IZ$?fe+GT9%3>a;:J&(0Al:mBmdD_ZeUTp^!\'G+f:,3H*qE<To;fN)#;1;YUBg&E\;]N!^a&?K]:U^eUI?Z5Xg$G&5`(sd$!<.LO>N8^nHbXi[%s0&i_fC@;>=J>nF`#&N-^aE+m",KubD'K_o`\bD\aban]*H;F1A^NUGU_"SF,9F4>JTC0nF!0C@[2a2V69et1B`5D."m<As(ne:K%>>hP7_U)#t7fq,-TUMYtS4X"b6k+J:(H=_iH(.t>[@WIAGbU1.V5nj7C#):'+n11GD<t4WMB],RiNR0Y;iC]$8a'K2.RnLrgIJe<%ZfQ+/C(f_>;^7l7PJ9?j2#[S7aU,CmMX4&=m?PB3)WSsHdROj?0n)_Br?L5#_S*mH#K?np@'tBi>,WPYSL%<<GRM_&NE8$Y!o#_M%gAC)?'63()8,G7\_T!J`@o]&"7&&sn8'-SSj00F=P^Vi$c=dbr_t,*/_*4*bE;gjrh2LL-?/;[]l@PHdm5UoLj3=^n!Ob\?ot+am%7q/ZX[/`%\f,gDMAaKc?%BT6T3XGb95(/'>TVOi3)c&hZ>E:2)Y_Z:u-u&dCN>k?sf9H;N"7EXcKJ^H,&0=@11<hJO['ep.ViDuH%\S)%?gESm9e2N1<2#9G.eOcS?O[q(demO,[8g?c(]Y<G%!=[^C!Oi%JbX1p(B:MK&W^ZN\UY\+cek)oAlB%oW+WiE;kM+&3YF.<7%C-;A4.Ld!M9h-M[R\H[D+KY[6,8\c;iT;$g`=6$IM2DAfYUn>ee"+u`n!HYX)%XD7l,;3f):dJp[`YM`f:=_l?rT7ORc)V9RV+@H%O"8r6-f(lL0WT>P9l+<40iEc7jHW;tWH&D&)2:l,Ch@I^Wp9qU8rGQ(EJtmP,ijT$COB5<TOL=i4Bmlrg_)(PO>Q>k&oIe-/I`B!%MFb[<IZL'iiN0q8NNuZfHcm^0=/%s)!*.K20)T!VX>Ti1+=V@K.V`-)<i+S=&A_/M%)Q,Qn/%bZ+ef61Ec$2pMYn..ETfZ.0Z'TE%:sc7'Go!RJ[J+/K,jo^>0Xk*feBsgg#NS*Y`,R)n&2Tb0Y0^i=e$YUSoJNA5AK](<NZR_9"_g"],gW;G9X4A13m^)X5A07%0Ja?-%d:?jfYtAM_ZPo/gL^H9X8&#2<%=/pJR+mJV_WZ$h?.l:P@!Q'N<uI*\)Kd,#?:H*H\=44OK$#6^=QXa@S?n/N=UgZ6't8kI?)@B%%CbuOu@e&!nis+DBFoJ@qN?e-l8M]RAr^#qSn89?q(.POt'P,"%56MIK@(n!5EXK""k?G$mq0!TEB^3%nN-)ia>)O0kCk(M3'4>L^%=f-dc[L%8EG@54k&10f?@ne6riD2I#j(WWm-N"O</u$)6?>Ub\<c221ZLJ.+)OnCf337YPq`THo;@Q@+V5+,Z<O%L^1$dntRC*9L%#TtCJA9$&%:15HA=)2\D><pGkVjJH;kGZB##F^2\"@$*4!D6]0.I'PMPZlaTD!A15[:s[?`MT,`&92n7+`L86dc$UHHT@e`b5d;H%<C2#R^ePT3Wg!n;rY8hR,9f,^SUKPZ[\k6iZaoF<>k:u:*8=pWGVM$;^-l'?=hC[q`_JL#P#q$k^/nu)^5@/fXeRSOi4u:H5CuL/%H5-s_&auE05V%oM5lGpWia/Y]r6/p=_m"Onmi*ig/-3OLO9heh>S9SkBb%XRV=XWfSsn5+\[eKY:o\a>TGeM*S'eT3F*u<bn-5VV%ge<OoG,lXWr\oNR3N76[1/2$F8(B`Jb,q*?0@kM+8^VgZ'$)sU*pk<!:lZ:,#FLV+N';RtdV[C,^GN1Gf;."#Fr7/NS`<Y!VAN:i%3J3KZ??`.>_D23b#oUO?<tJ)kYV^Mo*g_u_>&K$\npjW5Ut7s@'hjm9^L3+9Mfn=D$e7:B,?g+BNd2RKNKS5tjBM"3:LRnp2XB;O%9=OP@NE]VdbBK]f0jq2kJK`Y*?6)Y=6#mE4btISmSkL4lC8./]`hf.rL=UXFB)t./g[m9V%8aC\JQRq-l!bPg>tbf#NI=lBhFBJm%Q*<o4E`mt/hMTio4cd5"[fJ/leXp6aD<CC9TePce3/==4]Ilo1=OA;?Y^@X?!C_0eii3,]:[CulCa!O`LDPW0d%S)B-+G5Ya^KP7%&U6a]Rm-Msb&SR?fbL;&O;SBd?1L2:4;>\DCQP1E)Lhi_/*PDi$hPJPY"fO#O:4-#*(ZAWK30+i'K(4Td\>Gai1J$E&&5$iXhl%D%X`3R#P)=7Q5<qNps$9sJ3qm`IH#JVpI4`W*iG483E%PhYFHHa'VC,BD&'uA&UZ3%]TW0EOk3f9iL\"bKarWhcV2.:ght)C7BH1.'%B&i*D/Fr2fe6NkMHZ`A!mdj76TeG$+5u+*q`rbq/+!u8pDHH5B;=2(.Zj+q5#]]9$h!^n_&c#Yt6>mO`730N1")6BS:TZ8Hh2QU8%J#PGD"LkJ1"hNuhdu2dTl,>8hgC=)-?J4dNZm>d]'hC3$:S+AA#ZOit^^8qb<CEL'"]>caPF>@1Dm*CM<R=W!>^,7VHS`eE&FjW4%W;ilhnHYZmgp]?%h?.u61D):tNr*<!<7%"\=%oY[eUF:\qY_DQ?UlTODHB!</LH<G[@7[r@`-9*OeNZ@`(@AQQhaZU[7[G>QV),6%e14e3[B/3nN/O[Z[lpIfg=Pa1DtNPp7$$`Gh.=C')a.aJs!PB3"JDuK"JY&fH\%fG/[,*5X8Il&HHts]jd[0k]KJ.^f]g&@$30T=%UZ^\FmU`5$GN`BBdGb9qU2j[o>FhFaLHBk`Hr0YW4mDK]BAbN>5/`QZB502ra6n.3TM)&Xgh/,2M&m>#^ct:aObA.a3>"Eo(H$HR%eXNQK!="*d,ApIQqHnkBoU%nci@oS<<Y]$H?j;ZoKLE(9#0Zde-$mSYcKJtHJ()G+%nB=PN[u'aIHO6~>%AI9_PrivateDataEnd