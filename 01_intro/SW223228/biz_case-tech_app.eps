%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.2)
%%For: (kyle Hamilton)
%%CreationDate: 6/4/22
%%BoundingBox: 0 0 884 332
%%HiResBoundingBox: 0 0 883.2291 331.8032
%%CropBox: 0 0 883.2291 331.8032
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.2.1 x197 R agm 5.5 ct 6.4%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 7420 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0CFF7D7DA87DA87D7D52A8527DA8A8277DFD04A87DFD04A8FFA8%FFA8FFA8FD62FFA87D7DA8FD067D52A8A8527DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DFD04A8FFA8FD74FFA8FFA8FFA8A87DA87DA87DA87DA8A8%FFA8FD53FFA8527D52FD087DA8A8527DFD08A8FFA8FFA8FFA8FD05FFA8FF%FD04A87DA87DA87DA8A8FFA8FD4EFFA8FD067DA8FD057DFF277DFD0EA87D%FD04A8FFA8FD07FFA8A87DA87DA8A8FFA8FD52FFA8FD17FFA8FFFD04A87D%A87DA87DA8A8FFA8FFA8FFA8A87DA87DA8A8FFA8FD48FF5252527D527D52%52527D7DFF52A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8A87D%FD04A8FFA8FFFD04A87DFD04A8FD42FFFD05A8FF7DA8A8A87D7DA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8A87DA87DFD07A87D7D7DA87DA8A8FFA8FD3BFF7D5252527D7D7D52%7D527D52527DFF7DA8FD04FFA8FD13FFA8FFA8FFA8FFA8FFA8FFA8FFFD07%A8FFA8FFA8A87DA87DA87DFD04A8FD36FFA8FF7D7D7D527D7D5252527D52%7DA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A87DA87DA8A8A87DA8A8A87DA87DA8%7DA87DA87DA87DFD0BA852A8FD25FF7DA87DA8A8A87DA87D7DA8FF7DFFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FD05FFA8%FFA8FFA8FFA8FFFD0EA87DA8A8A87DA8A8A87DA87DA87DA87DA852277DFD%21FFA87DA8FD077DA87D7D7DFD04A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD0AA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A87DF8A8FD21FFA87D%52FD067DA8A8A87D7D7DFFA8FD23FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFFD0EA87DA8A8A85227A8FD24FFA87D7D7DA8FD057D52FD%04A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFFD0AA87DA8%A8A87DA87DA87DA8A87DF8A8FD047D52FD047DFD1CFF7D7D52A8FD077DFF%A8FD25FFA8FFA8FFA8FFA8FFA8FFFD0EA87DA8A8A87DA8A8A87DA8A8A87D%A852277DA87D7D52FD047DA8FD12FFA87DA8FD047D527D7DA8FD087D52A8%A87D7DFFA8FFA8A8A8FFFD0EA87DFD07A87DA87DA87DA8A8A87DFD07A87D%A8A8A87DA8A8A87DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87D7DF8%A8FD1BFFA87D7DA8FD067DA8A87DA8A8A87DA87D7D7DA8277DFD0DA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8A8FFFD0EA87DA8A8A87DA87D27A8FD26FFA8FFFFFFA8FFFFFFA8FD0DFF%A8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8%A8FFA8A8A8FFA8A8A8FFFD0AA87DA87DA87DA87DA87DA87DA87D7DF8A8FD%21FF7D52527D5252527D7D7D527D52527DFF52FD04A8FFA8FFA8FFA8FFA8%FFA8A8A8FFFD05A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFFD15A8FFA8FFA87DA8FD22FFA8FFA8FFA8FFA8FFA8FFFF%FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8%FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFD0CA8FFA8FF%A8FD31FFA87DA87D7D52A87DA87D7DA8FF7DFFFFFFA8FFA8FFA8FFFFFFA8%FFA8FFA8FFA8FFA8FFA8FFFD05A8FD0FFFFD05A8FFA8FFA8FFA8FFA8FD3A%FFFD0C7DA8527DFFFD07A8FFA8A8A8FFA8FFA8FD07FFA8FFFD07A8FFA8FF%A8FFFD07A8FFA8FFA8FFA8FFA8FD3CFFA8FD047DA87DA87DA87D7D7DFD0F%FFA8FFA8FFA8FFA8FFA8FD07FFA8FFA8A8A8FFA8A87DA8A8FD05FFA8FFA8%FFA8FD3FFFA87D7D527D7DA8FD047D52A8A87D7DFFFD05A8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFFD05A8FFA8FFA8FFA8A87DFD04A8FFA8A8A8FFA8FF%A8FFA8FD60FFA8FFFFFFA8FFFFFFA8FFA8A87DFD04A8FFFFFFA8FFA8FFA8%FFA8FFA8FD48FFA87DFD0452277DA87D7DFFA8FFA8A8A8FFA8A8A8FFA8FF%A8FFA8FFA8FFFD06A87DFD04A8FFA8A8A8FFFD05A8FFA8FFA8FFA8FFA8FF%A8FD48FFA8FD0FFFA8FFA8FFFD04A87DFD04A8FD07FFA8FFFD05A8FFA8FF%A8A8A8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FD34FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FFA82752A8A8A87DA8A8A87DA87DA87DFD04A8FFA8FFA8FD07%FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFFD07A8FFFD19A87D52A8A8FFA8FFA8%A8A8FFA8FFA8FFA8FFA8FD14FF527D2752527DFD06527DA8F87DA8A87DA8%A8A87DFD04A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8%FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD06A87DA8%A8A87DA87DA852277D7D527D5252527D7D7DFD0552FD16FFA8FFA8FFFFFF%A8FFA8FFA8A8A8527DA8A8A87DA87DA87DA8A8A87DA8A8A87DA87DA87DA8%7DFD06A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFFFFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FD18FFA8FFFFFFA8FD13FFA8FFA8A8A8FFA8FFFD04A8%7DFD0AA8FFA8FD07FFA8FFFD06A87DFD04A8FD11FFA8A8A8FD067DFD20FF%7D52277D7DFD04527DA87D7DFFFD05A8FFA8A8A8FFA8FFA8FFFFFFA8FFA8%FFA8FD05FFA8FFFD08A87DA87DA87DFD04A8FFA8FFA8FFA8FFA8FFA8A8A8%FFA8FFA8FFA8FFA8FFFFFFA8FD05FFA8FFFD047D527DFD21FFA8FFA8A8A8%FFA8A8A8FD0FFFA8FFA8FFA8FFA8FFA8FD0FFFA8FFFD0BA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DA8FD22FFA87D27FD04%527DFD05527DA87D7DFFA8FFA8A8A8FFA8A8A8FFA8FFA8FD07FFA8FFFD05%A8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FFFD0CA87DA87DA87DA87DA87DA87D%7DF8FD057D527D7DFD1CFFA8FFA8A87DA8A8FFA8A8A8FFA8FD0DFFA8FFFF%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FD13FFA8FFFD0AA8%7DA8A8A87DA8A8A852277DA87D7D527D7D7DA8FD1FFF7D522752A8525227%7DA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFFD15A8FFA8FFA8FFA8FFA8FFA8FFFF%FF7DFD2AFFA8FD05FFA8FFA8FD17FFA8FD07FFA8FFA8A8A8FFFD07A8FFA8%FFA8FFA8FD3BFFA852FD067DA8FD067D52A8A8527DFD14A8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD07A8FFA8FFA8FD38FFA8A8FD057D%A87D7D7DA8FD057DFF527DFD05A8FFA8A8A8FFA8FFA8FFA8FFA8FFFFFFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFFFFFA8FD05FFA8A8FD29FF7D7D7DA87D7D7DA8A8FF%A8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD06A87D%A8A8A87DA87DA87DA87DA87D7DF8A8FD077DA8FD20FFA87DA8A8FD047DFF%A8FD2DFFA8FFA8FFA8FFA8FFA8FFFD13A8FF7D52A8A87D7D527D7D7DA8FD%26FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FF%A8FFA8FD3CFF527D7DFF277DA8A8A8FFFD07A8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FD42FFA8FF%A8FFA8A8A8FFA8A8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD49FFA8525252%A87D7D527D527D7DFF7DFD70FFA87D527D52527D7D52527D52527DFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FD54%FFA87DA8A8FD047D52FD047DFF7DA8FD04FFA8FFFFFFA8FFFFFFA8FDD7FF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.b0f8be9, 2021/12/08-19:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator 26.2 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-06-04T13:01:34+01:00</xmp:CreateDate>
         <xmp:MetadataDate>2022-06-04T13:01:34+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2022-06-04T13:01:34+01:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>96</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAYAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FVK7ure0tZru5kW&#xA;K2t0aWeVjRURAWZifAAVxV5klp+XiSNFF57kjglkllSx/SMPoxerCI2jaM/YUc+XFqbtiqjc+XPJ&#xA;17JdO/5k6i1pNxRoItVhW3iLRSOgUoAqkJCzip34nlUYqqDy75UXU/rR/MfU/rC8LUp+lYuNV4KF&#xA;IpT7ZH+yah3NMVQ9v5Q8oD8zfMOpp5piOq3S/wCl6VwUNBvH1fnv0HbvirI/8P6P/wBX2P8A4X/m&#xA;vFV/+HrMUMWuxgdqkCn/AA+Kr10O+r+411GY7gCVht47M2Kqq6V5vTeHU1lr/wAWM3f/AClOKrvU&#xA;8+QdUWcD/jGf1cTirv8AFHmG3/3s0s8R1YK6fieQxVWt/PmnMQLiCWEnqRRwP1H8MVTS18x6Jc09&#xA;O7QE/sv8B/4amKpirKwDKQwPQjcYq3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUL&#xA;36i8Btb30zDdgwGGUrxl5ggx8W+1yFdsVeZX+jvba1fW9j+WemX0UCzTWd/ytIS8lKKjI6s9ZaD9&#xA;5sN6fsnFVCG3vP0bcPpv5YabIFWARKk9mUmKOC0Wy0VojIwD1IqCfbFVHTbdpbqa3t/ypsbR4Jg6&#xA;+pPaDjUAGURLFVTRaDj123oa4qy2Dy5ZL5u1O/PlFEkuF+PWvrETG5+zsYeXJencdsVTZtIs2/6U&#xA;oH+rIi/qYYqsOh6edm0RqeKyp/1UGKrG0HSiaNo86/6kin/mbiqg3l7RqD/Q76Co/Z+L9RfFWv0T&#xA;aR7xX+oW3cBo5aCp9lXFXKL+LaDzChI/ZuRx+/nyPbFW3TX5l/eQWGqL/MOJJ9+q4ql11Z2YqbvQ&#xA;7i1I6yWzll+4gr+OKoSFLONq6fq8lq/aOZXj+9k5LiqZW+sebIRVDFqMY7xlZD/yTIb7xiqLi89o&#xA;jcL6ykhcdeJr/wAK3HFUzt/Nmgz0H1n02PaRSv40p+OKpjDe2c4/czxyf6jBuvyOKq2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxVjPnK28jX4t7PzPdW8Ii5zxRz3At6q6NAxNWSoIkIxV4tJ5U0DTr&#xA;67udPu/KqTRTLLayTarc1b0nkeRSiTn4oyF4jjUDatdwqqy+TtJljuo4r7y3aXNxax/pBYL+64L9&#xA;Xf1p5olaUSNxgjibl9nqcVQ1n5K0qPVrWSK48q+oLaNZ0k1K+WUzARs7qfWBoxIK1HcGhqSVXt9v&#xA;ZWo8y3062OniZ1o9wt47XLj4f723MIWMbdnPbxxVNTAp/wB0Q/RKw/UmKu9L/iuP/ke//NOKrhBL&#xA;/vkj/VuJKfwxV3oyj/dUviCJ2P8AxJsVdxnFaJcD5PG3/EjirR+skUb16HsywMP+FxVDSWdvJ/eW&#xA;8ZJ6s1qSfvQ4qp/VYk/u+cPuslxCP+BKsuKqNxBHKKSTLN1+GYW0v/EvRf8AHFUBLoFrIarbpyP7&#xA;UPqxn32X6wuKoeXTryNAouZ1Tp6cpjmT7pGj/wCI4qgZdPuDu0MM3yjljJ/5FhUxVByWip1iKsP5&#xA;JUbf/VpX8cVXRzX8H9zPcxgdKcgvWnUNiqumv63ENr+Sg3+OrE0/1gcVVk8268P+PlWUDuiVP4DF&#xA;VQeddbCjeI+5T+hxVUHnXWqbrAPmpr93LFWK6h+a/mqH8y/Lnl6M2w07VCgugIzz+J2U8WJ22GKv&#xA;ZcVdirsVdirsVdiqndXVvaW011cyLDbW6NLNK5oqIg5MzHwAFcVSxvOHlRVDNq9oqGtZGmQIpBC8&#xA;WYmitVgKNviqRa3rH5Q6wwGq6ho95JIFgWVp4WfjyPwCRW5ABieVDtXfrirA/MGmWazzXGh2/k6f&#xA;Rufr2z3KxU+qSARsVmRHjBkmEiMW29wK4qp3FutnqMi6ZD5FAuIFd7e7jEJWOWlvcKrqAGDyclbk&#xA;SegOKoK1iN3fxpOnkEmaCNuMbPDM0fqAwskgEclOAVOPsNiDir1W3vtJ/wAU6hF9c0L6wi/vIoyn&#xA;6QX7P+9Hx1p9HhiqcfW7D/losfvX/mrFWjc6cRQ3FiR7lf8AmrFVvr6Z/v6w/wCE/riqw3ukDrPY&#xA;j6F/rirX13RgNp7AAdgF/riq39JaN1FzZj5Aj9RxVY2r6Mp/3qgH+qJaf8KaYqt/TujioF8o9gbk&#xA;D8Diqw+YNL/ZumNO4FwwP3kjFVFtZ01xyDM/t6LNX/gsVWnUoQtUiuAO3C2UfjTFVKe8Y7/Vrtq9&#xA;njIB+7FUO94VSrWsyjbj8IA/E4qhGuoXJ5W7A9wSg6/M4qoNLCQaQk18eI/EHFVAuJDy9PltTkWI&#xA;/H4cVU3DAfCFXtsyn9W+KqZjcAHgwHicVYHqn/k7vJf+vF/ydfFXrMx/PGO5ZbZNAntDJUPM9yko&#xA;QqKgcFKj4+XGoY0pWpriq60/5Xclqq3I0GS6RCeatchHkL9GHCvHh3FDXseuKsy0o6odOg/SwhGo&#xA;8f8ASfqvL0ef+Rz+KnzxVFYq7FXYqsuLeC4gkt7iNZYJlaOWJwGV0YUZWB2IINCMVSaPyN5PSKSE&#xA;aPatFLK0zo8aupkdldjRq/tINumKsU8y+WLfTLv0tB/L3TtYtpk9We4ZreAKxdpJU4OrMxYxR8aC&#xA;gY17Yqll0vmIehZx/lNZGyiHMAXdmYwI+TKgjEa0NaFetCem2Ko2WHXJookb8ubHhIkMklnJLbEJ&#xA;Ibl3k5SqrK3AKJNl+03zxVDGy1Q31sT+VVi9uLaMGQ3FmZIXoOcXxJQqo2FNjTFUwttF0D/Hus3Q&#xA;8m3yXkq/vtbMjmC6+xsiNLwH0KOmKsgOn6X30GcV7ih/U5xVa1lp4HwaLPXp9hD+vlirjaWo/wCl&#xA;YR7SRwgf8RXFW0jRTUadYddld0jb/jfFUQqSsNtEs2945UcD/kmp+4Yq7lboSGt9Otye0lUJPyaN&#xA;MVd69vGTS402NiKfBHyNfocYquE7E/u5y1f98WT9Pm3IYq4teha8rtVP7R+qwD8RXFVPjeSCoZ28&#xA;T9Zmf8IEC/jiqg9s7kgurEdQPUl6eIaZj/wmKoK4/RsNRNNGp9hCT9KmMPiqjyhI5QW80q0NJYke&#xA;Nd/c8FxVTZLkniIKBjX45Q1enZTJiqkbK9kJVY05UpRQxP3EKcVX/wCHdZl+zCfYNGF2/wBkTiqo&#xA;PJ2tv1VF+bL09qFsVbHkbVyBWWNT/rV/40xVjt9+UHmaf8xfL/mVbu0NjpLIbiN3lEzcXZjwURFT&#xA;s3dhir17FXYq7FXYq7FXYq7FXYqh9Rums9PubtYXuGt4nlW3iFZJCiluCDuzUoMVeDT3t2LhrcJ+&#xA;YNlyQJKkCqIozFy5mNqUJPXltz5A7YqmDWqrxks/8bW/1uys4nCSencEpMsIkkjNFSQJbEu3IbP7&#xA;4qoOLsahE0V35+5zQJMtzIokiUyurvHJChj4sqbUBAG9F8VWfWzW5866so8yas8gX4tKNrN9Vg+x&#xA;vFIYfTb/AGLHriqcsIS1G1W+B8DG6j8I1xVv91X4b+5PzE1P1rirQMYr/pcrkfzSSx/rl/hirv8A&#xA;R+hhMlO5vT1+XM4q01lpj1MmkxPTctLIkn8ZG/DFVpt/Lw+H07S1P8tGU/d+6riqvFYyKtbG7njH&#xA;7KwRIsf3TAr9xxVD3eoXtipN9LBKB3adoZKf8YULq30NiqGg8wxTsfqNjcXEi9WhgWNPpeTm/wCG&#xA;KqxbUbhgs89rZFvsxOWubj6Ek2+4YquOk28x4zPc37DqkkhSMf7COnH5NTFVe209EJFrFHH2/wBH&#xA;Rfxk7Eezn5YqjF0bm3KZvi8a82/4IgL964qiY9MsoxT0w3+tuP8Agfs/hiqJVVUUUAAdhtireKux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxVbJLHEheR1RBQFmIA3NBuffFW2dFIDMAWNFBNKn2xViOseX/P11&#xA;qNzNpPm5NPtncstkbGGf06xhVTm7FqfCH6dS3YiiqBTyl+Zial6o89Aw8AqWrafA1UWnxMS27E/a&#xA;YUrXam2KqsPmrTz5w1TTj5t5y2q/Ho31NV+rbrv6/Cr9fHviqcfpux/6vf8AySX/AJoxVa2vadvX&#xA;WWNOwh/omKrBrduR8NzPOaV+C3m/41ZcVcdRuX2isruUdw8UoXw6vNTFVvDW5SDHolqPBrjiKfcz&#xA;nFV/6J8yyih/R1qv/FULM1P9ltiqHk8pRA8r+6d2bYiO5e1Vv9jEob6K4q3Fo0NgPUsbfgQdpbhw&#xA;w+hplEn68VVpW1uZP38Erou4kX0goHj1jmr/AKtMVUITcPWOELegn44p4zGn0lWkd/8AZBvmMVRK&#xA;mJFC3ds8NNhGnqxwj5Kqemf9kTiqOF9IgHH1gB0DohUD74zirf6YKbOUPzDJ+r1MVd/iC1FeQJps&#xA;ShqP+GCYquHmDTj1Yr86H9ROKrh5g0c7fWQD4EMD+rFW/wBO6PWn1pAfAmh+44q2Nd0Y/wDH7CPm&#xA;4H68VQkvnPypFqltpUmqW66jeU+q2vMF5KkgcQPcYqm6TQyGiOrniGopB+FvsnbsabYq168NZB6i&#xA;1i/vRUfDUV+Lw23xVqG5t5kEkMqSIQGDowYcT0NR22xVerK6hlIZTuCNwcVbxV2KuxV2Kpfr2haZ&#xA;rumS6ZqUbS2c3EyIjvE3wkMKPGVYdOxxV5x5s/Lf8mvLVumtazYTojzFfXS4unYMIXc1AkrThEx2&#xA;6++KpVcJ/wA48anpZvV9a5t7ahRYG1BXpCYYBxAK9BLEPH6VNFVBk/5xwM5tIrmWC6iHrJMn6QZ+&#xA;MrJIxVnVwVai9R3NN64qm9t5N8oH8zfMGpL5nibVbtf9L0rgoaDePq/PfoO3fFWS/wCHNHoQmrj6&#xA;FqPwbFV0fl+zAJj1UkdKiCRv1Niq8eXJiwMN80gPQejT/ib4qv8A8M6xy+Bo2HjMOP8AxBnxVSbR&#xA;NaT4WuNPDjqn7xmP3UP4YqtGia8djbrcL0+FhAP+GRX/AAOKtjSNVhHOTTEjTbmYZICferuoJ+7F&#xA;XRmNfij0W4dj/u9ovVH0MGqw+QxVUWTRuXK+Tgw34S2sqov+xDt+NcVVze+UpBxllsT/AJMnKPf2&#xA;54q0f0DT9wYPolYqR/z0QgfQcVWC0U72+lRuezwyMi/gsqE/PFWzHqi9dDSnYuwavvWMsf8AhBir&#xA;g7dJ7CO3PsAx/wCBMgb8MVXrY2koq3FCexjhU/8ADyHFVYeX7SRSSkrj/IW2/gTirY8r6X1MNx90&#xA;X8Birj5W0k9YLj6PTH6hirHb/wDL7yy/nfRtYax1U31jwNtPEYjaIVdj++r8ffenbFWHmz/L+RON&#xA;x+X+vlLWW4I+C5eMBU5MyEyD4m9EBQKLyPWpOKp75C8kflvrEUklr5Z1HSJNPnZ1i1E3MMvOenxf&#xA;HIWJKRrXcih6nFWRj8m/y99WGU6czSwPDLG5uJ687dOEZ2f+Ubjoe4xVM/Kv5feVfKryPolo1u0s&#xA;axSFppZaopqo/eM3TFWRYq7FXYq7FUHq1vqE9kY9PuFtbsSROkrrzXjHKruhUFdnRSnXvirznX9O&#xA;/M/Q9Lm1LUvO0Etjaw/vZv0VA0nrSuI42WIUHw8hvz7moxVjemeZbjWL3/RvPNuuo2ELG6K6OrRG&#xA;ORY7dh6jLD+7juYy55AVqvhiqEtPPVb0fU/zGh5pDHGlrJo5SOgEJdjIqPQEuStFp2rxAoq9cgvr&#xA;xvMd9B/ifTpY0HwaOsKfWLf7O8ji45N17oOuKpibi7Fa6hbEeyb/APE2xVomY1LXsdfZF/iDiqmY&#xA;VcfHSUnqAriv/ARjFVkkGnRisljFTxl9X9bx4q6O6QDjbabcMOwt34L97PEv44q559Z6rBJaR/zS&#xA;yxSN9w9Sn44qpJcyFuTXKzON6vbzXFCPD0vTRfoXFVZdRu325c/9WSOGv+xkHMffiqtxdhynRo17&#xA;8udwPvDFR92KqbR+Wz8M9xAx/kdo4/8AhV4fjiqi9l5KqQILXl39JRyPb/de5xVSk0/yqN0gmU77&#xA;xrcAf0xVQKaStfSn1BTt9iTiR9DkYqpPcIKiO81I1H7TxN/HFVFheueSm6enjBExNfoxVSax1tmD&#xA;LFNXrRoR/AKMVa+oea/91pMtOhrx/Dlira2XnXs1xQdvVoP+JDFWK6hpf5qn8y/Lk8T6j/h+NkOp&#xA;hLlhb0EjE+qgfi21OoxVkp/5XtAOEY8vXY5AiWU3aPxNCykIAtVNQDTp74qmGizfmwl9bJrkGkSW&#xA;ksqi6ksTODFGIWLECYqd5eIXZtq19lWYYq7FXYq7FXYqpXYuTazC1Ki5KN6Bf7Ieh48vauKsH4/n&#xA;fGPRDaDOFEnG7YXKO59MGHkgqoHqVDkdV6AYqq8vzentmMlvoqSktGYJTM0JAkYCT4SzHkgUgch3&#xA;qK4qxlPOvm+4hlmN75SS7SKcmNmnMnprJEE9SMt6oSRWrxoDXh1riq6Tzd5wnvPql5qnkeWEv6T2&#xA;pupGYyqylV4Mx+NWBHzoaYqySH/lbH+MNU9T6p/hin+4uvD1K/D9qnx/zdcVTgDzoTubYDxHX8cV&#xA;b9PzcftSR08AVH8K4qsa18wE/vZFUHt6hNfoJA/DFWli1OJixmt0I7gRhq+5DJiq4NdMPjugWJ3V&#xA;SGH3fWP4Yq2qSg8h63LrWK2h/Wef68VVv9MIq36QI772sY/Eriqg7QvVHinl8Y3umY9P5YWfFVI6&#xA;ZYOa/ookn9poWZv+Cd1P4YquGjxUoIngU+CFx/wIjP8AxLFVw0WJVoLq5UfypFKq/wDAgYquXS1j&#xA;NUkkc+BilUfT8LYqqr6qbiC3amw/dvy+9lGKq36WuIxQ2e3ircR9xGKtf4iiUEyQOoBoaMh/WwxV&#xA;r/E+njqko+hT+pjirm81aSvUyD/nm2Krf8X6D/v9v+Rb/wBMVSy4/NHyhB5i0/y+9xKdR1MgWqiJ&#xA;+BLMVFWptuuKpgfPXktRWTXtPiqCwEtzFGeIcpyo7KeJYUB6Htiqra+cPKl1ffULbWLKa95emLZL&#xA;iMyF/i+FVDVY/A3TwOKpvirsVdirsVdirsVdirSsrCqkMNxUbjbY4qk3+GfJ6m7P6NsVLgG+PpRg&#xA;kBAAZNv5FHXFWH6l5agHmNYbHyLpM9o97DJFqrJb1MUqB7m5ZQFcFJPhAFeWxxVPYYtSXzRqEn+D&#xA;bSKBhSPXVnt/Wut12dBH6i/7Jj0xVNAL/eujwjw+OM/wGKtBNTY7aRbL/lM6n9S4quEWqg/DYWq/&#xA;I1/gMVXL+nQP957aML0IYj6fstirRk1ep5SwxjsDMo/5knFVnq3RB5T25bsPrMn6lCVxVwSblUfV&#xA;nP8AMIJZT9/LFVYPqfEcZxQdQtsy/wDE3GKqJnvK0N64buoFsN/kPUOKtenft0nuW27Gn/MlB/w2&#xA;Kt/o7UHr8cwqKUeVx/xCU/qxVx0KdzVpSnyllf8ABsVd/hiFhSSXkO54AE/MknFWx5V0ytW5E+3E&#xA;D/iOKrv8K6Oacoiw8Cf6UxVf/hjRP2rbl82en3A0xVw8saCP+PRfvb+uKrv8OaL/AMsw/wCCf+uK&#xA;oCb8vvJ8+tWetS6crapYUNpc+pLVOJLCih+J3PcYqqXHkPyTcljcaDYTcgA3O2iaoDlwN16cmJxV&#xA;UtPJnlGzuVurTRbKC5ST1lnjt41cSAMOYYLWv7xvvOKpzirsVdirsVdirsVQesRapLp0qaXMkF8S&#xA;npSyCqgcwWqCG6pUdMVeN63+THmbV1W9ubLRxqlw7G/WKa+jiaMoh9KpdyeTx7tsaHbxxVZrH5Re&#xA;fb+NIW07y88IhFoR9Z1RD6KRxKg+246wLU0qaDfc4qpyfkr5sm1Rrw6dokHqqpkeO51ESCVmWWVh&#xA;V3QcmBXoaLTFXrMGiumvXl9+irNBOtPrq3MrTyfZ2eEwhE6dnPTFUxNq/a1h9/3jf80Yq42jHY2s&#xA;NP8AjI3/ADRirvqZp/vNbA/Kv/GoxVwsOlI7ZQOn7qv8Riq9bSUftRL48IqfrZsVX/V5e9zJ8gEA&#xA;/wCI1xVv6oh+08jH/jIw/BSBirhZWnUwqx8WHI/ea4qqqqqKKAB4DbFW8VdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>884.227734</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:ebe915c2-b96d-44fd-ab01-bc5858e09262</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:5bb78829-6f39-4cc2-acec-62ef996aaa6a</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:ebe915c2-b96d-44fd-ab01-bc5858e09262</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ebe915c2-b96d-44fd-ab01-bc5858e09262</stEvt:instanceID>
                  <stEvt:when>2022-06-04T13:01:34+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 26.2 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -331.803 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 331.803 li
883.229 331.803 li
883.229 0 li
cp
clp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 47 /slash putdup 50 /two putdup 65 /A putdup 67 /C putdup 68 /D putdup 69 /E putdup 70 /F putdup 71 /G putdup 73 /I putdup 75 /K putdup 76 /L putdup 77 /M putdup 78 /N putdup 79 /O putdup 80 /P putdup 81 /Q putdup 82 /R putdup 83 /S putdup 84 /T putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 119 /w putdup 120 /x putdup 121 /y putdup 122 /z putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings44 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/space <1C60D8A8C9B854D00D> |-/slash <1C60D8A8C9B854D0D18501A7E07A7DB7C8496D0849EBF5F0BA> |-/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-/A <1C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB29ACC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D4582208BD16D82> |-/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDFA8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D314851DE59> |-/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-/E <1C60D8A8C9B64EDFFB83C6241DB110BEE5AB2FAD9D94B39ED5E81E7411B66E9361DDE78FC667AB91EF9824> |-/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F7F6ED1937D1E8A10> |-/G <1C60D8A8C9B6FF86FBC793890B55178BE49EEC5102DE4765B31919F6E98C7D78C667A3BB4B4E624B689DA4C385DFD1B29DE65FB8AA7AB2EF69B5E095C4AF9914BE00567D04850B7313AA11B0D0EAADB46E151A37395ABF4FDE5690DD208A8203F33BC5AE42ABB3FA5CE6CC7C2FF1141A09489DA9290F5991FC3FADB6E8008CAB5CAA6CE68D612C9A2AD14F1DB3B2ED2760EC1A22B5BECD6F37DA404DC4340669554C25AFCF53AD025C5AA750C1F3F80E3A98BEF6E511E50C5B0BE2D927EF> |-/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-/K <1C60D8A8C9B64EDFF4E9C0F6048EB723B0CED8EE1109108A02369C8B45382285654732A05ADDD12E99CCD504BC058489833BA3AE060EFA> |-/L <1C60D8A8C9B7EF3224EC6E192BD0FEC2445DA87B99CF0E03A72A> |-/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB379AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F80AF5A83421F8F> |-/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-/O <1C60D8A8C9B6FF86E621E1FAD9CC02A23AF5AAF7451327A9277DAE8170AAC8E603A02E3EEFF561DDADE9FD6F6F16B77EE709DD797791A73F1C532C58482F9C51E1EAE7EA6E4D820E6AA1026E7BE345B1C97C5D9EBBEF4840C4188F96B5380E7625249BBAD172254404F6F1CB17CABA1F131B17AAAB56C5D3B94E3AC2C2E9F0A0D079C435D0249DF6C47E18FCF00E7FFE3C519BB35DF797EF47286BDCA762289BE1> |-/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EFBF59B4862165C7DEA15B42BE3811C2CAA25C54> |-/Q <1C60D8A8C9B6FF86FB95E417277EAA9E6222336C4FA400144318C78383A4878AAD7E15CFFEF53A35C8B0DEA160D881360872190186E2C56DAFA44D84884E8D6FB90DBDC8D54D6362F6171B448FF70986707BF5F4B096A9C2A4BEDFBF6A1EDD5DADC741FF9C3CBD743AA1E216B2493243CFEC25A2EF5D712CB6DC5F1BBF19DDA253CF67036E6AFB5A540E4EC3644D2F967525105CFDF3C5BC43534FC725B4030E5B814914D5285095B3636642AF5F2E3B2DDA9EDF47166FC9AB46B169F4E8C022F3D1F22A42E3> |-/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F632B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2BA15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609FBC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D295257B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0B222> |-/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D3927> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/k <1C60D8A8C9B7A73DB90BDE2D32BC36BC1297E20AB90FA9E27E830D444A320C85D226D41FA634DF03A4FEE2FD90BF314563D4BF5C68> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B96470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-/v <1C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D9162B37724F74F272B140D258652D102C2EAC46833C73F9> |-/w <1C60D8A8C9B6079F623B1BE11B16961396A063624588AB070AF82F2F6FEA646F6999B73C9332DE350CB17016778F548397735D109B5E72AA9A92DCB1D7264371419D7043A117419C0FAF4C> |-/x <1C60D8A8C9B7A73DB920A1A3B81DE7234ACAA5546B4C65820CF3C50E1629C5A6423BAA34A2ECA8C7FE4B71726AC6704CC23AF1725AFB30D2892FC1BDDAFEAD7BE7BD65F1051699CCF4B0> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-/z <1C60D8A8C9B7A73DB6C93834605F1D90D79F2E671A4623D994B1E45F8ED5E64C2946ED425A1EC23463E621AF43221A3EAC2BEEDD9B1D3783E2> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SEJDTT+ArialMT /ArialMT findfont ct_VMDictPut/SEJDTT+ArialMT*1 [32{/.notdef}rp /space 14{/.notdef}rp /slash 2{/.notdef}rp /two 14{/.notdef}rp /A /.notdef /C /D /E /F /G /.notdef /I /.notdef /K /L /M /N /O /P /Q /R /S /T 12{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y /z 133{/.notdef}rp]SEJDTT+ArialMT nfSEJDTT+ArialMT*1 [10 0 0 -10 0 0 ]msf71.8208 61.0195 mo(Emotion Recognition)sh79.6089 30.6465 mo(Sentiment )sh126.86 30.6465 mo(Analysis)sh110.747 280.861 mo(Text Games)[5 5.56152 5 2.77832 2.77832 7.77832 5.56152 8.33008 5.56152 0 ]xsh99.6284 221.02 mo(Dialog System)sh145.205 295.144 mo(N2F)sh24.5796 114.533 mo(Kg Completion / Link Prediction)sh104.619 248.681 mo(Entity Linking)sh80.1655 163.709 mo(Relation Extraction)sh85.7124 309.427 mo(Image Captioning)sh84.6089 73.4941 mo(Opnion Extraction)sh116.279 177.991 mo(Annotation)sh53.4712 264.771 mo(Reading Comprehension)sh84.0669 9.13281 mo(Text Classification)[5 5.56152 5 2.77832 2.77832 7.22168 2.22168 5.56152 5 5 2.22168 2.77832 2.22168 5 5.56152 2.77832 2.22168 5.56152 0 ]xsh82.3774 148.522 mo(Causal Reasoning)sh75.1558 199.505 mo(Question )sh117.407 199.505 mo(Answering)sh87.9438 47.6406 mo(Decision Support)sh66.8208 85.9688 mo(Argumentation Mining)sh76.2446 235.302 mo(Language Modeling)sh66.8306 132.432 mo(Information Extraction)sh89.0571 98.4424 mo(Entity Resolution)sh76.2886 321.9 mo(Text Summarization)[5 5.56152 5 2.77832 2.77832 6.66992 5.56152 8.33008 8.33008 5.56152 3.33008 2.22168 5 5.56152 2.77832 2.22168 5.56152 0 ]xsh718.255 216.647 mo(Similarity)sh718.255 99.5771 mo(Classification)sh718.255 278.194 mo(Generative)sh718.256 236.807 mo(Reasoning)sh181.796 232.747 mo
181.796 230.939 li
223.151 230.939 257.933 228.231 288.225 223.678 cv
290.864 223.864 293.464 224.056 296.036 224.255 cv
263.937 229.548 226.754 232.747 181.796 232.747 cv
303.202 223.024 mo
300.845 222.827 298.45 222.634 296.037 222.447 cv
314.709 219.368 331.663 215.58 347.423 211.303 cv
349.154 211.43 350.856 211.558 352.558 211.688 cv
337.355 215.985 321.084 219.829 303.202 223.024 cv
369.126 206.708 mo
367.623 206.578 366.112 206.45 364.588 206.323 cv
367.653 205.376 370.68 204.412 373.666 203.433 cv
375.274 203.505 376.858 203.578 378.445 203.651 cv
375.376 204.687 372.276 205.705 369.126 206.708 cv
383.093 202.061 mo
381.56 201.988 379.998 201.915 378.446 201.843 cv
382.195 200.578 385.909 199.282 389.555 197.974 cv
391.226 197.976 392.864 197.978 394.515 197.98 cv
390.751 199.364 386.961 200.72 383.093 202.061 cv
404.116 194.378 mo
402.537 194.375 400.958 194.373 399.365 194.371 cv
407.722 191.234 415.871 188.008 423.928 184.747 cv
425.208 184.831 426.481 184.915 427.757 185 cv
419.981 188.167 412.135 191.31 404.116 194.378 cv
431.565 183.445 mo
431.207 183.421 430.857 183.398 430.499 183.374 cv
429.894 183.189 429.282 183.002 428.676 182.818 cv
432.773 181.147 436.851 179.469 440.929 177.791 cv
442.072 177.922 443.221 178.054 444.364 178.185 cv
440.102 179.938 435.838 181.696 431.565 183.445 cv
447.802 176.771 mo
446.658 176.64 445.507 176.508 444.364 176.377 cv
445.816 175.779 447.265 175.184 448.718 174.587 cv
449.441 174.893 450.165 175.199 450.889 175.505 cv
449.855 175.928 448.834 176.347 447.802 176.771 cv
453.063 174.614 mo
452.339 174.309 451.612 174.003 450.889 173.697 cv
456.105 171.559 461.343 169.429 466.632 167.321 cv
467.607 167.533 468.598 167.748 469.577 167.959 cv
464.025 170.155 458.525 172.382 453.063 174.614 cv
472.548 166.79 mo
471.556 166.577 470.565 166.364 469.577 166.151 cv
526.498 143.643 590.189 123.928 701.796 123.928 cv
701.796 123.928 li
701.796 125.736 li
592.125 125.736 528.724 144.772 472.548 166.79 cv
.194675 .150179 .156374 0 cmyk
f
701.796 274.071 mo
561.18 274.071 496.614 271.925 425.837 269.955 cv
428.625 269.431 431.395 268.907 434.169 268.38 cv
501.811 270.283 566.718 272.263 701.796 272.263 cv
701.796 272.263 li
701.796 274.071 li
417.388 269.722 mo
404.673 269.374 391.665 269.035 377.885 268.717 cv
381.963 268.219 385.965 267.713 389.921 267.197 cv
402.306 267.502 414.159 267.822 425.837 268.147 cv
423.033 268.674 420.216 269.2 417.388 269.722 cv
364.916 268.43 mo
318.642 267.449 262.856 266.736 181.796 266.736 cv
181.796 264.928 li
181.796 264.928 li
181.796 264.928 li
270.568 264.928 329.035 265.783 377.885 266.909 cv
373.641 267.428 369.318 267.936 364.916 268.43 cv
f
701.796 95.9054 mo
441.796 95.9054 441.796 84.3179 181.796 84.3179 cv
181.796 82.5099 li
441.796 82.5099 441.796 94.0975 701.796 94.0975 cv
701.796 94.0975 li
701.796 95.9054 li
f
701.796 191.01 mo
701.796 191.01 li
701.669 191.01 701.551 191.01 701.424 191.01 cv
601.038 190.988 539.432 182.247 486.623 171.535 cv
487.532 171.118 488.46 170.695 489.375 170.282 cv
541.648 180.754 602.916 189.202 701.796 189.202 cv
701.796 191.01 li
483.904 170.98 mo
479.06 169.986 474.304 168.979 469.577 167.959 cv
470.564 167.569 471.556 167.178 472.548 166.79 cv
477.189 167.783 481.861 168.761 486.623 169.727 cv
485.714 170.143 484.808 170.561 483.904 170.98 cv
466.632 167.321 mo
463.689 166.68 460.757 166.035 457.841 165.389 cv
458.879 165.016 459.923 164.643 460.964 164.271 cv
463.816 164.9 466.696 165.529 469.577 166.151 cv
468.598 166.538 467.607 166.932 466.632 167.321 cv
454.734 164.698 mo
447.991 163.196 441.301 161.686 434.579 160.179 cv
435.779 159.848 436.987 159.513 438.186 159.181 cv
444.734 160.651 451.251 162.12 457.841 163.581 cv
456.802 163.953 455.77 164.325 454.734 164.698 cv
421.845 157.348 mo
416.393 156.148 410.912 154.962 405.332 153.791 cv
406.752 153.487 408.154 153.184 409.563 152.878 cv
414.932 154.021 420.243 155.182 425.508 156.349 cv
424.294 156.681 423.064 157.016 421.845 157.348 cv
401.034 152.896 mo
400.786 152.845 400.53 152.792 400.281 152.741 cv
396.943 151.444 393.577 150.163 390.165 148.898 cv
395.304 149.907 400.351 150.938 405.332 151.983 cv
403.904 152.289 402.473 152.593 401.034 152.896 cv
390.165 150.706 mo
386.177 149.922 382.122 149.149 378.01 148.393 cv
379.38 148.19 380.75 147.984 382.106 147.778 cv
384.818 148.742 387.507 149.72 390.165 150.706 cv
372.474 147.393 mo
360.642 145.292 348.218 143.323 334.923 141.55 cv
337.702 141.33 340.425 141.106 343.13 140.876 cv
355.404 142.633 366.958 144.555 378.01 146.585 cv
376.176 146.857 374.336 147.126 372.474 147.393 cv
316.418 139.281 mo
279.852 135.185 236.592 132.589 181.796 132.589 cv
181.796 130.781 li
181.796 130.781 li
181.796 130.781 li
241.496 130.781 287.493 133.862 326.072 138.608 cv
322.903 138.839 319.691 139.063 316.418 139.281 cv
f
469.577 167.959 mo
468.598 167.748 467.607 167.533 466.632 167.321 cv
467.607 166.932 468.598 166.538 469.577 166.151 cv
470.565 166.364 471.556 166.577 472.548 166.79 cv
471.556 167.178 470.564 167.569 469.577 167.959 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 194.626 mo
602.376 194.626 540.968 192.084 488.507 188.945 cv
486.631 188.232 484.78 187.52 482.926 186.799 cv
536.638 190.092 598.821 192.818 701.796 192.818 cv
701.796 192.818 li
701.796 194.626 li
482.926 188.607 mo
473.432 188.025 464.192 187.424 455.049 186.818 cv
456.109 186.285 457.17 185.753 458.233 185.221 cv
464.57 185.639 470.972 186.054 477.47 186.461 cv
479.281 187.18 481.097 187.895 482.926 188.607 cv
451.879 186.608 mo
447.256 186.301 442.65 185.992 438.038 185.684 cv
435.768 184.987 433.485 184.286 431.209 183.591 cv
431.328 183.542 431.446 183.493 431.565 183.445 cv
439.402 183.966 447.197 184.49 455.049 185.011 cv
453.989 185.544 452.937 186.074 451.879 186.608 cv
.194675 .150179 .156374 0 cmyk
f
431.209 183.591 mo
430.97 183.518 430.738 183.447 430.499 183.374 cv
430.857 183.398 431.207 183.421 431.565 183.445 cv
431.446 183.493 431.328 183.542 431.209 183.591 cv
.383764 .310857 .316075 .00238041 cmyk
f
430.499 185.182 mo
429.584 185.121 428.674 185.061 427.757 185 cv
428.068 184.873 428.365 184.752 428.676 184.625 cv
429.282 184.81 429.894 184.997 430.499 185.182 cv
423.928 184.747 mo
418.287 184.376 412.6 184.008 406.83 183.646 cv
408.319 183.138 409.79 182.631 411.269 182.119 cv
415.17 182.368 419.049 182.619 422.893 182.871 cv
423.974 183.198 425.056 183.525 426.134 183.852 cv
425.399 184.151 424.664 184.449 423.928 184.747 cv
402.319 183.365 mo
385.924 182.353 368.765 181.393 349.913 180.545 cv
352.475 180.067 354.993 179.583 357.494 179.088 cv
375.097 179.927 391.279 180.862 406.83 181.838 cv
405.332 182.35 403.829 182.858 402.319 183.365 cv
.194675 .150179 .156374 0 cmyk
f
427.757 185 mo
426.481 184.915 425.208 184.831 423.928 184.747 cv
424.664 184.449 425.399 184.151 426.134 183.852 cv
426.989 184.112 427.823 184.366 428.676 184.625 cv
428.365 184.752 428.068 184.873 427.757 185 cv
.383764 .310857 .316075 .00238041 cmyk
f
318.803 179.316 mo
281.73 178.05 237.798 177.244 181.796 177.244 cv
181.796 175.436 li
181.796 175.436 li
181.796 175.436 li
242.813 175.436 289.513 176.394 328.612 177.859 cv
325.399 178.359 322.123 178.846 318.803 179.316 cv
.194675 .150179 .156374 0 cmyk
f
701.796 228.615 mo
701.796 228.615 li
701.717 228.615 701.641 228.615 701.562 228.615 cv
628.751 228.601 576.325 222.312 532.879 213.271 cv
534.554 213.011 536.259 212.752 537.961 212.499 cv
580.462 220.993 631.671 226.807 701.796 226.807 cv
701.796 226.807 li
701.796 228.615 li
527.99 212.234 mo
526.294 211.867 524.611 211.496 522.941 211.122 cv
526.116 211.253 529.329 211.38 532.601 211.506 cv
531.05 211.746 529.519 211.988 527.99 212.234 cv
518.44 209.126 mo
516.747 209.054 515.061 208.981 513.393 208.908 cv
499.245 205.52 485.947 201.865 473.045 198.094 cv
475.128 198.097 477.222 198.1 479.327 198.103 cv
492.498 201.869 506.134 205.489 520.737 208.816 cv
519.962 208.919 519.209 209.021 518.44 209.126 cv
466.887 194.469 mo
464.862 194.466 462.835 194.463 460.825 194.461 cv
456.452 193.141 452.12 191.818 447.784 190.487 cv
448.531 190.109 449.261 189.739 450.008 189.361 cv
455.596 191.073 461.217 192.782 466.887 194.469 cv
445.563 189.805 mo
440.546 188.264 435.531 186.718 430.499 185.182 cv
433.015 185.349 435.53 185.516 438.038 185.684 cv
441.284 186.681 444.536 187.682 447.784 188.679 cv
447.046 189.053 446.301 189.43 445.563 189.805 cv
427.757 183.192 mo
426.138 183.085 424.519 182.978 422.893 182.871 cv
420.434 182.129 417.957 181.387 415.477 180.652 cv
416.406 180.326 417.334 179.999 418.26 179.672 cv
421.753 180.716 425.217 181.764 428.676 182.818 cv
428.365 182.944 428.068 183.065 427.757 183.192 cv
412.673 179.824 mo
404.321 177.366 395.81 174.954 387.024 172.63 cv
387.741 172.459 388.44 172.291 389.153 172.119 cv
390.596 172.263 392.039 172.409 393.468 172.555 cv
400.964 174.602 408.272 176.707 415.477 178.844 cv
414.54 179.173 413.614 179.496 412.673 179.824 cv
f
430.499 183.374 mo
429.584 183.313 428.675 183.253 427.757 183.192 cv
428.068 183.065 428.365 182.944 428.676 182.818 cv
429.282 183.002 429.894 183.189 430.499 183.374 cv
.383764 .310857 .316075 .00238041 cmyk
f
375.403 168.988 mo
373.961 168.855 372.511 168.722 371.052 168.591 cv
364.44 166.999 357.647 165.465 350.614 164.003 cv
352.251 163.749 353.886 163.49 355.499 163.23 cv
363.19 164.891 370.605 166.637 377.811 168.446 cv
377.016 168.626 376.203 168.809 375.403 168.988 cv
345.534 162.967 mo
333.605 160.585 320.993 158.415 307.465 156.525 cv
310.094 156.308 312.711 156.083 315.273 155.854 cv
327.774 157.748 339.482 159.88 350.614 162.195 cv
348.938 162.455 347.237 162.714 345.534 162.967 cv
298.948 155.387 mo
266.191 151.217 228.118 148.679 181.796 148.679 cv
181.796 146.872 li
181.796 146.872 li
181.796 146.872 li
232.197 146.872 272.816 149.874 307.464 154.717 cv
304.66 154.948 301.832 155.171 298.948 155.387 cv
.194675 .150179 .156374 0 cmyk
f
438.038 185.684 mo
435.53 185.516 433.015 185.349 430.499 185.182 cv
429.894 184.997 429.282 184.81 428.676 184.625 cv
429.521 184.281 430.365 183.936 431.209 183.591 cv
433.485 184.286 435.768 184.987 438.038 185.684 cv
426.134 183.852 mo
425.056 183.525 423.974 183.198 422.893 182.871 cv
424.519 182.978 426.138 183.085 427.757 183.192 cv
427.215 183.413 426.677 183.632 426.134 183.852 cv
.383764 .310857 .316075 .00238041 cmyk
f
428.676 184.625 mo
427.823 184.366 426.989 184.112 426.134 183.852 cv
426.677 183.632 427.215 183.413 427.757 183.192 cv
428.675 183.253 429.584 183.313 430.499 183.374 cv
430.738 183.447 430.97 183.518 431.209 183.591 cv
430.365 183.936 429.521 184.281 428.676 184.625 cv
.510277 .424994 .425025 .0681468 cmyk
f
701.796 196.434 mo
615.008 196.434 557.194 196.391 509.006 196.333 cv
507.243 195.734 505.489 195.128 503.751 194.519 cv
552.999 194.58 611.834 194.626 701.796 194.626 cv
701.796 196.434 li
503.752 196.327 mo
493.145 196.314 482.978 196.3 473.045 196.286 cv
470.979 195.682 468.935 195.079 466.887 194.469 cv
477.193 194.484 487.696 194.499 498.654 194.513 cv
500.343 195.122 502.041 195.727 503.752 196.327 cv
466.887 196.277 mo
456.629 196.263 446.558 196.247 436.457 196.232 cv
437.64 195.633 438.829 195.03 440.012 194.43 cv
446.931 194.44 453.84 194.45 460.825 194.461 cv
462.835 195.067 464.863 195.675 466.887 196.277 cv
432.896 196.227 mo
421.908 196.211 410.834 196.195 399.364 196.179 cv
400.958 195.581 402.537 194.982 404.116 194.378 cv
415.136 194.393 425.817 194.409 436.458 194.424 cv
435.266 195.028 434.089 195.624 432.896 196.227 cv
394.516 196.173 mo
385.553 196.161 376.331 196.149 366.698 196.138 cv
368.842 195.545 370.963 194.945 373.069 194.338 cv
382.13 194.348 390.866 194.359 399.365 194.371 cv
397.763 194.972 396.134 195.578 394.516 196.173 cv
360.038 196.131 mo
314.719 196.082 260.031 196.047 181.796 196.047 cv
181.796 194.239 li
181.796 194.239 li
181.796 194.239 li
263.903 194.239 320.072 194.277 366.698 194.33 cv
364.499 194.939 362.281 195.538 360.038 196.131 cv
.194675 .150179 .156374 0 cmyk
f
399.364 196.179 mo
397.762 196.177 396.134 196.175 394.516 196.173 cv
396.134 195.578 397.763 194.972 399.365 194.371 cv
400.958 194.373 402.537 194.375 404.116 194.378 cv
402.537 194.982 400.958 195.581 399.364 196.179 cv
.383764 .310857 .316075 .00238041 cmyk
f
473.045 196.286 mo
470.979 196.283 468.935 196.28 466.887 196.277 cv
464.863 195.675 462.835 195.067 460.825 194.461 cv
462.835 194.463 464.862 194.466 466.887 194.469 cv
468.935 195.079 470.979 195.682 473.045 196.286 cv
f
701.796 230.423 mo
603.058 230.423 541.82 226.247 489.597 221.068 cv
491.603 220.659 493.62 220.254 495.654 219.852 cv
546.536 224.75 606.754 228.608 701.562 228.615 cv
701.641 228.615 701.717 228.615 701.796 228.615 cv
701.796 228.615 li
701.796 230.423 li
483.705 220.476 mo
478.433 219.939 473.247 219.394 468.11 218.842 cv
470.259 218.467 472.419 218.094 474.588 217.723 cv
479.522 218.243 484.518 218.756 489.596 219.26 cv
487.624 219.662 485.654 220.069 483.705 220.476 cv
461.744 218.152 mo
442.703 216.076 424.213 213.936 404.702 211.912 cv
405.746 211.419 406.782 210.926 407.82 210.43 cv
428.345 212.583 447.82 214.854 468.11 217.034 cv
465.978 217.406 463.86 217.778 461.744 218.152 cv
401.548 211.587 mo
389.748 210.377 377.537 209.212 364.588 208.131 cv
366.111 207.66 367.623 207.186 369.126 206.708 cv
381.546 207.777 393.3 208.921 404.702 210.104 cv
403.651 210.602 402.606 211.093 401.548 211.587 cv
359.902 207.746 mo
349.722 206.923 339.079 206.154 327.792 205.455 cv
330.035 205.001 332.234 204.542 334.428 204.071 cv
344.982 204.765 354.994 205.521 364.588 206.323 cv
363.038 206.801 361.475 207.276 359.902 207.746 cv
320.719 205.031 mo
283.244 202.86 238.766 201.47 181.796 201.47 cv
181.796 199.662 li
181.796 199.662 li
181.796 199.662 li
242.385 199.662 288.861 201.235 327.792 203.647 cv
325.467 204.117 323.099 204.581 320.719 205.031 cv
.194675 .150179 .156374 0 cmyk
f
364.588 208.131 mo
363.037 208.001 361.475 207.873 359.902 207.746 cv
361.475 207.276 363.038 206.801 364.588 206.323 cv
366.112 206.45 367.623 206.578 369.126 206.708 cv
367.623 207.186 366.111 207.66 364.588 208.131 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 228.615 mo
701.717 228.615 701.641 228.615 701.562 228.615 cv
701.641 228.615 701.717 228.615 701.796 228.615 cv
f
181.796 279.21 mo
181.796 277.403 li
262.856 277.403 318.642 273.627 364.916 268.43 cv
369.318 268.523 373.641 268.619 377.885 268.717 cv
329.035 274.682 270.568 279.21 181.796 279.21 cv
389.921 267.197 mo
385.965 267.099 381.964 267.003 377.885 266.909 cv
406.284 263.442 431.421 259.491 457.388 255.661 cv
459.465 255.958 461.555 256.256 463.643 256.551 cv
439.182 260.116 415.716 263.831 389.921 267.197 cv
469.988 255.634 mo
467.866 255.339 465.748 255.041 463.644 254.743 cv
468.889 253.979 474.182 253.221 479.553 252.476 cv
481.461 252.818 483.369 253.156 485.299 253.495 cv
480.117 254.197 475.033 254.911 469.988 255.634 cv
491.19 252.706 mo
489.219 252.37 487.245 252.028 485.298 251.687 cv
538.47 244.474 600.345 238.558 701.796 238.558 cv
701.796 238.558 li
701.796 240.366 li
701.796 240.366 li
701.59 240.366 701.407 240.366 701.201 240.366 cv
603.824 240.389 542.96 245.869 491.19 252.706 cv
.194675 .150179 .156374 0 cmyk
f
377.885 268.717 mo
373.641 268.619 369.318 268.523 364.916 268.43 cv
369.318 267.936 373.641 267.428 377.885 266.909 cv
381.964 267.003 385.965 267.099 389.921 267.197 cv
385.965 267.713 381.963 268.219 377.885 268.717 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 189.719 mo
181.796 187.911 li
237.798 187.911 281.73 184.566 318.803 179.316 cv
322.123 179.429 325.399 179.547 328.612 179.667 cv
289.513 185.747 242.813 189.719 181.796 189.719 cv
337.606 178.21 mo
334.654 178.09 331.653 177.973 328.612 177.859 cv
343.205 175.59 356.746 173.026 369.571 170.267 cv
371.537 170.442 373.468 170.617 375.403 170.796 cv
363.481 173.458 350.992 175.954 337.606 178.21 cv
381.554 169.397 mo
380.309 169.077 379.069 168.762 377.811 168.446 cv
390.1 165.662 401.772 162.71 413.173 159.68 cv
414.064 160.042 414.963 160.409 415.851 160.773 cv
404.766 163.742 393.428 166.647 381.554 169.397 cv
418.51 160.058 mo
417.625 159.693 416.739 159.329 415.851 158.965 cv
417.861 158.427 419.849 157.89 421.845 157.348 cv
423.064 157.616 424.294 157.888 425.508 158.157 cv
423.183 158.793 420.852 159.427 418.51 160.058 cv
429.149 157.158 mo
427.938 156.888 426.723 156.618 425.508 156.349 cv
496.417 136.952 560.958 115.792 701.796 115.792 cv
701.796 115.792 li
701.796 117.6 li
563.37 117.6 498.653 138.04 429.149 157.158 cv
.194675 .150179 .156374 0 cmyk
f
425.508 158.157 mo
424.294 157.888 423.064 157.616 421.845 157.348 cv
423.064 157.016 424.294 156.681 425.508 156.349 cv
426.723 156.618 427.938 156.888 429.149 157.158 cv
427.938 157.491 426.723 157.824 425.508 158.157 cv
.383764 .310857 .316075 .00238041 cmyk
f
328.612 179.667 mo
325.399 179.547 322.123 179.429 318.803 179.316 cv
322.123 178.846 325.399 178.359 328.612 177.859 cv
331.653 177.973 334.654 178.09 337.606 178.21 cv
334.654 178.708 331.653 179.194 328.612 179.667 cv
f
381.032 169.517 mo
379.17 169.339 377.293 169.163 375.403 168.988 cv
376.203 168.809 377.016 168.626 377.811 168.446 cv
379.069 168.762 380.309 169.077 381.554 169.397 cv
381.381 169.437 381.205 169.477 381.032 169.517 cv
f
701.796 198.242 mo
618.245 198.242 561.546 198.202 514.437 198.148 cv
512.612 197.549 510.803 196.944 509.006 196.333 cv
557.194 196.391 615.008 196.434 701.796 196.434 cv
701.796 198.242 li
509.006 198.141 mo
498.741 198.129 488.905 198.116 479.327 198.103 cv
477.222 197.501 475.128 196.895 473.045 196.286 cv
482.978 196.3 493.145 196.314 503.752 196.327 cv
505.49 196.936 507.244 197.542 509.006 198.141 cv
473.045 198.094 mo
459.411 198.075 446.222 198.055 432.896 198.035 cv
434.089 197.432 435.266 196.836 436.457 196.232 cv
446.558 196.247 456.629 196.263 466.887 196.277 cv
468.935 196.887 470.979 197.49 473.045 198.094 cv
.194675 .150179 .156374 0 cmyk
f
479.327 198.103 mo
477.222 198.1 475.128 198.097 473.045 198.094 cv
470.979 197.49 468.935 196.887 466.887 196.277 cv
468.935 196.28 470.979 196.283 473.045 196.286 cv
475.128 196.895 477.222 197.501 479.327 198.103 cv
.383764 .310857 .316075 .00238041 cmyk
f
429.323 198.03 mo
417.962 198.013 406.471 197.996 394.515 197.98 cv
396.133 197.386 397.762 196.78 399.364 196.179 cv
410.834 196.195 421.908 196.211 432.896 196.227 cv
431.711 196.826 430.51 197.432 429.323 198.03 cv
389.555 197.974 mo
380.093 197.962 370.298 197.95 360.039 197.939 cv
362.282 197.346 364.499 196.747 366.698 196.138 cv
376.331 196.149 385.553 196.161 394.516 196.173 cv
392.864 196.779 391.226 197.375 389.555 197.974 cv
353.043 197.931 mo
309.089 197.886 256.048 197.854 181.796 197.854 cv
181.796 196.047 li
260.031 196.047 314.719 196.082 360.038 196.131 cv
357.731 196.74 355.4 197.34 353.043 197.931 cv
.194675 .150179 .156374 0 cmyk
f
394.515 197.98 mo
392.864 197.978 391.226 197.976 389.555 197.974 cv
391.226 197.375 392.864 196.779 394.516 196.173 cv
396.134 196.175 397.762 196.177 399.364 196.179 cv
397.762 196.78 396.133 197.386 394.515 197.98 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 128.973 mo
181.796 127.165 li
227.103 127.165 264.498 126.491 296.766 125.377 cv
299.592 125.861 302.391 126.365 305.139 126.882 cv
271.002 128.175 231.07 128.973 181.796 128.973 cv
312.816 126.578 mo
310.287 126.063 307.734 125.562 305.139 125.074 cv
451.131 119.541 491.07 104.945 701.796 104.945 cv
701.796 104.945 li
701.796 106.753 li
494.815 106.753 452.597 120.835 312.816 126.578 cv
.194675 .150179 .156374 0 cmyk
f
181.796 320.25 mo
181.796 318.442 li
441.606 318.442 441.81 279.552 701.239 279.495 cv
701.43 279.495 701.606 279.494 701.796 279.494 cv
701.796 281.302 li
441.796 281.302 441.796 320.25 181.796 320.25 cv
f
181.796 259.504 mo
181.796 257.696 li
239.401 257.696 284.247 251.218 321.982 241.133 cv
325.381 240.809 328.709 240.477 331.997 240.133 cv
292.208 251.81 244.59 259.504 181.796 259.504 cv
332.226 238.302 mo
332.186 238.298 332.152 238.295 332.111 238.292 cv
340.324 235.88 348.191 233.302 355.8 230.583 cv
357.01 230.748 358.219 230.914 359.417 231.081 cv
353.513 233.248 347.436 235.338 341.182 237.326 cv
338.235 237.66 335.26 237.984 332.226 238.302 cv
362.941 229.772 mo
361.775 229.605 360.596 229.438 359.417 229.273 cv
371.335 224.9 382.603 220.197 393.477 215.293 cv
394.569 215.401 395.655 215.51 396.74 215.619 cv
385.926 220.568 374.752 225.328 362.941 229.772 cv
407.82 210.43 mo
406.782 210.321 405.746 210.212 404.702 210.104 cv
407.939 208.574 411.157 207.024 414.344 205.468 cv
415.453 205.529 416.56 205.589 417.663 205.649 cv
414.409 207.252 411.121 208.851 407.82 210.43 cv
420.955 204.022 mo
419.855 203.962 418.767 203.902 417.663 203.841 cv
421.578 201.914 425.451 199.979 429.323 198.03 cv
430.51 198.031 431.711 198.033 432.896 198.035 cv
428.936 200.036 424.951 202.04 420.955 204.022 cv
f
404.702 211.912 mo
403.651 211.803 402.606 211.695 401.548 211.587 cv
402.606 211.093 403.651 210.602 404.702 210.104 cv
405.746 210.212 406.782 210.321 407.82 210.43 cv
406.782 210.926 405.746 211.419 404.702 211.912 cv
.383764 .310857 .316075 .00238041 cmyk
f
440.012 194.43 mo
438.829 194.428 437.641 194.426 436.458 194.424 cv
439.491 192.887 442.531 191.343 445.563 189.805 cv
446.301 190.032 447.046 190.26 447.784 190.487 cv
445.195 191.798 442.599 193.117 440.012 194.43 cv
450.008 189.361 mo
449.261 189.132 448.531 188.908 447.784 188.679 cv
449.15 187.987 450.51 187.299 451.879 186.608 cv
452.937 186.678 453.989 186.748 455.049 186.818 cv
453.367 187.664 451.686 188.513 450.008 189.361 cv
458.233 185.221 mo
457.17 185.151 456.109 185.081 455.049 185.011 cv
457.855 183.6 460.678 182.188 463.505 180.788 cv
464.172 181.064 464.83 181.336 465.498 181.611 cv
463.067 182.809 460.646 184.013 458.233 185.221 cv
.194675 .150179 .156374 0 cmyk
f
455.049 186.818 mo
453.989 186.748 452.937 186.678 451.879 186.608 cv
452.937 186.074 453.989 185.544 455.049 185.011 cv
456.109 185.081 457.17 185.151 458.233 185.221 cv
457.17 185.753 456.109 186.285 455.049 186.818 cv
.383764 .310857 .316075 .00238041 cmyk
f
447.784 190.487 mo
447.046 190.26 446.301 190.032 445.563 189.805 cv
446.301 189.43 447.046 189.053 447.784 188.679 cv
448.531 188.908 449.261 189.132 450.008 189.361 cv
449.261 189.739 448.531 190.109 447.784 190.487 cv
f
436.457 196.232 mo
435.266 196.231 434.089 196.229 432.896 196.227 cv
434.089 195.624 435.266 195.028 436.458 194.424 cv
437.641 194.426 438.829 194.428 440.012 194.43 cv
438.829 195.03 437.64 195.633 436.457 196.232 cv
f
470.215 179.3 mo
469.203 179.189 468.207 179.079 467.199 178.967 cv
472.701 176.266 478.248 173.602 483.904 170.98 cv
484.808 171.165 485.714 171.35 486.623 171.535 cv
481.068 174.08 475.61 176.674 470.215 179.3 cv
489.375 170.282 mo
488.46 170.098 487.532 169.911 486.623 169.727 cv
539.499 145.5 601.186 125.736 701.796 125.736 cv
701.796 127.544 li
602.916 127.544 541.648 146.627 489.375 170.282 cv
.194675 .150179 .156374 0 cmyk
f
486.623 171.535 mo
485.714 171.35 484.808 171.165 483.904 170.98 cv
484.808 170.561 485.714 170.143 486.623 169.727 cv
487.532 169.911 488.46 170.098 489.375 170.282 cv
488.46 170.695 487.532 171.118 486.623 171.535 cv
.383764 .310857 .316075 .00238041 cmyk
f
432.896 198.035 mo
431.711 198.033 430.51 198.031 429.323 198.03 cv
430.51 197.432 431.711 196.826 432.896 196.227 cv
434.089 196.229 435.266 196.231 436.457 196.232 cv
435.266 196.836 434.089 197.432 432.896 198.035 cv
f
701.796 88.6739 mo
441.796 88.6739 441.796 45.0862 181.796 45.0862 cv
181.796 43.2782 li
441.796 43.2782 441.796 86.8659 701.796 86.8659 cv
701.796 86.8659 li
701.796 88.6739 li
.194675 .150179 .156374 0 cmyk
f
181.796 247.03 mo
181.796 245.222 li
239.512 245.222 284.416 242.907 322.196 239.305 cv
323.879 239.433 325.562 239.565 327.217 239.698 cv
325.49 240.183 323.738 240.663 321.982 241.133 cv
284.247 244.723 239.401 247.03 181.796 247.03 cv
331.997 240.133 mo
332.027 240.125 332.081 240.109 332.111 240.1 cv
332.151 240.103 332.185 240.106 332.226 240.11 cv
332.155 240.117 332.067 240.126 331.997 240.133 cv
341.424 239.107 mo
339.893 238.967 338.353 238.83 336.799 238.694 cv
338.274 238.242 339.728 237.788 341.182 237.326 cv
352.549 236.039 363.287 234.639 373.58 233.158 cv
375.586 233.467 377.574 233.778 379.548 234.092 cv
367.516 235.887 354.917 237.576 341.424 239.107 cv
385.314 233.218 mo
383.404 232.904 381.486 232.593 379.548 232.284 cv
403.16 228.763 424.57 224.841 446.131 220.949 cv
448.203 221.179 450.264 221.408 452.341 221.638 cv
430.425 225.575 408.905 229.584 385.314 233.218 cv
474.588 217.723 mo
472.419 217.495 470.259 217.265 468.11 217.034 cv
481.115 214.767 494.469 212.559 508.641 210.503 cv
511.862 210.649 515.127 210.793 518.44 210.934 cv
502.96 213.04 488.533 215.34 474.588 217.723 cv
528.949 209.556 mo
526.93 209.477 524.924 209.396 522.942 209.314 cv
522.208 209.149 521.466 208.982 520.737 208.816 cv
525.997 208.112 531.387 207.429 536.918 206.774 cv
538.451 207.2 540.007 207.625 541.564 208.042 cv
537.273 208.531 533.071 209.036 528.949 209.556 cv
f
522.942 209.314 mo
521.428 209.252 519.934 209.189 518.44 209.126 cv
519.209 209.021 519.962 208.919 520.737 208.816 cv
521.466 208.982 522.208 209.149 522.942 209.314 cv
.383764 .310857 .316075 .00238041 cmyk
f
468.11 218.842 mo
465.978 218.613 463.86 218.383 461.744 218.152 cv
463.86 217.778 465.978 217.406 468.11 217.034 cv
470.259 217.265 472.419 217.495 474.588 217.723 cv
472.419 218.094 470.259 218.467 468.11 218.842 cv
f
546.398 207.502 mo
544.767 207.083 543.169 206.664 541.564 206.234 cv
583.355 201.47 633.638 198.242 701.796 198.242 cv
701.796 200.05 li
636.257 200.05 587.225 203.036 546.398 207.502 cv
.194675 .150179 .156374 0 cmyk
f
321.982 241.133 mo
323.738 240.663 325.49 240.183 327.217 239.698 cv
328.862 239.83 330.493 239.964 332.111 240.1 cv
332.081 240.109 332.027 240.125 331.997 240.133 cv
328.709 240.477 325.381 240.809 321.982 241.133 cv
336.799 238.694 mo
335.284 238.561 333.763 238.431 332.226 238.302 cv
335.26 237.984 338.235 237.66 341.182 237.326 cv
339.728 237.788 338.274 238.242 336.799 238.694 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 263.12 mo
181.796 261.312 li
181.796 261.312 li
181.892 261.312 182.006 261.312 182.101 261.312 cv
297.576 261.304 361.707 256.09 420.191 250.301 cv
422.688 250.654 425.171 251.009 427.652 251.365 cv
367.041 257.448 302.386 263.12 181.796 263.12 cv
435.032 250.621 mo
432.577 250.266 430.117 249.911 427.652 249.557 cv
435.532 248.766 443.339 247.969 451.197 247.175 cv
453.257 247.571 455.32 247.966 457.389 248.361 cv
449.898 249.111 442.483 249.867 435.032 250.621 cv
463.643 247.738 mo
461.555 247.345 459.465 246.948 457.388 246.553 cv
517.58 240.525 582.175 234.942 701.796 234.942 cv
701.796 234.942 li
701.796 236.75 li
586.301 236.75 522.11 241.954 463.643 247.738 cv
.194675 .150179 .156374 0 cmyk
f
181.796 261.312 mo
181.796 259.504 li
267.982 259.504 325.592 252.972 373.58 244.238 cv
375.586 244.469 377.574 244.703 379.548 244.939 cv
330.411 254.213 271.728 261.297 182.101 261.312 cv
182.006 261.312 181.892 261.312 181.796 261.312 cv
385.314 243.833 mo
383.404 243.597 381.486 243.363 379.548 243.131 cv
387.911 241.553 395.999 239.911 403.914 238.23 cv
405.444 238.504 406.972 238.78 408.491 239.057 cv
400.941 240.687 393.238 242.288 385.314 243.833 cv
412.998 238.077 mo
411.498 237.799 410 237.524 408.49 237.249 cv
429.254 232.765 448.957 228.039 469.546 223.515 cv
471.399 223.714 473.258 223.911 475.127 224.108 cv
454.003 228.669 433.974 233.482 412.998 238.077 cv
495.654 219.852 mo
493.62 219.656 491.602 219.459 489.596 219.26 cv
501.783 216.778 514.459 214.409 527.99 212.234 cv
529.612 212.584 531.232 212.928 532.879 213.271 cv
519.753 215.302 507.46 217.519 495.654 219.852 cv
537.961 212.499 mo
536.365 212.18 534.767 211.855 533.194 211.528 cv
536.188 211.642 539.235 211.754 542.318 211.863 cv
540.855 212.073 539.404 212.285 537.961 212.499 cv
550.457 210.334 mo
547.702 210.243 544.999 210.15 542.317 210.056 cv
543.809 209.842 545.317 209.63 546.831 209.421 cv
548.039 209.73 549.235 210.031 550.457 210.334 cv
f
532.879 213.271 mo
531.232 212.928 529.612 212.584 527.99 212.234 cv
529.519 211.988 531.05 211.746 532.601 211.506 cv
532.799 211.513 532.996 211.521 533.194 211.528 cv
534.767 211.855 536.365 212.18 537.961 212.499 cv
536.259 212.752 534.554 213.011 532.879 213.271 cv
.383764 .310857 .316075 .00238041 cmyk
f
489.597 221.068 mo
487.624 220.872 485.654 220.674 483.705 220.476 cv
485.654 220.069 487.624 219.662 489.596 219.26 cv
491.602 219.459 493.62 219.656 495.654 219.852 cv
493.62 220.254 491.603 220.659 489.597 221.068 cv
f
556.411 209.962 mo
554.766 209.576 553.136 209.185 551.518 208.788 cv
591.318 203.522 638.97 200.05 701.796 200.05 cv
701.796 201.858 li
641.525 201.858 595.217 205.054 556.411 209.962 cv
.194675 .150179 .156374 0 cmyk
f
181.796 261.312 mo
181.796 261.312 li
181.892 261.312 182.006 261.312 182.101 261.312 cv
182.006 261.312 181.892 261.312 181.796 261.312 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 92.2897 mo
441.796 92.2897 441.796 59.3686 181.796 59.3686 cv
181.796 57.5608 li
441.606 57.5608 441.801 90.4335 701.231 90.4816 cv
701.421 90.4817 701.606 90.4817 701.796 90.4817 cv
701.796 92.2897 li
.194675 .150179 .156374 0 cmyk
f
181.796 145.064 mo
181.796 143.256 li
236.592 143.256 279.852 141.714 316.418 139.281 cv
319.691 139.648 322.904 140.026 326.073 140.416 cv
287.494 143.234 241.496 145.064 181.796 145.064 cv
334.922 139.742 mo
332.014 139.354 329.066 138.976 326.072 138.608 cv
333.588 138.058 340.827 137.471 347.827 136.853 cv
349.441 137.306 351.045 137.765 352.634 138.229 cv
346.897 138.755 340.997 139.261 334.922 139.742 cv
f
326.073 140.416 mo
322.904 140.026 319.691 139.648 316.418 139.281 cv
319.691 139.063 322.903 138.839 326.072 138.608 cv
329.066 138.976 332.014 139.354 334.922 139.742 cv
332.014 139.972 329.067 140.197 326.073 140.416 cv
.383764 .310857 .316075 .00238041 cmyk
f
357.269 137.796 mo
355.73 137.332 354.195 136.876 352.634 136.421 cv
462.874 126.313 515.81 108.561 701.796 108.561 cv
701.796 108.561 li
701.796 110.369 li
518.444 110.369 464.386 127.623 357.269 137.796 cv
.194675 .150179 .156374 0 cmyk
f
701.796 66.9789 mo
441.796 66.9789 441.796 2.05784 181.796 2.05784 cv
181.796 .250072 li
441.796 .250072 441.796 65.1709 701.796 65.1709 cv
701.796 66.9789 li
f
701.796 94.0975 mo
701.796 94.0975 li
701.796 94.0975 li
441.796 94.0975 441.796 71.8432 181.796 71.8432 cv
181.796 70.0352 li
441.796 70.0352 441.796 92.2897 701.796 92.2897 cv
701.796 94.0975 li
f
181.796 264.928 mo
181.796 264.928 li
181.796 263.12 li
302.386 263.12 367.041 257.448 427.652 251.365 cv
430.116 251.718 432.576 252.074 435.031 252.429 cv
372.209 258.785 307.289 264.928 181.796 264.928 cv
442.373 251.685 mo
439.929 251.33 437.478 250.975 435.032 250.621 cv
442.483 249.867 449.898 249.111 457.389 248.361 cv
459.465 248.756 461.555 249.152 463.643 249.546 cv
456.494 250.253 449.434 250.968 442.373 251.685 cv
f
469.988 248.923 mo
467.866 248.53 465.748 248.134 463.643 247.738 cv
522.11 241.954 586.301 236.75 701.796 236.75 cv
701.796 238.558 li
701.796 238.558 li
701.796 238.558 li
590.458 238.558 526.804 243.393 469.988 248.923 cv
f
181.796 291.685 mo
181.796 289.877 li
295.61 289.877 359.599 280.39 417.388 269.722 cv
420.216 269.799 423.033 269.877 425.837 269.955 cv
365.787 281.239 301.262 291.671 182.031 291.685 cv
181.951 291.685 181.876 291.685 181.796 291.685 cv
181.796 291.685 li
434.169 268.38 mo
431.395 268.302 428.625 268.225 425.837 268.147 cv
443.026 264.917 459.848 261.618 477.483 258.473 cv
479.409 258.734 481.354 258.996 483.301 259.254 cv
466.419 262.198 450.364 265.306 434.169 268.38 cv
489.262 258.228 mo
487.258 257.969 485.281 257.709 483.301 257.446 cv
487.451 256.723 491.642 256.011 495.908 255.309 cv
497.74 255.614 499.595 255.919 501.451 256.219 cv
497.332 256.876 493.263 257.548 489.262 258.228 cv
f
425.837 269.955 mo
423.033 269.877 420.216 269.799 417.388 269.722 cv
420.216 269.2 423.033 268.674 425.837 268.147 cv
428.625 268.225 431.395 268.302 434.169 268.38 cv
431.395 268.907 428.625 269.431 425.837 269.955 cv
.383764 .310857 .316075 .00238041 cmyk
f
507.173 255.321 mo
505.245 255.02 503.351 254.719 501.451 254.411 cv
551.06 246.497 610.177 240.394 701.201 240.366 cv
701.407 240.366 701.59 240.366 701.796 240.366 cv
701.796 240.366 li
701.796 242.174 li
613.913 242.174 555.727 247.832 507.173 255.321 cv
.194675 .150179 .156374 0 cmyk
f
701.201 240.366 mo
701.407 240.366 701.59 240.366 701.796 240.366 cv
701.59 240.366 701.407 240.366 701.201 240.366 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 192.818 mo
701.796 192.818 li
701.796 192.818 li
589.236 192.818 525.403 187.222 468.11 180.876 cv
467.908 180.793 467.703 180.709 467.501 180.626 cv
468.405 180.183 469.308 179.742 470.215 179.3 cv
526.905 185.543 590.48 190.998 701.424 191.01 cv
701.551 191.01 701.669 191.01 701.796 191.01 cv
701.796 191.01 li
701.796 192.818 li
.194675 .150179 .156374 0 cmyk
f
701.796 191.01 mo
701.669 191.01 701.551 191.01 701.424 191.01 cv
701.551 191.01 701.669 191.01 701.796 191.01 cv
.383764 .310857 .316075 .00238041 cmyk
f
465.498 179.803 mo
464.363 179.335 463.229 178.866 462.098 178.397 cv
463.791 178.587 465.497 178.778 467.199 178.967 cv
466.634 179.244 466.062 179.525 465.498 179.803 cv
.194675 .150179 .156374 0 cmyk
f
467.501 180.626 mo
466.831 180.352 466.166 180.078 465.498 179.803 cv
466.062 179.525 466.634 179.244 467.199 178.967 cv
468.207 179.079 469.203 179.189 470.215 179.3 cv
469.308 179.742 468.405 180.183 467.501 180.626 cv
.383764 .310857 .316075 .00238041 cmyk
f
462.099 180.205 mo
456.148 179.536 450.252 178.861 444.364 178.185 cv
445.507 177.715 446.658 177.241 447.802 176.771 cv
450.581 177.09 453.371 177.409 456.163 177.726 cv
458.141 178.556 460.11 179.379 462.099 180.205 cv
440.929 177.791 mo
436.541 177.287 432.168 176.785 427.757 176.284 cv
429.033 175.824 430.293 175.37 431.566 174.909 cv
435.838 175.397 440.103 175.888 444.364 176.377 cv
443.221 176.847 442.072 177.32 440.929 177.791 cv
423.927 175.85 mo
413.99 174.727 403.905 173.62 393.468 172.555 cv
392.51 172.293 391.549 172.032 390.584 171.773 cv
391.853 171.464 393.127 171.152 394.385 170.841 cv
405.84 172.014 416.862 173.237 427.757 174.476 cv
426.481 174.935 425.207 175.392 423.927 175.85 cv
369.571 170.267 mo
356.746 169.124 343.204 168.063 328.611 167.123 cv
331.652 166.732 334.653 166.33 337.605 165.918 cv
349.373 166.739 360.444 167.637 371.052 168.591 cv
372.03 168.827 373.012 169.065 373.983 169.304 cv
372.518 169.628 371.054 169.947 369.571 170.267 cv
318.803 166.52 mo
281.73 164.347 237.798 162.962 181.796 162.962 cv
181.796 161.154 li
181.796 161.154 li
181.796 161.154 li
242.813 161.154 289.513 162.798 328.612 165.315 cv
325.399 165.729 322.123 166.131 318.803 166.52 cv
.194675 .150179 .156374 0 cmyk
f
444.364 178.185 mo
443.221 178.054 442.072 177.922 440.929 177.791 cv
442.072 177.32 443.221 176.847 444.364 176.377 cv
445.507 176.508 446.658 176.64 447.802 176.771 cv
446.658 177.241 445.507 177.715 444.364 178.185 cv
.383764 .310857 .316075 .00238041 cmyk
f
393.468 172.555 mo
392.039 172.409 390.596 172.263 389.153 172.119 cv
389.628 172.005 390.111 171.888 390.584 171.773 cv
391.549 172.032 392.51 172.293 393.468 172.555 cv
373.983 169.304 mo
373.012 169.065 372.03 168.827 371.052 168.591 cv
372.511 168.722 373.961 168.855 375.403 168.988 cv
374.928 169.094 374.459 169.198 373.983 169.304 cv
f
375.403 170.796 mo
373.468 170.617 371.537 170.442 369.571 170.267 cv
371.054 169.947 372.518 169.628 373.983 169.304 cv
375.263 169.618 376.545 169.936 377.811 170.254 cv
377.016 170.434 376.203 170.617 375.403 170.796 cv
f
377.811 170.254 mo
376.545 169.936 375.263 169.618 373.983 169.304 cv
374.459 169.198 374.928 169.094 375.403 168.988 cv
377.293 169.163 379.17 169.339 381.032 169.517 cv
379.958 169.765 378.894 170.009 377.811 170.254 cv
.510277 .424994 .425025 .0681468 cmyk
f
181.796 109.267 mo
181.796 107.459 li
441.796 107.459 441.796 97.7134 701.796 97.7134 cv
701.796 97.7134 li
701.796 99.5212 li
441.796 99.5212 441.796 109.267 181.796 109.267 cv
.194675 .150179 .156374 0 cmyk
f
701.796 270.455 mo
701.796 270.455 li
701.606 270.455 701.42 270.455 701.23 270.455 cv
610.179 270.429 551.068 264.242 501.451 256.219 cv
503.351 255.916 505.245 255.619 507.173 255.321 cv
555.727 262.912 613.913 268.647 701.796 268.647 cv
701.796 270.455 li
495.908 255.309 mo
492.331 254.713 488.792 254.107 485.299 253.495 cv
487.245 253.231 489.219 252.966 491.19 252.706 cv
494.568 253.282 497.989 253.852 501.451 254.411 cv
499.595 254.708 497.74 255.008 495.908 255.309 cv
479.553 252.476 mo
474.182 251.512 468.889 250.533 463.643 249.546 cv
465.748 249.337 467.866 249.129 469.988 248.923 cv
475.033 249.857 480.117 250.779 485.298 251.687 cv
483.369 251.948 481.461 252.211 479.553 252.476 cv
f
485.299 253.495 mo
483.369 253.156 481.461 252.818 479.553 252.476 cv
481.461 252.211 483.369 251.948 485.298 251.687 cv
487.245 252.028 489.219 252.37 491.19 252.706 cv
489.219 252.966 487.245 253.231 485.299 253.495 cv
.383764 .310857 .316075 .00238041 cmyk
f
451.197 247.175 mo
437.032 244.454 423.027 241.706 408.491 239.057 cv
410 238.731 411.498 238.405 412.998 238.077 cv
428.033 240.856 442.576 243.73 457.388 246.553 cv
455.32 246.76 453.257 246.967 451.197 247.175 cv
403.914 238.23 mo
395.999 236.811 387.911 235.424 379.548 234.092 cv
381.486 233.803 383.404 233.512 385.314 233.218 cv
393.237 234.522 400.941 235.873 408.49 237.249 cv
406.972 237.577 405.444 237.904 403.914 238.23 cv
373.58 233.158 mo
368.95 232.447 364.243 231.755 359.417 231.081 cv
360.596 230.649 361.775 230.21 362.941 229.772 cv
368.619 230.584 374.132 231.421 379.548 232.284 cv
377.574 232.579 375.586 232.87 373.58 233.158 cv
355.8 230.583 mo
337.694 228.124 318.061 225.958 296.036 224.255 cv
298.449 223.857 300.845 223.445 303.202 223.024 cv
323.795 224.75 342.276 226.882 359.417 229.273 cv
358.22 229.713 357.01 230.151 355.8 230.583 cv
288.225 223.678 mo
257.933 221.543 223.151 220.273 181.796 220.273 cv
181.796 218.465 li
181.796 218.465 li
181.796 218.465 li
226.754 218.465 263.938 219.965 296.037 222.447 cv
293.465 222.871 290.864 223.281 288.225 223.678 cv
.194675 .150179 .156374 0 cmyk
f
296.036 224.255 mo
293.464 224.056 290.864 223.864 288.225 223.678 cv
290.864 223.281 293.465 222.871 296.037 222.447 cv
298.45 222.634 300.845 222.827 303.202 223.024 cv
300.845 223.445 298.449 223.857 296.036 224.255 cv
.383764 .310857 .316075 .00238041 cmyk
f
359.417 231.081 mo
358.219 230.914 357.01 230.748 355.8 230.583 cv
357.01 230.151 358.22 229.713 359.417 229.273 cv
360.596 229.438 361.775 229.605 362.941 229.772 cv
361.775 230.21 360.596 230.649 359.417 231.081 cv
f
379.548 234.092 mo
377.574 233.778 375.586 233.467 373.58 233.158 cv
375.586 232.87 377.574 232.579 379.548 232.284 cv
381.486 232.593 383.404 232.904 385.314 233.218 cv
383.404 233.512 381.486 233.803 379.548 234.092 cv
f
457.389 248.361 mo
455.32 247.966 453.257 247.571 451.197 247.175 cv
453.257 246.967 455.32 246.76 457.388 246.553 cv
459.465 246.948 461.555 247.345 463.643 247.738 cv
461.555 247.944 459.465 248.153 457.389 248.361 cv
f
408.491 239.057 mo
406.972 238.78 405.444 238.504 403.914 238.23 cv
405.444 237.904 406.972 237.577 408.49 237.249 cv
410 237.524 411.498 237.799 412.998 238.077 cv
411.498 238.405 410 238.731 408.491 239.057 cv
f
463.643 249.546 mo
461.555 249.152 459.465 248.756 457.389 248.361 cv
459.465 248.153 461.555 247.944 463.643 247.738 cv
465.748 248.134 467.866 248.53 469.988 248.923 cv
467.866 249.129 465.748 249.337 463.643 249.546 cv
f
501.451 256.219 mo
499.595 255.919 497.74 255.614 495.908 255.309 cv
497.74 255.008 499.595 254.708 501.451 254.411 cv
503.351 254.719 505.245 255.02 507.173 255.321 cv
505.245 255.619 503.351 255.916 501.451 256.219 cv
f
181.796 111.075 mo
181.796 109.267 li
441.796 109.267 441.796 99.5212 701.796 99.5212 cv
701.796 101.329 li
441.796 101.329 441.796 111.075 181.796 111.075 cv
.194675 .150179 .156374 0 cmyk
f
701.796 97.7134 mo
701.796 97.7134 li
701.796 97.7134 li
441.796 97.7134 441.796 96.7923 181.796 96.7923 cv
181.796 94.9845 li
441.796 94.9845 441.796 95.9054 701.796 95.9054 cv
701.796 97.7134 li
f
701.796 68.7869 mo
441.796 68.7869 441.796 3.86584 181.796 3.86584 cv
181.796 2.05784 li
441.796 2.05784 441.796 66.9789 701.796 66.9789 cv
701.796 68.7869 li
f
701.796 79.6342 mo
441.796 79.6342 441.796 25.38 181.796 25.38 cv
181.796 23.572 li
441.796 23.572 441.796 77.8264 701.796 77.8264 cv
701.796 77.8264 li
701.796 79.6342 li
f
701.796 226.807 mo
701.796 226.807 li
701.796 226.807 li
642.969 226.807 597.441 221.157 559.211 212.419 cv
562.336 212.514 565.535 212.607 568.761 212.696 cv
604.997 220.241 647.778 224.999 701.796 224.999 cv
701.796 226.807 li
559.211 210.611 mo
557.087 210.546 554.984 210.48 552.903 210.413 cv
554.065 210.262 555.236 210.111 556.411 209.962 cv
557.341 210.181 558.273 210.396 559.211 210.611 cv
546.831 209.421 mo
545.06 208.967 543.305 208.508 541.564 208.042 cv
543.169 207.859 544.767 207.68 546.398 207.502 cv
548.089 207.936 549.799 208.366 551.518 208.788 cv
549.939 208.996 548.386 209.206 546.831 209.421 cv
536.918 206.774 mo
527.198 204.071 517.941 201.178 509.006 198.141 cv
510.804 198.143 512.612 198.146 514.437 198.148 cv
523.116 200.996 532.125 203.708 541.564 206.234 cv
540.007 206.411 538.451 206.592 536.918 206.774 cv
503.751 194.519 mo
502.04 194.517 500.343 194.515 498.654 194.513 cv
493.312 192.584 488.083 190.613 482.926 188.607 cv
484.78 188.72 486.631 188.833 488.507 188.945 cv
493.498 190.84 498.574 192.703 503.751 194.519 cv
482.926 186.799 mo
481.096 186.687 479.281 186.574 477.47 186.461 cv
473.446 184.862 469.451 183.24 465.498 181.611 cv
466.062 181.333 466.634 181.052 467.199 180.775 cv
467.505 180.809 467.803 180.842 468.11 180.876 cv
472.989 182.872 477.926 184.853 482.926 186.799 cv
f
488.507 188.945 mo
486.631 188.833 484.78 188.72 482.926 188.607 cv
481.097 187.895 479.281 187.18 477.47 186.461 cv
479.281 186.574 481.096 186.687 482.926 186.799 cv
484.78 187.52 486.631 188.232 488.507 188.945 cv
.383764 .310857 .316075 .00238041 cmyk
f
509.006 196.333 mo
507.243 196.331 505.49 196.329 503.752 196.327 cv
502.041 195.727 500.343 195.122 498.654 194.513 cv
500.343 194.515 502.04 194.517 503.751 194.519 cv
505.489 195.128 507.243 195.734 509.006 196.333 cv
f
463.505 180.788 mo
463.039 180.595 462.564 180.398 462.099 180.205 cv
462.797 180.283 463.507 180.363 464.206 180.441 cv
463.973 180.556 463.738 180.673 463.505 180.788 cv
.194675 .150179 .156374 0 cmyk
f
514.437 198.148 mo
512.612 198.146 510.804 198.143 509.006 198.141 cv
507.244 197.542 505.49 196.936 503.752 196.327 cv
505.49 196.329 507.243 196.331 509.006 196.333 cv
510.803 196.944 512.612 197.549 514.437 198.148 cv
.383764 .310857 .316075 .00238041 cmyk
f
465.498 181.611 mo
464.83 181.336 464.172 181.064 463.505 180.788 cv
463.738 180.673 463.973 180.556 464.206 180.441 cv
465.203 180.553 466.198 180.664 467.199 180.775 cv
466.634 181.052 466.062 181.333 465.498 181.611 cv
f
541.564 208.042 mo
540.007 207.625 538.451 207.2 536.918 206.774 cv
538.451 206.592 540.007 206.411 541.564 206.234 cv
543.169 206.664 544.767 207.083 546.398 207.502 cv
544.767 207.68 543.169 207.859 541.564 208.042 cv
f
552.903 210.413 mo
552.085 210.387 551.268 210.36 550.457 210.334 cv
549.235 210.031 548.039 209.73 546.831 209.421 cv
548.386 209.206 549.939 208.996 551.518 208.788 cv
553.136 209.185 554.766 209.576 556.411 209.962 cv
555.236 210.111 554.065 210.262 552.903 210.413 cv
f
462.098 178.397 mo
460.109 178.173 458.141 177.951 456.163 177.726 cv
454.408 176.989 452.638 176.244 450.889 175.505 cv
451.612 175.208 452.339 174.911 453.063 174.614 cv
456.065 175.879 459.075 177.141 462.098 178.397 cv
448.718 174.587 mo
446.216 173.528 443.717 172.467 441.217 171.407 cv
441.979 171.13 442.75 170.85 443.512 170.573 cv
445.972 171.616 448.424 172.656 450.889 173.697 cv
450.165 173.993 449.441 174.29 448.718 174.587 cv
438.922 170.433 mo
433.462 168.118 427.981 165.799 422.468 163.506 cv
423.342 163.268 424.218 163.029 425.089 162.791 cv
430.492 165.05 435.853 167.323 441.217 169.599 cv
440.447 169.879 439.692 170.154 438.922 170.433 cv
413.173 159.68 mo
409.089 158.019 404.975 156.376 400.805 154.752 cv
401.806 154.542 402.805 154.33 403.801 154.118 cv
407.857 155.716 411.871 157.334 415.851 158.965 cv
414.963 159.203 414.064 159.443 413.173 159.68 cv
397.772 153.579 mo
395.257 152.613 392.722 151.654 390.165 150.706 cv
393.577 151.376 396.943 152.054 400.281 152.741 cv
400.455 152.809 400.631 152.877 400.805 152.945 cv
399.795 153.157 398.787 153.368 397.772 153.579 cv
390.165 148.898 mo
387.921 148.457 385.649 148.018 383.368 147.586 cv
384.126 147.47 384.882 147.353 385.635 147.237 cv
387.15 147.786 388.666 148.342 390.165 148.898 cv
378.505 146.512 mo
371.635 144.121 364.575 141.81 357.269 139.604 cv
358.771 139.462 360.268 139.317 361.75 139.172 cv
368.737 141.351 375.508 143.626 382.106 145.97 cv
380.914 146.151 379.708 146.333 378.505 146.512 cv
.194675 .150179 .156374 0 cmyk
f
450.889 175.505 mo
450.165 175.199 449.441 174.893 448.718 174.587 cv
449.441 174.29 450.165 173.993 450.889 173.697 cv
451.612 174.003 452.339 174.309 453.063 174.614 cv
452.339 174.911 451.612 175.208 450.889 175.505 cv
.383764 .310857 .316075 .00238041 cmyk
f
400.281 152.741 mo
396.943 152.054 393.577 151.376 390.165 150.706 cv
387.507 149.72 384.818 148.742 382.106 147.778 cv
382.529 147.714 382.946 147.65 383.368 147.586 cv
385.649 148.018 387.921 148.457 390.165 148.898 cv
393.577 150.163 396.943 151.444 400.281 152.741 cv
f
415.851 160.773 mo
414.963 160.409 414.064 160.042 413.173 159.68 cv
414.064 159.443 414.963 159.203 415.851 158.965 cv
416.739 159.329 417.625 159.693 418.51 160.058 cv
417.625 160.297 416.739 160.535 415.851 160.773 cv
f
347.827 136.853 mo
336.806 133.76 325.184 130.909 312.817 128.386 cv
315.218 128.288 317.589 128.187 319.933 128.083 cv
331.435 130.603 342.296 133.407 352.634 136.421 cv
351.044 136.567 349.441 136.711 347.827 136.853 cv
296.766 125.377 mo
264.498 119.845 227.103 116.498 181.796 116.498 cv
181.796 114.691 li
181.796 114.691 li
181.796 114.691 li
231.07 114.691 271.002 118.652 305.139 125.074 cv
302.39 125.178 299.592 125.279 296.766 125.377 cv
.194675 .150179 .156374 0 cmyk
f
305.139 126.882 mo
302.391 126.365 299.592 125.861 296.766 125.377 cv
299.592 125.279 302.39 125.178 305.139 125.074 cv
307.734 125.562 310.287 126.063 312.816 126.578 cv
310.287 126.682 307.734 126.783 305.139 126.882 cv
.383764 .310857 .316075 .00238041 cmyk
f
352.634 138.229 mo
351.045 137.765 349.441 137.306 347.827 136.853 cv
349.441 136.711 351.044 136.567 352.634 136.421 cv
354.195 136.876 355.73 137.332 357.269 137.796 cv
355.73 137.942 354.196 138.086 352.634 138.229 cv
f
468.11 180.876 mo
467.803 180.842 467.505 180.809 467.199 180.775 cv
467.304 180.723 467.396 180.678 467.501 180.626 cv
467.703 180.709 467.908 180.793 468.11 180.876 cv
464.206 180.441 mo
463.507 180.363 462.797 180.283 462.099 180.205 cv
460.11 179.379 458.141 178.556 456.163 177.726 cv
458.141 177.951 460.109 178.173 462.098 178.397 cv
463.229 178.866 464.363 179.335 465.498 179.803 cv
465.064 180.017 464.64 180.226 464.206 180.441 cv
f
467.199 180.775 mo
466.198 180.664 465.203 180.553 464.206 180.441 cv
464.64 180.226 465.064 180.017 465.498 179.803 cv
466.166 180.078 466.831 180.352 467.501 180.626 cv
467.396 180.678 467.304 180.723 467.199 180.775 cv
.510277 .424994 .425025 .0681468 cmyk
f
181.796 112.883 mo
181.796 111.075 li
441.796 111.075 441.796 101.329 701.796 101.329 cv
701.796 103.137 li
441.796 103.137 441.796 112.883 181.796 112.883 cv
.194675 .150179 .156374 0 cmyk
f
181.796 114.691 mo
181.796 114.691 li
181.796 112.883 li
441.796 112.883 441.796 103.137 701.796 103.137 cv
701.796 104.945 li
701.796 104.945 li
701.796 104.945 li
441.796 104.945 441.796 114.691 181.796 114.691 cv
f
701.796 70.5947 mo
441.796 70.5947 441.796 5.67383 181.796 5.67383 cv
181.796 3.86584 li
441.796 3.86584 441.796 68.7869 701.796 68.7869 cv
701.796 70.5947 li
f
701.796 232.231 mo
599.329 232.231 537.237 227.733 483.706 222.284 cv
485.654 221.877 487.624 221.47 489.597 221.068 cv
541.82 226.247 603.058 230.423 701.796 230.423 cv
701.796 232.231 li
477.956 221.692 mo
472.485 221.122 467.091 220.544 461.744 219.96 cv
463.86 219.586 465.978 219.213 468.11 218.842 cv
473.247 219.394 478.433 219.939 483.705 220.476 cv
481.774 220.88 479.867 221.283 477.956 221.692 cv
455.46 219.271 mo
437.592 217.301 420.067 215.293 401.548 213.395 cv
402.606 212.901 403.651 212.409 404.702 211.912 cv
424.213 213.936 442.703 216.076 461.744 218.152 cv
459.643 218.524 457.549 218.897 455.46 219.271 cv
398.354 213.069 mo
386.121 211.832 373.43 210.646 359.902 209.553 cv
361.475 209.084 363.037 208.609 364.588 208.131 cv
377.537 209.212 389.748 210.377 401.548 211.587 cv
400.491 212.081 399.418 212.579 398.354 213.069 cv
355.052 209.168 mo
344.223 208.324 332.829 207.54 320.72 206.839 cv
323.1 206.389 325.467 205.925 327.792 205.455 cv
339.079 206.154 349.722 206.923 359.902 207.746 cv
358.293 208.226 356.686 208.698 355.052 209.168 cv
f
359.902 209.553 mo
358.293 209.423 356.686 209.296 355.052 209.168 cv
356.686 208.698 358.293 208.226 359.902 207.746 cv
361.475 207.873 363.037 208.001 364.588 208.131 cv
363.037 208.609 361.475 209.084 359.902 209.553 cv
.383764 .310857 .316075 .00238041 cmyk
f
401.548 213.395 mo
400.491 213.286 399.418 213.177 398.354 213.069 cv
399.418 212.579 400.491 212.081 401.548 211.587 cv
402.606 211.695 403.651 211.803 404.702 211.912 cv
403.651 212.409 402.606 212.901 401.548 213.395 cv
f
461.744 219.96 mo
459.643 219.731 457.549 219.501 455.46 219.271 cv
457.549 218.897 459.643 218.524 461.744 218.152 cv
463.86 218.383 465.978 218.613 468.11 218.842 cv
465.978 219.213 463.86 219.586 461.744 219.96 cv
f
483.706 222.284 mo
481.774 222.087 479.867 221.891 477.956 221.692 cv
479.867 221.283 481.774 220.88 483.705 220.476 cv
485.654 220.674 487.624 220.872 489.597 221.068 cv
487.624 221.47 485.654 221.877 483.706 222.284 cv
f
313.124 206.415 mo
277.257 204.489 234.958 203.278 181.796 203.278 cv
181.796 201.47 li
238.766 201.47 283.244 202.86 320.719 205.031 cv
318.214 205.505 315.693 205.964 313.124 206.415 cv
.194675 .150179 .156374 0 cmyk
f
701.796 90.4817 mo
701.796 90.4817 li
701.606 90.4817 701.421 90.4817 701.231 90.4816 cv
441.801 90.4179 441.606 46.8942 181.796 46.8942 cv
181.796 45.0862 li
441.796 45.0862 441.796 88.6739 701.796 88.6739 cv
701.796 90.4817 li
f
701.796 90.4817 mo
701.606 90.4817 701.421 90.4817 701.231 90.4816 cv
701.421 90.4817 701.606 90.4817 701.796 90.4817 cv
701.796 90.4817 li
.383764 .310857 .316075 .00238041 cmyk
f
701.796 81.4422 mo
441.796 81.4422 441.796 27.1878 181.796 27.1878 cv
181.796 25.38 li
441.796 25.38 441.796 79.6342 701.796 79.6342 cv
701.796 81.4422 li
.194675 .150179 .156374 0 cmyk
f
181.796 218.465 mo
181.796 218.465 li
181.796 216.657 li
228.848 216.657 267.374 213.562 300.478 208.491 cv
303.392 208.628 306.263 208.769 309.094 208.915 cv
274.091 214.802 232.99 218.465 181.796 218.465 cv
f
334.428 204.071 mo
332.234 203.926 330.035 203.786 327.792 203.647 cv
330.535 203.092 333.226 202.526 335.896 201.945 cv
338.249 202.025 340.574 202.106 342.874 202.188 cv
340.098 202.829 337.281 203.458 334.428 204.071 cv
f
327.792 205.455 mo
325.467 205.311 323.099 205.169 320.719 205.031 cv
323.099 204.581 325.467 204.117 327.792 203.647 cv
330.035 203.786 332.234 203.926 334.428 204.071 cv
332.234 204.542 330.035 205.001 327.792 205.455 cv
.383764 .310857 .316075 .00238041 cmyk
f
349.467 200.623 mo
347.291 200.541 345.096 200.46 342.873 200.38 cv
346.318 199.584 349.708 198.767 353.043 197.931 cv
355.4 197.934 357.732 197.936 360.039 197.939 cv
356.573 198.854 353.049 199.75 349.467 200.623 cv
373.069 194.338 mo
370.963 194.335 368.842 194.333 366.698 194.33 cv
379.143 190.887 390.924 187.19 402.319 183.365 cv
403.829 183.459 405.332 183.552 406.83 183.646 cv
395.977 187.351 384.802 190.953 373.069 194.338 cv
411.269 182.119 mo
409.79 182.025 408.319 181.932 406.83 181.838 cv
408.786 181.17 410.735 180.498 412.673 179.824 cv
413.614 180.1 414.54 180.374 415.477 180.652 cv
414.08 181.142 412.675 181.632 411.269 182.119 cv
418.26 179.672 mo
417.334 179.396 416.406 179.12 415.477 178.844 cv
418.304 177.852 421.127 176.851 423.927 175.85 cv
425.207 175.994 426.481 176.138 427.757 176.284 cv
424.607 177.417 421.439 178.549 418.26 179.672 cv
431.566 174.909 mo
430.293 174.764 429.033 174.621 427.757 174.476 cv
431.49 173.132 435.208 171.783 438.922 170.433 cv
439.692 170.76 440.447 171.08 441.217 171.407 cv
438.004 172.575 434.788 173.744 431.566 174.909 cv
443.512 170.573 mo
442.75 170.25 441.979 169.922 441.217 169.599 cv
445.716 167.963 450.215 166.327 454.734 164.698 cv
455.77 164.929 456.803 165.158 457.841 165.389 cv
453.04 167.111 448.281 168.839 443.512 170.573 cv
460.964 164.271 mo
459.923 164.042 458.879 163.811 457.841 163.581 cv
517.904 142.035 582.476 122.12 701.796 122.12 cv
701.796 122.12 li
701.796 123.928 li
701.796 123.928 li
701.796 123.928 li
584.539 123.928 520.156 143.159 460.964 164.271 cv
.194675 .150179 .156374 0 cmyk
f
457.841 165.389 mo
456.803 165.158 455.77 164.929 454.734 164.698 cv
455.77 164.325 456.802 163.953 457.841 163.581 cv
458.879 163.811 459.923 164.042 460.964 164.271 cv
459.923 164.643 458.879 165.016 457.841 165.389 cv
.383764 .310857 .316075 .00238041 cmyk
f
406.83 183.646 mo
405.332 183.552 403.829 183.459 402.319 183.365 cv
403.829 182.858 405.332 182.35 406.83 181.838 cv
408.319 181.932 409.79 182.025 411.269 182.119 cv
409.79 182.631 408.319 183.138 406.83 183.646 cv
f
415.477 180.652 mo
414.54 180.374 413.614 180.1 412.673 179.824 cv
413.614 179.496 414.54 179.173 415.477 178.844 cv
416.406 179.12 417.334 179.396 418.26 179.672 cv
417.334 179.999 416.406 180.326 415.477 180.652 cv
f
366.698 196.138 mo
364.499 196.136 362.281 196.133 360.038 196.131 cv
362.281 195.538 364.499 194.939 366.698 194.33 cv
368.842 194.333 370.963 194.335 373.069 194.338 cv
370.963 194.945 368.842 195.545 366.698 196.138 cv
f
360.039 197.939 mo
357.732 197.936 355.4 197.934 353.043 197.931 cv
355.4 197.34 357.731 196.74 360.038 196.131 cv
362.281 196.133 364.499 196.136 366.698 196.138 cv
364.499 196.747 362.282 197.346 360.039 197.939 cv
f
427.757 176.284 mo
426.481 176.138 425.207 175.994 423.927 175.85 cv
425.207 175.392 426.481 174.935 427.757 174.476 cv
429.033 174.621 430.293 174.764 431.566 174.909 cv
430.293 175.37 429.033 175.824 427.757 176.284 cv
f
441.217 171.407 mo
440.447 171.08 439.692 170.76 438.922 170.433 cv
439.692 170.154 440.447 169.879 441.217 169.599 cv
441.979 169.922 442.75 170.25 443.512 170.573 cv
442.75 170.85 441.979 171.13 441.217 171.407 cv
f
320.72 206.839 mo
318.215 206.694 315.693 206.553 313.124 206.415 cv
315.693 205.964 318.214 205.505 320.719 205.031 cv
323.099 205.169 325.467 205.311 327.792 205.455 cv
325.467 205.925 323.1 206.389 320.72 206.839 cv
f
701.796 234.039 mo
595.632 234.039 532.822 229.212 477.956 223.5 cv
479.867 223.091 481.774 222.688 483.706 222.284 cv
537.237 227.733 599.329 232.231 701.796 232.231 cv
701.796 234.039 li
472.324 222.908 mo
466.644 222.305 461.033 221.694 455.46 221.079 cv
457.549 220.705 459.643 220.332 461.744 219.96 cv
467.091 220.544 472.485 221.122 477.956 221.692 cv
476.069 222.095 474.193 222.5 472.324 222.908 cv
449.232 220.39 mo
432.482 218.53 415.883 216.65 398.353 214.877 cv
399.418 214.387 400.491 213.889 401.548 213.395 cv
420.067 215.293 437.592 217.301 455.46 219.271 cv
453.379 219.643 451.306 220.016 449.232 220.39 cv
395.114 214.552 mo
382.421 213.287 369.204 212.079 355.051 210.976 cv
356.685 210.506 358.293 210.034 359.902 209.553 cv
373.43 210.646 386.121 211.832 398.354 213.069 cv
397.273 213.568 396.203 214.058 395.114 214.552 cv
350.017 210.591 mo
338.427 209.723 326.207 208.925 313.124 208.223 cv
315.693 207.772 318.215 207.313 320.72 206.839 cv
332.829 207.54 344.223 208.324 355.052 209.168 cv
353.39 209.647 351.705 210.124 350.017 210.591 cv
.194675 .150179 .156374 0 cmyk
f
355.051 210.976 mo
353.39 210.847 351.705 210.718 350.017 210.591 cv
351.705 210.124 353.39 209.647 355.052 209.168 cv
356.686 209.296 358.293 209.423 359.902 209.553 cv
358.293 210.034 356.685 210.506 355.051 210.976 cv
.383764 .310857 .316075 .00238041 cmyk
f
398.353 214.877 mo
397.272 214.768 396.203 214.661 395.114 214.552 cv
396.203 214.058 397.273 213.568 398.354 213.069 cv
399.418 213.177 400.491 213.286 401.548 213.395 cv
400.491 213.889 399.418 214.387 398.353 214.877 cv
f
455.46 221.079 mo
453.379 220.849 451.306 220.62 449.232 220.39 cv
451.306 220.016 453.379 219.643 455.46 219.271 cv
457.549 219.501 459.643 219.731 461.744 219.96 cv
459.643 220.332 457.549 220.705 455.46 221.079 cv
f
477.956 223.5 mo
476.069 223.303 474.193 223.106 472.324 222.908 cv
474.193 222.5 476.069 222.095 477.956 221.692 cv
479.867 221.891 481.774 222.087 483.706 222.284 cv
481.774 222.688 479.867 223.091 477.956 223.5 cv
f
304.886 207.799 mo
270.807 206.121 230.943 205.086 181.796 205.086 cv
181.796 203.278 li
234.958 203.278 277.257 204.489 313.124 206.415 cv
310.415 206.89 307.67 207.351 304.886 207.799 cv
.194675 .150179 .156374 0 cmyk
f
313.124 208.223 mo
310.415 208.077 307.67 207.936 304.886 207.799 cv
307.67 207.351 310.415 206.89 313.124 206.415 cv
315.693 206.553 318.215 206.694 320.72 206.839 cv
318.215 207.313 315.693 207.772 313.124 208.223 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 83.2502 mo
441.796 83.2502 441.796 28.9958 181.796 28.9958 cv
181.796 27.1878 li
441.796 27.1878 441.796 81.4422 701.796 81.4422 cv
701.796 83.2502 li
.194675 .150179 .156374 0 cmyk
f
701.796 72.4026 mo
441.796 72.4026 441.796 7.4816 181.796 7.4816 cv
181.796 5.67383 li
441.796 5.67383 441.796 70.5947 701.796 70.5947 cv
701.796 72.4026 li
f
701.796 74.2106 mo
441.796 74.2106 441.796 9.2896 181.796 9.2896 cv
181.796 7.4816 li
441.796 7.4816 441.796 72.4026 701.796 72.4026 cv
701.796 74.2106 li
f
701.796 76.0184 mo
441.796 76.0184 441.796 11.0974 181.796 11.0974 cv
181.796 9.2896 li
441.796 9.2896 441.796 74.2106 701.796 74.2106 cv
701.796 76.0184 li
f
701.796 85.0579 mo
441.796 85.0579 441.796 30.8038 181.796 30.8038 cv
181.796 28.9958 li
441.796 28.9958 441.796 83.2502 701.796 83.2502 cv
701.796 85.0579 li
f
701.796 214.332 mo
647.778 214.332 604.997 213.699 568.761 212.696 cv
565.535 212.024 562.336 211.325 559.211 210.611 cv
597.441 211.773 642.969 212.524 701.796 212.524 cv
701.796 214.332 li
559.211 212.419 mo
553.415 212.243 547.8 212.057 542.318 211.863 cv
545.342 211.43 548.402 211.008 551.518 210.595 cv
554.052 211.217 556.612 211.825 559.211 212.419 cv
532.878 211.463 mo
530.494 210.966 528.159 210.467 525.827 209.954 cv
526.863 209.821 527.902 209.688 528.949 209.556 cv
533.314 209.728 537.762 209.894 542.317 210.056 cv
539.127 210.513 535.973 210.984 532.878 211.463 cv
522.941 211.122 mo
521.427 211.06 519.934 210.997 518.44 210.934 cv
519.209 210.829 519.962 210.727 520.737 210.624 cv
521.466 210.79 522.207 210.957 522.941 211.122 cv
508.641 210.503 mo
475.914 209.021 447.611 207.289 417.663 205.649 cv
418.767 205.106 419.855 204.568 420.955 204.022 cv
451.127 205.687 479.851 207.434 513.393 208.908 cv
514.205 209.102 515.006 209.292 515.823 209.485 cv
513.398 209.821 511.017 210.159 508.641 210.503 cv
414.344 205.468 mo
402.776 204.841 390.914 204.228 378.445 203.651 cv
379.997 203.127 381.56 202.593 383.093 202.061 cv
395.059 202.63 406.475 203.229 417.663 203.841 cv
416.56 204.385 415.453 204.928 414.344 205.468 cv
373.666 203.433 mo
363.86 202.993 353.645 202.574 342.874 202.188 cv
345.096 201.675 347.291 201.153 349.467 200.623 cv
359.566 201.005 369.177 201.414 378.446 201.843 cv
376.859 202.379 375.274 202.906 373.666 203.433 cv
f
378.445 203.651 mo
376.858 203.578 375.274 203.505 373.666 203.433 cv
375.274 202.906 376.859 202.379 378.446 201.843 cv
379.998 201.915 381.56 201.988 383.093 202.061 cv
381.56 202.593 379.997 203.127 378.445 203.651 cv
.383764 .310857 .316075 .00238041 cmyk
f
532.601 211.506 mo
529.329 211.38 526.116 211.253 522.941 211.122 cv
522.207 210.957 521.466 210.79 520.737 210.624 cv
522.414 210.399 524.123 210.174 525.827 209.954 cv
528.159 210.467 530.494 210.966 532.878 211.463 cv
532.784 211.477 532.695 211.491 532.601 211.506 cv
515.823 209.485 mo
515.006 209.292 514.205 209.102 513.393 208.908 cv
515.061 208.981 516.747 209.054 518.44 209.126 cv
517.571 209.244 516.686 209.366 515.823 209.485 cv
f
417.663 205.649 mo
416.56 205.589 415.453 205.529 414.344 205.468 cv
415.453 204.928 416.56 204.385 417.663 203.841 cv
418.767 203.902 419.855 203.962 420.955 204.022 cv
419.855 204.568 418.767 205.106 417.663 205.649 cv
f
518.44 210.934 mo
515.127 210.793 511.862 210.649 508.641 210.503 cv
511.017 210.159 513.398 209.821 515.823 209.485 cv
517.449 209.868 519.087 210.248 520.737 210.624 cv
519.962 210.727 519.209 210.829 518.44 210.934 cv
525.827 209.954 mo
524.864 209.743 523.896 209.528 522.942 209.314 cv
524.924 209.396 526.93 209.477 528.949 209.556 cv
527.902 209.688 526.863 209.821 525.827 209.954 cv
f
520.737 210.624 mo
519.087 210.248 517.449 209.868 515.823 209.485 cv
516.686 209.366 517.571 209.244 518.44 209.126 cv
519.934 209.189 521.428 209.252 522.942 209.314 cv
523.896 209.528 524.864 209.743 525.827 209.954 cv
524.123 210.174 522.414 210.399 520.737 210.624 cv
.510277 .424994 .425025 .0681468 cmyk
f
542.318 211.863 mo
539.235 211.754 536.188 211.642 533.194 211.528 cv
533.09 211.507 532.983 211.484 532.878 211.463 cv
535.973 210.984 539.127 210.513 542.317 210.056 cv
544.999 210.15 547.702 210.243 550.457 210.334 cv
550.807 210.421 551.166 210.509 551.518 210.595 cv
548.402 211.008 545.342 211.43 542.318 211.863 cv
.383764 .310857 .316075 .00238041 cmyk
f
533.194 211.528 mo
532.996 211.521 532.799 211.513 532.601 211.506 cv
532.695 211.491 532.784 211.477 532.878 211.463 cv
532.983 211.484 533.09 211.507 533.194 211.528 cv
.510277 .424994 .425025 .0681468 cmyk
f
568.761 212.696 mo
565.535 212.607 562.336 212.514 559.211 212.419 cv
556.612 211.825 554.052 211.217 551.518 210.595 cv
551.981 210.534 552.439 210.474 552.903 210.413 cv
554.984 210.48 557.087 210.546 559.211 210.611 cv
562.336 211.325 565.535 212.024 568.761 212.696 cv
.383764 .310857 .316075 .00238041 cmyk
f
551.518 210.595 mo
551.166 210.509 550.807 210.421 550.457 210.334 cv
551.268 210.36 552.085 210.387 552.903 210.413 cv
552.439 210.474 551.981 210.534 551.518 210.595 cv
.510277 .424994 .425025 .0681468 cmyk
f
335.896 201.945 mo
295.325 200.575 246.653 199.662 181.796 199.662 cv
181.796 199.662 li
181.796 197.854 li
250.414 197.854 300.915 198.876 342.873 200.38 cv
340.574 200.911 338.249 201.433 335.896 201.945 cv
.194675 .150179 .156374 0 cmyk
f
342.874 202.188 mo
340.574 202.106 338.249 202.025 335.896 201.945 cv
338.249 201.433 340.574 200.911 342.873 200.38 cv
345.096 200.46 347.291 200.541 349.467 200.623 cv
347.291 201.153 345.096 201.675 342.874 202.188 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 86.8659 mo
701.796 86.8659 li
701.796 86.8659 li
441.796 86.8659 441.796 32.6115 181.796 32.6115 cv
181.796 30.8038 li
441.796 30.8038 441.796 85.0579 701.796 85.0579 cv
701.796 86.8659 li
.194675 .150179 .156374 0 cmyk
f
181.796 146.872 mo
181.796 146.872 li
181.796 145.064 li
241.496 145.064 287.494 143.234 326.073 140.416 cv
329.067 140.784 332.015 141.162 334.923 141.55 cv
294.549 144.747 246.13 146.872 181.796 146.872 cv
343.13 140.876 mo
340.425 140.489 337.701 140.112 334.922 139.742 cv
340.997 139.261 346.897 138.755 352.634 138.229 cv
354.196 138.684 355.73 139.139 357.269 139.604 cv
352.662 140.042 347.949 140.467 343.13 140.876 cv
361.75 139.172 mo
360.268 138.71 358.771 138.25 357.269 137.796 cv
464.386 127.623 518.444 110.369 701.796 110.369 cv
701.796 112.177 li
701.796 112.177 li
701.606 112.177 701.42 112.177 701.23 112.177 cv
520.904 112.212 465.823 128.961 361.75 139.172 cv
f
334.923 141.55 mo
332.015 141.162 329.067 140.784 326.073 140.416 cv
329.067 140.197 332.014 139.972 334.922 139.742 cv
337.701 140.112 340.425 140.489 343.13 140.876 cv
340.425 141.106 337.702 141.33 334.923 141.55 cv
.383764 .310857 .316075 .00238041 cmyk
f
357.269 139.604 mo
355.73 139.139 354.196 138.684 352.634 138.229 cv
354.196 138.086 355.73 137.942 357.269 137.796 cv
358.771 138.25 360.268 138.71 361.75 139.172 cv
360.268 139.317 358.771 139.462 357.269 139.604 cv
f
181.796 161.154 mo
181.796 161.154 li
181.796 159.346 li
228.118 159.346 266.191 157.848 298.948 155.387 cv
301.832 155.755 304.661 156.133 307.465 156.525 cv
272.817 159.382 232.197 161.154 181.796 161.154 cv
315.273 155.854 mo
312.711 155.465 310.093 155.084 307.464 154.717 cv
331.607 152.725 352.859 150.206 372.474 147.393 cv
374.336 147.724 376.177 148.056 378.01 148.393 cv
358.962 151.22 338.468 153.78 315.273 155.854 cv
385.635 147.237 mo
384.462 146.812 383.289 146.391 382.106 145.97 cv
473.787 132.04 533.01 112.222 701.23 112.177 cv
701.42 112.177 701.606 112.177 701.796 112.177 cv
701.796 112.177 li
701.796 113.984 li
535.313 113.984 475.432 133.324 385.635 147.237 cv
379.509 146.862 mo
379.014 146.77 378.507 146.677 378.01 146.585 cv
378.175 146.561 378.34 146.537 378.505 146.512 cv
378.836 146.627 379.179 146.747 379.509 146.862 cv
.194675 .150179 .156374 0 cmyk
f
378.01 148.393 mo
376.177 148.056 374.336 147.724 372.474 147.393 cv
374.336 147.126 376.176 146.857 378.01 146.585 cv
378.507 146.677 379.014 146.77 379.509 146.862 cv
380.379 147.167 381.242 147.471 382.106 147.778 cv
380.75 147.984 379.38 148.19 378.01 148.393 cv
.383764 .310857 .316075 .00238041 cmyk
f
307.465 156.525 mo
304.661 156.133 301.832 155.755 298.948 155.387 cv
301.832 155.171 304.66 154.948 307.464 154.717 cv
310.093 155.084 312.711 155.465 315.273 155.854 cv
312.711 156.083 310.094 156.308 307.465 156.525 cv
f
383.368 147.586 mo
382.086 147.343 380.805 147.102 379.509 146.862 cv
379.179 146.747 378.836 146.627 378.505 146.512 cv
379.708 146.333 380.914 146.151 382.106 145.97 cv
383.289 146.391 384.462 146.812 385.635 147.237 cv
384.882 147.353 384.126 147.47 383.368 147.586 cv
f
382.106 147.778 mo
381.242 147.471 380.379 147.167 379.509 146.862 cv
380.805 147.102 382.086 147.343 383.368 147.586 cv
382.946 147.65 382.529 147.714 382.106 147.778 cv
.510277 .424994 .425025 .0681468 cmyk
f
701.23 112.177 mo
701.42 112.177 701.606 112.177 701.796 112.177 cv
701.606 112.177 701.42 112.177 701.23 112.177 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 175.436 mo
181.796 175.436 li
181.796 173.629 li
237.798 173.629 281.73 170.862 318.803 166.52 cv
322.123 166.715 325.398 166.916 328.611 167.123 cv
289.512 172.151 242.813 175.436 181.796 175.436 cv
337.605 165.918 mo
334.653 165.712 331.653 165.511 328.612 165.315 cv
334.419 164.569 340.041 163.786 345.534 162.967 cv
347.237 163.307 348.938 163.654 350.614 164.003 cv
346.364 164.662 342.038 165.301 337.605 165.918 cv
355.499 163.23 mo
353.886 162.882 352.251 162.536 350.614 162.195 cv
367.454 159.582 382.959 156.657 397.772 153.579 cv
398.787 153.969 399.795 154.359 400.805 154.752 cv
386.505 157.763 371.608 160.635 355.499 163.23 cv
403.801 154.118 mo
402.805 153.726 401.806 153.334 400.805 152.945 cv
400.879 152.929 400.96 152.912 401.034 152.896 cv
402.473 153.193 403.904 153.491 405.332 153.791 cv
404.823 153.9 404.311 154.009 403.801 154.118 cv
409.563 152.878 mo
408.154 152.577 406.752 152.281 405.332 151.983 cv
484.987 134.919 547.754 113.984 701.796 113.984 cv
701.796 115.792 li
701.796 115.792 li
701.796 115.792 li
550.5 115.792 487.242 135.99 409.563 152.878 cv
.194675 .150179 .156374 0 cmyk
f
405.332 153.791 mo
403.904 153.491 402.473 153.193 401.034 152.896 cv
402.473 152.593 403.904 152.289 405.332 151.983 cv
406.752 152.281 408.154 152.577 409.563 152.878 cv
408.154 153.184 406.752 153.487 405.332 153.791 cv
.383764 .310857 .316075 .00238041 cmyk
f
350.614 164.003 mo
348.938 163.654 347.237 163.307 345.534 162.967 cv
347.237 162.714 348.938 162.455 350.614 162.195 cv
352.251 162.536 353.886 162.882 355.499 163.23 cv
353.886 163.49 352.251 163.749 350.614 164.003 cv
f
328.611 167.123 mo
325.398 166.916 322.123 166.715 318.803 166.52 cv
322.123 166.131 325.399 165.729 328.612 165.315 cv
331.653 165.511 334.653 165.712 337.605 165.918 cv
334.653 166.33 331.652 166.732 328.611 167.123 cv
f
400.805 154.752 mo
399.795 154.359 398.787 153.969 397.772 153.579 cv
398.787 153.368 399.795 153.157 400.805 152.945 cv
401.806 153.334 402.805 153.726 403.801 154.118 cv
402.805 154.33 401.806 154.542 400.805 154.752 cv
f
181.796 191.527 mo
181.796 189.719 li
242.813 189.719 289.513 185.747 328.612 179.667 cv
331.653 179.781 334.653 179.898 337.605 180.018 cv
296.696 186.912 247.558 191.527 181.796 191.527 cv
345.948 178.561 mo
343.2 178.442 340.429 178.325 337.606 178.21 cv
350.992 175.954 363.481 173.458 375.403 170.796 cv
377.293 170.971 379.17 171.147 381.032 171.325 cv
369.904 173.895 358.294 176.33 345.948 178.561 cv
386.485 170.047 mo
385.204 169.92 383.905 169.794 382.612 169.669 cv
382.258 169.578 381.909 169.488 381.554 169.397 cv
393.428 166.647 404.766 163.742 415.851 160.773 cv
416.739 161.137 417.625 161.501 418.51 161.866 cv
408.114 164.669 397.521 167.421 386.485 170.047 cv
421.153 161.151 mo
420.27 160.785 419.395 160.423 418.51 160.058 cv
420.852 159.427 423.183 158.793 425.508 158.157 cv
426.723 158.426 427.938 158.696 429.149 158.966 cv
426.496 159.696 423.824 160.427 421.153 161.151 cv
432.772 157.967 mo
431.564 157.697 430.36 157.428 429.149 157.158 cv
498.653 138.04 563.37 117.6 701.796 117.6 cv
701.796 119.408 li
565.782 119.408 500.925 139.144 432.772 157.967 cv
.194675 .150179 .156374 0 cmyk
f
429.149 158.966 mo
427.938 158.696 426.723 158.426 425.508 158.157 cv
426.723 157.824 427.938 157.491 429.149 157.158 cv
430.36 157.428 431.564 157.697 432.772 157.967 cv
431.564 158.301 430.36 158.633 429.149 158.966 cv
.383764 .310857 .316075 .00238041 cmyk
f
337.605 180.018 mo
334.653 179.898 331.653 179.781 328.612 179.667 cv
331.653 179.194 334.654 178.708 337.606 178.21 cv
340.429 178.325 343.2 178.442 345.948 178.561 cv
343.2 179.058 340.428 179.542 337.605 180.018 cv
f
382.612 169.669 mo
382.086 169.618 381.56 169.568 381.032 169.517 cv
381.205 169.477 381.381 169.437 381.554 169.397 cv
381.909 169.488 382.258 169.578 382.612 169.669 cv
f
381.032 171.325 mo
379.17 171.147 377.293 170.971 375.403 170.796 cv
376.203 170.617 377.016 170.434 377.811 170.254 cv
379.069 170.57 380.309 170.885 381.554 171.204 cv
381.381 171.244 381.205 171.285 381.032 171.325 cv
385.219 170.347 mo
384.353 170.12 383.483 169.894 382.612 169.669 cv
383.905 169.794 385.204 169.92 386.485 170.047 cv
386.067 170.146 385.638 170.248 385.219 170.347 cv
f
381.554 171.204 mo
380.309 170.885 379.069 170.57 377.811 170.254 cv
378.894 170.009 379.958 169.765 381.032 169.517 cv
381.56 169.568 382.086 169.618 382.612 169.669 cv
383.483 169.894 384.353 170.12 385.219 170.347 cv
384.002 170.635 382.782 170.92 381.554 171.204 cv
.510277 .424994 .425025 .0681468 cmyk
f
418.51 161.866 mo
417.625 161.501 416.739 161.137 415.851 160.773 cv
416.739 160.535 417.625 160.297 418.51 160.058 cv
419.395 160.423 420.27 160.785 421.153 161.151 cv
420.27 161.391 419.396 161.627 418.51 161.866 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 130.781 mo
181.796 130.781 li
181.796 128.973 li
231.07 128.973 271.002 128.175 305.139 126.882 cv
307.734 127.37 310.288 127.871 312.817 128.386 cv
277.012 129.858 234.815 130.781 181.796 130.781 cv
319.933 128.083 mo
317.589 127.57 315.217 127.068 312.816 126.578 cv
452.597 120.835 494.815 106.753 701.796 106.753 cv
701.796 108.561 li
701.796 108.561 li
701.796 108.561 li
498.37 108.561 454.095 122.164 319.933 128.083 cv
.194675 .150179 .156374 0 cmyk
f
312.817 128.386 mo
310.288 127.871 307.734 127.37 305.139 126.882 cv
307.734 126.783 310.287 126.682 312.816 126.578 cv
315.217 127.068 317.589 127.57 319.933 128.083 cv
317.589 128.187 315.218 128.288 312.817 128.386 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 192.431 mo
181.796 191.527 li
247.558 191.527 296.696 186.912 337.605 180.018 cv
339.037 180.076 340.438 180.134 341.85 180.194 cv
300.094 187.491 249.859 192.431 181.796 192.431 cv
349.914 178.737 mo
348.604 178.678 347.273 178.619 345.948 178.561 cv
358.294 176.33 369.904 173.895 381.032 171.325 cv
381.56 171.376 382.087 171.426 382.613 171.477 cv
382.871 171.544 383.138 171.613 383.396 171.68 cv
372.74 174.173 361.659 176.545 349.914 178.737 cv
389.154 170.311 mo
388.263 170.222 387.382 170.135 386.485 170.047 cv
397.521 167.421 408.114 164.669 418.51 161.866 cv
418.953 162.048 419.392 162.23 419.834 162.413 cv
409.855 165.112 399.694 167.768 389.154 170.311 cv
422.468 161.698 mo
422.028 161.515 421.594 161.334 421.153 161.151 cv
423.824 160.427 426.496 159.696 429.149 158.966 cv
429.755 159.101 430.358 159.235 430.963 159.37 cv
428.145 160.147 425.304 160.926 422.468 161.698 cv
434.579 158.372 mo
433.975 158.236 433.377 158.102 432.772 157.967 cv
500.925 139.144 565.782 119.408 701.796 119.408 cv
701.796 120.312 li
566.988 120.312 502.076 139.701 434.579 158.372 cv
.194675 .150179 .156374 0 cmyk
f
430.963 159.37 mo
430.358 159.235 429.755 159.101 429.149 158.966 cv
430.36 158.633 431.564 158.301 432.772 157.967 cv
433.377 158.102 433.975 158.236 434.579 158.372 cv
433.371 158.706 432.173 159.037 430.963 159.37 cv
.383764 .310857 .316075 .00238041 cmyk
f
341.85 180.194 mo
340.438 180.134 339.037 180.076 337.605 180.018 cv
340.428 179.542 343.2 179.058 345.948 178.561 cv
347.273 178.619 348.604 178.678 349.914 178.737 cv
347.267 179.231 344.566 179.719 341.85 180.194 cv
f
383.396 171.68 mo
383.138 171.613 382.871 171.544 382.613 171.477 cv
383.001 171.514 383.392 171.552 383.779 171.59 cv
383.65 171.62 383.525 171.649 383.396 171.68 cv
f
382.613 171.477 mo
382.087 171.426 381.56 171.376 381.032 171.325 cv
381.205 171.285 381.381 171.244 381.554 171.204 cv
381.909 171.295 382.259 171.386 382.613 171.477 cv
387.024 170.822 mo
386.427 170.664 385.818 170.504 385.219 170.347 cv
385.638 170.248 386.067 170.146 386.485 170.047 cv
387.382 170.135 388.263 170.222 389.154 170.311 cv
388.441 170.483 387.741 170.651 387.024 170.822 cv
f
383.779 171.59 mo
383.392 171.552 383.001 171.514 382.613 171.477 cv
382.259 171.386 381.909 171.295 381.554 171.204 cv
382.782 170.92 384.002 170.635 385.219 170.347 cv
385.818 170.504 386.427 170.664 387.024 170.822 cv
385.949 171.079 384.863 171.336 383.779 171.59 cv
.510277 .424994 .425025 .0681468 cmyk
f
419.834 162.413 mo
419.392 162.23 418.953 162.048 418.51 161.866 cv
419.396 161.627 420.27 161.391 421.153 161.151 cv
421.594 161.334 422.028 161.515 422.468 161.698 cv
421.587 161.938 420.717 162.174 419.834 162.413 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 234.942 mo
701.796 234.942 li
701.796 234.942 li
593.807 234.942 530.669 229.948 475.127 224.108 cv
476.065 223.905 477.013 223.701 477.956 223.5 cv
532.822 229.212 595.632 234.039 701.796 234.039 cv
701.796 234.942 li
469.546 223.515 mo
463.759 222.896 458.03 222.268 452.341 221.638 cv
453.375 221.452 454.423 221.264 455.46 221.079 cv
461.033 221.694 466.644 222.305 472.324 222.908 cv
471.397 223.109 470.468 223.313 469.546 223.515 cv
446.131 220.949 mo
429.913 219.145 413.787 217.331 396.74 215.619 cv
397.282 215.37 397.813 215.127 398.353 214.877 cv
415.883 216.65 432.482 218.53 449.232 220.39 cv
448.199 220.576 447.163 220.763 446.131 220.949 cv
393.477 215.293 mo
380.544 214.014 367.037 212.795 352.558 211.688 cv
353.386 211.454 354.23 211.213 355.051 210.976 cv
369.204 212.079 382.421 213.287 395.114 214.552 cv
394.57 214.799 394.023 215.047 393.477 215.293 cv
347.423 211.303 mo
335.421 210.422 322.712 209.616 309.094 208.915 cv
310.44 208.688 311.796 208.456 313.124 208.223 cv
326.207 208.925 338.427 209.723 350.017 210.591 cv
349.154 210.831 348.293 211.067 347.423 211.303 cv
.194675 .150179 .156374 0 cmyk
f
352.558 211.688 mo
350.856 211.558 349.154 211.43 347.423 211.303 cv
348.293 211.067 349.154 210.831 350.017 210.591 cv
351.705 210.718 353.39 210.847 355.051 210.976 cv
354.23 211.213 353.386 211.454 352.558 211.688 cv
.383764 .310857 .316075 .00238041 cmyk
f
396.74 215.619 mo
395.655 215.51 394.569 215.401 393.477 215.293 cv
394.023 215.047 394.57 214.799 395.114 214.552 cv
396.203 214.661 397.272 214.768 398.353 214.877 cv
397.813 215.127 397.282 215.37 396.74 215.619 cv
f
452.341 221.638 mo
450.264 221.408 448.203 221.179 446.131 220.949 cv
447.163 220.763 448.199 220.576 449.232 220.39 cv
451.306 220.62 453.379 220.849 455.46 221.079 cv
454.423 221.264 453.375 221.452 452.341 221.638 cv
f
475.127 224.108 mo
473.258 223.911 471.399 223.714 469.546 223.515 cv
470.468 223.313 471.397 223.109 472.324 222.908 cv
474.193 223.106 476.069 223.303 477.956 223.5 cv
477.013 223.701 476.065 223.905 475.127 224.108 cv
f
300.478 208.491 mo
267.374 206.938 228.848 205.99 181.796 205.99 cv
181.796 205.086 li
230.943 205.086 270.807 206.121 304.886 207.799 cv
303.433 208.032 301.951 208.265 300.478 208.491 cv
.194675 .150179 .156374 0 cmyk
f
309.094 208.915 mo
306.263 208.769 303.392 208.628 300.478 208.491 cv
301.951 208.265 303.433 208.032 304.886 207.799 cv
307.67 207.936 310.415 208.077 313.124 208.223 cv
311.796 208.456 310.44 208.688 309.094 208.915 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 194.239 mo
181.796 194.239 li
181.796 192.431 li
249.859 192.431 300.094 187.491 341.85 180.194 cv
344.566 180.308 347.266 180.426 349.913 180.545 cv
306.575 188.631 254.286 194.239 181.796 194.239 cv
357.494 179.088 mo
354.993 178.969 352.475 178.852 349.914 178.737 cv
361.659 176.545 372.74 174.173 383.396 171.68 cv
384.61 171.994 385.821 172.312 387.024 172.63 cv
377.564 174.888 367.769 177.056 357.494 179.088 cv
394.385 170.841 mo
392.657 170.664 390.902 170.486 389.154 170.311 cv
399.694 167.768 409.855 165.112 419.834 162.413 cv
420.717 162.778 421.587 163.139 422.468 163.506 cv
413.287 166.003 403.995 168.462 394.385 170.841 cv
425.089 162.791 mo
424.218 162.427 423.342 162.061 422.468 161.698 cv
425.304 160.926 428.145 160.147 430.963 159.37 cv
432.173 159.64 433.371 159.909 434.579 160.179 cv
431.425 161.052 428.262 161.924 425.089 162.791 cv
438.186 159.181 mo
436.987 158.911 435.779 158.64 434.579 158.372 cv
502.076 139.701 566.988 120.312 701.796 120.312 cv
701.796 122.12 li
701.796 122.12 li
701.796 122.12 li
569.384 122.12 504.415 140.823 438.186 159.181 cv
.194675 .150179 .156374 0 cmyk
f
434.579 160.179 mo
433.371 159.909 432.173 159.64 430.963 159.37 cv
432.173 159.037 433.371 158.706 434.579 158.372 cv
435.779 158.64 436.987 158.911 438.186 159.181 cv
436.987 159.513 435.779 159.848 434.579 160.179 cv
.383764 .310857 .316075 .00238041 cmyk
f
349.913 180.545 mo
347.266 180.426 344.566 180.308 341.85 180.194 cv
344.566 179.719 347.267 179.231 349.914 178.737 cv
352.475 178.852 354.993 178.969 357.494 179.088 cv
354.993 179.583 352.475 180.067 349.913 180.545 cv
f
387.024 172.63 mo
385.821 172.312 384.61 171.994 383.396 171.68 cv
383.525 171.649 383.65 171.62 383.779 171.59 cv
385.585 171.765 387.371 171.941 389.153 172.119 cv
388.44 172.291 387.741 172.459 387.024 172.63 cv
f
390.584 171.773 mo
389.4 171.454 388.218 171.138 387.024 170.822 cv
387.741 170.651 388.441 170.483 389.154 170.311 cv
390.902 170.486 392.657 170.664 394.385 170.841 cv
393.127 171.152 391.853 171.464 390.584 171.773 cv
f
389.153 172.119 mo
387.371 171.941 385.585 171.765 383.779 171.59 cv
384.863 171.336 385.949 171.079 387.024 170.822 cv
388.218 171.138 389.4 171.454 390.584 171.773 cv
390.111 171.888 389.628 172.005 389.153 172.119 cv
.510277 .424994 .425025 .0681468 cmyk
f
422.468 163.506 mo
421.587 163.139 420.717 162.778 419.834 162.413 cv
420.717 162.174 421.587 161.938 422.468 161.698 cv
423.342 162.061 424.218 162.427 425.089 162.791 cv
424.218 163.029 423.342 163.268 422.468 163.506 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 307.775 mo
181.796 305.967 li
441.796 305.967 441.796 277.687 701.796 277.687 cv
701.796 277.687 li
701.796 279.494 li
701.796 279.494 li
701.606 279.494 701.43 279.494 701.239 279.495 cv
441.81 279.536 441.606 307.775 181.796 307.775 cv
.194675 .150179 .156374 0 cmyk
f
701.239 279.495 mo
701.43 279.494 701.606 279.494 701.796 279.494 cv
701.796 279.494 li
701.606 279.494 701.43 279.495 701.239 279.495 cv
.383764 .310857 .316075 .00238041 cmyk
f
701.796 77.8264 mo
701.796 77.8264 li
701.796 77.8264 li
441.796 77.8264 441.796 12.9054 181.796 12.9054 cv
181.796 11.0974 li
441.796 11.0974 441.796 76.0184 701.796 76.0184 cv
701.796 77.8264 li
.194675 .150179 .156374 0 cmyk
f
181.796 293.493 mo
181.796 291.685 li
181.796 291.685 li
181.876 291.685 181.951 291.685 182.031 291.685 cv
441.793 291.674 441.876 274.071 701.796 274.071 cv
701.796 275.879 li
441.796 275.879 441.796 293.493 181.796 293.493 cv
f
181.796 291.685 mo
181.876 291.685 181.951 291.685 182.031 291.685 cv
181.951 291.685 181.876 291.685 181.796 291.685 cv
.383764 .310857 .316075 .00238041 cmyk
f
181.796 295.301 mo
181.796 293.493 li
441.796 293.493 441.796 275.879 701.796 275.879 cv
701.796 277.687 li
701.796 277.687 li
701.796 277.687 li
441.796 277.687 441.796 295.301 181.796 295.301 cv
.194675 .150179 .156374 0 cmyk
f
701.796 272.263 mo
701.796 272.263 li
701.796 272.263 li
599.059 272.263 536.928 266.377 483.301 259.254 cv
485.281 258.909 487.258 258.569 489.262 258.228 cv
541.457 264.981 602.62 270.434 701.23 270.455 cv
701.42 270.455 701.606 270.455 701.796 270.455 cv
701.796 270.455 li
701.796 272.263 li
477.483 258.473 mo
472.82 257.839 468.214 257.198 463.643 256.551 cv
465.748 256.245 467.866 255.938 469.988 255.634 cv
474.377 256.245 478.812 256.85 483.301 257.446 cv
481.355 257.786 479.409 258.129 477.483 258.473 cv
457.388 255.661 mo
449.898 254.588 442.483 253.507 435.031 252.429 cv
437.478 252.181 439.929 251.932 442.373 251.685 cv
449.434 252.709 456.494 253.732 463.644 254.743 cv
461.555 255.048 459.465 255.355 457.388 255.661 cv
420.191 250.301 mo
407.1 248.448 393.719 246.636 379.548 244.939 cv
381.486 244.573 383.404 244.205 385.314 243.833 cv
400.031 245.653 413.949 247.59 427.652 249.557 cv
425.171 249.806 422.688 250.054 420.191 250.301 cv
373.58 244.238 mo
360.618 242.741 346.966 241.348 332.226 240.11 cv
335.341 239.783 338.401 239.449 341.424 239.107 cv
354.917 240.335 367.516 241.691 379.548 243.131 cv
377.574 243.504 375.586 243.873 373.58 244.238 cv
322.196 239.305 mo
284.416 236.413 239.512 234.555 181.796 234.555 cv
181.796 232.747 li
244.638 232.747 292.305 234.951 332.111 238.292 cv
332.081 238.301 332.028 238.317 331.997 238.325 cv
328.78 238.662 325.52 238.988 322.196 239.305 cv
f
463.643 256.551 mo
461.555 256.256 459.465 255.958 457.388 255.661 cv
459.465 255.355 461.555 255.048 463.644 254.743 cv
465.748 255.041 467.866 255.339 469.988 255.634 cv
467.866 255.938 465.748 256.245 463.643 256.551 cv
.383764 .310857 .316075 .00238041 cmyk
f
331.997 238.325 mo
332.028 238.317 332.081 238.301 332.111 238.292 cv
332.152 238.295 332.186 238.298 332.226 238.302 cv
332.155 238.309 332.068 238.318 331.997 238.325 cv
f
332.226 240.11 mo
332.185 240.106 332.151 240.103 332.111 240.1 cv
333.689 239.636 335.245 239.17 336.799 238.694 cv
338.353 238.83 339.893 238.967 341.424 239.107 cv
338.401 239.449 335.341 239.783 332.226 240.11 cv
327.217 239.698 mo
325.562 239.565 323.879 239.433 322.196 239.305 cv
325.52 238.988 328.78 238.662 331.997 238.325 cv
330.409 238.792 328.831 239.245 327.217 239.698 cv
f
332.111 240.1 mo
330.493 239.964 328.862 239.83 327.217 239.698 cv
328.831 239.245 330.409 238.792 331.997 238.325 cv
332.068 238.318 332.155 238.309 332.226 238.302 cv
333.763 238.431 335.284 238.561 336.799 238.694 cv
335.245 239.17 333.689 239.636 332.111 240.1 cv
.510277 .424994 .425025 .0681468 cmyk
f
427.652 251.365 mo
425.171 251.009 422.688 250.654 420.191 250.301 cv
422.688 250.054 425.171 249.806 427.652 249.557 cv
430.117 249.911 432.577 250.266 435.032 250.621 cv
432.577 250.869 430.116 251.117 427.652 251.365 cv
.383764 .310857 .316075 .00238041 cmyk
f
379.548 244.939 mo
377.574 244.703 375.586 244.469 373.58 244.238 cv
375.586 243.873 377.574 243.504 379.548 243.131 cv
381.486 243.363 383.404 243.597 385.314 243.833 cv
383.404 244.205 381.486 244.573 379.548 244.939 cv
f
435.031 252.429 mo
432.576 252.074 430.116 251.718 427.652 251.365 cv
430.116 251.117 432.577 250.869 435.032 250.621 cv
437.478 250.975 439.929 251.33 442.373 251.685 cv
439.929 251.932 437.478 252.181 435.031 252.429 cv
f
483.301 259.254 mo
481.354 258.996 479.409 258.734 477.483 258.473 cv
479.409 258.129 481.355 257.786 483.301 257.446 cv
485.281 257.709 487.258 257.969 489.262 258.228 cv
487.258 258.569 485.281 258.909 483.301 259.254 cv
f
701.796 270.455 mo
701.606 270.455 701.42 270.455 701.23 270.455 cv
701.42 270.455 701.606 270.455 701.796 270.455 cv
f
171.796 57.561 mo
181.796 57.561 li
181.796 59.3689 li
171.796 59.3689 li
171.796 57.561 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 57.561 mo
171.796 57.811 li
181.546 57.811 li
181.546 59.1189 li
172.046 59.1189 li
172.046 57.561 li
171.796 57.561 li
171.796 57.811 li
171.796 57.561 li
171.546 57.561 li
171.546 59.6189 li
182.046 59.6189 li
182.046 57.311 li
171.546 57.311 li
171.546 57.561 li
171.796 57.561 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 23.572 mo
181.796 23.572 li
181.796 32.6115 li
171.796 32.6115 li
171.796 23.572 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 23.572 mo
171.796 23.822 li
181.546 23.822 li
181.546 32.3615 li
172.046 32.3615 li
172.046 23.572 li
171.796 23.572 li
171.796 23.822 li
171.796 23.572 li
171.546 23.572 li
171.546 32.8615 li
182.046 32.8615 li
182.046 23.322 li
171.546 23.322 li
171.546 23.572 li
171.796 23.572 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 277.403 mo
181.796 277.403 li
181.796 279.211 li
171.796 279.211 li
171.796 277.403 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 277.403 mo
171.796 277.653 li
181.546 277.653 li
181.546 278.961 li
172.046 278.961 li
172.046 277.403 li
171.796 277.403 li
171.796 277.653 li
171.796 277.403 li
171.546 277.403 li
171.546 279.461 li
182.046 279.461 li
182.046 277.153 li
171.546 277.153 li
171.546 277.403 li
171.796 277.403 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 216.657 mo
181.796 216.657 li
181.796 220.273 li
171.796 220.273 li
171.796 216.657 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 216.657 mo
171.796 216.907 li
181.546 216.907 li
181.546 220.023 li
172.046 220.023 li
172.046 216.657 li
171.796 216.657 li
171.796 216.907 li
171.796 216.657 li
171.546 216.657 li
171.546 220.523 li
182.046 220.523 li
182.046 216.407 li
171.546 216.407 li
171.546 216.657 li
171.796 216.657 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 289.877 mo
181.796 289.877 li
181.796 295.301 li
171.796 295.301 li
171.796 289.877 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 289.877 mo
171.796 290.127 li
181.546 290.127 li
181.546 295.051 li
172.046 295.051 li
172.046 289.877 li
171.796 289.877 li
171.796 290.127 li
171.796 289.877 li
171.546 289.877 li
171.546 295.551 li
182.046 295.551 li
182.046 289.627 li
171.546 289.627 li
171.546 289.877 li
171.796 289.877 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 107.459 mo
181.796 107.459 li
181.796 116.499 li
171.796 116.499 li
171.796 107.459 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 107.459 mo
171.796 107.709 li
181.546 107.709 li
181.546 116.249 li
172.046 116.249 li
172.046 107.459 li
171.796 107.459 li
171.796 107.709 li
171.796 107.459 li
171.546 107.459 li
171.546 116.749 li
182.046 116.749 li
182.046 107.209 li
171.546 107.209 li
171.546 107.459 li
171.796 107.459 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 245.222 mo
181.796 245.222 li
181.796 247.03 li
171.796 247.03 li
171.796 245.222 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 245.222 mo
171.796 245.472 li
181.546 245.472 li
181.546 246.78 li
172.046 246.78 li
172.046 245.222 li
171.796 245.222 li
171.796 245.472 li
171.796 245.222 li
171.546 245.222 li
171.546 247.28 li
182.046 247.28 li
182.046 244.972 li
171.546 244.972 li
171.546 245.222 li
171.796 245.222 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 159.346 mo
181.796 159.346 li
181.796 162.962 li
171.796 162.962 li
171.796 159.346 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 159.346 mo
171.796 159.596 li
181.546 159.596 li
181.546 162.712 li
172.046 162.712 li
172.046 159.346 li
171.796 159.346 li
171.796 159.596 li
171.796 159.346 li
171.546 159.346 li
171.546 163.212 li
182.046 163.212 li
182.046 159.096 li
171.546 159.096 li
171.546 159.346 li
171.796 159.346 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 305.968 mo
181.796 305.968 li
181.796 307.776 li
171.796 307.776 li
171.796 305.968 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 305.968 mo
171.796 306.218 li
181.546 306.218 li
181.546 307.526 li
172.046 307.526 li
172.046 305.968 li
171.796 305.968 li
171.796 306.218 li
171.796 305.968 li
171.546 305.968 li
171.546 308.026 li
182.046 308.026 li
182.046 305.718 li
171.546 305.718 li
171.546 305.968 li
171.796 305.968 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 70.035 mo
181.796 70.035 li
181.796 71.8429 li
171.796 71.8429 li
171.796 70.035 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 70.035 mo
171.796 70.285 li
181.546 70.285 li
181.546 71.5929 li
172.046 71.5929 li
172.046 70.035 li
171.796 70.035 li
171.796 70.285 li
171.796 70.035 li
171.546 70.035 li
171.546 72.0929 li
182.046 72.0929 li
182.046 69.785 li
171.546 69.785 li
171.546 70.035 li
171.796 70.035 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 173.629 mo
181.796 173.629 li
181.796 177.245 li
171.796 177.245 li
171.796 173.629 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 173.629 mo
171.796 173.879 li
181.546 173.879 li
181.546 176.995 li
172.046 176.995 li
172.046 173.629 li
171.796 173.629 li
171.796 173.879 li
171.796 173.629 li
171.546 173.629 li
171.546 177.495 li
182.046 177.495 li
182.046 173.379 li
171.546 173.379 li
171.546 173.629 li
171.796 173.629 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 257.696 mo
181.796 257.696 li
181.796 266.736 li
171.796 266.736 li
171.796 257.696 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 257.696 mo
171.796 257.946 li
181.546 257.946 li
181.546 266.486 li
172.046 266.486 li
172.046 257.696 li
171.796 257.696 li
171.796 257.946 li
171.796 257.696 li
171.546 257.696 li
171.546 266.986 li
182.046 266.986 li
182.046 257.446 li
171.546 257.446 li
171.546 257.696 li
171.796 257.696 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 .25 mo
181.796 .25 li
181.796 12.9054 li
171.796 12.9054 li
171.796 .25 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 .25 mo
171.796 .5 li
181.546 .5 li
181.546 12.6554 li
172.046 12.6554 li
172.046 .25 li
171.796 .25 li
171.796 .5 li
171.796 .25 li
171.546 .25 li
171.546 13.1554 li
182.046 13.1554 li
182.046 1.49012e-08 li
171.546 1.49012e-08 li
171.546 .25 li
171.796 .25 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 143.256 mo
181.796 143.256 li
181.796 148.68 li
171.796 148.68 li
171.796 143.256 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 143.256 mo
171.796 143.506 li
181.546 143.506 li
181.546 148.43 li
172.046 148.43 li
172.046 143.256 li
171.796 143.256 li
171.796 143.506 li
171.796 143.256 li
171.546 143.256 li
171.546 148.93 li
182.046 148.93 li
182.046 143.006 li
171.546 143.006 li
171.546 143.256 li
171.796 143.256 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 187.911 mo
181.796 187.911 li
181.796 205.99 li
171.796 205.99 li
171.796 187.911 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 187.911 mo
171.796 188.161 li
181.546 188.161 li
181.546 205.74 li
172.046 205.74 li
172.046 187.911 li
171.796 187.911 li
171.796 188.161 li
171.796 187.911 li
171.546 187.911 li
171.546 206.24 li
182.046 206.24 li
182.046 187.661 li
171.546 187.661 li
171.546 187.911 li
171.796 187.911 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 43.278 mo
181.796 43.278 li
181.796 46.8938 li
171.796 46.8938 li
171.796 43.278 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 43.278 mo
171.796 43.528 li
181.546 43.528 li
181.546 46.6438 li
172.046 46.6438 li
172.046 43.278 li
171.796 43.278 li
171.796 43.528 li
171.796 43.278 li
171.546 43.278 li
171.546 47.1438 li
182.046 47.1438 li
182.046 43.028 li
171.546 43.028 li
171.546 43.278 li
171.796 43.278 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 82.51 mo
181.796 82.51 li
181.796 84.3179 li
171.796 84.3179 li
171.796 82.51 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 82.51 mo
171.796 82.76 li
181.546 82.76 li
181.546 84.0679 li
172.046 84.0679 li
172.046 82.51 li
171.796 82.51 li
171.796 82.76 li
171.796 82.51 li
171.546 82.51 li
171.546 84.5679 li
182.046 84.5679 li
182.046 82.26 li
171.546 82.26 li
171.546 82.51 li
171.796 82.51 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 230.939 mo
181.796 230.939 li
181.796 234.555 li
171.796 234.555 li
171.796 230.939 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 230.939 mo
171.796 231.189 li
181.546 231.189 li
181.546 234.305 li
172.046 234.305 li
172.046 230.939 li
171.796 230.939 li
171.796 231.189 li
171.796 230.939 li
171.546 230.939 li
171.546 234.805 li
182.046 234.805 li
182.046 230.689 li
171.546 230.689 li
171.546 230.939 li
171.796 230.939 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 127.165 mo
181.796 127.165 li
181.796 132.589 li
171.796 132.589 li
171.796 127.165 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 127.165 mo
171.796 127.415 li
181.546 127.415 li
181.546 132.339 li
172.046 132.339 li
172.046 127.165 li
171.796 127.165 li
171.796 127.415 li
171.796 127.165 li
171.546 127.165 li
171.546 132.839 li
182.046 132.839 li
182.046 126.915 li
171.546 126.915 li
171.546 127.165 li
171.796 127.165 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 94.984 mo
181.796 94.984 li
181.796 96.7919 li
171.796 96.7919 li
171.796 94.984 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 94.984 mo
171.796 95.234 li
181.546 95.234 li
181.546 96.5419 li
172.046 96.5419 li
172.046 94.984 li
171.796 94.984 li
171.796 95.234 li
171.796 94.984 li
171.546 94.984 li
171.546 97.0419 li
182.046 97.0419 li
182.046 94.734 li
171.546 94.734 li
171.546 94.984 li
171.796 94.984 li
cp
.669856 .599298 .586175 .435218 cmyk
f
171.796 318.442 mo
181.796 318.442 li
181.796 320.25 li
171.796 320.25 li
171.796 318.442 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.796 318.442 mo
171.796 318.692 li
181.546 318.692 li
181.546 320 li
172.046 320 li
172.046 318.442 li
171.796 318.442 li
171.796 318.692 li
171.796 318.442 li
171.546 318.442 li
171.546 320.5 li
182.046 320.5 li
182.046 318.192 li
171.546 318.192 li
171.546 318.442 li
171.796 318.442 li
cp
.669856 .599298 .586175 .435218 cmyk
f
701.796 212.524 mo
711.796 212.524 li
711.796 214.332 li
701.796 214.332 li
701.796 212.524 li
cp
.694331 .632349 .621027 .583551 cmyk
f
701.796 212.524 mo
701.796 212.774 li
711.546 212.774 li
711.546 214.082 li
702.046 214.082 li
702.046 212.524 li
701.796 212.524 li
701.796 212.774 li
701.796 212.524 li
701.546 212.524 li
701.546 214.582 li
712.046 214.582 li
712.046 212.274 li
701.546 212.274 li
701.546 212.524 li
701.796 212.524 li
cp
.669856 .599298 .586175 .435218 cmyk
f
701.796 65.171 mo
711.796 65.171 li
711.796 127.544 li
701.796 127.544 li
701.796 65.171 li
cp
.694331 .632349 .621027 .583551 cmyk
f
701.796 65.171 mo
701.796 65.421 li
711.546 65.421 li
711.546 127.294 li
702.046 127.294 li
702.046 65.171 li
701.796 65.171 li
701.796 65.421 li
701.796 65.171 li
701.546 65.171 li
701.546 127.794 li
712.046 127.794 li
712.046 64.921 li
701.546 64.921 li
701.546 65.171 li
701.796 65.171 li
cp
.669856 .599298 .586175 .435218 cmyk
f
701.796 268.647 mo
711.796 268.647 li
711.796 281.302 li
701.796 281.302 li
701.796 268.647 li
cp
.694331 .632349 .621027 .583551 cmyk
f
701.796 268.647 mo
701.796 268.897 li
711.546 268.897 li
711.546 281.052 li
702.046 281.052 li
702.046 268.647 li
701.796 268.647 li
701.796 268.897 li
701.796 268.647 li
701.546 268.647 li
701.546 281.552 li
712.046 281.552 li
712.046 268.397 li
701.546 268.397 li
701.546 268.647 li
701.796 268.647 li
cp
.669856 .599298 .586175 .435218 cmyk
f
701.796 224.999 mo
711.796 224.999 li
711.796 242.174 li
701.796 242.174 li
701.796 224.999 li
cp
.694331 .632349 .621027 .583551 cmyk
f
701.796 224.999 mo
701.796 225.249 li
711.546 225.249 li
711.546 241.924 li
702.046 241.924 li
702.046 224.999 li
701.796 224.999 li
701.796 225.249 li
701.796 224.999 li
701.546 224.999 li
701.546 242.424 li
712.046 242.424 li
712.046 224.749 li
701.546 224.749 li
701.546 224.999 li
701.796 224.999 li
cp
.669856 .599298 .586175 .435218 cmyk
f
701.796 189.202 mo
711.796 189.202 li
711.796 201.857 li
701.796 201.857 li
701.796 189.202 li
cp
.694331 .632349 .621027 .583551 cmyk
f
701.796 189.202 mo
701.796 189.452 li
711.546 189.452 li
711.546 201.607 li
702.046 201.607 li
702.046 189.202 li
701.796 189.202 li
701.796 189.452 li
701.796 189.202 li
701.546 189.202 li
701.546 202.107 li
712.046 202.107 li
712.046 188.952 li
701.546 188.952 li
701.546 189.202 li
701.796 189.202 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
SEJDTT+ArialMT*1 [10 0 0 -10 0 0 ]msf718.256 198.75 mo(Information Extraction)sh0 331.303 mo
883.229 331.303 li
0 0 0 0 cmyk
f
0 331.803 mo
883.229 331.803 li
883.229 330.803 li
0 330.803 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SEJDTT+ArialMT*1 uf/SEJDTT+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 24.0%%AI8_CreatorVersion: 26.2.1%%For: (kyle Hamilton) ()%%Title: (biz_case-tech_app.eps)%%CreationDate: 6/4/22 1:22 PM%%Canvassize: 16383%AI5_FileFormat 14.0%AI24_DataStream%.((`,!*DYN"4#UgOUik%6q!IS!+;D7X,a4M&YQ(<(]X`18Dm4eVG\Ri@K?H/!!i]-!!!$W&(1uN%i(CF4WHGA9@-G.;rfouK,ND;%S@%@-j1#T^3%fZN)CUF%33FlQ*9SiCqYV>RE<A*L7O7dfYTPoCE):MDW_.6cJ,oac9P\$E[F0dL@*5]mH(Q%rl(Nb7Y)d=Xdl]l(%+liDm+uOSt7nMB].VP7s/iBnQb1b!X*8_N`[l(Ku<?s)[oRhSoLLBZZ64^qNQVP5)35D&0@i.+u?24S$!&2;SDbS&m>g'b\gs>;d%?V^M+J2mZss/<DqA,Ui9$#<RK]B4.YEBLR<\;oIt4DW?O(Z0C`gGBr.G"pF;YGQ"uQ4;9/UA)CW)=5m1rP_6#e+FX[Y#Raf.m`Kd%@FqO]^oM0qL3YXNHSnO@0A(_XhJ/(Q^,rscQ0mE`>kcbgoBM^nB=a++/2pm\FaV@c>S!cG(_+M<Y>qpA<m>s@o;d=Mf*B*KBplrG%]iNC8iS/.u/6Dn5G2rE.0RKpj'u4\\)noBpm$6P^osVS9ZWo9`^0J8CA@#A)XutD(eU-V1j-Aqin$2RkY1]#`?F-]0j-Fo4Y#Wa?%DV5c>!T(>0AU*=N??mmD[lguZRs+&Lbjr#Oe+MI9@CBgtpM5+6:"NeOnn8&Jr<A?r)NIrA/\m'Yfpu9L?#.io7gl!QpP*)VYjJos%l'h"e!^'XO]Q3,#-.cs;Q<hh>>BO_Q_61>G)<4iq0jQ;]8aEVnmk)H6N$Sj>`e*$Q2e1Yp=;B%4\[%YUJiIr>[oLbX?,$Es3f[j=%9QoG2%En+)m+1XKV7kD!q``Z(AQUY0K$sOQk\Kr(BDm3;X2'?G[L:-S!5<#D:dI5G!H1ZLEEYX3hcJ1ZFtr`mq#mh/<R7buo*HH^%@O,?QcuYcO#,4Ku0Mbm"7t>93Ug:khpe+L9-S9UU]cR8n9<R'Q(F'JYZ;Gr(2]D;sEkRiEL24AL"3bj,^ZjrJ;F!.OpL$P3mRe%@%;0P7BYI>8QG[l%XZNN*)Zhd=L@5][KU,N("]CG2qh!Y,lD-.LfHa3%k[a@$?\T^3c!nQgP_(%e@TP';CICZbPlsaArRh:l"eDE.[%Y&-G?bmMsa?rhnaDe9".ac[>eniQoTB8ZJ"EuN);l=G$bg\(N%iu2,fA`!1$O)X(1'u7<FNh8:[dgc_0Do!sAnQhUfp$364Q:l-7%A)i3E(Gfce@ec,6QfYN^lc$NFbI+>43G.%#oj[h@5>-0<)cg<$%"K-0FY\>_!UC2A_&h!RYEL.]LLQSrn=JD-@RP2=\b@K%K'P<?%"hsWi95rKp)/GOL[22,+*:*@-?&rC-CT*nX,$HT^K!mbQBA3&e]%)UL<X?``>arR<TRLUA(6iaM'"k[mcSd?<[\*fU00oRhq5mrV%QJMBQPSM]_okPlKJpNGiQ7FB*++A20>X:Xg*;p>enB/EJ]HG$0TRQ:;jp8W'TW%b=-p?0rlb-G>r-n!i#Nb`a<^NL!Cp@*DpQ)/o%1L+LlA@1,IA2ID+Mc$WLs8Q3tY\XT`ns:G7KUr#^p_sZFm:HE=A(l[fY'F5-$^O/P+Q3L+g7;;hN?Z"t_`)DX*/#HR2pVni?dC=A%1T,H%74@!HD7TC&"+\Sg0<;8#TA0$JB(LGsX*L:a!ZsZ-!X-;Fn-f,)UGkg6_+o:t"CZK^#!hOhSkfoP%2&el=d&f3+A&lsf_,;a%g&HLcp\SrK=++S)k1YgqNW>*mI+pMZb*EKT]Q2ub%H&&)=2p\=H'T88qu,#^!"Z:"R4I$44;1PLh#K)GY4'[a83H7m%?Rl,"6--Z%\DPjghf@flI/0mK0aqR&FcCi!^+BHoqn6bq\@umJn[<$iSd@Xf*cGiF?o"MXC)9pc']0m^03,IA2&6,[h_pF]E&JJEgBNa?*'kD5%mChsIFu_."odFPGpsU88>h?"da8c4("@rR^q?D%m9`XcD#,kT(),<Oah-pF.B`PAB.+fEaZ:Fs$&@O,jKPg!JXL<j>8W1\?NL(*)%8Z@jBF3(?DN5\_)9r2K;3>A-:pI1k)XC@K!H@aWSmHQE/UU<NH9s*PmKqM!c%KSh9M-$7r11*X0$r[Oq!Wp#,,&IVd!$VEI#1,"S%X!B`*nbAI6$X`sK2N'ALkZ`2+>/JnY6if,Jk#V>/YS5sFnh-:UNk4cp9:6P!e[T?0$JA])G,BAQ!+Ies3a52!,m+.0-3OrH^0L8B%nm`Fub$5gPHoG<$(BNHN]s>H:Ik1"3E4tNafH/r$,'c_2^9n+B1a'jF\eb?3huti$(K^fg$\0MdRnNTa(R3o4qtFQpM]t]L?5NN:%,Y8SaOQ5g/O'WXt#!%hlf]ZlPIW4qj!$"'+2TYn]#_qI)okbr;DbSL8caPJ/n''=0Jj^k0@VZV<1PVSu+O;g#fGjr1!4.(K2Z&I9%\3G1sQ4/NC&L:]:Kma(U\MhpC3IPhUp(>em986`VgZ=Ob=*A*!/]03<G%EU]"2Gbc-,8t<!4,`\#0+5[!.=)-L0L]$!.;+Zg9+cu%%*,WBhDKW2.-u+;nj_c[o*gN>)'jac[<a$qhtqS"mqi=!H".V;f.L]J_t4q`!T\B(c`U><#SM`uG%3Er_leb+,[N7MEbga:+\:Ci%2n%EG>42I$So<11'"k9UKd*tY-!0<a>dlKdWl:JB=[DjQCUTQ<h_JGXjB7ZZ^Jm>!Ac[9WhtG&Hm=%4rK(gS+"6T@dr>2tfr2LiA%H@^UWVJ5d?P[4p5/@afmT31qai4e($jss"VLu%q#hD5#FoQRWVXgt=DfrSe8/f3<#?21R.qQ%k):\q2BDtgA@T5D>_!&lIH/fFZ.%L)7dGNV;58r.,;1n=q)X?9/)5>H:&AQFmQT"TA3%;?Fm3L0HH,?=/!/#TW<7AqNtsE<U4M>e@(5p<)uBrpH3ocYBlbP&%:?A%D?h%qVD3j^&$g#B">8:K5LLFn$s/?Kf5DpV=JJgb.=;tqJ@h;[;.SbY$_%5h3IoD=u0EuoG=]7Z0R$Jh_s)oeZE,R!8\J2!,fcVf'N?C%[bHu&DgUYch4X!+Z<Z,_CtPWD3.>et)rL8RNFTKlqDK4okLaq'EpU*if,W,lQmL\hA,sh*H%p87XjQ;"F^H#HCFn52[HdR7AQX\"%YH([L[FlqB!RtY)B%LL<K@t-YDnZtb>]8r"Aabi5md+f$p&3^N(L.21c`F>Ceo1M(G._S3m]:kE+,kC/QWq)oGJA-&>CH&NhlPH/%?8<MPmqmQ`r3F'2X^?#4X5DOPD:QA&<i^Z?4O<W.aY4.@n,%RgbAuE7^`0mt2-(0mgs:,Xd'ml+[hZfik'QP8b?[=kNoAR49#$]$%fB?kbp05:N$iS08"`FCMIXP]TGiP,!g[@;WBO;'`!ukOXhp6(ukF,o<niN>cWI)6l93sX9)JU\#%@'p4AZ5S^"]^k,TN>:hpC^Fm%YHfF22Z=N-8>9o]kpe3@HjdR/2SRn4FHoiFC?)@rpS_.`^5ZH1^F593f[[uC)dd./d&SEqHBi>(5)HS<b*(^#p/,BmPQfaCZ>%H?%'NA(/:&jr;bHbSY8$u.*b-Gbl<?(#n.SHL`;]C_a<E<si4m[P@;80$2(cM@0s2[-a,uG<B.dK=V^8Ns.s$[QkYj;WR]#oV2m4,.p%e-=)k5df!>Q>\<IU>c\`[d5KeWXZ[j;/L^NM_%MUHt-=Z`C=3;<c+o]hcR.aA67HeZ<q-F:fL#N%3$e?\$;tbM6cIi<L.4l7\VG,%U1%,+[F+ap8tp(\M^8-f[6^O%6Z'&Dg/V/^e*r9Cl^_U6?e;H\I-Ztf7o>Epakg]Q;<1pl_u@F>h0Zm+NGgAkndP`t<gJ,C=dCY_%1hG@GAD&dkb;;pl^4B[\Z><[0AX]o@=n8[Ge!+c^ag*J@Z7O2)j#E(Z30*%?ZK!p)Bf_:7=I+>Efl?'l#klQL/.7&@ag*$KN[tQi%/=WLZR&4R)Jp])l1^1^89N.6/9+XeGZ38"L/5$Noa0ObFbDmeQVWg'l?s/L7#`dq)Z7H95@%)Zi#aQbBK&AV?+:.NI"@8,\=gn(1%AD,i82NB?C3s`-.mjss*]r,S5p0O&!gA<k,C%!13VS0<P=n\GaA_B0&b-ERF+31\R*<aQKA]M(M1`aWnbAnSL+3/Bf*<aEFD_)9J%]pC#Np-+KZfK0@j@%-fGHWg(!q`+<+3sbQ:45]E!%U^Iln59DfLCJgP]j6opN>.JJJG`a3Lga@kc"\rZ-falk8Q/uFn(WiT+*piW%A"tT)fmi77-Ts+*qq1E;fRiEIeIY$m&:>%"3+Vdff:2NrEd.Zd0.[`?Y:.qa<rfnB/(a51UT&ta6NILR?f8Q["XFt7!D.m9kf5lE%U_e?='SrF7BTQXEIDZ0':C=ZUoHW$TO9?LHfL=*o`3K@!a\hD6pI%mnN$Kj$dXQ97V)N^^+`P)uBElR3]h*?R62;9'_XG!A.=$[8%q@/O,_5UXfDg>)V1AlGGWJ7nJ2ZOXMX(b+U6_<8K(=2^?\_gKUK"R`a]"j<Yphe9DdL.%5m'8g`)aJSqpJnhm<;7slhaW17^0s$$%^N%NIHPh'[iuJ,LmM\fV'pNVf>61Q?JHGm**8i,/;*]_]"FgruYQVX7NWKi(#TA.C_6HjpUY&'I'H&VVH=cjTU=Vj'^"o'I]qF4N%_>h5cpdY9o(VOg)#eHZ@p-rtZ?S$WCCY5rHS^DML36<t(]Cg$YYLbR\&9pEk?L4M,LnX:6f*17aQDF;nE@f!KP$p>-^@B+hQ]9DY%!c]d/12MoCs,AdMG[97;PVO]N>8K9cQOMdGqfuQ:XHI<t:qd5Un&r++.BnEpX\jCqUOH:NR\gh;[7TZ\$JKgbR&4X@:aUAE)AP6u%>Fnt8bDdkN!6fH\Q3?V-^FqMjOPKn7J]"YRGYW,QA^**qQJYi)2636ciqIa0"lfPfm(VhG:O;$Q&;Xhks71As*5g,J7mZB.P5N"[%^5$%4IQ]B=o?I#+0THSC3=8=G)$5SDH1I-WQ<]n,S-PVaLh>7E^.HJVPiYV;&$cP@TFrcJQ5UAIRi_"dj?<^i0@VfL`$`Eo4=H9+%T!,I,4-2A:$_Jm_WaG?sg"?t.Fui5O=\Q(T:BqB3SgkSVB+]#V!=@X/"U,<7ZmlVUKQsK7mXR?Upcpf8MTFNI7M-Yt_WO`[OF2uF%?"MC5TJ0@SS,r4aaXg1B_f+MnULSHeA[8UEBC\JH$I-+kHn.$M>SV7WV@iR)po%+[o#J$C3<n=THb`pcU`E^2DfuCQ0i1E`MDa$K%>alJj9B6T#2jT!QUBd"k,?5f(-V]U.Va26:jH2-Z1)lJKj@C+,DsZk=j(W/a#bs[S'u%[fPR\AOI&FnAa,Dd,.,pV7?]aQD#8FB%%OA$WKdH2B\0spfTU35;RQ!;iD%WY,]"]2$%kljak>eG`.j+-^amZ^RW#I_[@+hM'"OGY\c&d,:n,E/2SNYlB?Xs8[%#Gj!.5`;IR%o`B7a<#oJC+O%adS&3,M,Ud1)>br@<>"s&T>('tP:2[koOHpcsp/$Ta>kd3bbc%=&ZJ<[fR"fO<fKOH+`4!T^X<QDh:8\RO[@3M7%X^39J^:=Jc8i3d!I#C6b2T.liKYE7ggOXcZnj1e$L.DRYBO8hmO@Xd\A"\IHpVJlYnG%5bFmO4s.cj6akphR-aVoi[r]Ip*!X"fb%2s-I$pk3#KN!?.H"ScSdKGk/N6nh5r"lZUW%E*TYHTSH#W^Y[u;HVOu9/El4'1V\;@f,<64GCe5*GBc@p/3>UhoR#B'2.K(?=70:%&Co^#2W*lH@FkeqEqm/YL'GR]IBQ[B9K<`WQ0;2>eeP4SESCJILBGRJ3)2?gk0VHn%9bMqq(,Gbb(LVTJM?X(1D<qf#2X;(bms*c%"N5I^.4ea8ZG8E9#a'5;RllB>U>W"c2*D`c[UB0pRgeCi8F[qQrX@C7Y0tZk44S^WeM=?RWak6<HUFha*.JM,F=h4)Di/Ih:\aUA%RQ/hCqbbs'Au.!-IS4;>DheP"27jc`!PNHf2:\qY'@GJ(U`gt2SSt_Nf!UM%^@#VpFH1@8"Yg+>dqM]GrKi(9o2Y,Yb83cXK@7F-%U[bB#lN>lSksj4Aj&.oI8^JgA%]mm]qH/;HRW0jH*M#_];(WYh.-%'PB6A99Yl4RHO,+NIccduL$<T2G2QW$mAni46UrH!k3djqk%c8S\0ObAt02LqN_5R0(4=U&Fb'@(mp"QtFtk0/#t4Z"PjZl23X_%`N=N.(PG\3egZ#dlrY;sR'A;YQ_5,l2_,+Q4Z0E['C=Nf)7t%(=DIcXA5KB,j2#oq&7do!7j_@mLUfq7:ZR$g:E/1cAZid;,MV2g(O&h,)4FqE=E?74CUD!%&$kN2d/@`:.?d^s$3I&%92<B:,T8U%ETNF6%(!mj,JE.=PGeOtRGjYUI"T)un+=8Vd2H^bWfk0&?,,(sMJl-aoktA`o5R)RcC*=l1-19>$U:D(Ga9mcFOCX/h[6"sFqQ5O%c43h4;qf88]iRrXg<$9?$@3GF'[cnBR4=Yr`1j!u__#oUU)6H"!^%&jM*GRcbQUJPc/JULheJV43R;csq&61$T)IB41"qH?bu/bb%DT"o8aP,(=:2Z-rHuqVD#87#0pN>t[8\-S(IJmB,,[Eb`R[s0fo\46a0?F"tC9MBEGNNYS%C=o[du$=3CW<a<eSK(kTDH7FG7ACX%,QTQs(#AH)[\AiK`G%a_'r8:4O8QjH[r,EU/&N2(\@!g$?<dBBJg(>Y']7+7PV/Q3gP-nPMb`,3^E1JH"1L%[M5H0+n]epn1Ta8t%3&G'm57K>KY^$@L/G&6d(3?:$/D9(pX*c<-#MHtCe84i0S254U)U)Mp/&c%3Ku>SaZXjSF(!0XaTp.tq002#W9V5F@`>N054('m#%4Q$Kfi((Wu_K@Gg@A;GqJN`'(#ifN$p.?2dRo]dki!VYQ109Glg:16A$L%%CdeK@=6o_C&/`E09&C"C$B6@C_f4&R,Q-7AinFhXV%2pn`N=e:nQ??&@bd>Gj34B<ItV<34dVgpiASJ'P]WYA^h4b-GP]UZ!:Pq\os?mJdQi=V@))@CbhOJ2cN>QW[b72XhleVHN_$1mD7%:+M+^ET3J(4)lX3?C=Ig0MbC_/!;TS.o^9ao`?cK$JXYI0Ssp!0KU$m!=8tm&9,H<-U@Z^;eZt-WMN'MeWj5Sfo,JfF;n-E6lARs%l)I5U:'uqHXqs.Y>POU37^:M%&nOa=7cYdB;'^L=l;6[A#_X1aJOtY?@OXVofDPbf&.T0U+p!h!c8=HEFCKn!X?9ke#oVUg@gQj]%*m$p04H11+nT<'3n0H$!e_qH;Pafs+B$!fmFlGG@l:u>6-:rnYE+,A[OKGn7U,Ek@r/OZ6%lWHb<"if>d1F6YAmcWV%IDX/1u)RR%bBu8Pb+o^'b_S6NaM\9N0T6&rHn]r;r)<etW_!?UL't4Yl+WaI#UL%mfE3)2`I(*.b6\CL=?=<7=u=![YgdM-X/)hJ:aMDuTG@&"%>#\h5@R`(R(l9H;3@Z>gPat]"3a/"]nPdW?:6VW`.$>a^ObA@&m<c0K6aBe2QE]hog9K%V/^5"!MK5T@RS]*0'fHNYqT5[L'nqWB%Won4MWiar2e5hQ.:dscoQ!3VQPF@l"VP$99V0qT22*E+i'@`iGoOTeYFim9L#!#@bmNI=r7^!F#.^`:k*cODEG!^0s/Xs.CN[$aN%!GnFlf5A=/FQlu'/m)2l_9a.CWRdFL=it,C$oCYIHu!6q;J&@;d?phs)DUPN].cOu6:WX3;(BG7\XH'`V(a-.8]$:^"C*cS_F1ts%$4Fk)^p3NbL]g,$N4O@#%[KuXJN9^&LOE"L#MZ-7@u`3r#N+#:#^4S!\)_3K",hdNYRX1$"=kH"#YCA\_Q,.0YdIEX,/^5;>i&ie%F$h?ck631i%o[ue-g?>\.23%Jg12$G\n]n-`E]kjZ>YU=U^O2>n;V92b/P9e'FdF/Ul@)Q?B(qF#;gnD#s2$aSfB$iKjnjH(,W;2%(b@DHq*H9$doIGF7\t>[A=[BM5Wc=\V)Q$p$;rkI8s[iNJ4.7,]t]YII5;dpj9lV'cU)mY/X$AD%&q/Z<$fBnPWrma4:j3RhtXjd%hg,XX0;6h;O4W(_h')>R$IebdE@A,b;nqn<0o(.R]+kiLHm8P_BY<LI##X>c`lQ5,"?WYJ;I?.ni7sXD\tZ"D#U-E>:^!Mr:`S1:%*X]%\AI/Zji9f0E-qZ)i6pch0<ZVe3K7K9((X&,sUP(8&=+F[Hh?Y:9G^O;RYg\M3L=+0Q9KK?b]P7kBa-/55,EmucRR@`tG/Y9;%Lo*HU.)XG?F=(WSA0?05(s,gb`<rVI$]oEZ/I47MZ[c2*>n"pca?ig6s'e;c+VoH@GQrBTOdT=lm=F$BUs,cqeV0lAFd:[_#*_WE%R`XHX?AV'/OIC+,^^6;U9Q%L@T\d5TE+_O.nJ4BI65EHE$CZ8Z'ncU?Vs%eD=,:B\9CPXW1?$0*RoP;BC*=m,167X'<Ebm]Cm62R%@PEcEVb=c-l^]".K?N=FN-u<`0XR[1@(@Tt_XN[R#ZL+G#h"?2&N:Sc+<4lO,"SQR6Z<Y/JDcpXPhh*o"Z&5^V9sG,^hTeMNIXM(%M.trh>+\ON&C-Wa_=ZqR%c0bk*_>233&!h1i@mkXC'JUPb(]reI2PA]]7s>?&MQTg#*;-:OYVZLBP\-*6_Np_)"8N#iA##!#'snN%%%W^N?jPR(B:,r/2!:f80g<IZ(8o8`'IV^h&jO(LLF4:4%#8t5/cW?WKUW/TKQlWCEnSufDE?9.NmWpsS8XPDKB$9bdtO6mOqhAk%N2nWtE4?(3kVErWLGp\Nm"M>[Nk.o8JV'-'_5h:$UG$51Q84_Z=bm_!Z-/mY?nJB/][Fcmi0%m\KbnL.$*_o('DN?Tr"rl9H+emb%jg]sE?(M=W"JJ4k6t.9*fJ.@O&_RFW@/G^GfN9s[5p5;M$*K$j6Eo8`8a&El80CQu-W%enK.pKF#m*d5)@2&n1E_XM_`cp^L#gU5%'2=i'BVc8&pm$VM5l%b:+N8b,K0bHb"qS20"sD;6)T\K%1C,e=c!Wmn@0U`5<#L?*'Kc)7@-N2BWm:^a4dZ>8m!&pM#7W\t3+Clt%DmPB-#7icB#:aUI#$mC8K+J?D(`3Ml_]Ub/$%n[Ni<GO]\2i9!7H7Qi1NTpdA&_BW6,qaK%-'$RbJb30;N(Es6n<-uJlJ6hm\%'Z%Lh,N?#)f8[\90Ni\3[2Ci^0F^ikeCN_nkQ:_c9/.LJ)_%%@?',L-oa8$V-jK(!]3g$?soX/6AbZ/!hFgUn"H(9XrBk-hiLS,i$CK%RTs?5Li@aR=f_j`i^+-8'!`egAknMi;ng)A#`FhO5R\hqL2%i4\-X;P2Jg]^34$n!i7H!q(b:Z*XX46"6AZK5AC0R#mr;3Do4Ld:%"0i!F[G>i\pa0l&#*+<n34J1%J^^P*!p;N\#+U8)30#dSNZ16t')("tN6sVXP;@e:E#coh&DVd:a!jW9JtnGb$#X][,R,7/EOSBR%EG<+,>W>VA/k0Oa\/FTWE"&?]E!$<3RES&&9am@Ln/*F^3i$E/W'/kGr]9:O>j[0hR)K<<F9W^D@)/b+FhY_m;:&m(NQ-j6nH=fs%Gf$pWV,^@t3[J:a`FpCD74;Hgg7ke%%E5J41*Jk9CP88Eo#Y>Za#RR6!c(/4^T(q8AduK1XV[MMkMh+T/97N"c&TD<AD_n<XBGWE%2(WA,)Cu3^oU*kV3@GJ!'sTCO\>c\D[e?/&-r";enSL'i^jl_rU7I4.6T.f$VFdg2c%\)"1Xut(H[,n2%2]Wh^3*nHZok9WTJUAr%V_NaujO9MR4I$#hV)B=64WFQ+`c3!`Eo=I];W,%cHqST%a))"`NW\U!J5"o/,rfeXJ,o`Vn?"KZY]%D:eh9j/JArCA)99'9d"VQ'%4C4iKNe)fY1LNZM0TL[,Him5Rm@nXD_5.W$$ENiQfJq0[R&hjJBcrYXpa2Y#JcS$AVF&p$#H_#D4UR,M+t$I7cGU<:MIjJQrJ=Ws%*9SMZVJ9[qB_@k#X(QAkB/;ZA.b5]_L=;FJ3)6g<3"FHZGj?5d*(MM=Na&15U#d4AP2J=F(#tB(AAE3?!5WXp%<b:,j^8CFcAgmN%Js1s9FR/,2Wq5^saaB?+R.uJkWVZ%5!6_8W%fA?(\WA:?IhQb5G<Mg^b079d[*OSMb1$OV`"Y>Y#I;Q9.*4Y7-f7[]f>:TI-N'j'%'AkbeimL,hQ3S.uPk_o@XK33Z.ZDM*'A3\m6CDc-Ehac!dcj#\K5Nj0,S_!l,S=,?X!fHSDin^:IfY[gcSl`4=o,8q@"-ZY/=l@*%4Wf%/$t+cD@-NkO$2u+S$H9C:R*qaS?@NS0UIsB=ZU]mKmJ3%C63AX[o3,c,;j@F%\"n)Bg%T8=Xi)TdX:35h,8q7ZAX4rm$VQPs%YKWo,bg[/\2*.Y(2I)]hfJts'bL/le&Bd!dC$YRq#qb"0A!5?>e`b4)(Gt!47*2W'=MBA!i@iV=A\JW?@XQ==/=dm`00JCg)/k.b%oj:09O/<sso5UtlF>-$J@606`,%fJ_3X?Y<h55MW6U0Tj%:<(_bTR%_1!aXs-Z26K'iEr]M9m1F/HtgQDE.-pT!$;X[sBC*koI[o%3BJe5qGB:roh$fgTmV3kLt5oUYikUs*K2IEDrn<;O7fOs%fAo2$XkI%B+8*C:]k&akF.8fB5Q`C:E#.)I:b?c^-VX)Pi5'h["Z8\%h7V&."LUcOf\mgJY@iT2``U9uCK,rqC7D-`M^;tR=3rkFT.'g?<l`FnK4e]p1F&go"G:CgBs3*H$`cT`Bmd63Y0:Mk$$>+"Vqr6Z%:p%4:/,5l-m*`u*2`-([Y=0,M3@VaIDh19L1D7-7B2aEE$cP(B*K7>6T?[MWZ^qg-3BZ^KM-hCPZEoe<^hBk@@<=s[`04d@E0,g"%Gs6o7WdZ@.AXtZnZsMRQi"'\KI*7$h=2.[VlRsqP!A1+3Gh+*-ojsKs6g9K,q=s*O]TrL/0ecs$KNc,[(@^MFVp#rt[$AZ[=rd1l%bVCUjWZRZZ8l#gWnLO;q)=WlkIj>J\s-t>&Bc4iLCZ(QLO)ACj2+u;DQW\Y!V3]P\D8]9O'ck]g5`^Sm&^AV-%#S]Z5s1!h8<][E%ZsW!#,&Iu#NG*L)<sK@uZq9R:U=i*j/$X;Wfg98MPTjk0h08C_Kth^Ao9<pUTb`5<0,frU[&fg.!IHa3rYAi*l6l!^r52bp]8h&R%o`R]?]C(Zl#KiV.&GOcg+m8688MiL5c)!W36n.[E$6VoL_=<NEW-+Wln1cnUJ0r*@q*ulfJ^iio3%2jNEA@m-NeP7(K).:/_WPFb%gX7_rn"Y:-<"8a(H:a=*<We*d+JR>RSTkdlNmL?61aGX8-ckF&25\S#`jI<k55;]NMeVi*MCQ8/:f7'JE.=Es&Bm(T88W(\%e@eO%J@M5o&/`ZP</G3W@7(ZH,moH?7qVbCL+c+h@.ICVPss,QlOg(0oaDI5Gi'!9mtG:ZO1C.r)<,GN[gJpSqP=sZ2CY<7j=<EV_e4c0%Y$\-)eLq1X9(tHKYKo<uX1Jb`9#W_#,ar#`@3-di@O4j.J]TQ"h[W.3$:<uM".#r.L(Ke7,,)8s5#:G/,_:n%I+tkM/9N78mt1bb%$0Z4u&"b>!="/P\i=uus%$H,dcI_HLIJSD(T76NR^:k.A%-Qq67YUI,Knq4+QZC7'V/ul,7Hm%dIf5k'"gAY;L$tN)q_7EhlVQ[3%;1)lX/ZLne"@5K@#tN`)-`V@d*c$4qD^IqopkogF5cnAOE$,^oIR8_MfDXmLl%BgD5gsCg5q+),g3j[_oK4d4:dhWo%(o5!&^=&o%ZX:Y%,(9Y0V;!?EA.V_)^.=A5^EAgdLOU14Ufc*Ii;-'"Jm`AATm!B^k^qNUH%qLFrUrU8!PQokFe#EU1H71F'-,0a0fTZ!1:W+`%lo9pIlo;]g>R#d)NA:l>NBJ_*G6A(0TJ,h2>,)"cU@K?hAX6*/9GlInR$pgX;TS(rd]!/`^t"p*lb=*<Z^kh'0a";h=A:I1^c.W?%Adi5fWI.YM<T^EDR2'B^,1DgJLkQF34CElg]8L:>Bh%p"Bn[,b'DhJe?p:lTUU0/_E/^aDJ8_'876(lqE_*DYBS=?tXFPWO[;bVY%9*_3f#b(-Gg=O]!IT0gnR::aC(o\;:YO@3Y82J'P-Gl>L2KM9mCV>GI5p-s)j@kP35ZCWt[5!nSKsP4i6M$Ip!LLV2QM/5TPP@EZ%pr4IsK7\FVS4'9Ue5/&f(<ebn^TMKNpiQ_-Wmr<HfBUCmZKlG2lah_iW;;&JWqm0N;Vac.U&&B*3qYmS+j^fF`i.K5-rH&o0'[h*%_<au7_%fd"_9AgphK[LVXr4+71_i\sPb#6mi0itGkJDBI,I[;![]Y%E_4[slGsJs(Aj/74(@a@$"a/a"Kg0O2cG[9IjaaqgM"IVL%EdoJ'1&20@rm,;okoCI34R:nOHmTaO3mX5SddKpR51^UgdRg8R$eAS*XVp$@f4PVVTd+.O")C7CJZhHiI9t(c;NZ`R\E[$d,*=pj%::1?4M*s/-,hg('1Q=r+Ja:e7_"HrJZq.!?90\IidA<#iHOj*7(UL(-AG2LSfrsCp^"l<jXTOq]\aP=G+alnfVkWg*`gLg!(ES`i%Hil%/,:!:#*J`]B'=s8.]_!-g!A-*#81P&j=L2+AQA^G94@]FbG_q,m,N$@1m"<uh?`Bt08S:-1qk[+q[Wte"YQ%V$YPK=5<O*BS%ngWLSqQk`_IKN+%Wdtg\dmI5pXS;)FH4#*57BKm8,)9P#ChR+dkb94`'N0J.Bu`Q0;Q6+H'1NJm_KO7:#Dk,UO<>/iYr4EK?fWIl%aNIdf%YQP^5\N5MZNF.jPjgL:KJB7cD"eE>XX5>d"0'26OIVJi@!a.;;B;-[hdT;*:>8@iYuAmZd&3)++3R;R8!\(VHC5+t:rLq]%14U&Xjm'+T[Ic;/CAhOHL$.fi1EYcO;?*Ga/H7GX.\Ds1:]Fj59WOf<X7lG'eCEqdRLWl(8Vs[>I&g1nX&CiRb8>KD^q3(3&S^;D%\3;dX,(k\Z19H=aMfs(4;ApI$:kd,B]?G`9b^TF?C3_"c?n;uu'r<9UmX%L8DnjYga?u*uI7\N#Opc2],[eY9\Qn@%B(;1TKiSu)%R`.oN1IUFTJ<lVBSgOe6!OU&bI(LUQ8iMG@=0KP?UrfOI5g&EI->E$"1t(H3&dSC?P2#?Ig[+^D#RdpJ_BuOhlW)F!<R^6t7;52m%*M^!9<eY6krT6>!3hT="!CVp<+]&iPn.V2!+g!.2@?bC^<+=Dk8.u^."W];`^k4KUmt!0Ip'LD)ScW?e,o]_3l;D)!<hPipnq@\B%cU:.S/QU$R%3LSQ`ro#LoD4Q/iMgS"@0!9B^6O^C#Us</]j2Qa,mO!>O1O7#*in>H(i7$>@^$#;.P5FM@;mV+AT0.l[,=h&RDHT'%rsb4tb"iZ43=_2EPrhp:k';59HN:JEI+rU$*CrKG(dDth[$+G*1bdes46bq)p8UM1JUI&qlB1@29-SNC#iT_G*3P<@e52:F:Iugm%Js#oDkQ]nokn79r9-VfWA6RHAC%Z-EQ_KcYFeMsfRNZ"TTF.<sW5>G@RJli@+sDHs:]"kN:\Q#\8@;Abl)FRRPl(0=qgpV!bI7qn%d!Vmb['B[LQ5NtC9j1["CDJS6GR8&O=U#[LUWW^P><LdU?mQ"=X9aX`EGl+S-+5!C'lRZU5/fGK:SGF;o/8[ZP:"$e\P3T<R%4J1%b%n?.]5G]^f'M*kNZ<MAPaNQLIbV/!mbbHVH_/lcXDN)2l`rCr^g4M%lr\R2U)0X@V4(FLn[S4cZnb6cfAVD6H;UD8e*?$`am@kN%;+h?.*(<R`;2$CeD._^nSdf/FAZ8kX75fdbY\DWE$m/[J6#ER)K10H!QoMqg&hG]JG4a?kM*;e)N#p,umJY!68u7VMN(sOMZp/J@%d=gM7kNn<(M5-/?WGYq&CJgpiDhN*d:>!iWZ)0o;lQ:n#M,f4mWNnNnMQ$u994__UEE]=F=%`rE3)D-5i'&R:K&bV,UFnP+\1"j$%K4Jp<RFuSP(i7#G$6B=oP8MZYW&d\gS49O)82]C*L0_`][S4V<h4uPS$\U8WW?'k\Df/5J%Yb9\gT+4b(mH@RlLIhS#JH@SOX<:E%OVfCmj<$dP_bWjuYtfjmW_Tr-L[-";*.I/r*".FPDkAcR0&JGeGMme8JNN?Xdq)E=R9FZ";U@*"[qc5O5Pt]Pi;/?@Ue;npLa40]%(";Hs"mt75$JN>H4.6'@82nFMO7>IM?L^8q*gG?*RmilN'M=1[_B6LcePd"c6irJ`$'2>?&.')JVgS(bp['b3CX+p,N744;dL;hD%o[KH[h1;5noE3/nY2bUKkY&u_Y2bUKBL<sVP$I2YhZuCk!Vpo43?F?62oj=J7'L:n'$G),[:X(9['B[D5U$MJR<_:'oFf>`0Q7`A%3O>s64IW6,]8AaI@.ri'Ci#j8[u-8H@YmHrTDmfbWPg9>gHL&"<FW7^qQ"sVoh);;9nmNA.HT*Gk"h*dhb-i5H%NRh$6\Gq\?#s-%7iBB=P>;3\Ak1N<jb4mQ50^ab!AAR%+<3!HmGJo)Csa2KHeSn(gp[q(17;=g/>^/C,?>EOiu;(B.#3E?gD6Nk8Wgoo8Js,HCtd;W%n5<?V&<heSdf(`WWsN)Z[F8bo"Q'u_aPe4UWCeTq4-oSA['s+RHOnmbFMIdU;kIg7ZlhMpfl(4pD/"/%1JV_/X23i/SSnW8k2I]C%.Pe.#U1?fn(aZLmks]=[3oB^5)L,>]9<Hn;mEn)4=]%ghHD]_aFK.K"3kfl!%]]$+`O`!ial*o_(\VkAKmf.G72::2ETbPtYGTuq%>5P[QFeC<\P"Y%eis$6pF$a_X*]Rc0DFUZ4r,F>mqY?Ng*4+sU3YeJ%/:;-i:J_EbRs^]MgpkB'&bGD:UL9mf7#3RO%gUu!TCD.S%#6Ff0RBDa"J9%>(d&`efd?&8Sp0nG`&HnQUcF6#J#PLD31t>&6JM?Z>1ODAJc`:f'i=dC>OLW9F80Qk=,Y0U+=s]qDPsW3q)0j%*%j4@`FUf'0n&?^P?R18K00fY<5+4M9#LU>Y6WpkjF"TJ0ca?WuIcl:mcF^64\^4)0cbVp*^+TdA)5OSRb9^i^E!?^4oL3R3HpFL<=%i7>gHK(BmOJm6^L^l=,1_$Q3<JVuaS9E1++%NH@(N0i3Amk(+\48EK7F677Pa/)uC_"D&>,`EhD_$mFu;`PC[G[btlr<X"EI`n\\%I%kg!3bt+6i?P$_im2#TgIF"$m4:]]XD+LHg^%(HP%3HJ&n^5q'GYB]jMbMPcTr:pHj?gh(F?Bq1D4T$qN46<!j3)c<V=fPB&uO<%Vk[@D>%jn-An%k.dna'cpZWc5VAIo3Nts11Qt53-U;t(G;]l,nJiXB0`^-kY:!N?[UPa;'3H-CV>$dfHYW/mMji]X/pn`:Dcb?K-%9UJ@0Wp\T<B1O`H`4uL6SSo.0?MV"hP+?[H^:e-OA\JJn]D<]%]mh*)#V&>6-s>+p'Xs6]=E^_(r_C0BBGAZLNC(=#$&`bF1@eUn%#mms/i?BH0fGGk',r9l/q$(Or<1f@]dQJct#mbhTon+%/l4&e-)(RQS2VQk:UMN?nCTP[@aoJU)C&fPbbd[$F8\bH5'9[kN0':nl%K219`c"c,\_M5GH5U^.o(/%>!Pd0TMG,>WXJk;9k)lL,!hB"p*re+fs^<-edr4JaX5:OGA.lO'c%ucYbjZ3rX(\&ba1^d*P$#Fo7%j,)%hV+*cD^nG.O)F'i<-<WN#=F"6u$.Q")AN?T'U6DMa;cn4><@:WoMjIfPN>2#n^YBVhj^osU2+jarVrNYdm:64e-!fOX9n(#U%)*n1:B#hBB7[e_Q;bR)09q!%C#t]>-[A>m&P#h'BQ5K:h_`U!(_L"N/nEk=s&f`Df5mjd$M&<`9h0.T0:^^O'okJn&8r734$H+<O%QE\"j?A3#RUGF"O;,Vh+VH_@QV?%s!Tn*?EZODoV$(J.$$],#LXB8;jmrR&507u/6\@*5*n);X=aZ%U;51Q]b:,O9UU)9..U%n:`%RW@<R79&5Y%]D^lY+C5ml[[+e9DpB\KKmacG5(5;`#j^Zi1osArL8:.8#?Kn-aaMmfpHaEQ\;*0LMXhV3G)p=I,c0#<WuHJAJ*FM%8/&_k.(L7=MnGR-',X.ho$Hrg@akDhb0:UiFBKr\o7j?HO4jXTN)AWu)gn4OA8-h"(YH\37<hi8QrpJN;r[>6?Fc`.J(Jf),D6V2%T7Q[YK2A-#J"FQui)ETd_.?H;"UE%dK)=HJmb.dIiPi"<%L\m=*,8_L!fg^3IG;q9oc5u*nhlA)rT9(/%k#Q$1dh6"6GPs1FbX&o%Pa&cU.Fsf^D>G5Oi?>=Yl5LdOdYXuteK(H=lLt^enDbrhI$0+3I%sU"+MI>O8-2[!Y_DQG+TX_=MGI"Lr-]]>fl[]+6tSaTE%Y;u%XQ6)fGp]@=>"bBR72BSuC!hg*s#2M%<s2K@,at8?Tr=T%$X'Nrp`N?^ID&WX61<b`g":srZ+9q?CpADj;G`%An>OM)U'dh=M!!b@%]rZ`6cpC:Q<Q(tS8gJHP+0KW]#LX+)[Ue&7/W%Sb>(%cf,:;PMBqV:\jZ$tXKWJfMSd*=p:mdk2'A83k@F$l7Qj1o&qD+X\$IR5c%P6K503i_j90$m@E4oj!uj.Kd(__^Lg1k8]B+tu>L)mjj>AO'(2AAWjh)3kq5-/_<[9nrum'M?qV0c?VXTaG^):hV<'kLH&QlReQ+%i^3nQ=ME35_;@;)W4qL7WBNpQ;VuJlpa2"'M4_?fonS$iKqQ]<<)G]Pd2H1OjJ\=s6f.kZ^?HXA:or/+(m[jr^L[e>>'LX-8GGYI%E=N@DX7M=:ip[DQH>=%W\UZq9(]siu)oOKN*1imF8i8?NO?-X;i/)P`NUj(HRKZD?%NaaeZXEoM(0krj4;d)f%\>;#AVCu:)?\!(%Mi5])"l!TSgVpnAnp*>Gb-!eO^J915!h>[p\!E:_E#\L(36e,6]"AHsPA5XNJLKR,8hE">"R4,CT5Q&,lhlT3?/<A2-,,#hViRNY%/)O)+&tbl3YRaZaWfN!8++\l4pYbf17p^]D"n>5HY8UT8XC3U_MCO"cXsiKC/@2CA$4+Q07uSsJar666<0WuY/22m6:COn:UDH?\%X$.t)R&8Ca;XW9]LWYG8I\#VX*.CI'cuP3jR49%&+tc<u:A]Ykb+J*ITUpoaTV9i'>p"J>dHnTSUOL4=eW?^ojBJ]<bZ#j^jp9ii%U/9XbA:gNh<mo3<'&FS0d9(RH<^G4WVb@c#:59Sn\_[,nK?'g$-7Zs#<(tR"=Zn<3O@P=0^/l2ZPG!;&Peup,dWf73b[5#jV%W;M%$W6-;b_qO2#*$s<q4c5MHfIWZfDOi$;tlFKF_JE^#-6cPlsF]KR;)1n*VZkSanjR=)WK@sbMh`P6]6R%RJiF6LfP<H+&]^q2kZ;Q%!<-'2n.5ifmH'[rF;mZge_*g)I_M4R#hg!i5jGBT"U_\D@0"p-PPF:V0EG%+#_*jk$#pIk#t[)4UrdOk&dFG%HqDAfLj'QK&JM)A%9p;!984HKkbec/0Oi'CH-28EJ"4pa"Zc#pe#RiEg4"U;_D]PN&%<VTt-Og.T+k.>%FdA3cBuktB79rbi=IsGg;+^/J!L0+Ok3F#H%f>#IiOhOSJ3[1TnoLC_QGId2J:]1(KG;@Uu9*<HmmrIA7MSqH\qM.E0?7P5/At[(j";6OAWI\g$O?)m6K1%Nc;2+2'!W74DR0+gU%JeVH/@L_)ui=[+]"%dG:>2+$B;Cuj81PFro2qO*e#I+T-pHYJ+NT#c7Sfm>pHt]gLD_)7Sl=b`II9MQ+4tWWfT;fb<6'"U1!u%Jm%!DJS3pZj$#*["2Vj><uF*76U%BCJYX&YXcW%oap;(<TSIJM81i^Gm%TBm]A?.0G%X5D;a#eV"q6kTm/4m3HGG6e,t*0iCi;p/4c+%`%3Q#V.`=*.c@#c<PTaYZ*;9Mlh"IN`37pnU"0&7q;sCI^\a[;em4`$KG<qQTDuWdDr/P0(>l$aE"lZ*Ba6P)r!U8A/6!RF>H>HV%U0B#]$bfJ#h^JH`S&aGk6H)7c5\X-"hoq41mE7BsOS`R"!T[Ie+saNp;G]&0<(eA,NYPY,-p#dgT_>WjaNP7@:i,'\.$ql*:gu\N%A/MO<NoOkk3,nh15_;Q)Lc]i??U*?q0]e-^PQ,2jX^A"/fDC,S!G";dX%*_#PTI:>)!-iMT/_'WhcP&^Zk@F6!)"Wt;cZI5m8eI?%i:rTL%FB2NMh]^[F_tW%^@A<`$L\IJMJtK.3S'E8Ru-k%dG@e(QJV)HcN4\2k/JgMLh/"NV27T]PmH]E9<ik3`Bk]sV!poENb_!c%:8u9)J>6a%=+8>((4L9V1gcTF67;["GgID:l+f)S:quIh[$)4t\*'5TW!P9ahe7CidIqeX!Khu&8><UOAW4D,jZqA^JjlgghnW58%;:f!0TTUKPH#-NZH@=-_f;VW,'_HLR!p[TV02RSZ8Q8a>@A.>3(T=2f)6LZ#PE[9?9Sr3o1'@;#Qp(kXV0K-a7-j[2#j9EUF%HS$%5H9DB[<Um$1A9rspr58,nVqI7iu?nB6c2hsnj,0*;joE2XcG'JGp/<%?6o8h@Qp"'MJ:n8$Fq#caN#nskUdrdIM-X3^&eBP3k5BL%j_"e_rNn\+:;29W/Isl]ETW>EIbh=9&Tit0E.$\M9qWBlcSpY1-5eT!E.>S:ka-n])rF[b.V/+0Dl4Fg_&`;?cNH/>G<F:;@FZc.%qb@@WC9%bXV[+14A4=a5.WI3NC'QlbmIEusLuq<i\C+RBn^J8soJdR7et8X`,7$^4#2>*:Plohk[M$-,c;t^/<2-=sVj"HTaK"&6%,-(-Qk4%P)Belg)Q;]?"]<9WtF:`,<9C6[<P.KeF=qHB]$K(WeQoXN.M&n0uS-)1HK3H9GMMd3Q5\S8\&=oh^-D.SDjfS`;Le(#3%qE`(P\4'[N3!q+@i*%8Gi(O\nE$+d,\:Vrk\.)/:E.njOi&2",_*&!nNmi6SNoSlMVCf<<&El)H/%+<f0^cFa+jb4t_oL]L7pUd[%?K\,L/tDP&=W+Tb+;R-^Gd[MPRkRf9$(>d#=5pR(1/'q:,?;8m"o6.sabHX@3?st5[pP#Q6W0t?'5)[YN_:sW.L=!Y?5o+o=es\J%9pncqko`$&!t2"SNA[h%;2Tb7M\me*co^$T#-&eF(27!<D^Ml2Go4b\U`5PGlQ?bE$2grddt;WO`YA=CRADc$6d=s%V+5-CSGmW.%fFc'ne3Ee-m+9_8bW4>>M82SVUk9+[!ipNah%etDcl04$Hlr#P"@?MuE4=O(N=Dp%+02IPcRLF@TsW:d*6N"_V'%UkVP(gp>9.@M%0Jd[^R(!FEiJ[!JRk2cbm6Mmt:2.mM-s9IoPcV]R>a<9$:`\h;E+fLqeRS_!.4F*!EMT7eQNVm'S=kk%>#5"GdVB8VkNcBj"I*m5%:6/f2Kr7KWin"YYmpQlNIX#.%Z?3JhEqM&;,bX7n0nALL6:$7EH.CJ6iB&9D!VA>T$A)VOddc]<H?`eR@9O0c]YnlNZu;k]MWUD<%W0OP>W;#OB%>N<LQDG8)9;EM,R>GDO.*#IsiDF3PpcL*6i]1D_oiK-F$<GdmL>J1UoC5Nt2R%Qi74*Il[NrS$7GX9$Eh\9V*XTfh%W"T#bi^<8c77%(bofpAJktF%LFB#=n:%JF]@)isA:/NS5rW.ucSSX\aB[).8eAo?LeYiFtV0ci)_I"6BANkkP6k(b*nQYETHoj&j%l*+5@en;7JqIsh5rA0<(Hj)haK75pF4rk4Kr_Dq)Hm,7Nn`iTpH+nhXmF!L\C?#`6R3O+na)2.)"UGIdRrmcHPb@jI7["gpY1aoh%Vs0/f$tOcrH9A.&+BnOWX>,0QTj59?$ZJqZR[R#_;W<ma^iX+41Mu)(&e[#&Q8jNfm@_TuYesYWn*hH)*KslZ'Vcj_d!K8;5#<JL%5=4FuJ<\1XrZqIGEX$Ir^Zl'9pS4kg3PBUo;"1b/4s.gD$dUcNil(DJO8sclc6X);^[jT.-YG>iTehl]oj\_1lW_V%G&diSq>RAD%5S'@iN1sDY`C'D/q]+J71-uCW+f$lDHjdWE(8Q4Ik?Qi2U8W1`1oa*2OpWXLbfGaYbW&2S&cb0>,T[Xm-Bi;5])rat"@Z36?pma@%/g?HM6]j&N$jZu=LnZSdJfk8c6O[7cDu`Lm"Mf1KO^_t&_,cFO&(>UKMYVU2^UEl4ea<3=?X[hC=el>''Fj)BQd$;R?`PDjLFcPD%G+g+BU((L'/0T[f^Es_JH/f--k]utFS,o+@f:3DTc&</=D\)n`p)kd9g:RnB$G<8I:'dcP:!3O(Em4f1[nUi<SHF_VE;a!C'pV=*%6FkSh7d]G<Y=CPRDu?*Ke0O/,S$)ID,NAEkBtDBC%-*-E!k7!43b,<nSO*2U859sr='&&jfa+ntNee^U6g;?k`F0tu(H<VMXT9J2%dr?qHS=):!E&[*3]%L$f/fZs(gnril>]l.PZO+!CmEl(DDa_:EB=jjg=M.)<>>IEr>c+$"9m#QiP5#U,D%P<5h-`$qlh<4UCUn13%nu:B'P0MWJ&r;^lq(FT6`M9]F*XR2;?"TTX)Y]I-^a(*Cib6PWs7rtpOA30W1%L??6o,&7q4Fmc-bZYgNR,dE<j=-X<k(p6kX//g%lk9]HVB_G%.)(B/h4\g.*=F2M<pNt,*u(;2./Ok&Ltmh^TJg]u0b2+[.93L9VF>4#/MV]T+@`e--p(ag-pU0D&@adO):4'>rL(mH%knrZeSssu`n"u#Ge4`\)CYIjT_Z%9^*7bcF.,6NF'&X`f!bG3kBSiupWJq.DEgY3(]?Hb7*&*/cGE5!6L/$MY:1P&[q#$\aoA^4\%Ig$M7Zd.OJDA^'4Ek"RH[u1hULClIZA'H)Ial0sD0&07-lp1F[g<UmsO]0l-p?ep3bOr!,p?:UI_Y&1-]W&jS0a36(NKA=X9o%0R%-_3h#\]5qS^Sdr1esM1LS82[6!,;Zf]r`XN$Ru@7MS,d%$d(]P//`:%!E)e6+;VU,\Yh68TJecj8pTP5e(m:pI)':G\Nm9&][^p[%B*gpa\$Sg;3_*FA#JX)TK:Ub>T`_K^U,Lt8r(5Eg6dW5Ug_)Y,BKmB]3Sc]EV'+`P6T:OCJBlZ^Ok_toLbu\O[;3;m[]f*fCL-SO%&BUb2I8C@B8T;kD-0=!]Eq2ak<3Q):6BK)`!eXN\/t1l#($<K<,dDb2pD;V?4(-EK8j_JL'u`CPqNE<u-fh"^a)&2Q=S#jbKMB'5%S2p%:&oo>1:#-%UjLjJ>qt$nulH3i=A>^9XD;#-r5C&nUBbVU11ZM1_k<r3Ec8qBX2s#?C)sEajM:8iMeZ65K"MFXkp`U7jHbdM6%'+3tTMdmiE!UVJ7EH#t.HS#k62;Y2:&!SIfnuce#>1@[p3G:%1PkD5_!>*"Q13RB@%Q<V_%*XZkq".a'S]2bP7arX#D<dT@[V=Ln%/_7pIi^:^On%m'i(/"BL0aVVVCl\t!d=noXg][(ci]r!%'/g^=E2+l1oL?-L(6''6WpcQI6(_aq&JrZ9*3d9G]o1_'J4:F@ksk]-%iaPLj>l'Mr)\UkXFPe30a,_CD`eGP\&%]*kltf9Pp/D5s%F&I]FI'>0KT'W9f7V:MEs:5K4mFV7&7lq.U3krbTSOjOKc7CmroMi(%C?HYRB?ASl`*a-XLV+V/aT75OrXOX9QN)X^4`JCnUh1*ubNd<u/7>LSr#N16Tp<_h+D?+tJm2ubZ#bY(1Yh.BN5f`B%E1-*6:s<d%;&NY,@p=Ld(V#0QJ,Hkk<aIDdIfq#3@eaiiV#$D^bh2W]D\W&AFn\0n8h55P1G<);[SJ3R7@;d4*Gd[]dEO+s@N"Oa^fXR\?na_d%>CAE'H'R;(M(B(Y'*H8'HtR2_GOVVqY27N!qM\aM*jV3\&Vq,T/$tBP3T-sgp#pm62gjbD3@9KugU0.0G>3tS#N(W+539]!l'jFu%oGG%*"&YK>kFU+Hi%N7`2ORu@fEgg3eG.db"3f`=P@<]/qXKO&SnKOE%]+u/-+A]F%uHSIOI,h1cb)@QSusB<1/f;3(FMKhG0<>[%cULF2r3m/f91DnV7V;D=1lZgIS]`-UKRkK:`)"\X[%0PHp2r;sc#dHE2asWaZ$)u1iCJe:=geT-aGA#0d,K-bUnqkQ+ts_4qjt)B%'?.?EV",\f(+f$[E65HW'%V[jhDNQAhfpcaaG!GWQWJ!R!KLL'Qn&?7Mgm=-Zb[OESK#.)Ipam;NN#gp70/ifTi2SAW.]8*qP46b%a7omkVX4I$^1`\qnV[j;2;d%$dSMBU8_ZX8L17iJ&ldH6"k43.(#j=lbaV&MO.b"H?34Lc(b0^nDlP(*$AETa(Fou)]UK65lEVNV%W';!^NG`0\AjprpS64iK2+tI%!KaEq'*E+EEXJ3?$[A5,Y'K$:6E!,h@X"/*#Y9;oO>Bm,N$Ut\98@@uR3"s7p'Jp\>Ha-.@L2,Y%C1b<,RHoBamHUt(25il&`9HOXd0d46q=])bk@:CqgDAG=nh#+anFElK^[.BWXmEP4Yc^@26"3krDWi6]$*0gj=l4S5"g1'pNl#Ah%"H'YO^`p0L6]TZ`%9"T8m_V,9:KhJj/,gq7:?&=[$"fPlMP&:a\8LB[Q(R=h4(IY)O^HTd]dq;q'2m]DQ-DI4c3I&P9AY$d!B\F!%A=MG9@Ci5k+kU6)rnK(f0p'l>aAH!o:_k#024r;/95<#di4tLT"r&&g6P,N9lQ>^+$nNP'J*Oo2&/KFDMIqMQ1Hn#Sd&lC`dP_q"%+%]i$Y$0i7H4VQqfk"^QO<6rlq^S3!6uE8Z2l'/-A@b0AeLUqOK&,i!$>2a_ERuImQ,*N'A0@l%8ga-?`'HX)=rJC#LdEp7O@(+)%&5+/XE,=3^la8CkB6$@1KjL-"951a=7%%i&]/%XfN/eibI>:`-Vb@6">&4=SMC30a/-ZdT5u[7$Y-JO6gSMpaPa/Jg9;k(P$aU`f%Oe6P"%tFL"jo:9BJ::`M66O\\cFc\PBO[do^T<2,fO6b,713J`SsG('LDSD?c"IhDP+L:T!%-;gClJ4Yl/ZN+HHJV<F"gC?0cA`9%X7-<J/;Jdm-kjr@?']g"@4>hgm?dnH[X#ar#C%C+fPignDO;%Xh=5g=n#8;mG0oJ<,*Ya!67J\?aoN/<.IDqXOF@?tZUsM.(mZ]s%/DdnoJm06E1Kk\<+O/]]cBV%Pa$Iukl#82br/J0&BD@4C1G7M>j=5SJR-6[/$i(9n"4WK@'cu*!%^+155J;\9?<97ann8>!&-/,n%==/e%R!#]r>M3eog@h[@AIXJc-A7R57L<3sA_,bL)D*MB:de`s?q<?(OJG`PrgHlu$):/.1fs,/:bFOAj*r2AB'%GQNMPf-f>iYc%WZC>r#%a:Z9PZN/PkpI9AQX@2IjJ6s?)?BZd9KhJOpY;s&*4j"&4saQ"tp9*ZSCk"Z(Z*KAkVnoIbSA0'6TTPR9r<2RO,YQ@N%Lu%.Y</#U/k]TA876M^.U<@!E6'</7ubmU^)VG7"qVTSo:pTij)ZQa.hHq>Z6.K`/dg9fm,ri?bJU]$LHg*ieh.[%.saiklKB!jNctV%S;ED:-PNOt%7WSc4)5RH-k8I'P2f<U*nmd!`uGgT_&akf.s4US7<^:Y5<o9?agP:3]B7!'SB4o81.>Y:k<JOO:t$gNdnmTI;$:4"%3tKif=PhM,bfj=ud*)UTPX:%GH6jbS00HVu>@52ANMSaWG_OuSFd:AhL@$2$"jO3UJh*$_]VVB6;CYb*i1]hs0@1:B<4Yjq.Dd=M%1u\(P^bAX9IpYEN+pb1_6LeTikk`R@no-Q10F>B[,IjtkKL0dOocWpG89KCg@c')_193Yh,,>$L46753kJmZ>TIJU@QbLKSo;``6%A$.8<Ok\aG!H*ns,tP;]/,>lU0!fs%d:Eno.@ph"U.f`""Pq3>&H-^JF@7d7Dgh`?d,P>)YIgiif'>mq]>>?+XK+_@:A\Z@,sP:3%1V3UK?i@CljT!!+>K-k%6$E@kW4S1DQ2R*jbPsP_f,d9_T3LNYHh)Z*)B\V>oc6&W-TV:&7!>4qq8u9`C^J'#ETQec*VC9ho1'iN%M\/`CS04rjr16_tKUA7CP2,L%m/esCJ8PM5Z_[2rEhIDF*c#?,.2]$]38?-Si1jnUC)j("/h-[Gd)>[FH't]qMG`Y"^S%E*>m*!l%:VisiiUdX5fMHDZK-c#R,elE_.*6ctNb%S?G.R$)P3[u<ZdUB`pKs-ci^SEC,dk9^l^gLS*Xp7@RkJ;7'.A6-Gm^/pK'OkC<rn-U%29a<mGV;EQ]i<C.9`V4*0\Q1O>J"g,7Wc=XcJ.2KCZRbDog?3#`O`kqn.W='H%D_pGZag]3W)c[H/5GVi=i9O>8)kI%,?GgD#GpQ%'`l0Br(N@]A5]ULb:YGi(9W(Z06Bu_f#$0qm6uO@^RYKld?BlV?TCUf"scgAVPPS$D0EG(Ogoo<(JcRoc&0APWMIV(.RAGDWJ4uc%bnUUZM6a.:=4?K:@G@^goYcpJ$<rpWlcqT1[k7)B*`]p.eg]G$%JA\0:A[]cK"n'SWT/C'qW-`hcF<<N,lLCSn3%5OURq,KWru6(%;,!McQWhas;&>mSS\-+)`J76AXNhoS,k0O<%A5mU7^(c!h:5/DZD's7o0_[[PIfb>BDj]<],rW;o9fU@Xu3]R#<cEtWAXuK9Ue)n%!ZFu.5>Ci(l9&3hP(0O&N4kT++KB0,B73kOq9LJ6:,77%M"Sq5T^\OT/85"[Q80sHV<[DHaAhEsh(L\YqKV"NV(.qVWVVDW6Z'if%JRcYr\+0Jh.4h!0=+g^N;e]b:4%CaA<*s_Cnfs,`lLPtpX$eP)=r",B4nh`Oc*BKI0@nA'd[dca($/#"*DS?Acl;l.AB"4ML3T\>%isX`10:O%(CMP!mJ6MlfIa<WTjHWd_?cs"JBL3T51O9\T+Pel[@j&%UH9V(Xql(87nsfoFQ^K3V6UdhInS!BW'AbDN@Bk+s%/ht,%Ca0d(n+?,ho])X@e[8pCV._HT-s#A"38ZbW$o@Q)`<sHL"+WP:<*>q5@`6I:Yh=D8#Vi%t"++G;#QPFbWWsD=2I*eC7"`XhP%C:%%OkoR:G'kfQ^lg(^7o^Pi75VU9fFRDb48uPO2BU9?FrkQFBUA8dXC;]s\Y58PJN)FirCW9&5V`DffaU8k_uPc,>F.FOpoD:+V`%<#%a8[Ke>_`XXR\at[*YfFgoR.Zs<AP<"+d.QfBkf#JI7fI[%e%p2XI,=iV:"U*Q:4H=X"dM)Ch1'JE!s+I')71q7"Y;L%]@t#3u0@6%e[*Ci.hHArY?X!@G;2s'-PZ.*V75.C(:]HK6,`OC[!0l(0uL:g>cTifWCc"SSr"_hF0:4FdY]KtiLlT,,&p,9^%P]F22K-bkR3BD%O=b\@#ZRnDm"`nASkk*:\:RWSi@oT%lrk>:1SU3a#&bF''d>+f0e`[jIgM<,Pe$IY=\ZHe)YD%BNEpIL$dSW^2OkE[a/7sRgZ3\u%pFaQ.'Ituud@Y<4b-Gf!F9Aef*AN,$80:`/QRho+;.2;9f/0*<eX/n3D_CQf&5TFUT7b+>F>=':R`u3PP;ltQ7VK47LdjKY87^d&%E`]#ULo6\VZfsC">GL:*B4#ja((2c#G#F.ueW</[%_n$e"1I_8LEuH;\[7;?ZT$:4GT="?`W8U/JjpO2=(,eL$D0*=.i#.M1s9h1%P1^7?(%Q2qrf+D2hrC,100n5;dP<J]mcatL\1ujTeS(MbpF,Ku62kRl2?b5`SUta=F?Z$'S5s"0TWh*[bkUKU`Nsjo!:fpi1j?nD%A*,hXr#5<r:"stgo%IlJ[R<W=HZnAEraZF\1P'cbD%oZi.1DCSUN0u-nTqS'H\(frd+:X+\^IAJ44%fhqnVe>6Bn>n%=ft<JZ>n]%j/>?1[9-SO\-UosZJ_j>gE)]#/Y,\$Z@R<!K;Im?_k;U=b\cl0V#sG7YCU9nDPI7H1M!Z['nV0E6VFV!-<]!>@M(_h:[A:4dt8q*%0?(uO,E*Q?'F/;agd$`'+E:Z>.$H&X\!-kaHZ^US*N!Ku^A',:6[U8=)=R+6nN<mSTQ#9<luf=K0%3D#a-34Vb?$WWeTdN'!GKCM%nV$>CZV!fb+pn^cZ0[Pj:ON[J5(,P=oD_6JGWAHk<HB%%h>C0OCcpZ%(_n)%4G,a8.6Yjujh&tef`1JpAp#"2Q"#HZi;Z27#UF/W%Ar->S-=-p`rVEO4,r;mgci"WV4QkZ':g&6Bc56%HNXgVjKY3C7QG4mn0eGi=3#&(r1g+d\Bs.qS$h'j"/qJMI6t"Z.!-@Z$-bt,J%2fs=<8LT^_\#l$$\c>-fHWrFO$&&T.M9g]L^gbonbqnC"i`-l/7BW7hLHXEUd7>F]'Sq7aLOg?^[\.6`O%tY)1q0)_Ljc=@[*Xss%$bgHho2(Gm]$W&0[<MDc8j@Dfi2ASjFc4)Wn]phidpbuZ!2q:_8R3eJP9C]3*MWGJgT/KXOC56Y54]3Qe<YlVY,R31h*LsZgSl!U%l%dBj.UA:d'C(1[gq[8$-iAh^`\]H!:RMjCll=h.R22C.,>.&J6p&E`;IO*J0ETqJJ@@&>P3=/u(lVInKlVE@'Fq/OfT[G"G<qHL%?@af(m*2D*E5])j`puW$;=c*J6]or[b^5@Ab'UMN)qYQ`gtbkjMUJ9$ODmfAfF1t#WcFX#["P.-[_&q2mYo_6VoX]>"Y6`e+T[9c%2&M48NDRWX+i(B(L;a`>'MlKqQAm;11TOH(^g$$ulM:ur+m*Ni#JN'+3L4NRQV:Okl6l:gU6XKUs+D*2qKhG8FkW>>H`>:sN`0C]%RWDm(K7]l%RHr_*?/d$P-S5TuW:Jco$$qY_!jhc"IL@4>N5Xp0/,XD()W41_?3V!KP&QI-:AE@TYB@]$Ji`,+YVKO2i+CC^RZWL=%U58rT'NHp9C!%u>r?O]"?i/(M6Vk([Se89hTcmbuSXo96@pc+laXPfNN+>'D(Fc7;Dm=N-R=,Qr+EV..7"?1nR=?tu^]66k$G&85%/ipiDRlZmlSg?eR?##6AlDpBX1Fs?Urt%S_ccBG;k[/s9!`t>q-9R(!iMO]%K='L9"6u3-lKDG,&"B$sV'knpJ%Icm\<\Pn!/#d3%EO[I`hc`Yk,<9eAZM=&FBZsRI`P4ie<EubY/V!LZK7B'd,':Nt'rFrqiSUh@F-B)7K\ur$BIbLq#s8s(W&-HDJ&0SQs0dUF^CGl)%Kb+5fq<"XuGDCZLYpM.A@Fi3F9iioJHj^:MDS=2\S,C!Zg`-:A"[<nmFmOIVppVU7<7j]:r>TI&LOU*g'F/MT^./,dKl\UkR0rd*%NV=3rPYFch^XjU=Xe+b6:?K7Z$5bc%<E`,%\3eu:Pek+mJ1.:NZBG2]XsVZD.89p54i!`e?Kj&1:].g2oP^u_'RLa/pSj"noe#15%WKLY!8FXhFRg\Yh/PX4nV_m`)$!sm@%V(^[6!'+O3X<)IrV%s<b-:\":1c,fW<TTrk7OekbjWcXKVY"SV4V7C2>K/BkFFM3g1.D&%@"s0CHt;@'\&Xu47<Vn'-4ID<1MmGPm7l*3h^O2TX9i=&iIQaDhIEh?6E6m(hQ8bQ)<5D/2i.K--;>5\QSs5*aonnMS/7o]`/Ho4%H!mB]E&%7dT'AkfkEc>5/?Y(.<"VT(Q*ha)Dri4Kn:1&7'MV2hDa::mc#*T+N'_BBN2WB[lKX&<iD-I>>V33dfuLo"*,Y7h^9t^%%Mt>ioA!/c4VOrMhjZcUI</@"om\,*pDIq`g7B.<@$/[e04*8*lVkb&4@6(5<8=M"`D;@-hDYt_EI.$-,HVCYr=Jg]9/BtmtjZO3-%S,.6dd&=1][oX]d?nihmoeI8%.Ys*mmh,oDJbGO!:ssKb-h,71&6T%S=?`-#QeQIlD5r)T#g18&iWS,l@<Gu9JN-=#AZX\KhV_U]%CM6KT6Z3;MT'ii<\V,:,Q,**$$;f4@-`EB+]B/baC=N$D\[#$bV<"lJ*:?D`^%Rcl,cFe<J>UuIX>95HlCCiIC-a23g:>0q(65>3%P\RJ\pcbP2104N8KR1JW?A->#K,IMD:p3!i,o2/rc^;4OJom!*(YpDdd%M<9n@FBR!#mi1;\U-GbXC))0D9Q_f9u8CmUU+l7j2rE%):F)X4Ke@I?7M/XFD2W`h2R%([;,P%`BGYRgeuike2M(ABUomV\7h7``U^+A6J6m9QROc4rr@a)9W5I0*c"NiNht#KbQ\DMThj:X%OlNdBN%la`,h5a#Ji.5`*kK_.*c0D1W[G%qS;lNC9;chm[6ND!XnYhCWm&e0$U5JtJ"ffbpe*q8/#/^e]WSt'*2WGtOXO0@D"?sB%J:to'=GOHsA&PW<mg?UX:cAUUglsC0*u`r.fQ`,-6;AJQY*aU?*nXEP+V?3Ai1+5M<Nj=f$2[\#4KN%Lm1k$toM?V"W1?6UK&c0"%7I9DH+Lk]e<JQq-8*b4XGS>#u2^)"bS8OYC3:J>BZY&KU2ohqupR##8aX]EM4E;2Y`*)b"UXO7F`/G.aWY\_)rn+j;"V14C_c9^?%LWgib/!jMS:!ALg1iqDGX<":6CStg\eZ07LXbEIQG.C>!LRGAKDnOk*-RQ5T"+Bh\^U,O;TiG(-\_OU(UaPgepmL*@GA,!3o@;"n%7kH27;-)3TO,Hl#b\*u&>oU&:?+kiEBb6uVooYeR(aL]TkP6CNB@p?S?9Q]u)Ht/(DC,4s(b(;^'SYC.!F!WHbAW)uDoH+B>l?Y`%FC0;4l8p7)d,uo6B6$L?/SVn5fKA!<'0i\^[L(f^XZjWR(23k!hemHnhC(4m)?HVL*]-4>/-p_`VtP;l=!1f(]TACH?\XfU4?).E%blotm)(N@_(V0R96pinV6NT7>qe=8se2&J*[SNKr,>:dU/b1PSD8u:p\i8,SX6DrSYHbfFJu0D1a?"NV>MP4E+#(/T/k4if,n^S3%A/hhlNjrPA@8F7pMI)4*ZOFWB^#*\kDA$<jo*JZpiWU/R<\/R_&E9r@dA`,bE)ZE2ms]EXcZ0T_,EDsZ?Q2&_O#X$?(BWJ,o&T'8%(F=m>_3q43#J'0K/;ns@.9S.=>E*s&!_>o[W)bq,o$V%=0&_u?,=TDmT$:hSG!7HEjG?ht+L*7Uh&V=h>'<jV.Ck1S[l^h</Oc/B%(bB/R#p5>GPdmi8'P[V"7:_5K1rd.lAG6@:)O\XLcj?sh`=$tR$l]f]TAs5"QW.cWL4o+s\[:o8j1@rbfJH,PpgtUQ5R>@o-jd/j%pZ&FHh'GK4l=(NK@3f(e\qsdBG=*Mbgsm#*3bR%D"krauoWN?2mQqCJpY=0:]4&WdAbXan?+*gq`(X.C3uEWCHPb*2W[g9o=2heE%b_!e+mLH8?fL3TRN5!$<<Zntt/JqJ_e@WJq@/Xo&Fk&cr7hZT4p;.;@ZWRmIS?=SRRruGmLdHu2Y?6)4LFmM!)qW"[V."`R5lnWC%2"31!NhDf>RU)Su(>O!T*F]l\^*M8<f#LjeHJ[A3MTHcJC+K]]Eso.FAi$ORho'H=IB!K5YV])3&p.VR1J/BHP*o%uf5/ts$Seu@%j'-9;]GrTMnTV]O169gX^1?W^cFcg%YmDkNOo:uN41=s)g(U!%apt;En@0*VbM^HWm9Aqk<+RjM3^dcIAS"dWrdQ@j!S#C.J#kJn%-i4NRb>LVUVKoA"fZ#XL*J^R8VSH[uJ%:]%Z%Q'b$#3_5P,R!o17C&3]!'KMT[spccW[fMjYC\!.q>TR%=;M7^g>_iCf(+FG)_"s%G8p\]VqTgHnBZmp?ju:k))lai0ol*Q62,hTbW5&+M@-"P&*f2D0R4V/o*L'.I82o)R`TiTk"<,r?Yn:6bT;f)fDGd`R8;K_hXB_H%^tX,[kH1nKo]`9VCcid\(c+,.+Q=UVZ_0d.9!\HCqHZV`(2<h&EZ"eLhLu%X1/mQpg611O!8`7%/X&H$1.mJdUV@;b#s/F_U]nB9%s.A(es&)hfgZ.D:V25Q?"!W=gB]1Jgc(YM3=.p0".N8O#_lt*O"_em[JqMa@l3Br1&Dhqn+%$PM3o1'-/gAKioNlD"rM/*uYfY[A%C7R`'COmaiSlRm/r/-M2"9bt]08CkpkT"1oV<LpJo_l6;E7IcMkE+4$f!2[.f$TIi[,m#EnRJ"uM36(\j4H/E,6!FmYh6Z7\EN..%X(KN*IF@G'N))ARD;KD"RJt\k:0f6Bs+l%[EidU4^O"g8^dk@`;[+McaVA#5O)>@_U^!kM$Ts%`h(/eId@AM+eZXg\nl^`3G0(#P%S.G8Uf&RV]P`S)?VY"h`!AGUU@.'WoL,PBR;f(DU\ppW6m%OjqZ(pVeBeu#Ph23FFf8QKJfT`(,S>Cgs?$&ptIKN*l/.N-R(fV#u%XUZ$@NuuQ69g`3F,#WYh7A/pMn60$Eo](HZ#\CXcgq1Fpf2PFPLjG[Ep6"lF>erfA)GnJ"WrWL%=Eo[m4jMOSk`f)A_1qk"`U]dh%ggq&;QnfppUUZZ1AD&,"LY[r-pOP$L.4Z"Fi!U2-Vc`Z-)hTR`gp^fn%!^F+<SI+\-q*VOa"*$=5\/%@?K[l3Ic8IHLuUn)$/rSg%N!\tiK@2)3s,"OTM7*h-*s[O6;@U>SVG__6<F<\&q)D9UqO[WBZ\b:e&e2g];E4.Or[#gTJC0%E)B0-J=sb8Ci0UdrB2LlLi[_bW%D'5tAQZ\X^#RP'ShUOMsc->2;56'0T!4pBIq1C#>L<g?n0@-"9:\h#(?S@c7:=]Y>h4&j>jJHuAC3QqcA^1iBa6s#=Af-Aca\`bo%-c'9Q(WfhD/"9*#0s?BSbMDo'5l_O*>TNb;7Y\qXO,e]8M%<cF_0r0u//17BQgc(ZPts8BM]YObIW/A'g_a8LT4^r&!E?!U&0TEd%kpY%%(rG?-pO]sgD>8Ue@N#sS9Xj#O$;L/IZPqJ/\h&X-'P[Yu:-FWZN9OrpCSY(t?.)W^)FhO9A=.8hA$3CR$th9M55)"\9%5<G%>%9dJR-p;qJPD(9<V4ks,1C*STN*CYUqo]lK.H/g,Z]m=$CE,VVXI@hY8i455kcg7^-4N>nq'#)7LJnSb<%$;<>###=s[IN&fECQ%D!52(Q,1Qq]Q,usTj1ol7qgKFBBolVTE%M+TQEiU+i#iKDIr/E?$Q4H1FsQ]Y,kWCJ=1@nWL%U0F7rr1J7GCm5:]T'Sl"DXp1+n^%MepH]rLoh/:;<#F5-JoF-t4o=WCfnQ$KCa$CDd5!-D0:<\;h<:lbXsG"U;=O(f<L,HfS<:C/h4[1<BbKfYnsKL:d'm7\5IQT35O^%\TIr(KlB]M0k4@0AL32ppMqq/!7]1[eOCJ'b!iZ)KcsVJ?N3EMW/N^H8UqUFET^9q9F7f$qBl7(-r$VMk9CYnCO"c7=u2`>knFuM%Unoqi4ndVlU?pGBA_,M._<a3\YK6[@!t<8YR0$&s<3.YhN!)!9LaCcoTQj)#%0E,D'#&Le>tU_h3QQqs145rI8@>7PMS9TZ(0c1S%9A*RELsDG]kDh+("jO";@"H/R,FhNr6Lur9Ya,LDC5,l_"!%fp,keHM&@h8+]u0$5`OJ5_K??W5bLp&C!=6Vob-F'U[q!,Cn\/3]%e?7!Ac=mV*q+B;hpTFud`\EbKgG&4OXRg<ShrWmrSbd*El#XPVZqG-F"-bP/0A)7l[b=Ob0MWQ?]8^P\FiKp6qXO7rFJ.[b7_/<(%Bb5C5@GL:.P>nr-"Z\0H7BcM+rYNd=Z]3a]*`1gE,[=Rl]:*"UV([P3g_HF!FKJ2#f51k)aB&tGl8l8#NHn$l?TH'<fh;XQ!StY>%BD#au24@qjaR:k&Q;fa:8JPflkE;[`2JMk+s'C[hKmO^B`AeD.O&hPJ=rq=nQ01[D0jD3Z;lmCaW?'t6X'r`g6nF#33t=;S6DCPD%g7KMrZ9Q\YWYOg0[MmtMX9M4M-8*%`>UcfI$HAXj><-i`B'!=3/6jbA4APU\W%e+H2=L*;B6?mkoUC6p?/c^?Zba!lC8l,\1%ZL>%W+B"cOr4f;>b[X^@KK;nE@.iSACoP(,jliaF_$U)pfcF#$9Kn]Lfjj8/`)nuG^"cD*BbaDn1"98!:sjH@9=X\EudNG/)StV*)CN?%&&\rdUiQ$A26S>OKL8MZ%`e5hk$KN5Ph-9AEU5K]f=`C2^:l!!]AW>*2Vigd@*#7=A6g!F3'=#O/*b6hqSJcb\j`]ZPkOW0&X:<R%Un>R2ZZ`Pl#YM-eiP1]2K0^JZ4V%1sU:Ig=Mk4a%Bq[&h4!dg!;P/sV8et9*kf&mWb&WdoPR>kTE90KMil1pX!#I^Z@KlunBL`\7%D]qd?%kPJp#C>WgQ`uEQn\jD0.4m9dMeL%t"U,K9eGaCBJ7>]rnXPV6]_Q==?N1\9.Amb1L4Tg.L<3RtaL/]^XcVfCg9$l&L.KfE%VFo=^2&4)Dm[JsB(j?E;D$fm1!j1r+'N6iVM'/@IjJE.\$_PqjPL0(%l48-=?RMA8LFX?3=W:re6s:;BMi/l^)mO149]Hep3D\%5%%nD$>n4>^%I,Np-DHusDVL_,n_%>4#GU9N3T+&/*am*t;6BO*@Rg0GD=Da'npK_$sAalqT-Lm^;HrcdFS=O;g:6a/#"OfXe7P:(7%UD_s-IAo'LHQ2J\?Cp-+%i9*$MY1`E-MR$hkD!MJ!>NFoX-*8MU=)fOjC?bXomtknLsR0Ur7H?DEV&nX1K`Fb"ur+6E^Q3X,L^f:%Hk'6=g.J!/FZ]]r4lfs+S:;)mPEbWK<@dfn#,3CSiRHkHX`@RcJdA`lcNV(L&Y\*I]-P)Q]R)&R=]@=31ls([m)';G"g\/pXT]!7%92DWDKW*6(ig3YjR0<M)La;7W(^j@4j'rKS_ACOO^D[ZFW;r:b5V,uXMef>,e]9q>KYe]+-+);HQ/C@6:.dD:@JbZ+("JBio[sKW%!237UTc1ahhpZ8qameno/^*6u1N0VORg7?=8+S\=%$ol.@HDuu],hZK0Q;4',cDG>V<a:ChK^Imp)&<OXPpe;OC/p^[4,@Ja+K\,%\XAf*o]i]ZHVl%Zg\Q/2RbN6n2YKd,%H#TT[6/K&,Ml+7K_bX=B(Wh8oj+"-Df>DG(*L:#(TS]mi3%T.@k#a81M^F<J8+O[?ilWn%Nfr*)qPk#G4F#b4]9Ap?]Q*8SRC-4a&,#=n1>Ms!QLC]VH*a#CD:n]QbUndR$4Gqb@Fu#L<EiQHIqlV5K::gU7]I!KRBm#RjN;+1%$W*f+ZT'@T2a/M#qD=OiSdc-gNQP-/<fnZ.9r>8Cl!3N_Mh-kWore%Qj@LA^7)!<TJ`!;KB.ah'int\52)o"2:Kr/4'[sA@jO`UD%8PH/Ib'PT\Qt7G*VoV$QoeO!.6]4\/$0H"_-rr`;,"Zn-g:oa&C/\`G`A'"i_<>H[h[EPS(Ded:KjhG!5k=e1$)X7lUu=7),u]i5%iX#$=LMf,uWGKn%Q-7U@)q"fE%')99g=Xpi8atTGR/`]j!9Ta%Zn_'X-u2RBHM)4caj;UIGl<J/!B-n7^DeK(\1N1c%-<2(/C@i_%M!"nDd99;5!8/;E+@tlqR-ueVq=IaBL[oEhN/9R=^2(lY<s!mhAWLmMm,^9.<<r\m54=^Yo!5JcT_:^`UZpBW0H^/<W\i^SQJ5*O%\LnQ<4ELtpMbV2aT+Ta;mY.uBA>-_b5@WNMp0&#q[?0aDjYcpO=PV,T69gHOaVEPjFZ"TIK3od3G1P2!K]TG<(_SjCUmd#\<.94S%0!p?6;T7VkrC!2-_pI0l&!V(B8h>]Oa_4?O+',fdIG&J^Z7=O[f`/:XLj(SX:dUQ8mhhlR0droY#9&A>ahff\P1Y"XXcpV&/+q.I%kH+_kCQpS;)ChX,Ck.%=Sh>)]l1*;`b*(Cs88[CSM+!_D91WA]!o:Ysg]mV9_43uDpN++Mbi78F:7K:`3Oo$06YCD]AAOID\*`Mm%1'UNL_dn3Xc@\_[>5M$1)4:bL1LP?!HbMI[kLr4]bSFsY^#H%;-#gJ_+YtZAU^Fb8?u^XH*MGLg9D4geU`O/h0Iefj-r4]ml#<-(%UiIH96oRKsB,?d-FU5T@Bk60ePVnfu2OP1D*`'tej%kH5,:BC8+>!09$6Z$"s)3A-#f$Z^fBtB,B@,Iik"jb#*Z2Lk1&'W04AuAc%%I.mLm.o*GZ7sNZ8oA6)@l+u8LO"s:.!Mf*Gq6Qt)unP1;_\A9N.Ls]j1SV1?^>cM:4W'[7!9k-GT:*B9$8>*l.(=t#$ZTh(fO=q%Aa_ekJ4OU^A1S+5.lRCjJW38CV&Y;Kr*\Fa*e,U'bc/`Y=ebdbUiHh5Q@.roiW`IN7PfkF,f)u*%_ih)5[X#^4J!(Ld6b9jBn3rM%LT[^#1'[3$\/KIZ8s]MB^R;V<U_iL%EPcm)Pj:f(<6'tX#+;2fI#3(Z@(82i>M]hm[_oV0d8O\or!T0:Jr?R^iG=gtU.FAk@(lX8%?FN<16J[P^pj;[3O-r6M^hH?A$D7k_Lt0sKe5=>Hg)0TF$_LflH7.@$Uq?YHl*NR?G-Nj,)D80*go"MP^2//@EcD8`V,rT^L=gSM%8@>mr2Cq?Bj/rqq:+2C0@(&+f'ILAfQFJGs+!pgab[h:(N5uoUMbujbg,*YRaM-W\B3DDu1[F4J*;!mQ;Q$E+A[_`H:LT=bLi9YH%B[#bOVW^^F2.rY<>W[^C#3jql!,aU<c"01\@>HfE$kk/;X5MP65d^iG$pN0a>j#C@GAQab;155bVIp=9#T)4GPmM/d9mkibFHFcM%B@Y:J)EB5`WH]+)-/Aaq)BOD.jT\#_M-^FpTq9&%-&Mn"HiXcelYGi=L'=ao3]ok_hF=H%F?"up&N*GZCAmsXS%ZjpieGF*"mO"F%gQ[Z3:\H,eW'/03heE!IkZJU]n\(Lc`;ZWbo81i2`<kT.cMtKs#F]0]nc^RB>#@89oWLWr+&2V(@"T81ft*m!,1NbnU6)?\k,;1j%1/DhEG2-7,l3`:f*d_T6:>A?4Ao*t.8@,pdluFWi3F(l&YEl2e&J!:MC=Br$Ji[*hI/tPKV\K=Y=UDd!ZrQS)[dQ9!=CF3VKeSiq%0lA,>s%P&gn42>sgG[6t,?#$RSi%I4Y^'r-rYW;6d7/ODB,H<EL3h4mTN8tCQVdALnQr`9H0LE?gKgZMm-kb6RmSM10?HsGfsfcc%!]jcrE4"!i[e6Rf72h`g(PL9mHmBaZ@Si#F`5W&.K-1P"`Fh$fEY<JmMo[)"4(^$F6/j&%G_Z$d.oe"s>#*C[j#2<'P!u)D>#ht4%FJ$@f<Y@6;R5GU200R"uXm`_jki[a,HmS59Wb2Z8Ut,da7\4+p`"<#HhY8JI[I)8g(l8)EQ]FVB&i^RN#SmPl2KNp0-NORA5g`om%k*A2UcbqfgqB6p0kN)5^`ls'AkD:iA6(@B'?uZl_!u!&>*V3sT'sD[m>lXU"Je&JCh:O:AEaPUe6hRRf+_R'n/1OVibq`XKoB0;q%Hf18amT14s!-_)37h;(g'Q[l0gr/:/[p_s%A(0M3,2@ug;'K7f?EH[IZJ\[;;R3Bl)N)M#Xme4ba(#NmR:%Q@3\$u?M_[9a0=TYq%3*nSppat/c'uVA(h?o+6Oi)6IA7,<[p/T>"X<WuJ/e$df7G&=="3dZ8*!PQH&"n&E^d:Kl"l)K_Ik*uE0F(r)9Gi=WOA/hcQDR9!%3-SmulI,PK!;)<sEtB8(]H:lnKYSX<ZD@dQ(<.Dd1:(]B=ZkB,BP!5!8k$If^S<CKPAC?oMdAe@YFc1cS&'RW3h,<nqRBlmV*fKK%R<*$*4lr+Z9kN8BI"&10(QP?5lU8CZAXd]]MmN!hX4FrU;pfL]h7j_[S.fAg%1SUch)"^pn?A;uk2lO4;9>gV%)3(*/lN.uYe>Vk%g:kac-JX*=5l`h.if7K/_BDu3ear>-5oEh"3nL`YhH1#`/=1je:H-'f/u/dVKpco$Z:6<6Ajm:91F46]NGUJKd&mS<XdRdnIO]_1%($`.ZMS^4@o".@R-u,I=<oYYh]J@l;,Ysa8q]JiUf_B.M&`XknRZs"B[utFV68\/mju)bIS9."%a9?gA+q3c;b_-7c&*8A.>pO.A%!\jIk7Jlpk56PE4RFRXOJ0?.pSDS+Nj2Go@Cq`<YOLB^5&QrV3/KX9<6?6Gu"+9YW>S:C@W>6tfEte38S&6d:1".'U%#,3)[ZDbI%*9pWYOTe/lfjo,9mb3Zg=b!ZNZmpX..fWlQrH'k"!g]$&BTN"%D#?'diPH/+_run_ol2',d\pO?=?hVoQ$=H*%6a_e,c>eup8A@.%Yc*+0D.PgpWuAF+ACs#fG+Y)N"!%qEbZH[dA:GFbhAQM?-DVtXT;o$V1_,.!['f+L8Vpq';CB"^-bW'FQ<sTI%tl`tYU8`/OU*r>%J(9n?72N]e?HJpeMhnM(8V/A4NN@`5;*'T=OS0;nH3@KODZ]&JRc2!^EgJ/ll3qG^@5IX2]WdNpR)`D8l;el2dY/pb*_2<'`fNPG%Te:r3rF_aG&c/g;#Y3)>\9ni@!`.0\6-LN7!Xq"PPq_-9?BJ,DGGgbXS!gc_-K*@]&4<rX.45*]Y#J$tFcCNU:75aaKW46RZ?r6-%bj'%1"i<A),DGIK''o=JV'JP*/C[7.-Z;P&ePJo-],%-H_To:4]Y5m#3@^,_&`]jl1!;QOR$1+(_C/t+>p//=0F$e<jnI?+r>lTC%FbHOZ'RN'Z@mg_,\E\kPNI0;6Noso9bGTn/`i,l5OMRJJV3tRoac<aVHt#.uk%/bADPsUr:b$B@7Qldf@h8&UC"mC!T7CnP1sCfN%5"]"JHCU'K7.tDe8<neE)a]U$_keuD>T3"/!V2#*#+E\d%A>jVW3FD+TV?d@A:#5NrC7CP/*SoE__9ZM!+^K4)"L_E.b`8O0Z:hM%Pf.<lmZnj_Bm=Um!nWnb*7`[]&3agum4T1F"!8/Di#\9bE=N3'b$d+opq"?`P""nPaPY(oA,M:Jn2[(AGb<L#)2?X$r1l7/fe(_6%2_&I\@K%7_BhD"]Z+b]]1^Q=t=UU.8/E+D.W\7Ymd)hPaOaB/EL';oI=Gb/cZ7jo(le_:]TjrqH`-aX#8Bc+LQuP$P2=uD[<OE^-%:@TZ(P2mNJ<6YRV40MX@)4Ff/^sVNd2"YR`:1Y<crLB1jqU3ZC_N\F:9n#`9=`gY5ORaU(1IIa8K#g?]?156VlVQ7?ZG<p*gT@$R%9;3@rV$Q?QJf*23&(YAai_:6-D0<aG/ti<n^52#noH[diDs]RU5@=W.J,+M(6;NQQ#JXRWG5i86fk3-@*8nEZJ,@J7R2JO05e4r5%S##-X?^)=<8B5I>?EG?nMBZ\/*qfpLI5'Ypb27R4ms2cIU2n'6J-Kf'"j/YMoml!i&o["DWbG,V!!#GoBs#c$!TDtEYmoKA1jqr<%h(981F(V:^GVcfE!P-;PmMt$^luM"U@V>OUeub(,MYm"A$ajFd!%\-*Yt5%=\Fk:%;.M)pKQu7N/HCbK<,7Ji-,'[sWe,I,>)N%Z%R1dQu&H%;W.iaa3NkVNpZHAY<^p<8Q!LFq6;>u](DAqW>n\['GIg)A*!CbiI)]DhJ_AZ]2-ErC:X>i9VIrFM](RsI(`CV)[e0ECe%OS<FWRmPpI"V!qu]s^<sUNXVt#l/6-f(1r0)nRPlbk!pC,_Mr;iZtnI@Uqk0U1'_eGD3`\O7hd.o]jKQlGn5DU\*hADtTlPocneU%@rM%8^&!k;ocpsBZ!RAg^&#"'$)q80W*]GdRgDZiI]QlSkcK;EYC8mcK^;`(DQf'@BtaC[0_SCWTH<@nVq95='efkLYQWZ+[G6)$%P#NSm-0Wq,)Ne^h<0@nV.?<Y<.(kD>3p9@!0!N<lInR%94G"3LPS^dJV5N'%GsH85('M.S6V<WLJ#s2UN25'>`t-ahE8Fs?PgQQ%%dB/[?qD1:hDFta6i[+Fc-@=n51dVSFTN7*AG'du$1lgcK0_1_h0uP>_AO!O)-<a0+.CasY?=Gcu1O4g$lEE$p%0Y9H8GYhVgNbMO%!b0p:)mYIV+..8hCR-JIDVt==O<$%Y7+d8>bj*(X-lec.-cfBc#Jq,(l87g9&;mp6#hUmWG^aS-<Nd,(=6OGZWI\*[>HHHI4_t*Z%U]]Q%Q!.Z5#r>)_>)PiB0'S9"!=05uVe,7!/$Bl8kS`gH(ku(1D@:GX\]+dl`GEcf9)qd/2[oB(!eUr+!XMWnCK3-BS@P$ZN=D!(%JVr49mr"i`g`6A=<(4(VnoS&jl[rS!+M*Sl,Upbc;jqYE_H`-fot^43KZ1rh-SKoEi[Y8g$rtL^lVZ1NcFT&]0ab=fU]7=%ha0,9%OC]`ea__Q3Ik9/`*WX8MGW;OB*;8e5TMF2-ZrY3eg<M?Q'8(/_:-&@+Z;G2G^*dlA1^]\0^"Wul+LpqG/I21,T!/A!AJ4J,32j(^%ZIBUf6/b[!ED!_-T&@!h;p^iVAbIQ"<J8*DqGsSsi`al2E>YSC'@PjId`$PfqYV!K*[mYd),3-6J&=J:)WW1!gBski(*@IZ0"n1/%f3,^ge'p;o&H38&EB3)`;*S1_NNlktU=DO$K*Qu^qHo8FjHd2gpb0WWnUj[RT(8485hPCs8$MP-nuahne(=P7F$qqZ?c<a*1\8G\%EE&872$]R.rhm0G+<.<Go_fP+jT'tPjLrF*%$HX$Bb;/7O4]lPWmg]5VWO.]OjZj0VTq+aJ!1T'VJ*qIn+<7iTnM6iUt3E\>0U1E%SrP.7lGU2+3=o/Njtkji#.UY<W.44MorV(ta`c[B@`DX!7!:6Cc@Zm8aL,Z/(bNQ#=?=PU[4B&<AZpK]Y@K3CWa#tF15d"Um6DF[%e,%5fL$M(>W1uW`k]I(]jJUAWbIm8EULoo/D%ld^i./$OZC8q@(l#f\p76\"Frh*q-Yb-/:,Qis8EN.*_sq0&E2)rtA3ORhiDgj.%Gn3/j9Bs,g8F_hPo:Ab-$O?E?lD9<//Ddjr]JUS.HFPH%#+>f-8n'DLD?q?*dd.G5l7+[8%>a8Wr=VlgX`8*boXfN9kkrbSRW)p9%<_WH@=WVpf8G]d=!eoOZ)oM0u5XpKA[YhU$_D>Uei^NQRIdY>pi3Z3j0;GD!kSj_kI8e#.$ITjt7M@)Y)cFW_A&?'-*>8-.`M:)`%:dRTNK&tT'T;M$P92>1q.(pAbmW;'J;lL)#P9ju\XSt,0s2!2bc?nb3JluuoU*B[b\1kYZ$`$"/"&8ga7'l.'KaFd.)[1ulem)CO%67Aa6[]*3$UI`bCVs;=,g/>nigDO-sFj+#bB=4%,CS"%4cErXTAbk6Oa_S.J)Sa1mUAWs*ACD+ea0gYp=ku@3S#mF7`HTi:,<kF:%IFhbIpM8(J3H9rk@#;UA:XNDh$?#bR1(EL]R1A.WAA3q@d72_0*p#6R:&hSFr&l&UIL2(V,l'.6j5/utP@(ftC<XMB^+tfZN7dL(%M9C21q@f\]$X^64n)T/EFkuJ(;SEpQ+Y@uj/`*?=blr(^o%ZCUa>Jl+#/]3j#4bg')]`EejEo!Dj"XkX^[j(V%@3gNMN\PV(&$(I%'!5M<1PJ`-npA&EA)(.8VnY>'dJd)>I)7L=YoSOG_[:-2p3ZBCUs3SMQNh^%n2^1X)cT@R9NR/=&k2Z:4/\?<HgIu]lVL'Z1.k:r%CQ6Y#BFS;+.n<<t!C<V"=;'r\"cZuM(Z9S\@u_e[nu)=]G>4VH3-6/[=g(fb:]7>>BlcB'[o@.ejKJQ"_2:m70KaQ!fUfCmPjj>*%G`%6NZ>@k5s)ddW#u"a2RB5-=)SS:!V"+5F^TsNVQjdktathe?(MVX71cXu=),3@:K)U#lbo/<X^To+G';iIbHCOI2S.*$WHm2_Q%O[6,H[,HE2doLd=Prc@=2\NlIR$=#r7DfB!4Zo1.cIs=%oC6dbHOOJIQ/EIdgY#3#SXpi^cZ&)oO*Q`<khq#P>M-rhHBB8<&Pc4A%lad%P2=AKH2dQ4<iTa`-L"qs&CcZ!2T8W%%M0BR\j;A*aa+ju77OQN,VXTo<6b(EU)1ZN7\-8/78BG,Q+W]'&H5-NCbJ4u$nS**3%Qds25eb\N)o%_&j&AhfE3N)V&h^?m6[qjead=lWKDGjDNrf"h%,r,1tM.5@N-<N"t$]<<(fRj:Zp/Vi$W*IeHm^#VFZ?a(12r4V4%>k]Oo;C%p$l!3$=L&NOkJ5cr?'`+ic%;TRo5JaH>3+#<(GA6A3]a8Q`=?BWVXfX==ZB9P\:Q?1%plTpbE3Zs)#"$s2<RE+2dX2t$%X9&?7g@Z7*YED@a9ds@<f)RJ9_LJ>hFaZ[WBbCR(&M>\.8\e'MZZl*(P7H]+'r8u-FFq,=c)h+1/H1D!Nd38Q!@?'95dakjqIhK`%)&8>9Rf7_A/YGL`Ph][ESe#;S[%j%rhuE_e_[(0hG0Z&fmbTB=9uQS\b9frD(TmqF$3?\%M$AP8,0sd7S)r;aZA:D0(G7SHA$Idp%r?OY,2]iVQmmo8b/1_dY2(V]fBlJ)kJMDGqk7hs$V%n(<JImW?-Er$B6m2T>/G1K,4T@*$RSLaclm:+(!YauN%!46eOHGicZcl07%-N^j+'d*cK/q?LFJAG(Q+uV7<W7b(Z!PsG?K6Yq#0#9@fq@<ghMIXL+9h42&%3-?](0;=gK["D&M1^H&^mDZ<!c0>1's:sM)^5O"%q-'a'd,L\-b2>PZAe\&uC]q*/@-D9u@bXIF9ct)-O\g1cJF3/1)VcYS;&fggn1*fK9&*RN1b<BD]MMQ_K+Pq`9p@Q(XE1p'R:buN%EFB+aIA0#Y:!,MY%pWR7-c/,/FWLW.->nKGF;n<f+@(_G,u1(`a`@d(Zg2@YM+^rAR/G"g=,\7f**lfGTf`m'I[f.?/2k+O$hn&P%651apVhNLY3?Ag;2\[JZ-W*EJE$Ku3\sR.Z2Np?35iD/dGn&5q3i!g&3gA!L>5WFJ0UtM)CfHILB#Pc)VdV1#_842!$Hn-:K&Uic%&=3R+ZsjJKW"g;7ig=dX.ASqhT*.VB9FceQWelglA;%d/fn.X=_b!+G>DSqoA.+bU,2Pu4OpWMq04L*T7W6BQ/ejRe!kcU%06ar2%3$L7Y',@9=EY=e3:"QY[`<qPJ7#eLfKW`*bQon7L-\6n(JYEs'%)@%7%+%c(>dPm,THO)lL6:V>$=RM4'.7I4T$LRU%\8=t8@f1Y%M*Obi_T!e287SFE)$Z5F@k&n^Q9DTA178.:@*:S>S)#h/qZn`\ZB5m(5^`'5!lOnecRECX(Iu@T14a1-&.&J-.blLU-9n5-3geV>%a_N(O(_d[+'3a*m4L@Dcn;,NVE^Cg2NX3f5B:8pEE8a[!ECI3C9?)1k+:!o2a.C)uT+MCX2*ITp)p]q.ZFC/4AMB="&8kX'Ad";l%HkDQ9_jYmN10-qr/b<q;AD@i;d,[&(G^+Ir%Rp%U"tlYtM*O`SCB=g6a$t3e'F0393=q%rJS$]"LQt?+?`]6<M[1I9h1=BK-g3N"%\FUSlXROc#:;[>i/g+AB7ke(ta>;L$]sjO\gm3@&*"WV1UR%EE$%,J$kS4c0>.%`?gX@8_>j,K`.c./$Nf2X1ahKG2^*_c_#P4UF%M?O4"K2BGGji1.2(B7K-BQ1_Z@E`^;:FYLT$'c_A(T;q<WZpsNR3Sb<DLhu2A&KNQ#n6eM"tmQgd'/=B@d4*>K0s9C)7Xle0A=l/%KaSZR,@r$t*gJ?Q>q7]2RmFrDS[Aqe)M]%r2k[g:$.l+'P(80V&0VI3;/C>PJqp+r<"'Jm0Z!g5Kg'02%8Xn$3S9-75Sl40k(D#h%nX)'k%3c+1%:.<cFjf2)$q0>K"2"H#6@R$R5k3'-l!S$oi+ip<K66&g_;bRedDEhCEN2_$@bIu-N;0jn@_!G<a;hTG*tuo?a(f-P%l&QG.0EogTD5*CuCtZ%a%s:]VMaTm6/OIRlf<E]"-?(BWjhqH.-r@f.;?O;T4;%$H:nLUo5*]!W:_kHSKQ7r9Ye_6#X*%9SKoQtM%+Z?>:f2WMUY"10Y>SSRl(nQm\K^0[G4:n2!`WG?m#Qg1>PUNNE/p&bpj-/`1:Edp*("f`aPNOnB,jn2[-9i]k_80@p,/A./`SeV8%L5A#2JP.8Ia`f3DU(A];-7I!Z\>\0a9m^!IW'`7a$&0tZS.1BRK.JQ/*ST^^\3U6FJU8e>9J)Dqd,!^>Yi5c-_hnUIQdHp&n%qX@%(5b1>9Yf4IHnp+($$#/A&2"5NaUh9SLm(*TAmrU_XH?559%KpmQ4@LN<`m6L/dgqWeOV9"l!S*m!QCtl/7'&Bdj.2W7l!ORbhH%9%Kl\q=![A<tbT)IJKZCcdUVY'/&OnJVnd<5*/oC-:L34+;X%jo"dnnsMf#VHT2^E/?(I2oh>"q1()*t_uK\"Pa3'^6p_15(U7BZlQ%CKO+3-c7`3YY\SZ_5-$=9LMLdfnlYlC!FKUrP1`dVB&be0#Rs%Ha8T0InCFY%f%)"NM.JB+A<Un#_S*!@k7.[>+3*k##dJ]Z:I4e%PX4'.GWI64,8gY+&!PVL&HR\#P%kP8]U,%Q8>UsdKEW(Q]IkP'ELRFbRKO2[]Rtc38^th8+)Db^X!r]'gI!\/3"P;lE!%*(4"Poq%0KBtcciKV?QlJd9Cg_%G.ANjTE+*c@&]766M`+I+3XMd\9!Upg@@;dJ`ShHh))^a/ikfGmkmbRq0V?Fo+C&GR1<bS%(I+,DQ@Zj'%PWC<hM3FFI9F&SVLWMlWJ7D45^iV'$ha)oj*!68B:BK(N#h5g41\/pALU?S"XgjXr3->^;=1ndajhpt+h1^oG5YTs`Ka@8jfnG&%%/9C@nVH8IYKSG*H%*'Whq^A[6EL)RibTjX!k?T6)kS],*pQU74%L00RS7-"hFJfePH64WZ^c>M#Zh)7OR%8uFU2,!"N9/Q;,T<XL%NlOX,\jR[@%u1U[$';T)S,m:?LG1`UP&$G>=a1ntCg;2q@\kn@'#E]&6/W>DO*Y,rGA.N8.L>B@<Z,/UTH++&$W*p^5En-e_i!2+%/;"LiftmoGjYMu3Bi>e?!f'mZ<)Y\CTsm&a6jH:9U\5O=RCIp,m,B?ebJ5d4#gl9nfSlE[d"O+<3!N-q6p;Nd8*co!=T[^7)'BJu%\4-H"N-hd?W/Za0V@Z$e`d*Kl!JaXUMH:E`@e!9LZ?Tpo!f7!FDPL]]DPCUh-"GGnJcQ7WEEId&#:@&')O@I'.%"NhJH\a0@XXFk%q`sYF><X_\3f2H9H<2MR^>T,JX^NfCQALN]n-!YtE^F(VH!!1<+U"Lc<@YJ(,G3?-d0q:>Q]29uB.ST9(Do;KGR+i^BFjWI$XH7,%6n)WTbeW3]PDK^@.N*tf>Lj?O9I:t;I%\U1aunTV#*fPK6Rh""B3JaF7iN'ZS2>r4(TABTghK`$o6_#V,Z_<g!setSJ4qel6Dm-1%I4O>4XQ53Q7OY,T&K,PkdrJQ1#f/=/O3K%6%3qi'9\_m%,IIWPiOqS!Ku%7QQt/&*AJi(AKghk/<#-53L`e&4,t[N%lj:Q[+GGD=%p@30i.g"4p()MB%Y<`D0cA/12.<G]?e%lSXHnQ[H>f0%-WPMks)L;fNfIl#>A1ALUL-:LPOth2t9X9_rD:sVeZ"+T3f-I[.$*[tZ%k47/`ehGPYB66d4_SE_!L/WlcOY@<?&Dk/G5,k](I!-tO=^dCtkRqo3632+a!gh<<LPFKA$8dt0OWZ"=KYiBPo&*.5A:b[?V51]D%A-aS[``eJbimF`==@Ic0?Gef<X5_R75S.r;$AV=(W0+`IBiq7S[td9/=%7d?%6>'W1Zoe),,N+q$S@3tL;cqu@&'sb!8?j[=`+Hi%1]bI$f[0Si0L,t%CnMCrl3RWiksQ-e6C1MHU,UF!R@Qg-68n&;:n38C4C.V,-BNt+W<KtE#h6fB#d;gX5nkkH*,;,Jlqi=hpK8jT%\cY?6`S0X.Pi/N)/*;XOURn6;MFA<`O;"iDRat$dL32:KDhJ;3?UGAr:!-Gh<s4,sO$X-i,,'`g8.>s"a&/So,LMZ)deFMAY@7N`%_3pQ_i]Q+eWWP^m\?eOOF;`qkC7r)\lc&.j,mp3M;5(XZ'.E].6c^0"1+dOo.(+e43"mXbZiOlcXbVf-9%8RS$sjn*/_4NR''3#3%_a218UeAc:=<ru0&@=pt#-Z@14%]`9_<[g+4A%+N8IWCPeb3u/J'b`"^>K*&dP/ju_F.eR:_np\-9mkh[S8#L1:JAtVI<e$#>?:l%Wa=qS0mKkRiLYd$#!*Wn7n:b@R5RGCGZ$62i0c&#667oaFRC_o1n6U.CLc9T!ZMUi_CJ:K?3i=Yd&V6H&KGHS,nJGB"3'@MT_Kp6%Bs5o<;+?1*Og<Sl7!PTN]C^hhdZc/Z26=fL3Y-HkaUJFEg2Vf$'&[<JYgl-/7:uZ2X);H^%="C:O+qr_`dNZ6"q_'W&)ER3+.e:a%ZT*a@'2iJ%6?sRob,GK*!t!a`atS&I(:Bp\S18.6nnc8`Q3jsQmc?0srIKV*MAn9YV"u<]aRj9@d<&N(1Rb'E+HOI]2Zhu:nmXie%Xc3#EE(YYJGlAr(1]j.QV7iB-hPG('_;Z%>#J<dDUO)FD<\c'?CRBijR"0lD)+WYoXM[A%aW+F?,]aNi>dB@sP%7UV9g1k\HN)DW%S2q==6?sc?7E$S.^r8sJc97DYU.<Am/9IJC_W%;P"cALS>-eU98/=5qqf%/]TFFf?,c7ej7VDq1I70[K6ieoIhNfd,SMEh'D<ph0%YPjO=mVOK#H(SSnGC?o,lWY=sA@Hs>d_7OrFXaAudCnr)C&'3k[75MtR8R4dp$+GAg6-AqS^l$,/6h!.df-RCacu6Mhg/qipm4%D%PeW\4jgK;4>+9Q'Z)>7ieb\\/1j87Hlb/Wlb4rBZ3nl-4gA:@&ceGd$8LJS,GC/4f;et9)SEt[+\,WT/104)t-(WWMr3fJ6>MCb\%2`IS<;Q"Z_Y4k(cVN`ZTVc@d(T%s@t;Ah.\H(3J7]DmksT=UhaHVQ"S8q,N]Dqc^hG,5&e;T\C`/8M?c?E&@!]k,Ob?b<jPg:)7$%hERj4gm>(TZ$Oamd`Q`Vs#C$foY@]J9%YMaeiTpT\'?d1g8+fLT3\@*feZ7e@qU=6He\D0m2p%bJ'9.q;T\W=YM:3Qm=:PQ!uUoA%?@]s`Yg<d9:t7$rIJeeuhWA@\?-727:fTI)][\D.\F"KAp/Be3gF^B$[G@+4S#SO*>,>E)A<f&H0hCK?o(t?=^>!4agqM-:>@$p"%RbV=R6)scrmB7J4m^IbmEhcNeS!:?]c(BC`k'o;^Qhm$5eD9C^b,t@b2u+pP<A`7u<O4"5eSd>SmH1"'>GpP#.2o4d$=$;t^7)%D%b]5#=\QXF9b$MWdY?"j`S^N,F:-G,Hmo/"bCO&hts!P;0rgRIq^6I)J^7,%LpQN>iFM%LREg)]e[^hh?<)*5`Js1Y^!l#IgFHs.9%9(g:XZn(#$Vb0O,V$/s22Y>.59<%jD]!gBF<V7,V'jQ0124LWB=/kmm8FNGH:2R\=E`5PpC87giX^0>'b+U9gei>%dJR>gSb:5H9%[!%WgA>a9[Z_TEOc'q<_h(![<p,sf_8nYYb^%t'fDYpI<mq6>D45<%!]7Jq+gN;T&DbH2ZD<gelWm6h9gmDqn"2C.+Q$kSFoj>K&%m:X-4A!#Eu)`RP/@8j]orGVSKPtJ&?'t^K\Xm1XJ_;8(.n&G!`>>=q&I2IR:e-4U1r'G?+Y#KW%/c>'T2>)"eX=E$#hX<V?4tf\\%h,5`?c2.0O@6!@<="2\n8Pk-`qNY!Zk*PqKK"jlq];>LjgU&iGJ_t$AS))@h.W#"=1:;fZ]pkp'DBD)]W`@eRm8SL\;pnlVGrK?(%g3TXWG#t?ll<Jn@VGfN8A_>7MFa^UoV7+pSj_!gaD&<,aGBt]+7"D*H5ku)h5QcB^OT:%D!R_FiP_\h9^8b4ggZPTdAj7S#:8R=N%WTM<#<UiHY&2nJ./cZ]D#Qkn4==,-jU$BN<o_:0B+K>s-0Q`/]!6-hr"%38GjomG^Tj\lF&XR^X!LCG*ciek-*(3,"!+R+I!)!Pr%YZ*'%"*b#h^mojh]0ZOG-.PLVdkK<Bkb:!QB)o+Ge)X15OU;Ob^sFcY%<E!%n4gg1\2@L#mfLm>//JcEYY01,NP^@j_/PjoW*Q&g%_W5);/d3JX<o@r@+9Volrj4GC1Z33lJuWp_QM/EW!lbIX3eS_5@?*1L@$!@&>fh1C&.^unG[(6oL4n'[=Q.@n5_Fsr*#u^E0H:ZI%-OZaoEl`<BF]^a2-4`MC!hrMbdASlPhU%c&GbE!CqNImD53bg,Idh*?3/-a.`>T[9$B-uVE-).pm_q&/$j$LP;pFqGiRg>]66_Q2%@R)#l#7T"3XI'udA=4e%'pF9L5Y,iJ>VS5U<j57]<_SO-j^pgt6\j-I\KTo3rIfl7p]OAdJ/8l_K:s?UO@ok@(Pi=f&<h_IJS9k]%_,r0bDa>Ki=kod;<oD*KYR;t)GYhV^jBsmV=^9st+RoFtQq/BrBpsd1XKOJ]8B*/&FFf7\65M-pA::RVj9l4on@_qk/*tXX>RfFg%ne_Bncf;"7_@G,:8+QF[hasRL!O-!\KI%1/`4XRRj.m;0N@+SM-ttLVhrO"om=g:?YS-)<USX=X+rm[5OP@VOqJE7_9PrZ'apk_%%DKG[+1=^h.#OBk);orjRom<7@V,tsG5ArX<g6_M;bI2>ZV)pDmJ6D@6[eu<Cc=Yf)S#sG4bLYBo>;fQd;Hgg/?L.423(oFFXe!qC%jndKXHgfQgq`<i^[d!_bV6B7Bbj;WLV3Z$qaaBY/^8ueN]`--^b#rG,=lML2SG$:Bp:>+`bfjFnjneW+46c,3kPjel/o.j@9:;VL%k3@?)oX@kJn#c:Y.=JX'qTRafdVJ)h.IDOFm;4nVqe_]!Dne+.S3AHir2GtTdXS0;p+0'4YIo("WYAjU/Y1L6M.u@(YFV%05R%W.%0V_^1*&)<[=mN2tID1X[+=HiSmQYJcqp4iianGSE1NJ#1f1PkHc=nr.OYIQ0PBNLFjc,GK/%NqD.JL3VHIn5+]=)hLIk'R#CB(`c%3j#M_<Z1jB.H`pddCm5c.p(udUV(esPdgV"NKr<p.Vl/9j/qc->';@*h0NpP,C@,k1K'jp,Ag$,G16>9,>1W..n=C23a\eidV&Qg%[aNkg:>>I1Zu^PQe[E-WeXoGO0;\(/>+TT/bANZqB?+f&jj/89m.VoHAY5.MNI5Z8Q;W"#,OHp3SPA"i)Z@BlHG=oo2HG<"Xg`_F%dplHO/(:Boe_4fpg?Wk'DNC%U9>>])lQ'j8\*rn5p:iE_o46NS[Sr2nIr\bB>M2L#:Z)$?h`3q#S<r?d^Wk0Sp9'Uk3it3\lh"(j%I81]as3p95?KoLFS[*I[C2\OR/UQ(Df"!R1oJio=^N7D/?-;opF>?o:A\HErDuD_d7eZh,S#<(N1:g99P4k]\<Z5[pBe*D6^MRPj%oCc*#qnH0u:S$&cj7?47<Qb>%WQ3,!ffmTN[H"[_DV8s8fBrP:g+7$Qn^a;VIGJ4TCV8LWC$b<&[_B0Ie(30[IK$UZ8q)+3?a%n(%NQcn,hNsK+N6^m>C\6qXg@*bQep=FdGJ7p0TBYH^hlYZ-g\"0"UZHC&ZZ<EO?L.8/\%?cSCS`SWp$PIaHfTZgq;$Ll0Dk-Mmsk#P%f=AM>r;XK,C\+YJk<H:`Q?0e,.ODJCkO`up?+mA"f/C<9D-oqG?a#WpF?*^b)sMG`=[$'SfBY6+Z1?N4f9raF>3"_2D^@KAIP$O3%^I7C0^E;j>P?)C)hWl3J\*WD+oNiE-p2eR&+"(q&QeNssol%5;P\"4ucgL=9=%Sn7,I>]VD6oIES`?5gkH**9g8>tSr+kVJ=51+-%f_r0TgYC5+r-g.HV<tU4]ogU,PYSZn:0AgbSl3#1r(X^kYO6jX9=FKUN%USOgLl$%/8(5,g28F?Ue^$A26s\UIJ6t!`jSV1AS5^k%p"7emB)g'Ib4rI>jCdVs+6W$pZ:`=1X8A16CR+L?FPE'4F7c*q>"Z>T7W+Pop<TX<dc`TI%]H1H;b7V@3"3\YVOXsm@-0N1'*&"4%E!hWD!Q)p*S#lc,J,qG[+>>Dn(`!Mo,W)/BU<Nc`LdDr7_&rj\5R]t5MFuN9!(^%+]9Iat[)5YG"=%m*/7M9o@.Zc59?q'JLU)Ol%LFjg>Sn1e:qugXRW/X6>o!k)3pXJ)7,*%47s"Bh02!`R@ERGY;KbfDH'Mb(Ui@2*P'e>hUo6$TC>IpuCkt<,S<*^*KWG?X]qQYjl%Lf+'IMb#d3Vq5J_@jr82hB=PI7iJpbX<9ORE*[ZA5UEM<fMF=N$5IU\kguBC^[VtXDj4Z^aRf0_m<j*fN]^?b3]G<!e-##N1c6(>%`7>9;fQkHm)'/MJ,;J/=$_5^,n''Zo,CL1gLt)6[0/O_[FPcnaH)@KNIa5(3C[K"?StDF8V#!M!E<1[_q/23@#jQe#'1-c%^2Q(:%GiLs>"H<Jg'+W,2P#DdZc4bSVGtdBQ@,gb/)0!JlIf(`[[1pOZU,p&S(JMk/m=S#G:Jls"_C$\GbRPHB#+_6./amZ4D`3ICG-oY2%aW!&a1#]a<,8C-9le.'6Q;-'?8-H$YM<o0>aghD"//;h6M^<GB!<<ZI1dp!^]Wuar#;0lm=7F/Zo@Eit95Ab&7AcX5I5--YR*=Bj%SB1P@+i;j:lN9JA""6Y0N(Kk-OS*HVpu#nWd^cgDkW=:'q=?K=Qg8o24dLrk%Z8Q4HoHHrj[2*,[uoU4j?m)N3@4?oZ0=BM?9F5O%_XVI&!=1pK3APca:##n#3nJsB#0p;#\<;iLr4.'4iL*55?JVL(EIS#Uf`,h+_k/+GmLnF?d`-:'N1-ceW!Z=dMreF\O*B\,-CC35%$Mi0"nP88QI08U/LeW53pR_Asa)G3]qqA1DlJBK?Yh#VHIrFY"VV-#6[<(ESTCDOCYUc,;5ZAi:a)a\Z&GEWFF0i'N%o9>YP*_,f%*(#S4k%*VMg?<EA8E%m#_]O%2nWDkN\mr'\,@BLimoNGm64,VYG^,@cDVSRJmf6H`@l!#"WJeQ+oA[qZOep5=eURL:/I3DWkc,f<%ObFoV]UsPU/l@MO>4qi5mGt7b5cKn(^NfIZ]i:80RnnpK'GOGkVsWZ"1Z@"!2\nh*EeMs8</EWR]QMhMMkEP&D>UZk;"U=l/m(CU%Fn[VPc!b)<$b`UK_A#N*fSP[RAAk3>cRLF>PkVQ-6SKe%N(;+;]*h"6M%f@I5,Tr3H-p;C!H*se1HXJ_fR%g$M]cpS!^"BTj@NaY%2%o<+8LT:s`-\Z]F&]`U?kE@!8pQF6+7$p=$n_gM:.B(?&c9*HgD(*aLU'iLo5cVER;&FSU@:.i=mujBr]b`!qjjD`C:9%lp![bR%Wpib[.0Y4Pca2is172PahBbe"X\&`-_<GjHS^;i=[@l9%hT7^Vl_#o5T6!VpCG'Qm4DB;C<`+3i(D7UDG8?!Ml[`Mn47_PBJaTP0%lBU)aL!kZrN@kma*Jr_b<l4]'SAGMAI!5?M-;.5Y](hhs*iB$.o?sOc.(oj*d@U\;gbJ5nb32srY_jHLcW6n1+O3oDD,odBT:ZdY%Hnheaf[j\s@<Q]cE6V0e\bZfZOE*5&"Ac]ROWD.Pi5`"5iq]b8Il7SorGf!UbZh#$)HMcnMjrg-M-VLk?CeU(%%m-`pSZh!`gnB[%))"O:aKL4nol0$a41Wj6L!(Z3hU"43m3kH?Y^D^s3%R$9*"EMU*pd4kjirCCVt)thafs,$s+.u-e4$4XR/1JJCiY)8C`G88IR\(]%f'$eXf+j*ClNm.@1oYW"R<6,C;(@_FB+W?9e;3=8[bnU-IKFAo)D=/Ke0M[?[`?'iQNQ-&n=P-6I$O%1PnPpMg!r)&SUTRiZqG`H%bbrWUBJ>G*F1t$,EriC8Rsj^"S&KS+3DX.P:%9,pOH9,>2Wr[pk)Zt;U[otNil+PK@%1i$8ctNM+Q5&3X$$&6"Og/U^AK7)oKJgB%3Wk7d3]k2m<_thi]QZG.opIIsH#GU+*c8#9jE&.GJ=%p*2$,b-k=CA7f=_:Sb80L7$@)E.=aTLg=7hjBN`WJF3fRbRNH&<+K`sj/%+n%!"\7FhV/$@fta5sFY+(%^prS:\hQm[[QP\Ru.Jth5B6T0]=nf>ca\4l"J%aN^Co$0k]n)XN\1K\9gU-fOIn)I59)T83EmLb7.%o[$YPlJr'n'A_u[gkF[_]P#L3KPDX@AE?4+i";T.#PoOSir2W:3!-%BT)Pb,FVg$'otg8*qA=;%I79K7:nf?$S!SRFU4K8->+X41%\[DfA8HLq1]<'l0>@HDEmt'i4dr-"5)6(P!lq*I':@I4GC%m^53ZEm$/VrHhj@\2Y<]+0Q"V-/@oc(U5[fWp.XokR^h2"rY!Ug-#%5L1J>D!*tCSRj4a$5.NT)i&X/)lOrZab/4n'`Y)`YDZ(d!,>/p\hYN[r946^^(SL04'Qf)<MTm#$LVtrqpJIiFc*]c)p8uC%=6Fn%r#&IohW<Bo8q0GX'1;H0e(c`pe0n;Jb9(!k@$^KI5iF-[r60B.i9Y:<E>r!)EJ`ar!7c:*9QlKkdSV19WUBSMABV*"@VtT*SDS=Y%gd>qX=+GdpH<@o5pH2B[S12uPjb,F#-JiO7Hj:R=U)/WP3n#IlFB4;(6f/cVlt<J\UQ_**^=34[4NY\_,URDUn#u>\$hU!2d"4kG%V8OfYf,?2%]h:9u:SD0eSD$E:E*m_\i-CAo6aLY,h:#<FV$bk!8e`_uo"<.e'O;=)-_IG#fD^9oZkj;']9#&,3(k\$f9HjhBf"p4%lXSlcOSe],1:H@iW'Q`\)Nmj>K?oX)#MXHd1>_`k`-:0e>(1M6+>;UC'Ft)qj3/B7jXo<KY$,(PLRS/E`(-g7eaSF&[mQM$Fk1t&%U4ag6GI"BH/AS,l%&l.0;R:0=\OV(i^DMHp8LTp#@jN/m_(k-O=V[;1U4_^"o*R*].0/@[L>Oku*.3OT17jk\E/am!ndia4BG0<(%p[qdjThtI)U.8KKVA+Ju!VV=dN;C6P?/<t(Ll-i,Tl#E)Vh,=eH/h.cE.N#c7o%b3W;?lhiKL,*'GD&JU9<26[MOIhZb-<6LFS\Q%!ic8@q+R1kPEM%SHI\?G2G-o/b;^C3O6&[9BgM@W16_=hF;[`:9QZ7?O_sshnsGm^H^V!1(LIg<#5roFZ8rd"Cfr'Rrk5Cr62t7l%ae!s9@*<$hKMIG*=_;2?QW[UoA<ee%Z_^80?$f.RS,SD$W6Q*cn4pS3%:jneWnPkC:RPSXM[h>>Wr(R&QBVgX'eo`6\qPU.;kGVh%KOT%Eq2UV!$/n:GQ`;9D9t>gM"$QVTMr*hspsE58LS3BoFE"<YAmHVAcJ&&d97V2IWdU(d)PM&+VF-]imLXg%'%.LnF5g.7g2&,K%6_B3#N%0qNk5ccg.Kt.65JDq=1Jo8r28Y/7RgN[W#ZK^g<"Q^$b2J4,bR&>gMM[%K,f43o("HeDm#!7DA)_[OJlGE6B(\E=+o!%r%4[ZH@7*[eJ'6U\3`ej;EC$V-!91jcnJC=<=827BBle!n4r[Xj2+-VHk1ZuG\)CNsGjC69+Hi0^jY:1BB8'r1/_0YAb4d6h)Ep-D/%99Y#Y^lgQ_MH2f@q-b(?SXSi47_WmO(e&50;FdZj<b@<`\Q0D=j5f1l*\HFrMP_%\h=fe5igki1./>Tb.H)PI`E<'pWYIrY?X+r%%;`$S.\Z04SE2sO=@oPX\>nk9fU1f52I%Bj.%#gnqA;^(I%5oeq<m*8$T08)*9E$ADdd`?l$"$OHnIYEJB-mAEg`e+^;-4?,jB.Jc%nV=rdcD%Np`j!G6;![V.>!^.$98LECL.'GUD="]s!@:GRFDV1_<ZEf\Q!-MJ>GY.$4%4e<.%60nBU`G;<HM(p46fh,"(LA#'Q*"^%)El<^*K6`39[UeXnJai[;`"Uo7@ReE`fQkL_^HH#'TF6lkm!nrJQ"C6!ko,<BJP3<"s6`l@>^?X+Ld?uiFDpq!g+fT<9;jO1N=QB%3&Z=qate(&j,NUU"3Sg-m0\T19!UQ5Q)R;Hp,09P3jUhc@8909!dXG=A>c!8E?1MNH4]Yh%WkQ[51pHMC1\Ei*&D\jEV@*[/_.ne%&:puCe$i92<"gYEL!]_K5j[)(/`HXsk,'d+`D,3F###KW-/>Sl:T)4N&2DV((ESO&NF=VPjH<s!)'#oN/::XYi8lJs?<#.A=p^Ek%Whmm*^aIe57\j<UKIDg[?[Z@=4Kd*p,l7l>PSGAWVr,_@;[u<oZ&eS2Vj*@^GfWmLHiLTlO^fC(3aL#-jQ'\G>hc3B[p.quPi5a*%\>EtI,KI.K@`[P7/IFgEfol_AQ<LAtaUp!-cK1G>k0F1K+u!-J6d]6+ERBF1bmA?,SF\22pZ7L]'dIn\OZ8]G`%C2o]\+dqP]N<'%\2\OrKCaW0c:mCNhIQgqIm1%r!M'OKF:ApBZbUr1;XE7-q^!0ok$u,b!M^r]QP/W(jQ5CA85IA/Gsi&N8[OPhSGXCLNnIK=M]1K&%I6p([LrB7NAi;;o3JL9h$igLbL"0H`%pG#YF^_9"LMN(+*E$-Nq%mP-]3-`O7%@oZ^'#brGfo/EWpWA'R^kC1[jTs<RGM?:p:7l,%RWSef6>LO06VQ>2EG5`lNBP^<ePtgWNL.Z7m;hWmh<j&Nh<c7""49jS%$2&K1&jfKR)Cd#`e$rp!]uFkPkZZWbY[.MbXp$),/d0/%A`4okU;p`^G2@Do5TIS26X3I@:)NGY$Y/l@,t,V;RP'Qt7u6(!m=hfK_Kau4_O)54EWMjGZ7n0@IoC*9K[iXQ=%T([MK(CEoFZ+l%R"'mPZ$K:LKcG-[l?U]8+!TOWM*Mi"a2QBqL3,JSKZcLNoTE@KZS'nrFH^POR=[A,2\_UgBn`_t^Q,CR+Y55U3T_oMo8h8@h4im5%qX&`&g]t.<Lj.3%$I^:(j$]uX6X,krm;^$.lf1E;"DAO)1-g];Q,L1$V)+RrLJ6oe*S0fs,;+<m(NQ,$b12MPX1o/,ZB*NZ`]]]J%6Yq0j+N6;O*f!uub73PhmE6/5<G)?&cY'Cj*1&Tra.DJbD54LW`VkhIC_X%gA),,>"_ub#SDKKk*G9\Fn8.!32_c;bhZuCVs&6`-%T6TS8:X^_SqfpFQp5hZJS2LjZ]&]U'Ch.!I,@GJ_F%GCRPTk(7)mP(m!V?o?MBHdsBBdik)"/MqH9&(s9(2L,JG=]=rDD:"D7Smj%r%OF@+niO*qX>c(:?,E_DhZ6FY=r)Zj4;>Z]7H!%e<tj1T@--RmaKRW+-'CC%fJ@g4#8X$Cl9'r`#!jYPfnU09?g$<+RZa.O?X>[%QN\.*!R,OmS@2>"4&MBPTg5jXhBPKr5/5u;1F#PR%`OL$UHZ@cC3_oS+"h0+pIHED8AC$F`l^]mYbdoUkNW2SR/kgO2gW/QScBth%<;#j(C?CZ;Y8_2?[a383Tf6usC.:-2*O2r);%-\SW@hC3[+0<94u&EPL<NUGA<KUV51`,$HIRl,Q'-%>M&lFSbF62NqcG2q7MNj[%Y'27^mk>Ee/E:L35T,aFcB)K$*1@Cug@GEUaY<^^FK#j]#A+UgJ%&EhQVo),dWdu0Ot)6tFdJ8G`ia8J?&iH.0Q=P%Q<espQr(R]%SXT`=LdX`$I!qi]De[#ijPcFs,OVD(5+eA)/%%kr.?ZQCI\kf<;S);kI,toV+<ti(da-k2,YCY5c,>3=/GVPuO9t'6<8r2hLl74h%cHdS&V2)_AP`368!Oc!e&Cf4:Go,=G@X&6l5Xi;Tagu!nP;f&CHoW:\DAgubeMceK0*<@+46Nt$qsIFAGN<?oEXbUZGRV<nZqX%H%CM]RqF]DUK"1\:H?;F;64L-'hZ@+/N0V.S/OYk=UMcG\cc([DkWO(V$g5S);n0YR?+EO]tB:3n/s50$$fl[-/6+!._'8s1Y!4+<M%AQ1*=e1/6W8/qFrfIA]Y*Vnd:>WY$-=+t'rB-hDo$P,"sa\FKGon]8>3o%Mr(Z7\=.SQ?JlHPeE'$rM>7At3I4bB>B`jnUMBnYVh%/+upKY:qnLdo^b]SFpb&lSpscF^J5.j_'jX"IJs(GQ<S'4KTBVa+&>!KZY=FOm]6PM4Y:=%[7jhJT(uE_tF,Be7hIfnc$F`krc5^%!]ZHSX[U=dYmM4&mRh3U]*#*Kn:4Qn4=a*:,Sh+2#4HJOe)!jO#1?.aBBnZ5\\!SD%hin3_n7!Y8i88nE`YR"f(hAG!n("l"dL6j%*'^!m663Vt\sGd_G^$D6`Q.uD\"TqS#mVa<rpC4kZ2:8pr!;;N]`ta14flu.\p^jop_O/.[<UQipJ24&Gh:#.Y@2;^jn3WGIfT5L%qFWf;<0qj5HUP\IcQfDL9POk%Q1d643\*e.Q5%>c,s?MeV^Wlkb+o+$]qQ2'FEB0AUY=`BJ;Cr]#_1dlAqhU8DKN(8?GlWo#%(*p%dS3r_3-GLt*?(lS\pl17"WgO="7`7aAl"-V;kN)@E"2j7`Cb'Bjdpdm++NP\BNOrCjU\70J"+85fU1H+NAQ@j?PuA090gM#=>7YG%H-WaM3W$b/0"[=rSWdQ-[BM?<nYeU_o;;Df3&$muO5gpK8*(6?mNrGlFCJ.m%Am1%L@1o@F/!Eg9QIarA@i&240b'^*Lt?Ed^j4;%0k0@5^U3qJe_T/u;dcF__sQqH0A]GuVl/GhO.D@s"C?gC'%7qen?aANY!oI1T[Rruj+D;Y/u0(9[1Y?9e^hHuG&g'JmS44bjuXKO%6-]+uEdr9M.QdH3:!R,hEX1s6$%>C:1Uq`W9h$q[@:)(s]7>7qahU(Wfpj"@!fV.._&<Eod"o;\Z8j+Q2r8F?.>26SI-74b;%'g)%X(GICmmt=/0kJ-?`GX'<Me@!JV?_Bd8nRK'O'X/OLLD*j`T,db7@nGM1^\8mK00RogYd?,K@+n`b^cT&\NlMk>kN^;-jX%27)8]&%7B^NZ&pS.ah_dXf,'a9YH.2Z6kF2#7\GAu"a:3cOl\&JfSa[XGnA#)Qg,('bgNSUug@B/jDR">RK(N?:VadWbQ9h+]-Q_U+>ONQ5%\d7Cmlc]AeWZ.l%cu#om^_9A.4<9:<Wqh[n$C(&Z,%T<o_06Tp@"c?-A@s[(aGc2m`NR.69BM2.^0,[b-S:JhFY3HqU(_pop,tOL%idoHk!0#0se5*T)FNO#5,"iorQ%@c(=4PVm_g"lfOoT]+V0:'mM]pagaQ3mP%+b#=BPJf56IWc'7Nt"+GCoNtbF!_,+^5Egs3@rT%,%0l)IkHpLCZf8*L40:cCF/>bebLTOC?-_)=/;COZ@##N$VQQE?dl`'mnet"I;4gQ_Vlh(78N(,#=S_XgnClIQZ>XW2h[l$(X9C"%dR=;RZgAd?6QocM:oWLuNale(bLar=Y`Em#M^Sj^Z>^7u73nY*rT-!;(gb/[Ni=$6\%s<ECX^WV;"HcL.qI$`3$,TpZ*2Zm:P#$"%Ha:PP@G7_?/G5B*>cM`P6&01LNTn4B$p2BBVR:P?%m*Mu/K(AQKi\NB"iNn`]`NXWc6-iOUB*p(]_h/iM.AX+;pX)aQKA;$p,rY]%R9H+\+O'_C0Ub7\*3Dq<M6B"qj67ku7(C7WNE]3[gU_U3=h`Ad+S1'"Ko7nUR"[@aC,(7?)T#-!Y9=(b0Ig4'!jIQoiNqTbQbL&K%if7uOL#_c8aFO>P>@he]+3UNcWc0ud!b6I/D@H&%b5iJFDO^+I7fp=5>QCeW,1rC_6A`E!*CpP,iA+?i=&W>Nr8Q'^2i@gSC#LY%%L]#`]]rBtF+gZ%NUm7H_.94bU%p'3';BB?2iOqOQO(M"2j@$UBet,BnpX-7M7-HDYj^FRL#MJYK29q%gc8-/5XrPhoE!as4(8G^u%]JZY`4i7kOE#A%$b^5b-)?!q9Qg1grdb^''Cd:X--_Fm1IHIkaN1p9@<uOm>#Or#GJ!Xa)TiZ'bRI/7OkcHqTP7$AQMR:1tS0E.E%<H\Q%U2F!0Oea*e)8t[Z78a\4e^No<pWKK[8k".@ci=ogJ00,kH9Sk%3;gFj\&^4Ln_1Z%`6TH60PC+Y<qiWhCMV_Y;qoU%.$oHI%@jH4g]#a)E@'DPA&rJ>6=V`lZ+X"TY\YQ864a"%G.-^5$#$#ar_(t0q4J#(gD=UBT?Rs'i*QT2oosRmmH,Xi'C\!@UB*9mpHTue8%)D\,U5@O00j_IZ^OfJ;8rN3@]Pkl2.(G:e=L6[t&-egnS]mnLE*B(04Zl3VWn_oXRCqpNR1sfLWE+hu@rC"G&7cc97LBsQ4&X?Xo%';_VJh(Fp`I2bbOMk5S0JLTeE78Q8hOY,+G,r0lg$p04V9fj>Vo2ag7k(kn?iD_F>l\7IKT/"R+Z^_VucB3+b[[E_Ji$reeFGbI[%Tsb\i11><s,$=798hob!"hXh^%[$?WHl2gT'8Li^&@P:&GuTL>'J>d+9$YYn.0)2l\QgqEDj:''$3sO`W(b$=^1LB">/Vc3CdC3E%lOg=eW7741S9ZkX&@bCG2DYje;cp`NY*`AR\&_5D<ZPM7H.m6^M!rP%8Zg=pN3^/30t&dRniel0KNWhqBLnX:4m/;#=68GSGCG_q%L`=+528QsVDBr#bM3Qn*<>b'/Nlf$#72c/7n:d*'SN1:e:GKAEWbZ,c%ORAKNk7!CAB7sJ\k(Qin'bkFfG68O;IDXOrmEen%9I!E%,V<mC;$t4QE]#<%LT10YUePeciaD~>%AI9_PrivateDataEnd