%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.2)
%%For: (kyle Hamilton)
%%CreationDate: 6/4/22
%%BoundingBox: 0 0 884 368
%%HiResBoundingBox: 0 0 883.2291 367.9473
%%CropBox: 0 0 883.2291 367.9473
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.2.1 x197 R agm 5.5 ct 6.4%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 8648 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD12FF7DFD04522752527D27525252275252527DFD18FFA8FD0652%7DFD1EFF7D277D52A8527D27FD2AFFA8FFA8A8A8FFFFA8A8FFA8FFA8FFA8%FD1BFFA8FFA8FFA8A8FD20FFA8FFFFFFA8FDD7FFA8FD25FFA8FDF9FFA8A8%A8A9A8A87DFD75FFCBA2A27777717777774C277DFD30FFA8FD27FFA8FD18%FFCB7D774C77777D527D777D7752F8A8FD6FFFA8A271A27EA87D7E7D7E7D%7E537E5227A8FD58FFA8FD14FFCB777777A8847D777D53592F5359592F53%26A8FD31FFA8FD3AFFA24DA2CBFF7D7E5359FD0453285328532827A8FFA8%A8FFFFA8FFA8FD50FFA8FD11FFA27771CBAEA853532F532F532852285352%524C52F8A8FF7D2752525227527DFD60FF7777A2FFFFA8775A53534D5352%775253527753532827A8FD07FFA8FD28FFA85252A277A277A277A27EA8A8%CBA8FD27FFA8A24C77A8FFA87D53592F5328535253537D5353537D5352F8%A8FD30FFA80452FD0477717771777778717177A2A2A8A8FD13FFA8FFA8FD%0BFF777777CBFFFFA87D535328535253527EA8A97D7D7777719C52277DFD%30FF7D274C77717771714CFD0477A27DA277714C714C9C7DA8A8FD0EFF7D%5252A8FD05FFA8CB7D774C77A2FFFFFF7D7753532852525353AFA97E5277%7777537D5352F8A8FD30FFA8277777A2779CFD04774C7777A2A2FFFFFFA2%A277777177717777A2A2A8A8CBA8FFCBFFFFFFA8A8A8FFA8CBA8A8FD0477%A2FD05FF7D7D53534C77527DA9FFA87D777777847DA8A8FF837DA8FD2CFF%525227FF7D274CFD0477A2A2CBA2A277774C7171A2A8FFFFFFA8A8A2A277%774D714C7771FD0577714C277777774C77777E7ECBFD06FF7D7D53532853%287EFFFFA8534C7D5984A8FD33FFA87DA8FFA8047777777177717777FFFF%FFA8A877774C7777A8FD08FFA8A97D7D4D774C714C77274C4DFD0477A2A2%A277A27DA2A2A8777753534C5352AFFFFFA877777D83FD3AFF7D274C7777%774C7771714CA2FD04FFA8A277714C7777CBFFFFA8A8777D537D7DA27DFD%04A8FFA8FFA8FFA2A27DA2A8CBA8CB7D774C534D4C285228777DA8A27752%7D7DA8A8FFA8FFA8FD35FFA8F85271FD057771777177A8FD05FFA8A27777%4D774D777ECBCBFD09FFFD05A8FFFFFFA8A9A8FFA87E777E5353525353FF%CACBA2777784A8A27DA2A2A2777877A27752A8FD30FFA852529C77774C77%717771777177A2FD05FFA8774C4D467171A2A2CBA8FD08FFA85252527DFD%04FFA87D4C5353532853525259FD04FF7E537D84CB7E7D4C4C2853525353%28F8A8FFA87DFD05A87D7DA8FD2AFFCBCBA29C717771777177A8FFFFA877%7D7EFFFFCB77774C77717777A2A2A8A2CBA8CB7DA8A8FFA8A87EA8777D7D%7E2F53295352537EFD04FFA84D7D5353284D537E7D7E597D537E52277DFF%A852527D527D525252A8FD2EFFCB77774C774C4D537D77A8FD06FFCBA87D%9C77774C7771774C717127277D777D537DFD04532F5328524C5384FD04FF%A84C7D525959A8AEFFA27E5377537D5352F8A8FD04FFA8FD35FFA9777771%714C77CBFD0BFFA8A877A2FD047771772752597E537E535A2F5353534C7D%52537EFFFFFF7E77537D83AFFD04FF7777537E7DA884AE837DA8FD30FFA8%7D777753774C774C774C77777771774C7777774C774C534C4C2822212821%2821282128214C222727532F592F5328532853525228A8FFCB7D7E4C522F%7D7DFD04FF7E4C7D7DA8A8FD37FFA8F828212221222122214C224C4C7771%7721222122214C284C224C2122214C214C224C4C4C284D274C52534C4C4C%77527D52537EFFFFA8534C2884847777FFFFFFA87D5384A8FD3AFF7D2721%22212221222122214C224C2271714D2122214C224C222221222122214C28%4C224C224C22272753527752535253537E7EA2534C285384A9A87E52A8FF%FFA85353A8AEFD09FFA8FD24FFA8FD057DA8FD057DA8A8274C224C214C22%4C224C4C4C284C4C77714C21FD054C214C224C224D4C4C284D4C4C284D27%5228535353285353774C4D53597EAFFFFFFFA852A8FFFFA87759A8CBFFA8%FFA8FFA8FFA8CBA8FD25FFA8527D527D52A87D7D527D52FFA82721222122%214C284C224C284C284C22774C22224C224C21222122214C224C224C224C%224C22272753285953535253598484AFAFFFCBFFA8A8537D7DCB7E5359A8%A8A9A8A9A8A9A8A9A8CBA8A8A8FD31FFA8274C224C4C4C284C284C224C28%282122224C214C224C214C224C4C774C534C774C534C534C5327527EA87E%A8A8A9A8FFA8FFA8CBA8A9A8CB777783A97E7759AFA9FFA8FFA9FFA8FFA9%FFA8FFA8A8FD31FF7D272128214C224C4C774C534C774C534C77774C4C4D%77A8A8FFA8A87D847D837D847D837D837D2727FFA8CBA8CBA8A9A8CBA8A9%A8AFA8FF7E777DAEA85352A8A8A9A8A8A8AFA8A9A8AFA8AFA8A8A8FFFF7D%275252FD2CFF7D7D777E7777537DA2FD09FF777777A2A8AF84A87D848384%7D848384838483842752A9FFA9FFA9FFA8FFA9FFA8FFA8FFA87D7DAEA97E%59A87EFD09FFCBFFA8FFA8A8FFFFFFA8A8FD34FFA2A2777DA8FD06FFA84D%77537D7D837D837D847D837D847D8359837D2727FFA8A9A8FFA8FFA8FFAF%FFA8FFAF7D5384FFA252A8FFFF7DFFFFFFCAFFA8CBA8CBA8CBA8CBA8FD3C%FFA87D77A9AFAF83A8837D717D7D837D847D837D8383A883A88384598427%527D7E7D7E7D847EA87EA8A8FFFFA85383FFCB53A8FD04FFA2A8A8FFA8FF%A8FFCBFD38FFA8FFFFFFA8FFA8FFA8AFA87D287D7D8359837D7D59835983%7DA8A8AEA8A884845A845A605A2E275352535359535953532E53537D4C7D%7DA85384FD06FF7D7E7DFD3BFFA8277D84A883A883847D83838483A87D83%7D847D837D847D7D77A8FFFF848560855A85608560852E4C5377777D5277%537D77A87E7E537D7D7D527D597E7ECBA8CBA8FFFFCBA8FD3AFF7D275284%7D837D847D837D847D837D837D7D59A8A8FFA877717153855A605A845A60%5A605A605A2E27535259537D527753534C7777777DFF77597D7E53532853%537753A8A2A87DA2777E7DFD04A8FD31FFA8277D838483847D837D837D83%7D847DA8A8A877FFFFFFA277717E5A8560845A60608560858485527D7E84%5A8459595984847E4C777D7D777DA8FFFFFFA8A87D8459595359535352FD%04535952277DFFA8A8A8FD2CFF7D2752847D847D837D8483A884AEA8FD04%FFA252FFFFAF537153605A605A8584AFA8FD09FFA8FFA8A8595A537759A8%5352527DA8FFA8FFFFFFCFFFA8A8A8AF84847D7D53595352F8A8FFA85252%7DFD26FFA87D527DA8A8277D83A883A883AEA8FD0AFFCB7785608577785A%845978A2FD07FF7DA8527D7DFFFFFFA87E537E59847E7E84A8535377A8FD%06FFAFAFA8847D8483847DA85227A8FD2BFFA87D7D52A87D2752847D847D%8359837D837DA8A8FD05FFAF845A605A605A777177717171A2A8FD04FFA8%FD047DA8A877774C777DA8535959A8FFFF7D534C77A2FFA8A87D7D5984A8%A8A8FFAEFD35FFA8F87D83847DA883837D847D837D8483A8A8FFA9845A85%5A5A84FF777771777777717777A27DA2777D7EA87D775377777D83A87777%84AF597EA8FFFFA85353537D7DA8A8FD3CFF7D2752847D837D8359837D83%7D835983598359605A605A857E77A2FFA2714C7771774D7771774C272777%4C77777753837D7E535383FFCBA85959A8FFAF84527D59524CA2A2A8A8FD%39FFA8F87D83837D848383598483847D8483847D8460845A84FFFFCB7E77%FFA8A2717771777177779C27527D7E7D7E7D847D77537EA8FFCBFFCBFF84%7E84847DFFFFFFA8A852774C77777D77A2A2A8A2A8A8FD30FFA8A8A8FFA8%AFA8AEA8A883847D837D837D8359845A847D84A8FFFFA8777E7DA2777771%777177774C277D597D537753775384A8FFA8A8A8FFFFA859597DFD07FFA8%A87D7D53534C534C4CF8A8FFFFA8FD05FFA8FD33FFAF84847D837D845A84%83837D837D84A8FFA27E777D77777177777727527777537D7D7E7DAFCBFF%A8FFFFFFA8847DA8A87E7DFFFFFFA9A8A8A87D7E7D7E7D7D7D8452277DFF%7D52527D5252527D277DFD2FFFA8855A605A605984598359837D83598359%83598483837D7D52524C77532727847D847DA8A8CBA8CBA8FFA8A8597D7D%FFFFFFA85A537D537D5259527D597D59FD057D27A8FFFFA8A87DA87DFD04%A8FD26FFA8FFAFFFAFAF848584605A8560855A85AFFFA8A87D837D848384%7D8483837DA88383838483842752A8FFA8FFCBFFA8FFA8A97D847DA8FFFF%A9A97D7E7D7E597D7DA8A8AEA8AFAEFFFFFFAFFD34FF7D2753605A605A60%5A845A605A605A85AFFFFFFFAFAF838359837D837D847D837D847D835983%7D2D27A9A8A884A87E847D7D7DA8A8A9A8847D7D527D598383A87D597DA9%FD36FFFD05A8FFA8F85960605A8560845A855A8484FD09FFAFA883847D83%7D847D847D847D837D8427527D7E7D7D597D59847D7E7D8459FD047DA8A8%FFAEFFFFFFA884597E84FD34FF7D7D525227A8A8272E615A605A605A8484%AFAFFD0DFFA8AE83837D837D837D837D835952277D597D597D527D537D59%7D598383A8A8FD0AFFAF7E5A537E7D7E7EA8A8A852FD31FFA8F859606060%85848584FFAFFFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFFFA8AFFD04848384%7D8427527D847D837D8483847D84A8AEA8FD05FFAFFFAFFFAFFFAFFFFFFF%A8AF7E59596059592E27A8FFFD047D527D525252FD26FFA827538560845A%8560845A845A845A845A845A845A845A845A845A845A845A8560845A8460%845A524C7E7D7E7D7E7D7E7D7E7D7E7D7E7D7E7D7E777E7D7E777E7D7E77%7E7D7E7D7E7D7E777E7D5327A8FFA8FD087DA8FDFCFFFD10FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.b0f8be9, 2021/12/08-19:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator 26.2 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-06-04T14:08:04+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>108</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAbAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUn8xeUPL3&#xA;mIQjWLX6yLcMIfjkTjzZGb7DL3iXFWNTfkZ+WslmbX9GuqFGj5rcT86M3LqXNaNuAdhU064q3/yp&#xA;f8vJdMl0xrGUx8RC8xuJvVIDCWoblT7ZB2FPoxVq4/Iv8srhUSXS5DGgULGLq6C0SJYVBpKK0SMf&#xA;5nFURp/5Ofl/p+pwanbafIt5bXH1uGRrm4YCaoblxL0O61odsVZrirsVdirsVdirsVYRffkx+Xd7&#xA;ftfzaa4umkMzPHc3Mf7xiSXokijlU15dcVVNO/KfyPaSafd2FrNbyWUyXduwnlY8lVfhYSM44ngt&#xA;QKdPnVVmeKuxV2KuxV2KuxV2KpL5r8m+XfNdgljrtr9at439SMB3jKvSnINGynFUlP5SeQeF3atY&#xA;OU1CaS8nHrSj42UIaMGBA3BAxVNPLnkPyz5d1C+v9JtnhutRNbt3mmlDHm0myyOwX4nPTFWQYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqpQ09Sf/XFf+AXFVXFXYq7FXYq7FXYq7FXYq7FVK0p9Vhp04LT7hiq&#xA;rirsVdirsVdiqRa9558q6EWTUdQjS4WtbaOssoIFd0QMVr2LUGWQxSlyDZDFKXIMSufzmMnFtK8v&#xA;3VxC61We5dbda+xUTKf+CyzwAPqkA2nAI/VIBIZfzm83FnZbbS7eMfZWWQuw/wCAmFfuyYww/pfL&#xA;9jIYYf0j/mn9SF0388PNtx560HQJbfTHtNUlSOeaGObmqsxB4EzFQdu4OU5YCJ2acsRE7X8XuWVN&#xA;TsVdirsVdirsVdirsVdirsVdirsVWRoyvKW6MwK/Lio/WMVX4q7FXYq7FXYq7FXYq7FXYqpWZJtI&#xA;CepjWv8AwIxVVxV2KuxVI/M3nTy/5bhDalcfv2FYbOKjzyVrTilRQGn2moPfLIY5S5NmPFKfJhWq&#xA;av5y1iza/wBWuh5P8tndUUk38w2IFfhZa/7HruGGXAQjsPVJu/dw2+uTAb3XtC0lmt9EsfQmVSwn&#xA;mQXOouKE8wrcUgqF5A/B9OXxxzn9R2/H4/S4+XVk8z8AaHxl190b97Frvza95elFIvbnk7Sxxh9T&#xA;uCvdkCcbZTXqDuMtGOEB3fY0g5SNvQP9L87uRWjUfNMVqWa1vCG3ijmuLPSmUV/32PbxweLjv9ls&#xA;DgEjZkL/AM6f3qPlG4vJ/wA1/KT3QYP9ajCh71NQIHIn+9jAC/6v098w9VIGWzbGHDt/veF9KeZf&#xA;PzaBqy2U2garfWrRc1vtPtjcp6lCfTKqQ3RevSvWnXMZkls35v2kbVPlfzCIFBM1w1gVRAqc2LFn&#xA;FAvSp2PaoxVm9heR3tjbXsaukdzEkyJIOLqsihgGG9CK7jFVfFXYq7FXYq7FXYq7FXYq7FXzPrf5&#xA;gedYPzN8y6fFrNyljaTultbh/gRQw2UZkaeIMt3J0sBKW/crP+Y/nWCNmXWLgE7Voj0+hxmZ4EO5&#xA;z/y8D0RGn/ml59CK82vxJFuOM0CMa/NIHP3nAcEO5EtNj7vx82U6b+YP5mXEgWxh03Vk/aVJI/XH&#xA;f+5WaOTp/kZTLDjHOw0SwYhzsJr/AMra1+wZhrnlW6tok3a5TmFI/wAkSRhT/wAHkfy8Tykw/KxP&#xA;0yCY6d+dPke6VDNLPYlzRRPCx36dYfV/HIS0swwlo5jzZFZ+c/KV4QLfWLRnP+6zMiv/AMAxDfhl&#xA;RxSHRpOGY6FNopoZk5xOsifzIQw8eoyFNZC/FUBr+qvpOjXepJay3rWsZkFrAKySU7KN8VSry35y&#xA;Os6nd6f+hNR01LRT6d1eQCKGXg3BlQhm3B6A9RvirILm6trWIzXMyQQr9qSRgij5lqDCBagMX1j8&#xA;0vJGmKa6it5LSqw2f78t7B1/dA/6zjLY4Jno3R085dEnOvfmP5pPp6Jp48v6Y+x1K93nZa9Y4yNq&#xA;r/kn2fJ8EIczZbPDxw+o8R7goz2HlDyEv166Z9Z8zz1dJ7luczMBUv8AESI1Hdia+LUwccsmw2DX&#xA;k1BkK5RHy/H3vI/NfnrVta1Ayeo11dE1iii+ELGp3MPOixRr0Nw/vx6ZmQxRxiz+Px3OJZlsNo9T&#xA;+v8A4kf5yE8r+QfMHmoFbK3F9Zlj6l07PBpSnly5FhxnvHHLlWoXc02wZMp6nhH2/sZionbn9v6o&#xA;+7mm1/onl3TIzYnUp9bnTdobAjT9LjbqeK24Dzj6af5WQiBzr57n9jZDFKW/L7ftP6AEBB5Zjkka&#xA;S10m2iY0IVYI6HvyEkqzM3/I04TqAOZ/H48mZ8MfVM/M/j7ENo2mtYfm/wCUY2g+rlriNylFA3ci&#xA;o4s3hmJnyCRsFrkYfwnb4/pfWeUodirsVdirsVdirsVdirsVdiq2WMSRPGWKh1K8lNGFRSoPjirD&#xA;NM/Li+s9dtdTl816vdw2oPGwlmAhckjZ1UBeAVQAoFfc4q+d/NE3pfm15salQbpwflyGZWkHqPuc&#xA;zRD1H3In67cxXAdHDgoeKSqssZI3FUkDIfpGZ9OyoMm0TzP5PueNr5n0CBoW/wCP2wDW0i1p8TxR&#xA;MiN9r9mnyOVSxyG8S0zxzG8T82bTfk15X1izXUPLerSJHOA0TtxniJU9NvTdSOhqSRmONTKJqQcY&#xA;auUTUggjB+cXk0lo3bWNNSpKgtdJSuwoeM6AL/L8IyV4p+RZXhyeRRmn/mR+XmvEReZdHhtLtjRp&#xA;5IVmStSBSRV9VTUeG3jkTgnH6Sxlp8kfpLtX038iFlql5EbyQVEGmTzXk5HtBB9Yb/hMEZ5f7WAz&#xA;ZRz+1IJPIOnXEvq6BoPmaRzUiW6FlZRb7dLpoJvo4Vyzxz1MftbPzUuvCqJ+W35os6fU44rKMDY3&#xA;OqOGUj2t7eWn0HHx4dfuR+aj1DV5+U35t3NnNFNr1va+oOIYaleygV2H2rePvleTNAxoBhk1EDEg&#xA;BZH+Uf5h2tilpeeYraXhHV0a7nq/xAfZkQDckbk9cceaAABG6488IxAI3U4/yw8xWMxbUNOintx/&#xA;u+VbiSprX7NhLLNQ+PAZb48Ty/HzbfzMem3yZboGma1YWz32kQeVfShNDcxm59RCBujyuXYN7MRT&#xA;KJzieZk0ZMkT9RklvmD86Nbs7W5igsbQyxkp9eind4lan2VV41LuPAfdkoaYS5E/JpIxirlV+W/4&#xA;8zs8g1bzFrWq3cjTE8i6rdXLEzgzHcIQAGmlB+xbqKA7v0OZYEcew5/j8W1Txg736fl9/wBsvgGZ&#xA;eS/I9jbXD3PnDSdVjs+QkWy+rSyLO67h72ZRWQgdIwOC9vE0zkeYIMvu9zZHEZAVQHy/s+8si85+&#xA;fBrqnQ/Lh+raBEgE06qYBKtPs0IUpEB2p8XfbZqhHg3l9TIQEB6vk15P078vI1WbVNYhM6UJiYMh&#xA;qO5ZlHv9mvzyE45JdNkTx5Z8wQO4PQbLzR+WtpxS2v7CI9A3JeX0u2/3nK/Bl3MRp5D+FNYvOXlC&#xA;a7is4dc0+S7nIWC2S6haRydgEQNyY/LIGJHNEokc03wIdirsVdirsVdirsVdirsVdirsVdirDr78&#xA;ofy9vdUvNVuNK5ajfsXurgXFyCztuTxEnAfQMnDIYmwzx5JQNhLNR/I7yncIPqc1zZSJ/d0cSoK+&#xA;KuOR/wCCy6OqkObkR1kxz3eb+bfyq8w+XYmugUv9OSnK5i+FlApu8RNR0/ZLAeOZWPURl5FzMWqj&#xA;LbkUo8o/mNd+Tr8TIZJ7O4elzYIryCT3UIG4vTof4ZPLhEwyz4hMb83tem+c/NnmiyS78r6NFZ2M&#xA;tQmpazMo3BoeNpaNK7fJ5IzmvljETUj8nVyxiJqSFvfyb0rXZpLvzdfzaxeyClYESwgUduMcA5vT&#xA;/i6R8I1BjtHZkM5jsOTH5vyKv9GdpvJ+q/VGAHCNuVu4oa/3sA+Kv+qMuGqB+oORHVxO0gpzap+d&#xA;nl9ZGukN3bLtCzrDcAmnjGfV7d8PDiky4cEvJq3/ADo83xJXUNHhRwaMOE0Pf/LZ8Tpo9Cp0kDyK&#xA;XeZPz5uJNJuoLry/G8fEMUNw4DcGDDdUU9R45DJphGJNteTSCMTK2P8Al6b8vrnSrW/bywYpWdrt&#xA;QL9wsckhQtx5SxsRWFT8X6tsqjgkRY/T+p15mAa4o/b+gMt1L889RMcoiewtCnUrIbqVd6VaOET/&#xA;AMMtjpD+Px+hJlG+ZPujX2yp575t82z6jdG5v53+vOPTguJv3LFWWqCO3i9SaZCx+y3w1O65lQ04&#xA;iN2MMspfQP0/btGPwSiG31jVNQitZBKbpyIorWqQ3JSUgIJSv7qwiJ41/bPbrhOTb08u/wDHNIgB&#xA;udyfiP1yP2B735B/K3R/KNrHrGuyW76hapWNiRHZ2MfUrDzOx7vIx5MepzBnlvaPX5llRkd/x+Ps&#xA;6Jf58/Mqz1q3Og+Vbj64twTHqF9Fy9MJ/vuN6UcOPtMtRx2FaniYY+H1SbPTHeXJJ9D8qfmjFcD9&#xA;BQQaNbAFTf3SI90W3HNElEqcGr/Ly99yMNw5y3LQMpkbqz9n6Es8y6PcQGW18yefNR1DVUH7+20Y&#xA;yBx7SKHSCLfsSuXQl3RAHm3Rlluxwgfj3fekEPlsSyMsdjcTJUlZL24Xm/L/AIwwsv3SZI5gOv3f&#xA;papZSP8AKfK/+KUNC8r6xZfmv5VlGmSRWy3EcjyxLLJGBzb4mcggdMxM8xI2GQlf8Rl79n0J5i0H&#xA;zje6lbXOi+Y/0VaxOjXFmbWOcSoNmXk5qtRX/MDKEpVN5V/NGVLr/ndI4jOKQKunwn0KyAniwKcv&#xA;3Y4/Eta7imKpn5R8vecdKurhtc8x/puCYOyIbdYODs4IoAZCAq1WganT4QQSVWUYq7FXYq7FXYqp&#xA;Xd1b2lrNd3MixW1ujSzysaKiICzMT4ACuKpP/jzyRRSfMGnIWFQr3cCt0J3VmBHQ4q7/AB55K9CG&#xA;c65ZLDOXEUjTxqpMXEuKk7cRInX+YeOKqsPnLylNdRWcOs2Ul3O4jitluIjKXZSwXgG5VIU7UxV8&#xA;n/m55888WHnrzDa2PmLU7W2gv2SGGC8uI0RaN8KqrgAewzK0kQZG+5v04BO7A5fzB8+TMGn8x6nP&#xA;QUpNeTyAjwIdyCPbNj4ce4OZwR7l1r5l8yTTrOzQTOtKT3VpazkU7gzROa7YmAUxCfWvme+knP1+&#xA;RX50rJHHHCAaU+xEqJT5DAA248lbFS1zzP5x0Rl/RGv39jZ3bFzDa3M0K81ABNI2UbimEwieYXNA&#xA;E2UHD5m82zw8r3Wr+4eQ86S3Uz09/iY774OCPc08I7kj1TV7q5Z4jO7oSTKzMTzatd6nfJCLIBCW&#xA;1nNOfhFEHVz0wkraYw6bbRgFhzYd26fdgtFq/oQKGKxqGCtQhQOxyjP9Ba8v0ll+gvGNPtilw8U6&#xA;oCBHpklz23/eMfTOQwynwCht73WmETz/AN1SIQIWeOa/ummcir+pYaJGw6cSFZ5WDH/Jy0nIe4fa&#xA;yGOPSIr/ADpfft9qb6Nb+U7WeP63qH1WSartp2hW80l9Ip+0Gv7z0tm/4qYdMrlA9d/fy+TKVkWT&#xA;t57/AGR2+dvQ9B1HzLNpL6T5B8kQ6Xpt0jLPfasPUeXls3ro3H4yN/iLqcqmBdzl8mAyQBsXI/jr&#xA;+iwh/MvkTUNK0+HUvPOrXWvAfu9Ns1lIhiudmhUp8PEAJ8Tp1A33IxhlBNRFMhxz2+n3fj9fvZZ+&#xA;WHle203Tv03qhit4o1LwIwWKKNV3aSnwqoG+9PfMbJMzOzXwRMrHIfb5qOsebtb833Z03y/I2naH&#xA;WkuoFjFLOviG2aKI+3xsP5ehsERDnvL8fj9bYZVsN5fcnHl7yN5L0mJPWliupxud6RhtqkBevTev&#xA;XwyuU5S5sTjMvq3+5lkOo6FbJ6cEkMMfXhGvEfcoyvhLIRpWh1bTppBHFMGc7AAHv9GJC0i8CuxV&#xA;2KuxV2KuxV2KuxVTuLeC5t5be4jWWCZGjmicBlZHFGVgeoIOKpIfy+8itx5eX9OPF/VFbWI/H/N9&#xA;nrv1xVU/wN5M+qJZ/oOxNpGSyQG3iKBiFBIUrTcRr9wxV1l5H8mWM6XFnodhbTxsrpLFbxIysn2W&#xA;BCjceOKvl/8AM38ufOmpefvMN1B5fv7qzuL1pLeaK3lZHXf4lZRuN8ydLIRlv3N2CQBYdJ+XnmGy&#xA;el3ol5Zf8WXdrcRRbdT6kqCPbx5Zn+KD1cvjHeyTQPye82+YIDLpE2m3gXd0gv7eVk3p8QjZ+P05&#xA;CWeMedsDlA5prJ/zjT+aM8NE+oQE7MJLg8qe3BHH45H81BHjxW63/wA48fmNpXlaWS+udPurazKy&#xA;hLaSaSREH2qh4Y/hXrUHYe3SUNVGRpthqIy9KQeVPyxbWrw6Xd63DpbSIzQ3DxtIpKipT7UdPhrQ&#xA;5PLk4RdMs3oHEyR/+cdPLtuwMvnB7kpvLFb6afuDvcKPwzFOv8nAOviOi8/k3pEPHjqk8kVPhX0E&#xA;iP8AxOUZA649zWe0PJf/AMqb0wio1GZa+KIf6YPzx7kfnz3JR5k/LSw0rRL2/iv5Jnt4ywQooU12&#xA;6198jPVmQqkfnTL00z38ufyz8s6l5P0jVLmIG6mh5uTPIBUMR9gNxHTwyUMshGmMgD1PyH6mYL+W&#xA;3lFQvq2NpPxNQZyZDXt9pj0w+LLvRGMR/O+77qTmw0nT9PQR2UdlboPs+nDGSPkSCRkCSvBDuJ96&#xA;YS3t0kTSS6iyRopZ2C0VQBUkkDYAZCg2cXk87gF35y8z/WpHnl0qxqtt6hIPGvxPxboXIHWnao2y&#xA;yZERwjqs50K6n7v2oe8ifW72WyhMh8o2bh5bqQltwRs7KWrbqd1LU6VPwgNk74Rt9TE5Tyjz+79r&#xA;0rT/AC+lvbxx21mgiAHFixblt9qoUDKOJjGwKH3Is6XOq1MMSKO5B/iRjxMrPmpNEq1BMG3gOX6j&#xA;htNS81tmF/SkFCp3X7Cle58SchNNHq15k8w+edO1eODSPK41nTXQcrpbyK3ZZCdwUkB2A/z6Vgqe&#xA;6NeaheaXb3OoWJ029lWs1i0izGI1IoZE+Ftt9sVRuKuxV2KuxV2KuxV2KuxV2KuxViEf5q+T5PMN&#xA;/oCzy/pHTSRdL6L8QVIU0YDfc4CWMpAc0e3nnQVrRpWp0onX7yMeJh40WM+YL/8AL3Wpg97orT3q&#xA;n93fIq29yhp1S5idZk/2LZKOYjko1VckmtPNvnDSLr0dPuRqukCiiLV3L3cI8VuYUQyj/JlUt/l4&#xA;TkielFTqQelFFXvnHXb1HVrn04ypDRxAJudqV+1+OVWXHOWTCItDttL1Ga/Mnp2p+GIsQFDOKlKn&#xA;5bZkyzSyREa3cyepnmxiFWU98vS2mu3j6fa3kK3XHn++LIGC7txPH4iBvQdsqlgmBZDTLR5IiyKC&#xA;a3unaTbsFk1ITyJQGO2jMi/8GzRr91cshpJnycHJmxx637kFJJAwdVVwF/a5Df6OP8cvGhHUuOdX&#xA;3Binnuv+ENU/4w/8bDHJpIxiTZZabUylkASfyf568xWPlvT7K2vDFBDFxjWkFAKk/tWsrd+7HBCM&#xA;eHd3fAe8fb+tO0/NTWIJPSl1mEu5ABP1WQ/JFjhjqfmRlgxRPRRhyHoPtH6U+s/zF84sxNvJptxG&#xA;CP3M8CxTnkKrxDX8Jb/YofbIHHHuP4+C+FKvo+Ur/Qp67548wa/ajSPq9vZx8yL+S3L+oQhIKMrc&#xA;uIB68Xap29iKjDdETEDikD+tTHmmz/w+fL2mwT2URamtagfTmd4egSFLR7iXi37VUDUqAu5KiMSD&#xA;xE2WAnEb7cR79vv7nonlnzZ+XGl6bDYWusWtswH2Ls/U5pG7kRTiOQ/dlUsU+ZDZCBrbdUjN9HV/&#xA;KLRtYvv9Qkb/AEffvA6hvQr1pRk8FBJbHb+Js26qsN/ZF1XWpZNLum29K9AVSfBJ6m3c96IxPjjR&#xA;6brv0T+PSrLiCpLKRUMG2I/2NMrtha9NMsUlWVY/3i/Zbkx6fTgQisVdirsVdirsVdirsVdirsVd&#xA;iqhqF9b2Fhc31wSLe0ieeYgVISNSzUHfYYqxLS/zj/L3UtRg0y31JhqFwURLaSCdWEkkvoiNiU4q&#xA;wkoNzTevTFXjGn/+Tt859vjl/wCTqZGTTn5M34pQ1lRP8pg9P+FUnIuKitP0W1mbm2q2iA92Mi9f&#xA;9dEH440yjAd4ZHYfl7YyoXfUfrEbmpMAUf8ADEv+rJcLbHAO9F6j+XmnS2YGnTPZ6lEwe3u5AJ0L&#xA;L+xNA/7uSNv2hsfAg75ONA7i26GOI6Wlt/5hsLjQ7zy/5o0o2uooipLaQCttLy+xcWsxHHjVa0Yc&#xA;0PUHYnJxYSTceTHNqo4KIO/d+t5DpWm32m61KkkRa3KtxuKDiANweR6HxGbII7Q1mPUacEGpX9P4&#xA;+9PYNf0Y3kdtPeJErMA05DtGoqQKlA3U+GRkaDrsPZOeYuqHn+p6JpXkXSb21E8eqreQSb+pa8Cv&#xA;yDVcZhT1RB5No7LraRKl5t8geTbfyvqD6rNeDTljrdPEyGTjyH2fg8cqnqZSFFuxaKEDYtgiH8h9&#xA;F46SNY1ES2iAmOsxNWcKFP7sITVu238YRzECqDkSx31LMPMP5eaNp1sbufXzY2iD+6uli9Jz2Hwi&#xA;Nz/qr18MnGfEfptrGCQ5H57/AH/qeW3VjYakZLe1s7Rp2c1v7aJ7KSRAaUCxcKKQQSHPL5Zeajvb&#xA;fGU8e874fL8foTWyg1Sxls4PK94V1p5JFuYzDUgFeCr6zV4seZp+7ag38K07/VMbdGMc4l6jv0AT&#xA;3TNa0byk0uk+cvLUkccjs0Wp3CpcxSHYFizclFWZiTzLsT0ODh49wd22GIS3J9X45Mm0ryT5J8w2&#xA;z3FgwhtS1fTsJ5I+DHehjDUT5Mv0YJTlEscmAA7hCar+Tfk21f62uomwnI/vpYrNmbjv19KOQn5N&#xA;hGol72uRoVxEfEscv9E0yFClh5qv35Dg62R1CNBTahWO9iH0Uph8bvA+z9THxZDaz8o/pCVQeTNb&#xA;hcS6S94xbcSwi+t3JryBLLcuSe/XCNQOoXxpnr936m9Ls/zXtfzH8uxytrraKZka/LSX8trx5EH1&#xA;mkeVKU6hjTKcsgTs2RJ6n9H6A9h8yR/mC19Xy/LYpZekKi5D+p6tT0oGFOmVsk80oakNOtxqbI1+&#xA;EH1hovslvw7ddqV6YqisVdirsVdirsVdirsVdiriARQ9MVWehDy5+mvOteVBWu3f6Bir5xtNI1pf&#xA;zk833IsLgwSvJ6cvpScGBkQ/C1KHIyac4NMweyvAh9S3ljBG/JGH6xkXGooJQeEkZG670wMVSK4n&#xA;hcSwSNFJxqHRipqPcYVBTiLz35ghheETLLUELLIoLr7gilT/AK1cydPASPqLDNqpxGyWWkJ1TUON&#xA;zcrEZjWS5nbYHuST3zYZMscYcDHjlll+lM9U8ux6bY3dprmmnV/L118Ueu6YrveWo2IMtsDKzKvX&#xA;1IeVf2kpmN45kbBo93R6DSaeGIgx+rzeX615Wms4P0nptzFrGhOR6OqWZEkYp+zKoqYnHcNmVDID&#xA;sdi73HmEtuRSmzv9QsGaWwuZbSYKP3kLtG3wsR1Ug5MgHm2mIPNNtX/MbzxDoVy8OszikVfj4yE/&#xA;S4Y5jZsUREmnDz4YiJNIzQPMnn7U9Btrg6jPLJcrzldSkLE041qsaFjRQK8sx4SgBu4AnjG0j+Pv&#xA;WXNov1kT6zqFLhwCBK7TXTCu448pJW3P7JPyy0ZCR6R+pIzD+CN+f4/UnWg2+sX7C08uWj2fL+81&#xA;CQKLjiD8RQfYhFSfiJ5DsEyEgIm5HiP2NEper1eqXd0DN4PIGi22lLYQySPqfIOL2BmAjcb/AAg/&#xA;b+Lf4hudzkPEJNlhLBe5PqdHqd1ol3+jvOduL62mWlve0EqutNllRq7/ALO/enWuxlEEXFj4xHpl&#xA;zSOD8u/0pq6ap5Vt7jy1ZqarKszRrIKk/BHRmjDcjX0yN+uR8Y1XNuhmyVQ5fj8fpa1Ly/8AmDpW&#xA;oS3dzoUPmW0BUhkuHknYg9SrtBxP+xbGPAeZIXHjh/Fd/j4lMrH839F0yZ7bUvLN5o0i0qUgon+y&#xA;klS2X8Th8EdCG0YodCPx7rTCD8+vy2eThNftbGpBMihgKdz6TS4fy02f5eXSkxsPzi/LfUNUtNLs&#xA;tZWe+vnEdrEkNwQ7k0A5+nwH0nKZwMTRapwMTRZlkWLsVdirsVdirsVdirsVdirsVdirsVY2v5je&#xA;S21e80camp1KwJF3b+nLVCpCmp4cTuexyUIGRoNeTLGAuRpUk89+Wx/dzvMQK0SNx/xMLlw003HO&#xA;vxdDaS6p5/sp4+MGnLMCDRroKRt4oOVf+Cy2Oj7y42TtEH6Y/NiFzLJeXHIRIjOaLFCgVRWmyquW&#xA;nS46cL8zMlOYPIOvS2n1goiMd1t3bjIR93EfInMMkQPp3c4aacxctvJKb3T72ycxXUDwPvQOKA7A&#xA;7HoenbMaRJNlnwcO1LrPUr+zkra3EkNWNQjEA1FRUdD9OC0iRHJDX6219cC/mt0h1OTaTU7MvZXT&#xA;f68ls0XqdTtIGHtlsc0ht0b46qY82M6r5OkdmNrfEO4pzuYIpKA9QBbfUx9LVOXx1hHMfj7XLh2n&#xA;IcwkXmbyrd2PlS+me9jnEMRLBYmjJqR4yPTrhnq+IVTOXaPiDhrmyfyB+Xy6r5K0m5lnYRTw8ihl&#xA;fjsxH2CeHbIwykDb8fY0jjvbhr+ruzDT/I3lbTm4ySQ1FAY6pErAHo6r1/DDKcjz/HzYyN7Sl+hO&#xA;f8Q+XbKE28c1USnK2tULHwqQKBvmWOV8lGSMR6R+PeVU6n5imt3ktbeLQtPUfvdSv3CtTxHKgCke&#xA;A2ODny3YGUpeX4/HT4oD65+X2nepJe3j+YdRnjJ9RQZVkDbERSEiDkf+MlcREqIx36pHpvmTWdLv&#xA;J18uK40qZi0VlqAMjRswqaKjIftdg/Q9TQDLZShLn9TSJnGa5x/H4/Fo6281+etavVhtNRgtrgfA&#xA;1tbrb8GcDkRS4DScuPYSdMrO3Rtjls7bo3/Bvny9lL3Wp3MLMTUrezRp0/33G7p+GR4z3fckCX9p&#xA;WN+VWsSf32oLK3UtJIznf3eIk4OI9yeE9w+1LE/JLWV896H5j/SEH1bSnRpYTzMj8WZjxIRF798F&#xA;s4CmZ+avy5h8wan+kV1zVdKnMQgkTT7kwxvGK/Cy0IO5qcWSCP5Vyu/KfzZrtwhjnjaGW6DRn10k&#xA;TkV4U5J6nw9hQbYqmfl/yM+ja0+p/p7VL5Hh9AafdTK9so+EKVjCLQrw2+Z8cVZRirsVdirsVdir&#xA;sVdiqV65pmqXxtDp+pPpxt5TJLwRZBKvAqEYMegJ5Yqx3S/LH5n29/az6h50jvbSMxm6tBplvF6g&#xA;WQM4DqSy846r7HfFXikX/k6fOX/GSX/k4uZej+o+513af0D3sztxFxYNIsbHuwYj/hQ2bAunjSZ2&#xA;Vn5ePH69qhVQKFIIZCTX/KZRT/gcqlKfQN8IY/4pfIMo0vW/IemCtqT6ved43aQ/SRt9GYs8eWXN&#xA;z8WfTw5Jl/j3yz/y0N/yLf8Aplf5Wfc3/n8Xesm87eU54zFNJ6sbdUeFmB+gjH8rPuQdfiPX7Egv&#xA;m/L25POGeW1etf3aOVr/AKrKfwpg/KT7mo6nAeqR3Vpo4VlttTWQE1HqQyx/qD5H8nNrOox9D9hQ&#xA;c5h4UEquw7qGp/wyjB+UydzE6mHexjz2f+dQ1T/jD/xsMB0847kNuDPAzABQfkmWFfKunB5kUiHp&#xA;6zKR8R2K9B9GERkRyPyc2UCTsD/pU2ne3lpXUBHx6D91MP8Ah0JwiEv5p+5iISH8MvlSNt7yF5Y+&#xA;Wti0ZAAJ4DLan6fq32v+Bw8E+kUiEgbET9v6kwgsvJc1w11qPmGN7o0rcCKeSVgBT4pOERP01xMM&#xA;h6JGOXdX+af0shsLr8pLSpN8J2NCeaSgVHeiIn41yJwzPMFl4XeJH4FPrbz9+XlqpW2vYYFPURwy&#xA;KDTxogx8GXczEa5A/IpPr2qflPrberdXiR3XT61Ak0chFQaMQnxAkCoYHLYDJHo1zwg70Qfcf1JI&#xA;PMc2lEDSfOEd5bKCfQu4pQ5P7KhjHKir2+FVyXADziQw4MseW/wP4+ZVbb83tbSn1qKylod1hLVI&#xA;/wBeR4/+IY/lx0v5JM8n8w/b+gFC23566vc+edE8vLpUMVrqkiRyzO/KReTEVX03Ze3fKMmPhNNs&#xA;CTzFfP8ASz3zH52l0LUDbPoWpajB6Mcsdxp0P1irSS+n6ZBKAFftH4vs5WySiT820Sa+i/wp5gb6&#xA;oWELrYkpNxk9KqENtVqkV/ZHLFU28oeeW8xTzQSaHqWkSRRLP/uQhEQZHYoBTlyDVVtivau4oSqy&#xA;jFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>885.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -367.947 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 367.947 li
883.229 367.947 li
883.229 0 li
cp
clp
181.615 111.583 mo
309.115 111.583 309.115 282.43 436.615 282.43 cv
436.615 285.735 li
309.115 285.735 309.115 114.888 181.615 114.888 cv
181.615 111.583 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 282.43 mo
574.114 282.43 574.114 86.7567 701.615 86.7567 cv
701.615 88.409 li
574.114 88.409 574.114 284.083 446.615 284.083 cv
446.615 282.43 li
f
446.615 305.29 mo
574.114 305.29 574.114 149.049 701.615 149.049 cv
701.615 150.702 li
574.114 150.702 574.114 306.943 446.615 306.943 cv
446.615 305.29 li
f
181.615 351.837 mo
309.115 351.837 309.115 351.837 436.615 351.837 cv
436.615 355.142 li
309.115 355.142 309.115 355.142 181.615 355.142 cv
181.615 351.837 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 284.083 mo
574.114 284.083 574.114 88.409 701.615 88.409 cv
701.615 89.2353 li
574.114 89.2353 574.114 284.909 446.615 284.909 cv
446.615 284.083 li
f
446.615 284.083 mo
446.615 284.583 li
478.621 284.588 502.675 272.283 522.656 253.877 cv
552.631 226.267 573.55 184.965 598.921 150.618 cv
611.603 133.444 625.39 118.012 641.941 106.882 cv
658.494 95.7524 677.804 88.9112 701.615 88.9092 cv
701.615 88.409 li
701.114 88.409 li
701.114 89.2353 li
701.615 89.2353 li
701.615 88.7354 li
669.608 88.7303 645.554 101.035 625.573 119.442 cv
595.598 147.052 574.679 188.353 549.308 222.7 cv
536.625 239.874 522.839 255.306 506.288 266.436 cv
489.735 277.566 470.424 284.407 446.615 284.409 cv
446.615 284.909 li
447.114 284.909 li
447.114 284.083 li
446.615 284.083 li
446.615 284.583 li
446.615 284.083 li
446.114 284.083 li
446.114 284.909 li
446.114 285.409 li
446.615 285.409 li
478.621 285.414 502.675 273.109 522.656 254.703 cv
552.631 227.093 573.55 185.792 598.921 151.445 cv
611.603 134.27 625.39 118.838 641.941 107.708 cv
658.494 96.5787 677.804 89.7374 701.615 89.7355 cv
702.114 89.7355 li
702.115 88.409 li
702.115 87.9091 li
701.615 87.9091 li
669.608 87.904 645.554 100.209 625.573 118.615 cv
595.598 146.225 574.679 187.527 549.308 221.874 cv
536.625 239.048 522.839 254.48 506.288 265.61 cv
489.735 276.739 470.424 283.581 446.615 283.583 cv
446.114 283.583 li
446.114 284.083 li
446.615 284.083 li
f
446.615 332.282 mo
574.114 332.282 574.114 263.608 701.615 263.608 cv
701.615 264.435 li
574.114 264.435 574.114 333.108 446.615 333.108 cv
446.615 332.282 li
f
446.615 332.282 mo
446.615 332.782 li
510.452 332.791 542.482 315.557 574.351 298.385 cv
606.232 281.22 637.952 264.117 701.615 264.108 cv
701.615 263.608 li
701.114 263.608 li
701.114 264.435 li
701.615 264.435 li
701.615 263.935 li
637.777 263.926 605.747 281.159 573.877 298.331 cv
541.997 315.496 510.277 332.599 446.615 332.608 cv
446.615 333.108 li
447.114 333.108 li
447.114 332.282 li
446.615 332.282 li
446.615 332.782 li
446.615 332.282 li
446.114 332.282 li
446.114 333.108 li
446.114 333.608 li
446.615 333.608 li
510.452 333.617 542.482 316.384 574.351 299.212 cv
606.232 282.047 637.952 264.943 701.615 264.935 cv
702.115 264.935 li
702.115 263.608 li
702.115 263.108 li
701.615 263.108 li
637.777 263.099 605.747 280.333 573.877 297.505 cv
541.997 314.67 510.277 331.773 446.615 331.782 cv
446.114 331.782 li
446.114 332.282 li
446.615 332.282 li
f
446.615 306.943 mo
574.114 306.943 574.114 150.702 701.615 150.702 cv
701.615 151.528 li
574.114 151.528 574.114 307.769 446.615 307.769 cv
446.615 306.943 li
f
446.615 306.943 mo
446.615 307.443 li
478.592 307.447 502.626 297.633 522.614 282.933 cv
552.596 260.881 573.523 227.892 598.886 200.477 cv
624.258 173.057 653.967 151.211 701.615 151.201 cv
701.615 150.702 li
701.114 150.702 li
701.114 151.528 li
701.615 151.528 li
701.615 151.028 li
669.636 151.024 645.603 160.837 625.615 175.538 cv
595.633 197.59 574.706 230.579 549.343 257.994 cv
536.664 271.704 522.884 284.021 506.33 292.91 cv
489.775 301.798 470.444 307.268 446.615 307.269 cv
446.615 307.769 li
447.114 307.769 li
447.114 306.943 li
446.615 306.943 li
446.615 307.443 li
446.615 306.943 li
446.114 306.943 li
446.114 307.769 li
446.114 308.269 li
446.615 308.269 li
478.592 308.273 502.626 298.46 522.614 283.759 cv
552.596 261.707 573.523 228.718 598.886 201.303 cv
624.258 173.884 653.967 152.037 701.615 152.028 cv
702.115 152.028 li
702.115 150.702 li
702.115 150.201 li
701.615 150.201 li
669.636 150.198 645.603 160.011 625.615 174.711 cv
595.633 196.763 574.706 229.752 549.343 257.168 cv
536.664 270.877 522.884 283.195 506.33 292.084 cv
489.775 300.972 470.444 306.442 446.615 306.443 cv
446.114 306.443 li
446.114 306.943 li
446.615 306.943 li
f
446.615 340.82 mo
574.115 340.82 574.115 306.346 701.615 306.346 cv
701.615 307.172 li
574.115 307.172 574.115 341.646 446.615 341.646 cv
446.615 340.82 li
cp
f
446.615 340.82 mo
446.615 341.32 li
510.405 341.323 542.37 332.686 574.245 324.066 cv
606.12 315.449 637.905 306.848 701.615 306.846 cv
701.615 306.346 li
701.115 306.346 li
701.115 307.172 li
701.615 307.172 li
701.615 306.672 li
637.824 306.669 605.859 315.306 573.984 323.926 cv
542.109 332.543 510.324 341.143 446.615 341.146 cv
446.615 341.646 li
447.114 341.646 li
447.114 340.82 li
446.615 340.82 li
446.615 341.32 li
446.615 340.82 li
446.115 340.82 li
446.115 341.646 li
446.115 342.146 li
446.615 342.146 li
510.405 342.149 542.37 333.512 574.245 324.892 cv
606.12 316.275 637.905 307.675 701.615 307.672 cv
702.114 307.672 li
702.114 306.346 li
702.114 305.846 li
701.615 305.846 li
637.824 305.843 605.859 314.48 573.984 323.1 cv
542.109 331.717 510.324 340.317 446.615 340.32 cv
446.115 340.32 li
446.115 340.82 li
446.615 340.82 li
cp
f
181.615 240.905 mo
309.115 240.905 309.115 204.549 436.615 204.549 cv
436.615 207.854 li
309.115 207.854 309.115 244.21 181.615 244.21 cv
181.615 240.905 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 151.668 mo
574.115 151.668 574.115 46.1591 701.615 46.1591 cv
701.615 49.4642 li
574.115 49.4642 574.115 154.973 446.615 154.973 cv
446.615 151.668 li
cp
f
181.615 114.888 mo
309.115 114.888 309.115 285.735 436.615 285.735 cv
436.615 289.04 li
309.115 289.04 309.115 118.193 181.615 118.193 cv
181.615 114.888 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 322.367 mo
446.615 319.562 li
446.618 319.562 446.628 319.562 446.632 319.562 cv
454.07 319.562 461.079 319.03 467.706 318.03 cv
504.074 314.336 528.874 301.133 550.504 285.324 cv
551.287 285.848 552.063 286.374 552.838 286.905 cv
526.749 306.386 496.404 322.367 446.615 322.367 cv
557.26 283.542 mo
556.51 283.011 555.767 282.488 555.011 281.961 cv
559.672 278.417 564.204 274.774 568.705 271.098 cv
569.572 271.492 570.433 271.885 571.297 272.281 cv
566.671 276.077 562.023 279.858 557.26 283.542 cv
576.119 268.319 mo
575.52 268.045 574.922 267.771 574.323 267.497 cv
574.06 267.377 573.799 267.257 573.536 267.137 cv
579.501 262.234 585.45 257.333 591.61 252.591 cv
592.776 252.804 593.947 253.015 595.128 253.224 cv
588.607 258.105 582.351 263.201 576.119 268.319 cv
604.269 246.679 mo
602.979 246.471 601.697 246.259 600.433 246.046 cv
607.529 240.998 615.002 236.251 623.123 232.045 cv
624.102 232.659 625.086 233.261 626.085 233.856 cv
618.279 237.693 611.089 242.032 604.269 246.679 cv
627.108 233.357 mo
626.093 232.764 625.088 232.16 624.093 231.547 cv
644.324 221.246 668.646 214.297 701.365 214.261 cv
701.365 217.566 li
670.255 217.6 646.735 223.885 627.108 233.357 cv
.0553902 .148379 0 0 cmyk
f
181.615 118.193 mo
309.115 118.193 309.115 289.04 436.615 289.04 cv
436.615 292.346 li
309.115 292.346 309.115 121.498 181.615 121.498 cv
181.615 118.193 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 325.672 mo
446.615 322.367 li
496.404 322.367 526.749 306.386 552.838 286.905 cv
553.604 287.429 554.365 287.955 555.125 288.485 cv
528.514 308.74 497.867 325.672 446.615 325.672 cv
559.473 285.123 mo
558.74 284.596 557.997 284.065 557.26 283.542 cv
562.023 279.858 566.671 276.077 571.297 272.281 cv
572.158 272.674 573.021 273.069 573.881 273.463 cv
569.115 277.381 564.349 281.295 559.473 285.123 cv
578.708 269.502 mo
577.844 269.108 576.981 268.714 576.119 268.319 cv
582.351 263.201 588.607 258.105 595.128 253.224 cv
596.326 253.437 597.54 253.649 598.757 253.858 cv
591.829 258.871 585.236 264.16 578.708 269.502 cv
608.286 247.313 mo
606.933 247.105 605.592 246.893 604.269 246.679 cv
611.089 242.032 618.279 237.693 626.085 233.856 cv
627.117 234.47 628.158 235.073 629.212 235.666 cv
621.733 239.139 614.83 243.071 608.286 247.313 cv
630.296 235.168 mo
629.224 234.577 628.157 233.971 627.108 233.357 cv
646.735 223.885 670.255 217.6 701.365 217.566 cv
701.365 220.871 li
671.918 220.904 649.277 226.533 630.296 235.168 cv
.0553902 .148379 0 0 cmyk
f
181.615 244.21 mo
309.115 244.21 309.115 207.854 436.615 207.854 cv
436.615 211.159 li
309.115 211.159 309.115 247.515 181.615 247.515 cv
181.615 244.21 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 154.973 mo
574.115 154.973 574.115 49.4642 701.615 49.4642 cv
701.615 51.1168 li
574.115 51.1168 574.115 156.625 446.615 156.625 cv
446.615 154.973 li
cp
f
446.615 247.956 mo
574.114 247.956 574.114 344.015 701.615 344.015 cv
701.615 345.668 li
574.114 345.668 574.114 249.608 446.615 249.608 cv
446.615 247.956 li
f
181.615 172.939 mo
309.115 172.939 309.115 164.888 436.615 164.888 cv
436.615 168.193 li
309.115 168.193 309.115 176.244 181.615 176.244 cv
181.615 172.939 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 228.731 mo
574.114 228.731 574.114 253.583 701.615 253.583 cv
701.615 256.888 li
574.114 256.888 574.114 232.036 446.615 232.036 cv
446.615 228.731 li
f
181.615 212.6 mo
309.115 212.6 309.115 315.481 436.615 315.481 cv
436.615 318.786 li
309.115 318.786 309.115 215.905 181.615 215.905 cv
181.615 212.6 li
cp
f
446.615 284.909 mo
574.114 284.909 574.114 89.2353 701.615 89.2353 cv
701.615 90.0616 li
574.114 90.0616 574.114 285.735 446.615 285.735 cv
446.615 284.909 li
f
446.615 284.909 mo
446.615 285.409 li
478.621 285.414 502.675 273.109 522.656 254.703 cv
552.631 227.093 573.55 185.792 598.921 151.445 cv
611.603 134.27 625.39 118.838 641.941 107.708 cv
658.494 96.5787 677.804 89.7374 701.615 89.7355 cv
701.615 89.2353 li
701.114 89.2353 li
701.114 90.0616 li
701.615 90.0616 li
701.615 89.5617 li
669.608 89.5566 645.554 101.862 625.573 120.268 cv
595.598 147.878 574.679 189.179 549.308 223.526 cv
536.625 240.701 522.839 256.133 506.288 267.263 cv
489.735 278.392 470.424 285.233 446.615 285.235 cv
446.615 285.735 li
447.114 285.735 li
447.114 284.909 li
446.615 284.909 li
446.615 285.409 li
446.615 284.909 li
446.114 284.909 li
446.114 285.735 li
446.114 286.235 li
446.615 286.235 li
478.621 286.24 502.675 273.935 522.656 255.529 cv
552.631 227.919 573.55 186.618 598.921 152.271 cv
611.603 135.096 625.39 119.664 641.941 108.534 cv
658.494 97.405 677.804 90.5637 701.615 90.5615 cv
702.114 90.5615 li
702.115 89.2353 li
702.115 88.7354 li
701.615 88.7354 li
669.608 88.7303 645.554 101.035 625.573 119.442 cv
595.598 147.052 574.679 188.353 549.308 222.7 cv
536.625 239.874 522.839 255.306 506.288 266.436 cv
489.735 277.566 470.424 284.407 446.615 284.409 cv
446.114 284.409 li
446.114 284.909 li
446.615 284.909 li
f
446.615 307.769 mo
574.114 307.769 574.114 151.528 701.615 151.528 cv
701.615 152.354 li
574.114 152.354 574.114 308.595 446.615 308.595 cv
446.615 307.769 li
f
446.615 307.769 mo
446.615 308.269 li
478.592 308.273 502.626 298.46 522.614 283.759 cv
552.596 261.707 573.523 228.718 598.886 201.303 cv
624.258 173.884 653.967 152.037 701.615 152.028 cv
701.615 151.528 li
701.114 151.528 li
701.114 152.354 li
701.615 152.354 li
701.615 151.854 li
669.636 151.85 645.603 161.664 625.615 176.364 cv
595.633 198.416 574.706 231.405 549.343 258.82 cv
536.664 272.53 522.884 284.847 506.33 293.736 cv
489.775 302.624 470.444 308.094 446.615 308.096 cv
446.615 308.595 li
447.114 308.595 li
447.114 307.769 li
446.615 307.769 li
446.615 308.269 li
446.615 307.769 li
446.114 307.769 li
446.114 308.595 li
446.114 309.096 li
446.615 309.096 li
478.592 309.099 502.626 299.286 522.614 284.586 cv
552.596 262.534 573.523 229.545 598.886 202.129 cv
624.258 174.71 653.967 152.863 701.615 152.854 cv
702.114 152.854 li
702.115 151.528 li
702.115 151.028 li
701.615 151.028 li
669.636 151.024 645.603 160.837 625.615 175.538 cv
595.633 197.59 574.706 230.579 549.343 257.994 cv
536.664 271.704 522.884 284.021 506.33 292.91 cv
489.775 301.798 470.444 307.268 446.615 307.269 cv
446.114 307.269 li
446.114 307.769 li
446.615 307.769 li
f
446.615 341.646 mo
574.115 341.646 574.115 307.172 701.615 307.172 cv
701.615 307.998 li
574.115 307.998 574.115 342.473 446.615 342.473 cv
446.615 341.646 li
cp
f
446.615 341.646 mo
446.615 342.146 li
510.405 342.149 542.37 333.512 574.245 324.892 cv
606.12 316.275 637.905 307.675 701.615 307.672 cv
701.615 307.172 li
701.115 307.172 li
701.115 307.998 li
701.615 307.998 li
701.615 307.498 li
637.824 307.495 605.859 316.132 573.984 324.753 cv
542.109 333.369 510.324 341.97 446.615 341.973 cv
446.615 342.473 li
447.114 342.473 li
447.114 341.646 li
446.615 341.646 li
446.615 342.146 li
446.615 341.646 li
446.115 341.646 li
446.115 342.473 li
446.115 342.973 li
446.615 342.973 li
510.405 342.976 542.37 334.339 574.245 325.718 cv
606.12 317.101 637.905 308.501 701.615 308.498 cv
702.114 308.498 li
702.114 307.172 li
702.114 306.672 li
701.615 306.672 li
637.824 306.669 605.859 315.306 573.984 323.926 cv
542.109 332.543 510.324 341.143 446.615 341.146 cv
446.115 341.146 li
446.115 341.646 li
446.615 341.646 li
cp
f
446.615 353.49 mo
574.115 353.49 574.115 353.49 701.615 353.49 cv
701.615 354.316 li
574.115 354.316 574.115 354.316 446.615 354.316 cv
446.615 353.49 li
cp
f
446.615 353.49 mo
446.615 353.99 li
574.115 353.99 574.114 353.99 701.615 353.99 cv
701.615 353.49 li
701.115 353.49 li
701.115 354.316 li
701.615 354.316 li
701.615 353.816 li
574.114 353.816 574.114 353.816 446.615 353.816 cv
446.615 354.316 li
447.114 354.316 li
447.114 353.49 li
446.615 353.49 li
446.615 353.99 li
446.615 353.49 li
446.115 353.49 li
446.115 354.316 li
446.115 354.816 li
446.615 354.816 li
574.115 354.816 574.114 354.816 701.615 354.816 cv
702.114 354.816 li
702.114 353.49 li
702.114 352.99 li
701.615 352.99 li
574.114 352.99 574.114 352.99 446.615 352.99 cv
446.115 352.99 li
446.115 353.49 li
446.615 353.49 li
cp
f
181.615 98.3625 mo
309.115 98.3625 309.115 151.668 436.615 151.668 cv
436.615 154.973 li
309.115 154.973 309.115 101.668 181.615 101.668 cv
181.615 98.3625 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 156.625 mo
574.115 156.625 574.115 51.1168 701.615 51.1168 cv
701.615 51.7778 li
574.115 51.7778 574.115 157.286 446.615 157.286 cv
446.615 156.625 li
cp
f
446.615 156.625 mo
446.615 157.125 li
478.558 157.127 502.555 150.512 522.54 140.587 cv
552.519 125.698 573.461 103.41 598.814 84.9041 cv
624.17 66.3971 653.906 51.6235 701.615 51.6167 cv
701.615 51.1167 li
701.115 51.1168 li
701.115 51.7778 li
701.615 51.7778 li
701.615 51.2778 li
669.671 51.2763 645.674 57.8911 625.689 67.8156 cv
595.709 82.7054 574.768 104.993 549.415 123.499 cv
524.058 142.006 494.323 156.779 446.615 156.786 cv
446.615 157.286 li
447.114 157.286 li
447.114 156.625 li
446.615 156.625 li
446.615 157.125 li
446.615 156.625 li
446.115 156.625 li
446.115 157.286 li
446.115 157.786 li
446.615 157.786 li
478.558 157.788 502.555 151.173 522.54 141.248 cv
552.519 126.359 573.461 104.071 598.814 85.5651 cv
624.17 67.0582 653.906 52.2846 701.615 52.2778 cv
702.114 52.2778 li
702.114 51.1168 li
702.114 50.6168 li
701.615 50.6168 li
669.671 50.6153 645.674 57.2301 625.689 67.1546 cv
595.709 82.0444 574.768 104.332 549.415 122.838 cv
524.058 141.345 494.323 156.118 446.615 156.125 cv
446.114 156.125 li
446.115 156.625 li
446.615 156.625 li
cp
f
446.615 232.036 mo
574.114 232.036 574.114 256.888 701.615 256.888 cv
701.615 257.549 li
574.114 257.549 574.114 232.697 446.615 232.697 cv
446.615 232.036 li
f
446.615 232.036 mo
446.615 232.536 li
510.335 232.538 542.144 238.741 574.019 244.953 cv
605.894 251.167 637.835 257.389 701.615 257.388 cv
701.615 256.888 li
701.114 256.888 li
701.114 257.549 li
701.615 257.549 li
701.615 257.049 li
637.893 257.047 606.084 250.844 574.21 244.632 cv
542.334 238.418 510.394 232.196 446.615 232.197 cv
446.615 232.697 li
447.114 232.697 li
447.114 232.036 li
446.615 232.036 li
446.615 232.536 li
446.615 232.036 li
446.114 232.036 li
446.114 232.697 li
446.114 233.197 li
446.615 233.197 li
510.335 233.199 542.144 239.402 574.019 245.614 cv
605.894 251.828 637.835 258.05 701.615 258.049 cv
702.115 258.049 li
702.115 256.888 li
702.115 256.388 li
701.615 256.388 li
637.893 256.386 606.084 250.183 574.21 243.971 cv
542.334 237.757 510.394 231.535 446.615 231.536 cv
446.114 231.536 li
446.114 232.036 li
446.615 232.036 li
f
446.615 192.265 mo
574.115 192.265 574.115 139.024 701.615 139.024 cv
701.615 139.685 li
574.115 139.685 574.115 192.926 446.615 192.926 cv
446.615 192.265 li
cp
f
446.615 192.265 mo
446.615 192.765 li
510.43 192.771 542.434 179.419 574.307 166.106 cv
606.184 152.799 637.93 139.53 701.615 139.524 cv
701.615 139.024 li
701.115 139.024 li
701.115 139.685 li
701.615 139.685 li
701.615 139.185 li
637.799 139.178 605.795 152.53 573.922 165.844 cv
542.045 179.151 510.299 192.42 446.615 192.426 cv
446.615 192.926 li
447.114 192.926 li
447.114 192.265 li
446.615 192.265 li
446.615 192.765 li
446.615 192.265 li
446.115 192.265 li
446.115 192.926 li
446.115 193.426 li
446.615 193.426 li
510.43 193.432 542.434 180.08 574.307 166.767 cv
606.184 153.46 637.93 140.191 701.615 140.185 cv
702.114 140.185 li
702.114 139.024 li
702.114 138.524 li
701.615 138.524 li
637.799 138.517 605.795 151.869 573.922 165.183 cv
542.045 178.49 510.299 191.759 446.615 191.765 cv
446.115 191.765 li
446.115 192.265 li
446.615 192.265 li
cp
f
446.615 238.757 mo
574.114 238.757 574.114 297.146 701.615 297.146 cv
701.615 297.807 li
574.114 297.807 574.114 239.418 446.615 239.418 cv
446.615 238.757 li
f
446.615 238.757 mo
446.615 239.257 li
510.292 239.264 542.028 253.812 573.906 268.406 cv
605.778 283.007 637.792 297.654 701.615 297.646 cv
701.615 297.146 li
701.114 297.146 li
701.114 297.807 li
701.615 297.807 li
701.615 297.308 li
637.937 297.3 606.201 282.752 574.323 268.158 cv
542.451 253.557 510.437 238.91 446.615 238.918 cv
446.615 239.418 li
447.114 239.418 li
447.114 238.757 li
446.615 238.757 li
446.615 239.257 li
446.615 238.757 li
446.114 238.757 li
446.114 239.418 li
446.114 239.918 li
446.615 239.918 li
510.292 239.925 542.028 254.473 573.906 269.067 cv
605.778 283.668 637.792 298.314 701.615 298.307 cv
702.115 298.307 li
702.115 297.146 li
702.115 296.646 li
701.615 296.646 li
637.937 296.639 606.201 282.091 574.323 267.497 cv
542.451 252.896 510.437 238.249 446.615 238.257 cv
446.114 238.257 li
446.114 238.757 li
446.615 238.757 li
f
446.615 249.608 mo
574.114 249.608 574.114 345.668 701.615 345.668 cv
701.615 346.329 li
574.114 346.329 574.114 250.269 446.615 250.269 cv
446.615 249.608 li
f
446.615 249.608 mo
446.615 250.108 li
478.427 250.109 502.251 256.096 522.112 265.073 cv
551.901 278.535 572.793 298.767 598.242 315.69 cv
623.687 332.612 653.708 346.174 701.615 346.168 cv
701.615 345.668 li
701.114 345.668 li
701.114 346.329 li
701.615 346.329 li
701.615 345.829 li
669.801 345.827 645.978 339.84 626.117 330.864 cv
596.328 317.402 575.436 297.17 549.987 280.247 cv
524.541 263.325 494.521 249.763 446.615 249.769 cv
446.615 250.269 li
447.114 250.269 li
447.114 249.608 li
446.615 249.608 li
446.615 250.108 li
446.615 249.608 li
446.114 249.608 li
446.114 250.269 li
446.114 250.769 li
446.615 250.769 li
478.427 250.77 502.251 256.757 522.112 265.734 cv
551.901 279.196 572.793 299.428 598.242 316.351 cv
623.687 333.273 653.708 346.834 701.615 346.828 cv
702.115 346.828 li
702.115 345.668 li
702.115 345.168 li
701.615 345.168 li
669.801 345.166 645.978 339.179 626.117 330.203 cv
596.328 316.741 575.436 296.509 549.987 279.586 cv
524.541 262.664 494.521 249.102 446.615 249.108 cv
446.114 249.108 li
446.114 249.608 li
446.615 249.608 li
f
181.615 121.498 mo
309.115 121.498 309.115 292.346 436.615 292.346 cv
436.615 295.651 li
309.115 295.651 309.115 124.803 181.615 124.803 cv
181.615 121.498 li
cp
f
446.615 308.595 mo
574.114 308.595 574.114 152.354 701.615 152.354 cv
701.615 155.659 li
574.114 155.659 574.114 311.901 446.615 311.901 cv
446.615 308.595 li
f
181.615 267.346 mo
309.115 267.346 309.115 318.786 436.615 318.786 cv
436.615 322.091 li
309.115 322.091 309.115 270.651 181.615 270.651 cv
181.615 267.346 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 333.108 mo
574.115 333.108 574.115 264.435 701.615 264.435 cv
701.615 266.087 li
574.115 266.087 574.115 334.761 446.615 334.761 cv
446.615 333.108 li
cp
f
446.615 342.473 mo
574.115 342.473 574.115 307.998 701.615 307.998 cv
701.615 309.651 li
574.115 309.651 574.115 344.125 446.615 344.125 cv
446.615 342.473 li
cp
f
181.615 101.668 mo
309.115 101.668 309.115 154.973 436.615 154.973 cv
436.615 158.278 li
309.115 158.278 309.115 104.973 181.615 104.973 cv
181.615 101.668 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 157.286 mo
574.115 157.286 574.115 51.7778 701.615 51.7778 cv
701.615 55.0829 li
574.115 55.0829 574.115 160.591 446.615 160.591 cv
446.615 157.286 li
cp
f
181.615 176.244 mo
309.115 176.244 309.115 168.193 436.615 168.193 cv
436.615 171.498 li
309.115 171.498 309.115 179.549 181.615 179.549 cv
181.615 176.244 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 205.596 mo
446.615 202.29 li
505.446 202.29 537.133 199.209 566.724 195.891 cv
565.937 197.084 565.151 198.272 564.361 199.46 cv
535.431 202.676 503.882 205.596 446.615 205.596 cv
.125002 .180667 .0336919 0 cmyk
f
564.361 199.46 mo
565.151 198.272 565.937 197.084 566.724 195.891 cv
566.9 195.871 567.077 195.851 567.253 195.831 cv
566.471 197.021 565.683 198.215 564.898 199.4 cv
564.718 199.42 564.542 199.44 564.361 199.46 cv
.532555 .937102 .0736706 .00384527 cmyk
f
564.898 199.4 mo
565.683 198.215 566.471 197.021 567.253 195.831 cv
567.449 195.809 567.644 195.787 567.839 195.765 cv
567.056 196.959 566.275 198.145 565.489 199.334 cv
565.292 199.356 565.095 199.378 564.898 199.4 cv
.678645 .290715 .143587 0 cmyk
f
565.489 199.334 mo
566.275 198.145 567.056 196.959 567.839 195.765 cv
568.249 195.719 568.66 195.673 569.069 195.627 cv
568.289 196.818 567.507 198.009 566.724 199.196 cv
566.313 199.242 565.9 199.288 565.489 199.334 cv
.793973 1 .278019 .337499 cmyk
f
579.36 197.766 mo
579.684 197.272 580.003 196.786 580.328 196.293 cv
580.738 196.698 581.16 197.113 581.571 197.518 cv
580.835 197.6 580.094 197.683 579.36 197.766 cv
582.578 197.405 mo
581.974 196.813 581.369 196.218 580.767 195.624 cv
581.08 195.149 581.394 194.672 581.707 194.197 cv
589.178 193.36 596.788 192.538 604.935 191.777 cv
603.744 192.978 602.565 194.192 601.395 195.42 cv
594.877 196.053 588.676 196.723 582.578 197.405 cv
.125002 .180667 .0336919 0 cmyk
f
601.395 195.42 mo
602.565 194.192 603.744 192.978 604.935 191.777 cv
605.286 191.745 605.627 191.713 605.979 191.681 cv
604.768 192.881 603.568 194.097 602.38 195.325 cv
602.051 195.356 601.722 195.388 601.395 195.42 cv
.532555 .937102 .0736706 .00384527 cmyk
f
602.38 195.325 mo
603.568 194.097 604.768 192.881 605.979 191.681 cv
606.284 191.653 606.598 191.624 606.904 191.596 cv
605.68 192.795 604.466 194.012 603.266 195.24 cv
602.969 195.268 602.675 195.296 602.38 195.325 cv
.678645 .290715 .143587 0 cmyk
f
603.266 195.24 mo
604.466 194.012 605.68 192.795 606.904 191.596 cv
607.479 191.544 608.053 191.492 608.633 191.44 cv
607.386 192.64 606.157 193.852 604.935 195.083 cv
604.376 195.135 603.82 195.187 603.266 195.24 cv
.793973 1 .278019 .337499 cmyk
f
618.202 193.948 mo
619.675 192.708 621.17 191.493 622.686 190.307 cv
643.196 188.83 667.885 187.825 701.365 187.82 cv
701.365 187.82 li
701.365 191.125 li
665.406 191.131 639.594 192.289 618.202 193.948 cv
.125002 .180667 .0336919 0 cmyk
f
604.935 195.083 mo
606.157 193.852 607.386 192.64 608.633 191.44 cv
609.649 191.35 610.671 191.26 611.705 191.172 cv
610.402 192.368 609.114 193.584 607.84 194.816 cv
606.864 194.904 605.896 194.993 604.935 195.083 cv
.532555 .937102 .0736706 .00384527 cmyk
f
181.615 104.973 mo
309.115 104.973 309.115 158.278 436.615 158.278 cv
436.615 161.583 li
309.115 161.583 309.115 108.278 181.615 108.278 cv
181.615 104.973 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 239.418 mo
574.114 239.418 574.114 297.807 701.615 297.807 cv
701.615 301.113 li
574.114 301.113 574.114 242.723 446.615 242.723 cv
446.615 239.418 li
f
181.615 179.549 mo
309.115 179.549 309.115 171.498 436.615 171.498 cv
436.615 174.803 li
309.115 174.803 309.115 182.854 181.615 182.854 cv
181.615 179.549 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 192.926 mo
574.115 192.926 574.115 139.685 701.615 139.685 cv
701.615 142.99 li
574.115 142.99 574.115 196.231 446.615 196.231 cv
446.615 192.926 li
cp
f
181.615 270.651 mo
309.115 270.651 309.115 322.091 436.615 322.091 cv
436.615 325.396 li
309.115 325.396 309.115 273.956 181.615 273.956 cv
181.615 270.651 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 334.761 mo
574.115 334.761 574.115 266.087 701.615 266.087 cv
701.615 266.913 li
574.115 266.913 574.115 335.587 446.615 335.587 cv
446.615 334.761 li
cp
f
446.615 334.761 mo
446.615 335.261 li
510.452 335.27 542.482 318.036 574.352 300.864 cv
606.232 283.699 637.952 266.596 701.615 266.587 cv
701.615 266.087 li
701.115 266.087 li
701.115 266.913 li
701.615 266.913 li
701.615 266.413 li
637.777 266.404 605.747 283.638 573.877 300.81 cv
541.997 317.975 510.277 335.078 446.615 335.087 cv
446.615 335.587 li
447.114 335.587 li
447.114 334.761 li
446.615 334.761 li
446.615 335.261 li
446.615 334.761 li
446.115 334.761 li
446.115 335.587 li
446.115 336.087 li
446.615 336.087 li
510.452 336.096 542.482 318.862 574.352 301.69 cv
606.232 284.525 637.952 267.422 701.615 267.413 cv
702.114 267.413 li
702.114 266.087 li
702.114 265.587 li
701.615 265.587 li
637.777 265.578 605.747 282.812 573.877 299.984 cv
541.997 317.149 510.277 334.252 446.615 334.261 cv
446.115 334.261 li
446.115 334.761 li
446.615 334.761 li
cp
f
446.615 311.901 mo
574.114 311.901 574.114 155.659 701.615 155.659 cv
701.615 156.485 li
574.114 156.485 574.114 312.727 446.615 312.727 cv
446.615 311.901 li
f
446.615 311.901 mo
446.615 312.401 li
478.592 312.404 502.626 302.591 522.614 287.891 cv
552.596 265.839 573.523 232.85 598.886 205.434 cv
624.258 178.015 653.967 156.168 701.615 156.159 cv
701.615 155.659 li
701.114 155.659 li
701.114 156.485 li
701.615 156.485 li
701.615 155.985 li
669.636 155.982 645.603 165.795 625.615 180.495 cv
595.633 202.547 574.706 235.536 549.343 262.952 cv
536.664 276.661 522.884 288.979 506.33 297.868 cv
489.775 306.756 470.444 312.226 446.615 312.227 cv
446.615 312.727 li
447.114 312.727 li
447.114 311.901 li
446.615 311.901 li
446.615 312.401 li
446.615 311.901 li
446.114 311.901 li
446.114 312.727 li
446.114 313.227 li
446.615 313.227 li
478.592 313.23 502.626 303.417 522.614 288.717 cv
552.596 266.665 573.523 233.676 598.886 206.261 cv
624.258 178.841 653.967 156.994 701.615 156.985 cv
702.115 156.985 li
702.115 155.659 li
702.115 155.159 li
701.615 155.159 li
669.636 155.156 645.603 164.969 625.615 179.669 cv
595.633 201.721 574.706 234.71 549.343 262.125 cv
536.664 275.835 522.884 288.152 506.33 297.041 cv
489.775 305.93 470.444 311.399 446.615 311.401 cv
446.114 311.401 li
446.114 311.901 li
446.615 311.901 li
f
446.615 344.125 mo
574.115 344.125 574.115 309.651 701.615 309.651 cv
701.615 310.477 li
574.115 310.477 574.115 344.952 446.615 344.952 cv
446.615 344.125 li
cp
f
446.615 344.125 mo
446.615 344.625 li
510.405 344.628 542.37 335.991 574.245 327.371 cv
606.12 318.754 637.905 310.154 701.615 310.151 cv
701.615 309.651 li
701.115 309.651 li
701.115 310.477 li
701.615 310.477 li
701.615 309.977 li
637.824 309.974 605.859 318.611 573.984 327.232 cv
542.109 335.848 510.324 344.449 446.615 344.452 cv
446.615 344.952 li
447.114 344.952 li
447.114 344.125 li
446.615 344.125 li
446.615 344.625 li
446.615 344.125 li
446.115 344.125 li
446.115 344.952 li
446.115 345.451 li
446.615 345.451 li
510.405 345.454 542.37 336.817 574.245 328.197 cv
606.12 319.58 637.905 310.98 701.615 310.977 cv
702.114 310.977 li
702.114 309.651 li
702.114 309.151 li
701.615 309.151 li
637.824 309.148 605.859 317.785 573.984 326.405 cv
542.109 335.022 510.324 343.622 446.615 343.625 cv
446.115 343.625 li
446.115 344.125 li
446.615 344.125 li
cp
f
446.615 354.316 mo
574.115 354.316 574.115 354.316 701.615 354.316 cv
701.615 355.142 li
574.115 355.142 574.115 355.142 446.615 355.142 cv
446.615 354.316 li
cp
f
446.615 354.316 mo
446.615 354.816 li
574.115 354.816 574.114 354.816 701.615 354.816 cv
701.615 354.316 li
701.115 354.316 li
701.115 355.142 li
701.615 355.142 li
701.615 354.642 li
574.114 354.642 574.114 354.642 446.615 354.642 cv
446.615 355.142 li
447.114 355.142 li
447.114 354.316 li
446.615 354.316 li
446.615 354.816 li
446.615 354.316 li
446.115 354.316 li
446.115 355.142 li
446.115 355.642 li
446.615 355.642 li
574.115 355.642 574.114 355.642 701.615 355.642 cv
702.114 355.642 li
702.114 354.316 li
702.114 353.816 li
701.615 353.816 li
574.114 353.816 574.114 353.816 446.615 353.816 cv
446.115 353.816 li
446.115 354.316 li
446.615 354.316 li
cp
f
181.615 247.515 mo
309.115 247.515 309.115 211.159 436.615 211.159 cv
436.615 214.464 li
309.115 214.464 309.115 250.82 181.615 250.82 cv
181.615 247.515 li
cp
f
446.615 160.591 mo
574.115 160.591 574.115 55.0829 701.615 55.0829 cv
701.615 56.7354 li
574.115 56.7354 574.115 162.244 446.615 162.244 cv
446.615 160.591 li
cp
f
446.615 250.269 mo
574.114 250.269 574.114 346.329 701.615 346.329 cv
701.615 347.981 li
574.114 347.981 574.114 251.922 446.615 251.922 cv
446.615 250.269 li
f
181.615 182.854 mo
309.115 182.854 309.115 174.803 436.615 174.803 cv
436.615 178.108 li
309.115 178.108 309.115 186.159 181.615 186.159 cv
181.615 182.854 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 208.901 mo
446.615 205.596 li
503.882 205.596 535.431 202.676 564.361 199.46 cv
563.567 200.654 562.772 201.842 561.974 203.029 cv
533.681 206.139 502.31 208.901 446.615 208.901 cv
.125002 .180667 .0336919 0 cmyk
f
561.974 203.029 mo
562.772 201.842 563.567 200.654 564.361 199.46 cv
564.542 199.44 564.718 199.42 564.898 199.4 cv
564.107 200.594 563.317 201.781 562.522 202.968 cv
562.336 202.989 562.159 203.008 561.974 203.029 cv
.532555 .937102 .0736706 .00384527 cmyk
f
562.522 202.968 mo
563.317 201.781 564.107 200.594 564.898 199.4 cv
565.095 199.378 565.292 199.356 565.489 199.334 cv
564.701 200.525 563.909 201.718 563.118 202.903 cv
562.921 202.924 562.719 202.947 562.522 202.968 cv
.678645 .290715 .143587 0 cmyk
f
563.118 202.903 mo
563.909 201.718 564.701 200.525 565.489 199.334 cv
565.9 199.288 566.313 199.242 566.724 199.196 cv
565.937 200.389 565.151 201.577 564.361 202.765 cv
563.948 202.811 563.532 202.857 563.118 202.903 cv
.793973 1 .278019 .337499 cmyk
f
577.026 201.335 mo
577.805 200.142 578.58 198.957 579.36 197.766 cv
580.094 197.683 580.835 197.6 581.571 197.518 cv
582.581 198.511 583.589 199.497 584.604 200.484 cv
582.061 200.766 579.542 201.05 577.026 201.335 cv
585.625 200.372 mo
584.606 199.387 583.59 198.396 582.578 197.405 cv
588.676 196.723 594.877 196.053 601.395 195.42 cv
600.251 196.621 599.112 197.839 597.986 199.062 cv
593.763 199.487 589.666 199.926 585.625 200.372 cv
.125002 .180667 .0336919 0 cmyk
f
597.986 199.062 mo
599.112 197.839 600.251 196.621 601.395 195.42 cv
601.722 195.388 602.051 195.356 602.38 195.325 cv
601.217 196.527 600.064 197.743 598.921 198.969 cv
598.611 199 598.295 199.031 597.986 199.062 cv
.532555 .937102 .0736706 .00384527 cmyk
f
598.921 198.969 mo
600.064 197.743 601.217 196.527 602.38 195.325 cv
602.675 195.296 602.969 195.268 603.266 195.24 cv
602.091 196.442 600.928 197.657 599.774 198.884 cv
599.487 198.912 599.207 198.94 598.921 198.969 cv
.678645 .290715 .143587 0 cmyk
f
599.774 198.884 mo
600.928 197.657 602.091 196.442 603.266 195.24 cv
603.82 195.187 604.376 195.135 604.935 195.083 cv
603.744 196.283 602.565 197.498 601.395 198.725 cv
600.854 198.778 600.311 198.831 599.774 198.884 cv
.793973 1 .278019 .337499 cmyk
f
601.395 198.725 mo
602.565 197.498 603.744 196.283 604.935 195.083 cv
605.896 194.993 606.864 194.904 607.84 194.816 cv
606.6 196.016 605.376 197.23 604.161 198.46 cv
603.229 198.548 602.313 198.636 601.395 198.725 cv
.532555 .937102 .0736706 .00384527 cmyk
f
614.015 197.588 mo
615.393 196.352 616.788 195.138 618.202 193.948 cv
639.594 192.289 665.406 191.131 701.365 191.125 cv
701.365 194.43 li
663.027 194.436 636.226 195.752 614.015 197.588 cv
.125002 .180667 .0336919 0 cmyk
f
604.161 198.46 mo
605.376 197.23 606.6 196.016 607.84 194.816 cv
608.422 194.764 608.998 194.713 609.586 194.661 cv
608.323 195.86 607.08 197.071 605.844 198.303 cv
605.282 198.355 604.718 198.408 604.161 198.46 cv
.552636 .323613 .409186 .0273747 cmyk
f
181.615 325.396 mo
309.115 325.396 309.115 230.99 436.615 230.99 cv
436.615 234.295 li
309.115 234.295 309.115 328.702 181.615 328.702 cv
181.615 325.396 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 162.244 mo
574.115 162.244 574.115 56.7354 701.615 56.7354 cv
701.615 60.0405 li
574.115 60.0405 574.115 165.549 446.615 165.549 cv
446.615 162.244 li
cp
f
181.615 273.956 mo
309.115 273.956 309.115 325.396 436.615 325.396 cv
436.615 328.702 li
309.115 328.702 309.115 277.261 181.615 277.261 cv
181.615 273.956 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 328.977 mo
446.615 325.672 li
497.867 325.672 528.514 308.74 555.125 288.485 cv
555.876 289.01 556.626 289.537 557.371 290.066 cv
530.23 311.074 499.314 328.977 446.615 328.977 cv
561.656 286.703 mo
560.928 286.173 560.205 285.65 559.473 285.123 cv
564.349 281.295 569.115 277.381 573.881 273.463 cv
574.741 273.857 575.604 274.252 576.464 274.646 cv
571.551 278.68 566.648 282.735 561.656 286.703 cv
.0827039 .0118105 .0663462 0 cmyk
f
560.975 287.244 mo
560.246 286.716 559.514 286.189 558.781 285.664 cv
559.012 285.484 559.242 285.304 559.473 285.123 cv
560.205 285.65 560.928 286.173 561.656 286.703 cv
561.426 286.886 561.204 287.062 560.975 287.244 cv
.48127 .12842 .425422 0 cmyk
f
560.131 287.91 mo
559.399 287.382 558.663 286.854 557.927 286.33 cv
558.211 286.109 558.498 285.886 558.781 285.664 cv
559.514 286.189 560.246 286.716 560.975 287.244 cv
560.693 287.466 560.413 287.688 560.131 287.91 cv
.449073 .761257 .0835584 .000976577 cmyk
f
581.31 270.685 mo
580.442 270.291 579.573 269.896 578.708 269.502 cv
585.236 264.16 591.829 258.871 598.757 253.858 cv
600.003 254.072 601.253 254.282 602.522 254.492 cv
595.131 259.63 588.169 265.11 581.31 270.685 cv
612.527 247.946 mo
611.095 247.738 609.683 247.527 608.286 247.313 cv
614.83 243.071 621.733 239.139 629.212 235.666 cv
630.306 236.281 631.415 236.886 632.534 237.476 cv
625.399 240.585 618.786 244.117 612.527 247.946 cv
633.691 236.978 mo
632.548 236.388 631.414 235.783 630.296 235.168 cv
649.277 226.533 671.918 220.904 701.365 220.871 cv
701.365 224.176 li
673.651 224.207 651.97 229.193 633.691 236.978 cv
.0827039 .0118105 .0663462 0 cmyk
f
608.92 250.209 mo
607.555 250.001 606.206 249.789 604.871 249.575 cv
605.998 248.813 607.138 248.057 608.286 247.313 cv
609.683 247.527 611.095 247.738 612.527 247.946 cv
611.313 248.689 610.108 249.445 608.92 250.209 cv
.782193 .986114 .289006 .181125 cmyk
f
608.093 250.743 mo
606.741 250.535 605.408 250.323 604.086 250.109 cv
604.345 249.932 604.611 249.751 604.871 249.575 cv
606.206 249.789 607.555 250.001 608.92 250.209 cv
608.645 250.386 608.367 250.565 608.093 250.743 cv
.449073 .761257 .0835584 .000976577 cmyk
f
580.354 271.462 mo
579.487 271.068 578.623 270.675 577.758 270.28 cv
578.074 270.021 578.392 269.76 578.708 269.502 cv
579.573 269.896 580.442 270.291 581.31 270.685 cv
580.993 270.942 580.671 271.204 580.354 271.462 cv
f
577.758 273.585 mo
576.897 273.191 576.032 272.796 575.172 272.402 cv
576.032 271.695 576.897 270.985 577.758 270.28 cv
578.623 270.675 579.487 271.068 580.354 271.462 cv
579.487 272.169 578.623 272.876 577.758 273.585 cv
f
559.442 288.452 mo
558.706 287.923 557.968 287.397 557.227 286.873 cv
557.459 286.693 557.695 286.51 557.927 286.33 cv
558.663 286.854 559.399 287.382 560.131 287.91 cv
559.904 288.089 559.669 288.274 559.442 288.452 cv
.48127 .12842 .425422 0 cmyk
f
181.615 277.261 mo
309.115 277.261 309.115 328.702 436.615 328.702 cv
436.615 332.007 li
309.115 332.007 309.115 280.566 181.615 280.566 cv
181.615 277.261 li
cp
f
446.615 285.735 mo
574.114 285.735 574.114 90.0616 701.615 90.0616 cv
701.615 91.1634 li
574.114 91.1634 574.114 286.837 446.615 286.837 cv
446.615 285.735 li
f
446.615 335.587 mo
574.115 335.587 574.115 266.913 701.615 266.913 cv
701.615 268.015 li
574.115 268.015 574.115 336.689 446.615 336.689 cv
446.615 335.587 li
cp
f
446.615 312.727 mo
574.114 312.727 574.114 156.485 701.615 156.485 cv
701.615 157.587 li
574.114 157.587 574.114 313.829 446.615 313.829 cv
446.615 312.727 li
f
181.615 108.278 mo
309.115 108.278 309.115 161.583 436.615 161.583 cv
436.615 164.888 li
309.115 164.888 309.115 111.583 181.615 111.583 cv
181.615 108.278 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 212.206 mo
446.615 208.901 li
502.31 208.901 533.681 206.139 561.974 203.029 cv
561.171 204.222 560.365 205.413 559.557 206.598 cv
531.881 209.599 500.73 212.206 446.615 212.206 cv
.0553902 .148379 0 0 cmyk
f
559.557 206.598 mo
560.365 205.413 561.171 204.222 561.974 203.029 cv
562.159 203.008 562.336 202.989 562.522 202.968 cv
561.724 204.161 560.921 205.353 560.118 206.537 cv
559.932 206.557 559.744 206.578 559.557 206.598 cv
.432929 .877256 .010956 9.15541e-05 cmyk
f
560.118 206.537 mo
560.921 205.353 561.724 204.161 562.522 202.968 cv
562.719 202.947 562.921 202.924 563.118 202.903 cv
562.321 204.097 561.524 205.285 560.722 206.471 cv
560.52 206.493 560.321 206.515 560.118 206.537 cv
.601556 .231968 .0978103 0 cmyk
f
560.722 206.471 mo
561.524 205.285 562.321 204.097 563.118 202.903 cv
563.532 202.857 563.948 202.811 564.361 202.765 cv
563.567 203.959 562.772 205.147 561.974 206.334 cv
561.559 206.38 561.139 206.426 560.722 206.471 cv
.755795 1 .266514 .209964 cmyk
f
561.974 206.334 mo
562.772 205.147 563.567 203.959 564.361 202.765 cv
564.624 202.736 564.888 202.706 565.151 202.677 cv
564.362 203.867 563.565 205.062 562.772 206.246 cv
562.504 206.276 562.242 206.304 561.974 206.334 cv
.477119 .285435 .362341 .00686656 cmyk
f
588.717 203.339 mo
587.682 202.355 586.651 201.364 585.625 200.372 cv
589.666 199.926 593.763 199.487 597.986 199.062 cv
596.877 200.268 595.78 201.48 594.686 202.705 cv
592.673 202.914 590.688 203.125 588.717 203.339 cv
.0553902 .148379 0 0 cmyk
f
594.686 202.705 mo
595.78 201.48 596.877 200.268 597.986 199.062 cv
598.295 199.031 598.611 199 598.921 198.969 cv
597.797 200.174 596.687 201.386 595.58 202.612 cv
595.282 202.643 594.983 202.674 594.686 202.705 cv
.432929 .877256 .010956 9.15541e-05 cmyk
f
595.58 202.612 mo
596.687 201.386 597.797 200.174 598.921 198.969 cv
599.207 198.94 599.487 198.912 599.774 198.884 cv
598.641 200.089 597.521 201.302 596.405 202.528 cv
596.127 202.556 595.857 202.584 595.58 202.612 cv
.601556 .231968 .0978103 0 cmyk
f
596.405 202.528 mo
597.521 201.302 598.641 200.089 599.774 198.884 cv
600.311 198.831 600.854 198.778 601.395 198.725 cv
600.251 199.926 599.112 201.144 597.986 202.367 cv
597.458 202.421 596.93 202.474 596.405 202.528 cv
.755795 1 .266514 .209964 cmyk
f
597.986 202.367 mo
599.112 201.144 600.251 199.926 601.395 198.725 cv
602.313 198.636 603.229 198.548 604.161 198.46 cv
602.974 199.662 601.799 200.877 600.635 202.104 cv
599.745 202.192 598.864 202.279 597.986 202.367 cv
.432929 .877256 .010956 9.15541e-05 cmyk
f
600.635 202.104 mo
601.799 200.877 602.974 199.662 604.161 198.46 cv
604.718 198.408 605.282 198.355 605.844 198.303 cv
604.642 199.501 603.446 200.72 602.267 201.946 cv
601.72 201.998 601.178 202.051 600.635 202.104 cv
.477119 .285435 .362341 .00686656 cmyk
f
574.699 204.904 mo
575.473 203.716 576.251 202.523 577.026 201.335 cv
579.542 201.05 582.061 200.766 584.604 200.484 cv
585.628 201.479 586.649 202.464 587.68 203.451 cv
583.295 203.93 578.998 204.416 574.699 204.904 cv
610.069 201.229 mo
611.37 199.995 612.682 198.783 614.015 197.588 cv
636.226 195.752 663.027 194.436 701.365 194.43 cv
701.365 197.735 li
660.727 197.742 633.057 199.219 610.069 201.229 cv
.0553902 .148379 0 0 cmyk
f
602.267 201.946 mo
603.446 200.72 604.642 199.501 605.844 198.303 cv
606.252 198.266 606.661 198.228 607.071 198.191 cv
605.849 199.391 604.642 200.604 603.443 201.833 cv
603.053 201.87 602.654 201.908 602.267 201.946 cv
.477119 .285435 .362341 .00686656 cmyk
f
181.615 186.159 mo
309.115 186.159 309.115 178.108 436.615 178.108 cv
436.615 181.413 li
309.115 181.413 309.115 189.464 181.615 189.464 cv
181.615 186.159 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 165.549 mo
574.115 165.549 574.115 60.0405 701.615 60.0405 cv
701.615 63.3456 li
574.115 63.3456 574.115 168.854 446.615 168.854 cv
446.615 165.549 li
cp
f
181.615 328.702 mo
309.115 328.702 309.115 234.295 436.615 234.295 cv
436.615 237.6 li
309.115 237.6 309.115 332.007 181.615 332.007 cv
181.615 328.702 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 168.854 mo
574.115 168.854 574.115 63.3456 701.615 63.3456 cv
701.615 64.1718 li
574.115 64.1718 574.115 169.68 446.615 169.68 cv
446.615 168.854 li
cp
f
446.615 168.854 mo
446.615 169.354 li
478.558 169.356 502.555 162.741 522.54 152.816 cv
552.519 137.926 573.461 115.638 598.814 97.1329 cv
624.17 78.626 653.906 63.8524 701.615 63.8456 cv
701.615 63.3456 li
701.115 63.3456 li
701.115 64.1718 li
701.615 64.1718 li
701.615 63.6718 li
669.671 63.6703 645.674 70.2851 625.689 80.2097 cv
595.709 95.0994 574.768 117.387 549.415 135.893 cv
524.058 154.4 494.323 169.173 446.615 169.18 cv
446.615 169.68 li
447.114 169.68 li
447.114 168.854 li
446.615 168.854 li
446.615 169.354 li
446.615 168.854 li
446.115 168.854 li
446.115 169.68 li
446.115 170.18 li
446.615 170.18 li
478.558 170.182 502.555 163.567 522.54 153.642 cv
552.519 138.753 573.461 116.465 598.814 97.9592 cv
624.17 79.4522 653.906 64.6786 701.615 64.6718 cv
702.114 64.6718 li
702.114 63.3456 li
702.114 62.8456 li
701.615 62.8456 li
669.671 62.8441 645.674 69.4589 625.689 79.3834 cv
595.709 94.2732 574.768 116.561 549.415 135.067 cv
524.058 153.574 494.323 168.347 446.615 168.354 cv
446.114 168.354 li
446.115 168.854 li
446.615 168.854 li
cp
f
446.615 232.697 mo
574.114 232.697 574.114 257.549 701.615 257.549 cv
701.615 258.375 li
574.114 258.375 574.114 233.523 446.615 233.523 cv
446.615 232.697 li
f
446.615 232.697 mo
446.615 233.197 li
510.335 233.199 542.144 239.402 574.019 245.614 cv
605.894 251.828 637.835 258.05 701.615 258.049 cv
701.615 257.549 li
701.114 257.549 li
701.114 258.375 li
701.615 258.375 li
701.615 257.875 li
637.893 257.874 606.084 251.67 574.21 245.459 cv
542.334 239.245 510.394 233.022 446.615 233.023 cv
446.615 233.523 li
447.114 233.523 li
447.114 232.697 li
446.615 232.697 li
446.615 233.197 li
446.615 232.697 li
446.114 232.697 li
446.114 233.523 li
446.114 234.024 li
446.615 234.024 li
510.335 234.025 542.144 240.228 574.019 246.44 cv
605.894 252.654 637.835 258.877 701.615 258.875 cv
702.115 258.875 li
702.115 257.549 li
702.115 257.049 li
701.615 257.049 li
637.893 257.047 606.084 250.844 574.21 244.632 cv
542.334 238.418 510.394 232.196 446.615 232.197 cv
446.114 232.197 li
446.114 232.697 li
446.615 232.697 li
f
446.615 196.231 mo
574.115 196.231 574.115 142.99 701.615 142.99 cv
701.615 143.816 li
574.115 143.816 574.115 197.057 446.615 197.057 cv
446.615 196.231 li
cp
f
446.615 196.231 mo
446.615 196.731 li
510.43 196.737 542.434 183.385 574.307 170.072 cv
606.184 156.765 637.93 143.496 701.615 143.49 cv
701.615 142.99 li
701.115 142.99 li
701.115 143.816 li
701.615 143.816 li
701.615 143.316 li
637.799 143.31 605.795 156.662 573.922 169.975 cv
542.045 183.282 510.299 196.551 446.615 196.557 cv
446.615 197.057 li
447.114 197.057 li
447.114 196.231 li
446.615 196.231 li
446.615 196.731 li
446.615 196.231 li
446.115 196.231 li
446.115 197.057 li
446.115 197.557 li
446.615 197.557 li
510.43 197.564 542.434 184.212 574.307 170.898 cv
606.184 157.591 637.93 144.322 701.615 144.316 cv
702.114 144.316 li
702.114 142.99 li
702.114 142.49 li
701.615 142.49 li
637.799 142.483 605.795 155.835 573.922 169.149 cv
542.045 182.456 510.299 195.725 446.615 195.731 cv
446.115 195.731 li
446.115 196.231 li
446.615 196.231 li
cp
f
446.615 251.922 mo
574.114 251.922 574.114 347.981 701.615 347.981 cv
701.615 348.807 li
574.114 348.807 574.114 252.748 446.615 252.748 cv
446.615 251.922 li
f
446.615 251.922 mo
446.615 252.422 li
478.427 252.423 502.251 258.41 522.112 267.387 cv
551.901 280.849 572.793 301.081 598.242 318.004 cv
623.687 334.926 653.708 348.487 701.615 348.481 cv
701.615 347.981 li
701.114 347.981 li
701.114 348.807 li
701.615 348.807 li
701.615 348.307 li
669.801 348.306 645.978 342.319 626.117 333.342 cv
596.328 319.88 575.436 299.649 549.987 282.726 cv
524.541 265.804 494.521 252.242 446.615 252.248 cv
446.615 252.748 li
447.114 252.748 li
447.114 251.922 li
446.615 251.922 li
446.615 252.422 li
446.615 251.922 li
446.114 251.922 li
446.114 252.748 li
446.114 253.248 li
446.615 253.248 li
478.427 253.249 502.251 259.236 522.112 268.213 cv
551.901 281.675 572.793 301.907 598.242 318.83 cv
623.687 335.752 653.708 349.313 701.615 349.307 cv
702.115 349.307 li
702.115 347.981 li
702.115 347.481 li
701.615 347.481 li
669.801 347.48 645.978 341.493 626.117 332.516 cv
596.328 319.054 575.436 298.822 549.987 281.899 cv
524.541 264.977 494.521 251.416 446.615 251.422 cv
446.114 251.422 li
446.114 251.922 li
446.615 251.922 li
f
181.615 124.803 mo
309.115 124.803 309.115 295.651 436.615 295.651 cv
436.615 298.956 li
309.115 298.956 309.115 128.108 181.615 128.108 cv
181.615 124.803 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 286.837 mo
574.114 286.837 574.114 91.1634 701.615 91.1634 cv
701.615 92.8159 li
574.114 92.8159 574.114 288.49 446.615 288.49 cv
446.615 286.837 li
f
446.615 313.829 mo
574.114 313.829 574.114 157.587 701.615 157.587 cv
701.615 159.24 li
574.114 159.24 574.114 315.481 446.615 315.481 cv
446.615 313.829 li
f
181.615 355.142 mo
309.115 355.142 309.115 355.142 436.615 355.142 cv
436.615 358.447 li
309.115 358.447 309.115 358.447 181.615 358.447 cv
181.615 355.142 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 315.481 mo
574.114 315.481 574.114 159.24 701.615 159.24 cv
701.615 160.892 li
574.114 160.892 574.114 317.134 446.615 317.134 cv
446.615 315.481 li
f
446.615 355.142 mo
574.115 355.142 574.115 355.142 701.615 355.142 cv
701.615 356.795 li
574.115 356.795 574.115 356.795 446.615 356.795 cv
446.615 355.142 li
cp
f
181.615 250.82 mo
309.115 250.82 309.115 214.464 436.615 214.464 cv
436.615 217.769 li
309.115 217.769 309.115 254.125 181.615 254.125 cv
181.615 250.82 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 233.523 mo
574.114 233.523 574.114 258.375 701.615 258.375 cv
701.615 260.028 li
574.114 260.028 574.114 235.176 446.615 235.176 cv
446.615 233.523 li
f
446.615 242.723 mo
574.114 242.723 574.114 301.113 701.615 301.113 cv
701.615 302.765 li
574.114 302.765 574.114 244.375 446.615 244.375 cv
446.615 242.723 li
f
181.615 332.007 mo
309.115 332.007 309.115 237.6 436.615 237.6 cv
436.615 240.905 li
309.115 240.905 309.115 335.312 181.615 335.312 cv
181.615 332.007 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 235.176 mo
574.114 235.176 574.114 260.028 701.615 260.028 cv
701.615 261.68 li
574.114 261.68 574.114 236.829 446.615 236.829 cv
446.615 235.176 li
f
446.615 252.748 mo
574.114 252.748 574.114 348.807 701.615 348.807 cv
701.615 350.46 li
574.114 350.46 574.114 254.401 446.615 254.401 cv
446.615 252.748 li
f
181.615 189.464 mo
309.115 189.464 309.115 181.413 436.615 181.413 cv
436.615 184.718 li
309.115 184.718 309.115 192.769 181.615 192.769 cv
181.615 189.464 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 169.68 mo
574.115 169.68 574.115 64.1718 701.615 64.1718 cv
701.615 65.8244 li
574.115 65.8244 574.115 171.333 446.615 171.333 cv
446.615 169.68 li
cp
f
446.615 197.057 mo
574.115 197.057 574.115 143.816 701.615 143.816 cv
701.615 145.468 li
574.115 145.468 574.115 198.71 446.615 198.71 cv
446.615 197.057 li
cp
f
181.615 335.312 mo
309.115 335.312 309.115 240.905 436.615 240.905 cv
436.615 244.21 li
309.115 244.21 309.115 338.617 181.615 338.617 cv
181.615 335.312 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 215.511 mo
446.615 212.206 li
500.73 212.206 531.881 209.599 559.557 206.598 cv
558.745 207.788 557.921 208.986 557.103 210.167 cv
530.025 213.055 499.143 215.511 446.615 215.511 cv
.118257 0 .0197147 0 cmyk
f
557.103 210.167 mo
557.921 208.986 558.745 207.788 559.557 206.598 cv
559.744 206.578 559.932 206.557 560.118 206.537 cv
559.308 207.732 558.497 208.919 557.681 210.105 cv
557.489 210.126 557.296 210.146 557.103 210.167 cv
.499031 .748196 .00274662 0 cmyk
f
557.681 210.105 mo
558.497 208.919 559.308 207.732 560.118 206.537 cv
560.321 206.515 560.52 206.493 560.722 206.471 cv
559.916 207.664 559.105 208.855 558.294 210.039 cv
558.09 210.061 557.885 210.083 557.681 210.105 cv
.60058 .0573434 .119661 0 cmyk
f
558.294 210.039 mo
559.105 208.855 559.916 207.664 560.722 206.471 cv
561.139 206.426 561.559 206.38 561.974 206.334 cv
561.171 207.527 560.365 208.718 559.557 209.903 cv
559.139 209.948 558.713 209.994 558.294 210.039 cv
.871 1 .229892 .104494 cmyk
f
559.557 209.903 mo
560.365 208.718 561.171 207.527 561.974 206.334 cv
562.242 206.304 562.504 206.276 562.772 206.246 cv
561.971 207.441 561.172 208.627 560.366 209.815 cv
560.096 209.844 559.827 209.874 559.557 209.903 cv
.515862 .108736 .365789 0 cmyk
f
560.366 209.815 mo
561.172 208.627 561.971 207.441 562.772 206.246 cv
563.171 206.202 563.567 206.158 563.965 206.114 cv
563.17 207.307 562.372 208.497 561.573 209.683 cv
561.169 209.727 560.771 209.771 560.366 209.815 cv
.499031 .748196 .00274662 0 cmyk
f
572.373 208.473 mo
573.147 207.285 573.924 206.093 574.699 204.904 cv
578.998 204.416 583.295 203.93 587.68 203.451 cv
588.716 204.442 589.766 205.437 590.812 206.418 cv
584.54 207.088 578.464 207.782 572.373 208.473 cv
591.673 206.121 mo
590.68 205.196 589.7 204.273 588.717 203.339 cv
590.688 203.125 592.673 202.914 594.686 202.705 cv
593.678 203.834 592.67 204.978 591.673 206.121 cv
.118257 0 .0197147 0 cmyk
f
591.871 206.305 mo
591.806 206.245 591.737 206.181 591.673 206.121 cv
592.67 204.978 593.678 203.834 594.686 202.705 cv
594.983 202.674 595.282 202.643 595.58 202.612 cv
594.492 203.818 593.41 205.034 592.336 206.256 cv
592.179 206.273 592.027 206.289 591.871 206.305 cv
.499031 .748196 .00274662 0 cmyk
f
592.336 206.256 mo
593.41 205.034 594.492 203.818 595.58 202.612 cv
595.857 202.584 596.127 202.556 596.405 202.528 cv
595.31 203.732 594.219 204.949 593.139 206.171 cv
592.872 206.199 592.602 206.228 592.336 206.256 cv
.60058 .0573434 .119661 0 cmyk
f
593.139 206.171 mo
594.219 204.949 595.31 203.732 596.405 202.528 cv
596.93 202.474 597.458 202.421 597.986 202.367 cv
596.877 203.573 595.78 204.785 594.686 206.01 cv
594.17 206.063 593.652 206.117 593.139 206.171 cv
.871 1 .229892 .104494 cmyk
f
594.686 206.01 mo
595.78 204.785 596.877 203.573 597.986 202.367 cv
598.864 202.279 599.745 202.192 600.635 202.104 cv
599.493 203.307 598.36 204.523 597.237 205.748 cv
596.382 205.835 595.532 205.922 594.686 206.01 cv
.499031 .748196 .00274662 0 cmyk
f
597.237 205.748 mo
598.36 204.523 599.493 203.307 600.635 202.104 cv
601.178 202.051 601.72 201.998 602.267 201.946 cv
601.109 203.149 599.966 204.361 598.827 205.588 cv
598.293 205.641 597.768 205.694 597.237 205.748 cv
.515862 .108736 .365789 0 cmyk
f
598.827 205.588 mo
599.966 204.361 601.109 203.149 602.267 201.946 cv
602.654 201.908 603.053 201.87 603.443 201.833 cv
602.274 203.033 601.109 204.252 599.96 205.476 cv
599.581 205.513 599.204 205.551 598.827 205.588 cv
f
599.96 205.476 mo
601.109 204.252 602.274 203.033 603.443 201.833 cv
604.04 201.777 604.634 201.721 605.237 201.665 cv
604.039 202.867 602.86 204.077 601.685 205.307 cv
601.11 205.363 600.53 205.419 599.96 205.476 cv
.499031 .748196 .00274662 0 cmyk
f
601.685 205.307 mo
602.86 204.077 604.039 202.867 605.237 201.665 cv
605.844 201.608 606.458 201.552 607.071 201.496 cv
605.849 202.696 604.642 203.909 603.443 205.138 cv
602.854 205.194 602.268 205.251 601.685 205.307 cv
.60058 .0573434 .119661 0 cmyk
f
606.322 204.869 mo
607.558 203.64 608.807 202.425 610.069 201.229 cv
633.057 199.219 660.727 197.742 701.365 197.735 cv
701.365 201.041 li
658.497 201.047 630.057 202.691 606.322 204.869 cv
.118257 0 .0197147 0 cmyk
f
181.615 128.108 mo
309.115 128.108 309.115 298.956 436.615 298.956 cv
436.615 302.261 li
309.115 302.261 309.115 131.413 181.615 131.413 cv
181.615 128.108 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 331.782 mo
446.615 328.977 li
499.314 328.977 530.23 311.074 557.371 290.066 cv
558.109 290.589 558.85 291.119 559.583 291.647 cv
536.449 309.815 510.893 325.996 471.528 330.823 cv
463.79 331.445 455.513 331.781 446.615 331.782 cv
.0553902 .148379 0 0 cmyk
f
446.615 332.282 mo
446.615 331.782 li
455.513 331.781 463.79 331.445 471.528 330.823 cv
463.787 331.772 455.509 332.282 446.615 332.282 cv
.601556 .231968 .0978103 0 cmyk
f
563.813 288.284 mo
563.097 287.757 562.376 287.228 561.656 286.703 cv
566.648 282.735 571.551 278.68 576.464 274.646 cv
577.329 275.041 578.188 275.434 579.054 275.828 cv
573.975 279.981 568.938 284.168 563.813 288.284 cv
.0553902 .148379 0 0 cmyk
f
563.141 288.823 mo
562.42 288.295 561.7 287.769 560.975 287.244 cv
561.204 287.062 561.426 286.886 561.656 286.703 cv
562.376 287.228 563.097 287.757 563.813 288.284 cv
563.589 288.464 563.366 288.643 563.141 288.823 cv
.477119 .285435 .362341 .00686656 cmyk
f
562.305 289.491 mo
561.583 288.963 560.858 288.436 560.131 287.91 cv
560.413 287.688 560.693 287.466 560.975 287.244 cv
561.7 287.769 562.42 288.295 563.141 288.823 cv
562.862 289.047 562.586 289.267 562.305 289.491 cv
.432929 .877256 .010956 9.15541e-05 cmyk
f
561.627 290.031 mo
560.9 289.502 560.174 288.977 559.442 288.452 cv
559.669 288.274 559.904 288.089 560.131 287.91 cv
560.858 288.436 561.583 288.963 562.305 289.491 cv
562.08 289.671 561.853 289.852 561.627 290.031 cv
.477119 .285435 .362341 .00686656 cmyk
f
560.677 290.784 mo
559.947 290.255 559.216 289.729 558.481 289.204 cv
558.804 288.951 559.12 288.705 559.442 288.452 cv
560.174 288.977 560.9 289.502 561.627 290.031 cv
561.311 290.283 560.994 290.533 560.677 290.784 cv
.601556 .231968 .0978103 0 cmyk
f
583.932 271.868 mo
583.055 271.474 582.183 271.081 581.31 270.685 cv
588.169 265.11 595.131 259.63 602.522 254.492 cv
603.816 254.705 605.132 254.917 606.454 255.125 cv
598.544 260.374 591.155 266.054 583.932 271.868 cv
.0553902 .148379 0 0 cmyk
f
582.969 272.645 mo
582.098 272.252 581.222 271.856 580.354 271.462 cv
580.671 271.204 580.993 270.942 581.31 270.685 cv
582.183 271.081 583.055 271.474 583.932 271.868 cv
583.61 272.127 583.291 272.385 582.969 272.645 cv
.432929 .877256 .010956 9.15541e-05 cmyk
f
580.354 274.767 mo
579.487 274.373 578.623 273.98 577.758 273.585 cv
578.623 272.876 579.487 272.169 580.354 271.462 cv
581.222 271.856 582.098 272.252 582.969 272.645 cv
582.098 273.349 581.222 274.06 580.354 274.767 cv
f
617.041 248.58 mo
615.513 248.373 614.012 248.162 612.527 247.946 cv
618.786 244.117 625.399 240.585 632.534 237.476 cv
633.704 238.093 634.89 238.698 636.088 239.287 cv
629.315 242.035 623.007 245.168 617.041 248.58 cv
.0553902 .148379 0 0 cmyk
f
613.197 250.843 mo
611.752 250.635 610.328 250.424 608.92 250.209 cv
610.108 249.445 611.313 248.689 612.527 247.946 cv
614.012 248.162 615.513 248.373 617.041 248.58 cv
615.742 249.322 614.465 250.075 613.197 250.843 cv
.755795 1 .266514 .209964 cmyk
f
612.321 251.377 mo
610.895 251.169 609.484 250.958 608.093 250.743 cv
608.367 250.565 608.645 250.386 608.92 250.209 cv
610.328 250.424 611.752 250.635 613.197 250.843 cv
612.906 251.02 612.611 251.199 612.321 251.377 cv
.432929 .877256 .010956 9.15541e-05 cmyk
f
610.588 252.453 mo
609.19 252.245 607.819 252.035 606.454 251.82 cv
607 251.457 607.541 251.102 608.093 250.743 cv
609.484 250.958 610.895 251.169 612.321 251.377 cv
611.742 251.733 611.162 252.093 610.588 252.453 cv
.601556 .231968 .0978103 0 cmyk
f
608.493 253.789 mo
607.138 253.582 605.79 253.369 604.465 253.156 cv
605.121 252.71 605.791 252.26 606.454 251.82 cv
607.819 252.035 609.19 252.245 610.588 252.453 cv
609.883 252.897 609.19 253.339 608.493 253.789 cv
.477119 .285435 .362341 .00686656 cmyk
f
579.054 275.828 mo
578.188 275.434 577.329 275.041 576.464 274.646 cv
576.896 274.291 577.326 273.939 577.758 273.585 cv
578.623 273.98 579.487 274.373 580.354 274.767 cv
579.921 275.121 579.487 275.474 579.054 275.828 cv
f
606.454 255.125 mo
605.132 254.917 603.816 254.705 602.522 254.492 cv
603.167 254.043 603.813 253.599 604.465 253.156 cv
605.79 253.369 607.138 253.582 608.493 253.789 cv
607.809 254.231 607.13 254.676 606.454 255.125 cv
.601556 .231968 .0978103 0 cmyk
f
559.583 291.647 mo
558.85 291.119 558.109 290.589 557.371 290.066 cv
557.74 289.781 558.114 289.49 558.481 289.204 cv
559.216 289.729 559.947 290.255 560.677 290.784 cv
560.312 291.073 559.949 291.359 559.583 291.647 cv
f
637.332 238.788 mo
636.103 238.199 634.891 237.597 633.691 236.978 cv
651.97 229.193 673.651 224.207 701.365 224.176 cv
701.365 227.481 li
675.47 227.51 654.839 231.865 637.332 238.788 cv
.0553902 .148379 0 0 cmyk
f
181.615 169.634 mo
309.115 169.634 309.115 123.363 436.615 123.363 cv
436.615 126.668 li
309.115 126.668 309.115 172.939 181.615 172.939 cv
181.615 169.634 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 113.447 mo
574.115 113.447 574.115 38.4473 701.615 38.4473 cv
701.615 39.549 li
574.115 39.549 574.115 114.549 446.615 114.549 cv
446.615 113.447 li
cp
f
446.615 125.566 mo
574.114 125.566 574.114 252.481 701.615 252.481 cv
701.615 253.583 li
574.114 253.583 574.114 126.668 446.615 126.668 cv
446.615 125.566 li
f
446.615 121.159 mo
574.115 121.159 574.115 134.617 701.615 134.617 cv
701.615 135.718 li
574.115 135.718 574.115 122.261 446.615 122.261 cv
446.615 121.159 li
cp
f
181.615 338.617 mo
309.115 338.617 309.115 244.21 436.615 244.21 cv
436.615 247.515 li
309.115 247.515 309.115 341.922 181.615 341.922 cv
181.615 338.617 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 171.333 mo
574.115 171.333 574.115 65.8244 701.615 65.8244 cv
701.615 69.1295 li
574.115 69.1295 574.115 174.638 446.615 174.638 cv
446.615 171.333 li
cp
f
181.615 341.922 mo
309.115 341.922 309.115 247.515 436.615 247.515 cv
436.615 250.82 li
309.115 250.82 309.115 345.227 181.615 345.227 cv
181.615 341.922 li
cp
f
446.615 218.816 mo
446.615 215.511 li
499.143 215.511 530.025 213.055 557.103 210.167 cv
556.273 211.365 555.444 212.55 554.606 213.736 cv
528.115 216.508 497.532 218.816 446.615 218.816 cv
.118257 0 .0197147 0 cmyk
f
554.606 213.736 mo
555.444 212.55 556.273 211.365 557.103 210.167 cv
557.296 210.146 557.489 210.126 557.681 210.105 cv
556.858 211.299 556.032 212.49 555.202 213.673 cv
555.004 213.694 554.804 213.715 554.606 213.736 cv
.499031 .748196 .00274662 0 cmyk
f
555.202 213.673 mo
556.032 212.49 556.858 211.299 557.681 210.105 cv
557.885 210.083 558.09 210.061 558.294 210.039 cv
557.474 211.234 556.652 212.423 555.826 213.607 cv
555.616 213.63 555.412 213.651 555.202 213.673 cv
.60058 .0573434 .119661 0 cmyk
f
555.826 213.607 mo
556.652 212.423 557.474 211.234 558.294 210.039 cv
558.713 209.994 559.139 209.948 559.557 209.903 cv
558.745 211.093 557.921 212.291 557.103 213.472 cv
556.678 213.517 556.253 213.562 555.826 213.607 cv
.871 1 .229892 .104494 cmyk
f
557.103 213.472 mo
557.921 212.291 558.745 211.093 559.557 209.903 cv
559.827 209.874 560.096 209.844 560.366 209.815 cv
559.556 211.008 558.741 212.2 557.925 213.384 cv
557.653 213.413 557.376 213.443 557.103 213.472 cv
.515862 .108736 .365789 0 cmyk
f
557.925 213.384 mo
558.741 212.2 559.556 211.008 560.366 209.815 cv
560.771 209.771 561.169 209.727 561.573 209.683 cv
560.766 210.88 559.963 212.063 559.15 213.252 cv
558.744 213.296 558.333 213.34 557.925 213.384 cv
.499031 .748196 .00274662 0 cmyk
f
570.043 212.042 mo
570.822 210.85 571.594 209.667 572.373 208.473 cv
578.464 207.782 584.54 207.088 590.812 206.418 cv
590.924 206.523 591.032 206.624 591.144 206.729 cv
590.205 207.81 589.27 208.898 588.34 209.989 cv
582.141 210.663 576.12 211.355 570.043 212.042 cv
.118257 0 .0197147 0 cmyk
f
588.34 209.989 mo
589.27 208.898 590.205 207.81 591.144 206.729 cv
591.284 206.861 591.431 206.997 591.572 207.129 cv
590.768 208.048 589.969 208.971 589.172 209.899 cv
588.893 209.929 588.618 209.959 588.34 209.989 cv
.499031 .748196 .00274662 0 cmyk
f
589.172 209.899 mo
589.969 208.971 590.768 208.048 591.572 207.129 cv
591.704 207.252 591.837 207.376 591.97 207.499 cv
591.295 208.27 590.626 209.039 589.956 209.815 cv
589.697 209.843 589.431 209.871 589.172 209.899 cv
.60058 .0573434 .119661 0 cmyk
f
589.956 209.815 mo
590.626 209.039 591.295 208.27 591.97 207.499 cv
592.227 207.739 592.479 207.972 592.737 208.211 cv
592.317 208.688 591.894 209.172 591.476 209.652 cv
590.966 209.706 590.464 209.76 589.956 209.815 cv
.871 1 .229892 .104494 cmyk
f
591.476 209.652 mo
591.894 209.172 592.317 208.688 592.737 208.211 cv
593.148 208.591 593.567 208.976 593.98 209.354 cv
593.97 209.366 593.958 209.38 593.947 209.392 cv
593.12 209.478 592.296 209.565 591.476 209.652 cv
.499031 .748196 .00274662 0 cmyk
f
593.947 209.392 mo
593.958 209.38 593.97 209.366 593.98 209.354 cv
593.992 209.365 594.001 209.374 594.014 209.385 cv
593.993 209.387 593.967 209.39 593.947 209.392 cv
.515862 .108736 .365789 0 cmyk
f
592.103 206.521 mo
592.026 206.45 591.947 206.376 591.871 206.305 cv
592.027 206.289 592.179 206.273 592.336 206.256 cv
592.259 206.344 592.18 206.433 592.103 206.521 cv
.499031 .748196 .00274662 0 cmyk
f
592.503 206.892 mo
592.366 206.765 592.24 206.648 592.103 206.521 cv
592.18 206.433 592.259 206.344 592.336 206.256 cv
592.602 206.228 592.872 206.199 593.139 206.171 cv
592.926 206.412 592.715 206.651 592.503 206.892 cv
.60058 .0573434 .119661 0 cmyk
f
593.272 207.603 mo
593.018 207.368 592.757 207.127 592.503 206.892 cv
592.715 206.651 592.926 206.412 593.139 206.171 cv
593.652 206.117 594.17 206.063 594.686 206.01 cv
594.214 206.538 593.741 207.071 593.272 207.603 cv
.871 1 .229892 .104494 cmyk
f
594.522 208.747 mo
594.104 208.366 593.689 207.986 593.272 207.603 cv
593.741 207.071 594.214 206.538 594.686 206.01 cv
595.532 205.922 596.382 205.835 597.237 205.748 cv
596.326 206.742 595.422 207.741 594.522 208.747 cv
.499031 .748196 .00274662 0 cmyk
f
595.099 209.272 mo
594.908 209.098 594.713 208.921 594.522 208.747 cv
595.422 207.741 596.326 206.742 597.237 205.748 cv
597.768 205.694 598.293 205.641 598.827 205.588 cv
597.709 206.793 596.603 208.005 595.502 209.23 cv
595.367 209.244 595.234 209.258 595.099 209.272 cv
.515862 .108736 .365789 0 cmyk
f
595.502 209.23 mo
596.603 208.005 597.709 206.793 598.827 205.588 cv
599.204 205.551 599.581 205.513 599.96 205.476 cv
598.832 206.678 597.71 207.895 596.599 209.118 cv
596.23 209.156 595.869 209.193 595.502 209.23 cv
f
596.599 209.118 mo
597.71 207.895 598.832 206.678 599.96 205.476 cv
600.53 205.419 601.11 205.363 601.685 205.307 cv
600.539 206.506 599.393 207.727 598.266 208.949 cv
597.708 209.005 597.152 209.062 596.599 209.118 cv
.499031 .748196 .00274662 0 cmyk
f
598.266 208.949 mo
599.393 207.727 600.539 206.506 601.685 205.307 cv
602.268 205.251 602.854 205.194 603.443 205.138 cv
602.274 206.338 601.109 207.557 599.96 208.781 cv
599.394 208.837 598.827 208.893 598.266 208.949 cv
.60058 .0573434 .119661 0 cmyk
f
594.014 209.385 mo
594.001 209.374 593.992 209.365 593.98 209.354 cv
593.567 208.976 593.148 208.591 592.737 208.211 cv
592.479 207.972 592.227 207.739 591.97 207.499 cv
591.837 207.376 591.704 207.252 591.572 207.129 cv
591.431 206.997 591.284 206.861 591.144 206.729 cv
591.032 206.624 590.924 206.523 590.812 206.418 cv
591.164 206.38 591.517 206.343 591.871 206.305 cv
591.947 206.376 592.026 206.45 592.103 206.521 cv
592.24 206.648 592.366 206.765 592.503 206.892 cv
592.757 207.127 593.018 207.368 593.272 207.603 cv
593.689 207.986 594.104 208.366 594.522 208.747 cv
594.713 208.921 594.908 209.098 595.099 209.272 cv
594.737 209.309 594.375 209.347 594.014 209.385 cv
.871 1 .229892 .104494 cmyk
f
602.741 208.51 mo
603.924 207.283 605.117 206.069 606.322 204.869 cv
630.057 202.691 658.497 201.047 701.365 201.041 cv
701.365 204.345 li
656.321 204.352 627.205 206.168 602.741 208.51 cv
.118257 0 .0197147 0 cmyk
f
181.615 192.769 mo
309.115 192.769 309.115 184.718 436.615 184.718 cv
436.615 188.024 li
309.115 188.024 309.115 196.074 181.615 196.074 cv
181.615 192.769 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 236.829 mo
574.115 236.829 574.115 261.68 701.615 261.68 cv
701.615 262.507 li
574.115 262.507 574.115 237.655 446.615 237.655 cv
446.615 236.829 li
cp
f
446.615 236.829 mo
446.615 237.329 li
510.335 237.33 542.144 243.533 574.019 249.745 cv
605.895 255.959 637.835 262.182 701.615 262.18 cv
701.615 261.68 li
701.115 261.68 li
701.115 262.507 li
701.615 262.507 li
701.615 262.007 li
637.893 262.005 606.084 255.802 574.21 249.59 cv
542.334 243.376 510.394 237.153 446.615 237.155 cv
446.615 237.655 li
447.114 237.655 li
447.114 236.829 li
446.615 236.829 li
446.615 237.329 li
446.615 236.829 li
446.115 236.829 li
446.115 237.655 li
446.115 238.155 li
446.615 238.155 li
510.335 238.156 542.144 244.36 574.019 250.572 cv
605.895 256.786 637.835 263.008 701.615 263.007 cv
702.114 263.007 li
702.114 261.68 li
702.114 261.18 li
701.615 261.18 li
637.893 261.179 606.084 254.975 574.21 248.764 cv
542.334 242.55 510.394 236.327 446.615 236.329 cv
446.115 236.329 li
446.115 236.829 li
446.615 236.829 li
cp
f
446.615 198.71 mo
574.115 198.71 574.115 145.468 701.615 145.468 cv
701.615 146.295 li
574.115 146.295 574.115 199.536 446.615 199.536 cv
446.615 198.71 li
cp
f
446.615 198.71 mo
446.615 199.21 li
510.43 199.216 542.434 185.864 574.307 172.551 cv
606.184 159.243 637.93 145.975 701.615 145.968 cv
701.615 145.468 li
701.115 145.468 li
701.115 146.295 li
701.615 146.295 li
701.615 145.795 li
637.799 145.789 605.795 159.14 573.922 172.454 cv
542.045 185.761 510.299 199.03 446.615 199.036 cv
446.615 199.536 li
447.114 199.536 li
447.114 198.71 li
446.615 198.71 li
446.615 199.21 li
446.615 198.71 li
446.115 198.71 li
446.115 199.536 li
446.115 200.036 li
446.615 200.036 li
510.43 200.042 542.434 186.691 574.307 173.377 cv
606.184 160.07 637.93 146.801 701.615 146.795 cv
702.114 146.795 li
702.114 145.468 li
702.114 144.968 li
701.615 144.968 li
637.799 144.962 605.795 158.314 573.922 171.628 cv
542.045 184.935 510.299 198.204 446.615 198.21 cv
446.115 198.21 li
446.115 198.71 li
446.615 198.71 li
cp
f
446.615 244.375 mo
574.115 244.375 574.115 302.765 701.615 302.765 cv
701.615 303.591 li
574.115 303.591 574.115 245.202 446.615 245.202 cv
446.615 244.375 li
cp
f
446.615 244.375 mo
446.615 244.875 li
510.292 244.882 542.028 259.431 573.906 274.025 cv
605.778 288.626 637.792 303.272 701.615 303.265 cv
701.615 302.765 li
701.115 302.765 li
701.115 303.591 li
701.615 303.591 li
701.615 303.091 li
637.937 303.084 606.201 288.536 574.323 273.942 cv
542.451 259.341 510.437 244.694 446.615 244.702 cv
446.615 245.202 li
447.114 245.202 li
447.114 244.375 li
446.615 244.375 li
446.615 244.875 li
446.615 244.375 li
446.115 244.375 li
446.115 245.202 li
446.115 245.701 li
446.615 245.701 li
510.292 245.709 542.028 260.257 573.906 274.851 cv
605.778 289.452 637.792 304.098 701.615 304.091 cv
702.114 304.091 li
702.114 302.765 li
702.114 302.265 li
701.615 302.265 li
637.937 302.258 606.201 287.71 574.323 273.116 cv
542.451 258.515 510.437 243.868 446.615 243.875 cv
446.115 243.875 li
446.115 244.375 li
446.615 244.375 li
cp
f
446.615 254.401 mo
574.115 254.401 574.115 350.46 701.615 350.46 cv
701.615 351.286 li
574.115 351.286 574.115 255.227 446.615 255.227 cv
446.615 254.401 li
cp
f
446.615 254.401 mo
446.615 254.901 li
478.428 254.902 502.251 260.889 522.112 269.866 cv
551.901 283.328 572.793 303.559 598.242 320.483 cv
623.687 337.404 653.708 350.966 701.615 350.96 cv
701.615 350.46 li
701.115 350.46 li
701.115 351.286 li
701.615 351.286 li
701.615 350.786 li
669.801 350.785 645.978 344.798 626.117 335.821 cv
596.328 322.359 575.436 302.128 549.987 285.204 cv
524.541 268.282 494.521 254.721 446.615 254.727 cv
446.615 255.227 li
447.114 255.227 li
447.114 254.401 li
446.615 254.401 li
446.615 254.901 li
446.615 254.401 li
446.115 254.401 li
446.115 255.227 li
446.115 255.727 li
446.615 255.727 li
478.428 255.728 502.251 261.715 522.112 270.692 cv
551.901 284.154 572.793 304.386 598.242 321.309 cv
623.687 338.231 653.708 351.792 701.615 351.786 cv
702.114 351.786 li
702.114 350.46 li
702.114 349.96 li
701.615 349.96 li
669.801 349.959 645.978 343.972 626.117 334.995 cv
596.328 321.533 575.436 301.301 549.987 284.378 cv
524.541 267.456 494.521 253.895 446.615 253.901 cv
446.115 253.901 li
446.115 254.401 li
446.615 254.401 li
cp
f
181.615 88.4473 mo
309.115 88.4473 309.115 113.447 436.615 113.447 cv
436.615 116.752 li
309.115 116.752 309.115 91.7523 181.615 91.7523 cv
181.615 88.4473 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 114.549 mo
574.115 114.549 574.115 39.549 701.615 39.549 cv
701.615 41.2015 li
574.115 41.2015 574.115 116.201 446.615 116.201 cv
446.615 114.549 li
cp
f
446.615 122.261 mo
574.115 122.261 574.115 135.718 701.615 135.718 cv
701.615 137.371 li
574.115 137.371 574.115 123.913 446.615 123.913 cv
446.615 122.261 li
cp
f
181.615 91.7523 mo
309.115 91.7523 309.115 116.752 436.615 116.752 cv
436.615 120.057 li
309.115 120.057 309.115 95.0574 181.615 95.0574 cv
181.615 91.7523 li
cp
f
446.615 116.201 mo
574.115 116.201 574.115 41.2015 701.615 41.2015 cv
701.615 42.854 li
574.115 42.854 574.115 117.854 446.615 117.854 cv
446.615 116.201 li
cp
f
446.615 123.913 mo
574.115 123.913 574.115 137.371 701.615 137.371 cv
701.615 139.024 li
574.115 139.024 574.115 125.566 446.615 125.566 cv
446.615 123.913 li
cp
f
181.615 196.074 mo
309.115 196.074 309.115 188.024 436.615 188.024 cv
436.615 191.329 li
309.115 191.329 309.115 199.379 181.615 199.379 cv
181.615 196.074 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 174.638 mo
574.115 174.638 574.115 69.1295 701.615 69.1295 cv
701.615 72.4346 li
574.115 72.4346 574.115 177.943 446.615 177.943 cv
446.615 174.638 li
cp
f
181.615 199.379 mo
309.115 199.379 309.115 191.329 436.615 191.329 cv
436.615 194.634 li
309.115 194.634 309.115 202.685 181.615 202.685 cv
181.615 199.379 li
cp
f
446.615 177.943 mo
574.115 177.943 574.115 72.4346 701.615 72.4346 cv
701.615 75.7396 li
574.115 75.7396 574.115 181.248 446.615 181.248 cv
446.615 177.943 li
cp
f
181.615 280.566 mo
309.115 280.566 309.115 332.007 436.615 332.007 cv
436.615 335.312 li
309.115 335.312 309.115 283.871 181.615 283.871 cv
181.615 280.566 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 288.49 mo
574.114 288.49 574.114 92.8159 701.615 92.8159 cv
701.615 93.9177 li
574.114 93.9177 574.114 289.591 446.615 289.591 cv
446.615 288.49 li
f
446.615 317.134 mo
574.114 317.134 574.114 160.892 701.615 160.892 cv
701.615 161.994 li
574.114 161.994 574.114 318.235 446.615 318.235 cv
446.615 317.134 li
f
446.615 344.952 mo
574.115 344.952 574.115 310.477 701.615 310.477 cv
701.615 311.579 li
574.115 311.579 574.115 346.053 446.615 346.053 cv
446.615 344.952 li
cp
f
181.615 131.413 mo
309.115 131.413 309.115 302.261 436.615 302.261 cv
436.615 305.566 li
309.115 305.566 309.115 134.718 181.615 134.718 cv
181.615 131.413 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 289.591 mo
574.114 289.591 574.114 93.9177 701.615 93.9177 cv
701.615 95.5703 li
574.114 95.5703 574.114 291.244 446.615 291.244 cv
446.615 289.591 li
f
446.615 356.795 mo
574.115 356.795 574.115 356.795 701.615 356.795 cv
701.615 358.447 li
574.115 358.447 574.115 358.447 446.615 358.447 cv
446.615 356.795 li
cp
f
181.615 95.0574 mo
309.115 95.0574 309.115 120.057 436.615 120.057 cv
436.615 123.363 li
309.115 123.363 309.115 98.3625 181.615 98.3625 cv
181.615 95.0574 li
cp
f
446.615 117.854 mo
574.115 117.854 574.115 42.854 701.615 42.854 cv
701.615 46.1591 li
574.115 46.1591 574.115 121.159 446.615 121.159 cv
446.615 117.854 li
cp
f
181.615 134.718 mo
309.115 134.718 309.115 305.566 436.615 305.566 cv
436.615 308.871 li
309.115 308.871 309.115 138.024 181.615 138.024 cv
181.615 134.718 li
cp
f
446.615 336.689 mo
574.115 336.689 574.115 268.015 701.615 268.015 cv
701.615 269.668 li
574.115 269.668 574.115 338.341 446.615 338.341 cv
446.615 336.689 li
cp
f
446.615 346.053 mo
574.115 346.053 574.115 311.579 701.615 311.579 cv
701.615 313.231 li
574.115 313.231 574.115 347.706 446.615 347.706 cv
446.615 346.053 li
cp
f
181.615 202.685 mo
309.115 202.685 309.115 194.634 436.615 194.634 cv
436.615 197.939 li
309.115 197.939 309.115 205.99 181.615 205.99 cv
181.615 202.685 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 222.121 mo
446.615 218.816 li
497.532 218.816 528.115 216.508 554.606 213.736 cv
553.759 214.933 552.911 216.121 552.056 217.305 cv
526.143 219.958 495.906 222.121 446.615 222.121 cv
.125002 .180667 .0336919 0 cmyk
f
552.056 217.305 mo
552.911 216.121 553.759 214.933 554.606 213.736 cv
554.804 213.715 555.004 213.694 555.202 213.673 cv
554.364 214.869 553.522 216.058 552.675 217.241 cv
552.467 217.263 552.265 217.283 552.056 217.305 cv
.532555 .937102 .0736706 .00384527 cmyk
f
552.675 217.241 mo
553.522 216.058 554.364 214.869 555.202 213.673 cv
555.412 213.651 555.616 213.63 555.826 213.607 cv
554.991 214.804 554.155 215.991 553.312 217.176 cv
553.1 217.197 552.887 217.219 552.675 217.241 cv
.678645 .290715 .143587 0 cmyk
f
553.312 217.176 mo
554.155 215.991 554.991 214.804 555.826 213.607 cv
556.253 213.562 556.678 213.517 557.103 213.472 cv
556.273 214.67 555.444 215.855 554.605 217.041 cv
554.176 217.086 553.743 217.131 553.312 217.176 cv
.793973 1 .278019 .337499 cmyk
f
554.605 217.041 mo
555.444 215.855 556.273 214.67 557.103 213.472 cv
557.376 213.443 557.653 213.413 557.925 213.384 cv
557.101 214.579 556.275 215.769 555.443 216.953 cv
555.165 216.982 554.885 217.012 554.605 217.041 cv
.552636 .323613 .409186 .0273747 cmyk
f
555.443 216.953 mo
556.275 215.769 557.101 214.579 557.925 213.384 cv
558.333 213.34 558.744 213.296 559.15 213.252 cv
558.334 214.447 557.514 215.637 556.69 216.821 cv
556.276 216.865 555.859 216.909 555.443 216.953 cv
.532555 .937102 .0736706 .00384527 cmyk
f
556.69 216.821 mo
557.514 215.637 558.334 214.447 559.15 213.252 cv
559.421 213.223 559.692 213.193 559.962 213.164 cv
559.151 214.356 558.332 215.551 557.515 216.733 cv
557.238 216.763 556.967 216.791 556.69 216.821 cv
.552636 .323613 .409186 .0273747 cmyk
f
557.515 216.733 mo
558.332 215.551 559.151 214.356 559.962 213.164 cv
560.367 213.12 560.768 213.076 561.172 213.032 cv
560.364 214.228 559.557 215.414 558.743 216.601 cv
558.336 216.645 557.923 216.689 557.515 216.733 cv
.532555 .937102 .0736706 .00384527 cmyk
f
567.703 215.611 mo
568.481 214.428 569.267 213.228 570.043 212.042 cv
576.12 211.355 582.141 210.663 588.34 209.989 cv
587.31 211.197 586.283 212.414 585.262 213.632 cv
579.35 214.285 573.562 214.952 567.703 215.611 cv
.125002 .180667 .0336919 0 cmyk
f
585.262 213.632 mo
586.283 212.414 587.31 211.197 588.34 209.989 cv
588.618 209.959 588.893 209.929 589.172 209.899 cv
588.134 211.108 587.101 212.323 586.072 213.543 cv
585.803 213.572 585.53 213.602 585.262 213.632 cv
.532555 .937102 .0736706 .00384527 cmyk
f
586.072 213.543 mo
587.101 212.323 588.134 211.108 589.172 209.899 cv
589.431 209.871 589.697 209.843 589.956 209.815 cv
588.914 211.022 587.874 212.239 586.842 213.458 cv
586.584 213.486 586.329 213.514 586.072 213.543 cv
.678645 .290715 .143587 0 cmyk
f
586.842 213.458 mo
587.874 212.239 588.914 211.022 589.956 209.815 cv
590.464 209.76 590.966 209.706 591.476 209.652 cv
590.424 210.861 589.381 212.073 588.34 213.295 cv
587.839 213.349 587.34 213.403 586.842 213.458 cv
.793973 1 .278019 .337499 cmyk
f
588.34 213.295 mo
589.381 212.073 590.424 210.861 591.476 209.652 cv
592.296 209.565 593.12 209.478 593.947 209.392 cv
592.872 210.599 591.807 211.812 590.745 213.035 cv
589.94 213.121 589.139 213.208 588.34 213.295 cv
.532555 .937102 .0736706 .00384527 cmyk
f
590.745 213.035 mo
591.807 211.812 592.872 210.599 593.947 209.392 cv
593.967 209.39 593.993 209.387 594.014 209.385 cv
594.261 209.611 594.508 209.837 594.756 210.062 cv
593.923 210.996 593.097 211.93 592.271 212.873 cv
591.764 212.927 591.25 212.981 590.745 213.035 cv
.552636 .323613 .409186 .0273747 cmyk
f
592.271 212.873 mo
593.097 211.93 593.923 210.996 594.756 210.062 cv
594.939 210.229 595.117 210.39 595.301 210.556 cv
594.645 211.287 593.99 212.023 593.339 212.76 cv
592.979 212.798 592.63 212.835 592.271 212.873 cv
f
593.339 212.76 mo
593.99 212.023 594.645 211.287 595.301 210.556 cv
595.574 210.803 595.848 211.051 596.122 211.297 cv
595.734 211.727 595.344 212.16 594.957 212.592 cv
594.416 212.648 593.877 212.704 593.339 212.76 cv
.532555 .937102 .0736706 .00384527 cmyk
f
594.957 212.592 mo
595.344 212.16 595.734 211.727 596.122 211.297 cv
596.396 211.543 596.675 211.792 596.95 212.037 cv
596.835 212.164 596.714 212.297 596.599 212.423 cv
596.05 212.479 595.503 212.535 594.957 212.592 cv
.678645 .290715 .143587 0 cmyk
f
595.301 209.454 mo
595.232 209.392 595.169 209.335 595.099 209.272 cv
595.234 209.258 595.367 209.244 595.502 209.23 cv
595.437 209.303 595.366 209.382 595.301 209.454 cv
.552636 .323613 .409186 .0273747 cmyk
f
595.848 209.948 mo
595.668 209.786 595.48 209.617 595.301 209.454 cv
595.366 209.382 595.437 209.303 595.502 209.23 cv
595.869 209.193 596.23 209.156 596.599 209.118 cv
596.345 209.398 596.101 209.667 595.848 209.948 cv
f
596.673 210.689 mo
596.394 210.44 596.126 210.198 595.848 209.948 cv
596.101 209.667 596.345 209.398 596.599 209.118 cv
597.152 209.062 597.708 209.005 598.266 208.949 cv
597.733 209.527 597.202 210.107 596.673 210.689 cv
.532555 .937102 .0736706 .00384527 cmyk
f
597.505 211.43 mo
597.229 211.185 596.948 210.934 596.673 210.689 cv
597.202 210.107 597.733 209.527 598.266 208.949 cv
598.827 208.893 599.394 208.837 599.96 208.781 cv
599.136 209.659 598.32 210.54 597.505 211.43 cv
.678645 .290715 .143587 0 cmyk
f
596.95 212.037 mo
596.95 212.037 li
596.675 211.792 596.396 211.543 596.122 211.297 cv
596.122 211.297 li
595.848 211.051 595.574 210.803 595.301 210.556 cv
595.301 210.556 li
595.117 210.39 594.939 210.229 594.756 210.062 cv
594.508 209.837 594.261 209.611 594.014 209.385 cv
594.375 209.347 594.737 209.309 595.099 209.272 cv
595.169 209.335 595.232 209.392 595.301 209.454 cv
595.48 209.617 595.668 209.786 595.848 209.948 cv
595.848 209.948 li
596.126 210.198 596.394 210.44 596.673 210.689 cv
596.673 210.689 li
596.948 210.934 597.229 211.185 597.505 211.43 cv
597.505 211.43 li
597.32 211.632 597.134 211.835 596.95 212.037 cv
.793973 1 .278019 .337499 cmyk
f
599.297 212.151 mo
600.435 210.927 601.585 209.71 602.741 208.51 cv
627.205 206.168 656.321 204.352 701.365 204.345 cv
701.365 207.651 li
654.191 207.658 624.484 209.649 599.297 212.151 cv
.125002 .180667 .0336919 0 cmyk
f
596.599 212.423 mo
596.714 212.297 596.835 212.164 596.95 212.037 cv
597.134 211.835 597.32 211.632 597.505 211.43 cv
598.32 210.54 599.136 209.659 599.96 208.781 cv
600.089 208.768 600.218 208.755 600.347 208.743 cv
599.209 209.945 598.079 211.162 596.959 212.386 cv
596.84 212.399 596.718 212.411 596.599 212.423 cv
.552636 .323613 .409186 .0273747 cmyk
f
181.615 138.024 mo
309.115 138.024 309.115 308.871 436.615 308.871 cv
436.615 312.176 li
309.115 312.176 309.115 141.329 181.615 141.329 cv
181.615 138.024 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 291.244 mo
574.114 291.244 574.114 95.5703 701.615 95.5703 cv
701.615 98.8751 li
574.114 98.8751 574.114 294.549 446.615 294.549 cv
446.615 291.244 li
f
181.615 283.871 mo
309.115 283.871 309.115 335.312 436.615 335.312 cv
436.615 338.617 li
309.115 338.617 309.115 287.176 181.615 287.176 cv
181.615 283.871 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 294.549 mo
574.114 294.549 574.114 98.8751 701.615 98.8751 cv
701.615 100.528 li
574.114 100.528 574.114 296.202 446.615 296.202 cv
446.615 294.549 li
f
446.615 347.706 mo
574.115 347.706 574.115 313.231 701.615 313.231 cv
701.615 314.884 li
574.115 314.884 574.115 349.358 446.615 349.358 cv
446.615 347.706 li
cp
f
181.615 254.125 mo
309.115 254.125 309.115 217.769 436.615 217.769 cv
436.615 221.074 li
309.115 221.074 309.115 257.43 181.615 257.43 cv
181.615 254.125 li
cp
f
446.615 181.248 mo
574.115 181.248 574.115 75.7396 701.615 75.7396 cv
701.615 77.3922 li
574.115 77.3922 574.115 182.901 446.615 182.901 cv
446.615 181.248 li
cp
f
446.615 199.536 mo
574.115 199.536 574.115 146.295 701.615 146.295 cv
701.615 147.947 li
574.115 147.947 574.115 201.189 446.615 201.189 cv
446.615 199.536 li
cp
f
181.615 257.43 mo
309.115 257.43 309.115 221.074 436.615 221.074 cv
436.615 224.379 li
309.115 224.379 309.115 260.735 181.615 260.735 cv
181.615 257.43 li
cp
f
446.615 182.901 mo
574.115 182.901 574.115 77.3922 701.615 77.3922 cv
701.615 80.6973 li
574.115 80.6973 574.115 186.206 446.615 186.206 cv
446.615 182.901 li
cp
f
181.615 205.99 mo
309.115 205.99 309.115 197.939 436.615 197.939 cv
436.615 201.244 li
309.115 201.244 309.115 209.295 181.615 209.295 cv
181.615 205.99 li
cp
.793973 1 .278019 .337499 cmyk
f
446.615 186.206 mo
574.115 186.206 574.115 80.6973 701.615 80.6973 cv
701.615 84.0023 li
574.115 84.0023 574.115 189.511 446.615 189.511 cv
446.615 186.206 li
cp
f
181.615 209.295 mo
309.115 209.295 309.115 201.244 436.615 201.244 cv
436.615 204.549 li
309.115 204.549 309.115 212.6 181.615 212.6 cv
181.615 209.295 li
cp
f
446.615 189.511 mo
574.115 189.511 574.115 84.0023 701.615 84.0023 cv
701.615 85.6549 li
574.115 85.6549 574.115 191.163 446.615 191.163 cv
446.615 189.511 li
cp
f
446.615 245.202 mo
574.115 245.202 574.115 303.591 701.615 303.591 cv
701.615 305.244 li
574.115 305.244 574.115 246.854 446.615 246.854 cv
446.615 245.202 li
cp
f
181.615 287.176 mo
309.115 287.176 309.115 338.617 436.615 338.617 cv
436.615 341.922 li
309.115 341.922 309.115 290.481 181.615 290.481 cv
181.615 287.176 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 349.358 mo
574.115 349.358 574.115 314.884 701.615 314.884 cv
701.615 318.189 li
574.115 318.189 574.115 352.663 446.615 352.663 cv
446.615 349.358 li
cp
f
181.615 141.329 mo
309.115 141.329 309.115 312.176 436.615 312.176 cv
436.615 315.481 li
309.115 315.481 309.115 144.634 181.615 144.634 cv
181.615 141.329 li
cp
.432929 .877256 .010956 9.15541e-05 cmyk
f
446.615 296.202 mo
574.114 296.202 574.114 100.528 701.615 100.528 cv
701.615 103.833 li
574.114 103.833 574.114 299.507 446.615 299.507 cv
446.615 296.202 li
f
181.615 290.481 mo
309.115 290.481 309.115 341.922 436.615 341.922 cv
436.615 345.227 li
309.115 345.227 309.115 293.786 181.615 293.786 cv
181.615 290.481 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 299.507 mo
574.114 299.507 574.114 103.833 701.615 103.833 cv
701.615 104.659 li
574.114 104.659 574.114 300.333 446.615 300.333 cv
446.615 299.507 li
f
446.615 299.507 mo
446.615 300.007 li
478.621 300.011 502.675 287.706 522.656 269.3 cv
552.631 241.69 573.55 200.389 598.921 166.042 cv
611.603 148.867 625.39 133.436 641.941 122.305 cv
658.494 111.176 677.804 104.335 701.615 104.333 cv
701.615 103.833 li
701.114 103.833 li
701.114 104.659 li
701.615 104.659 li
701.615 104.159 li
669.608 104.154 645.554 116.459 625.573 134.865 cv
595.598 162.475 574.679 203.776 549.308 238.123 cv
536.625 255.298 522.839 270.73 506.288 281.86 cv
489.735 292.989 470.424 299.831 446.615 299.833 cv
446.615 300.333 li
447.114 300.333 li
447.114 299.507 li
446.615 299.507 li
446.615 300.007 li
446.615 299.507 li
446.114 299.507 li
446.114 300.333 li
446.114 300.833 li
446.615 300.833 li
478.621 300.838 502.675 288.533 522.656 270.127 cv
552.631 242.517 573.55 201.215 598.921 166.868 cv
611.603 149.694 625.39 134.262 641.941 123.132 cv
658.494 112.002 677.804 105.161 701.615 105.159 cv
702.114 105.159 li
702.115 103.833 li
702.115 103.333 li
701.615 103.333 li
669.608 103.328 645.554 115.633 625.573 134.039 cv
595.598 161.649 574.679 202.95 549.308 237.297 cv
536.625 254.472 522.839 269.904 506.288 281.034 cv
489.735 292.163 470.424 299.004 446.615 299.007 cv
446.114 299.007 li
446.114 299.507 li
446.615 299.507 li
f
446.615 338.341 mo
574.115 338.341 574.115 269.668 701.615 269.668 cv
701.615 270.494 li
574.115 270.494 574.115 339.168 446.615 339.168 cv
446.615 338.341 li
cp
f
446.615 338.341 mo
446.615 338.841 li
510.452 338.85 542.482 321.617 574.352 304.445 cv
606.232 287.28 637.952 270.177 701.615 270.168 cv
701.615 269.668 li
701.115 269.668 li
701.115 270.494 li
701.615 270.494 li
701.615 269.994 li
637.777 269.985 605.747 287.219 573.877 304.391 cv
541.997 321.555 510.277 338.659 446.615 338.668 cv
446.615 339.168 li
447.114 339.168 li
447.114 338.341 li
446.615 338.341 li
446.615 338.841 li
446.615 338.341 li
446.115 338.341 li
446.115 339.168 li
446.115 339.668 li
446.615 339.668 li
510.452 339.677 542.482 322.443 574.352 305.271 cv
606.232 288.106 637.952 271.003 701.615 270.994 cv
702.114 270.994 li
702.114 269.668 li
702.114 269.168 li
701.615 269.168 li
637.777 269.159 605.747 286.392 573.877 303.564 cv
541.997 320.729 510.277 337.832 446.615 337.841 cv
446.115 337.841 li
446.115 338.341 li
446.615 338.341 li
cp
f
446.615 318.235 mo
574.114 318.235 574.114 161.994 701.615 161.994 cv
701.615 162.82 li
574.114 162.82 574.114 319.062 446.615 319.062 cv
446.615 318.235 li
f
446.615 318.235 mo
446.615 318.735 li
478.592 318.739 502.626 308.926 522.614 294.226 cv
552.596 272.173 573.523 239.184 598.886 211.769 cv
624.258 184.35 653.967 162.503 701.615 162.494 cv
701.615 161.994 li
701.114 161.994 li
701.114 162.82 li
701.615 162.82 li
701.615 162.32 li
669.636 162.317 645.603 172.13 625.615 186.83 cv
595.633 208.882 574.706 241.871 549.343 269.286 cv
523.971 296.706 494.262 318.552 446.615 318.562 cv
446.615 319.062 li
447.114 319.062 li
447.114 318.235 li
446.615 318.235 li
446.615 318.735 li
446.615 318.235 li
446.114 318.235 li
446.114 319.062 li
446.114 319.562 li
446.615 319.562 li
478.592 319.565 502.626 309.752 522.614 295.052 cv
552.596 273 573.523 240.011 598.886 212.595 cv
624.258 185.176 653.967 163.329 701.615 163.32 cv
702.114 163.32 li
702.115 161.994 li
702.115 161.494 li
701.615 161.494 li
669.636 161.49 645.603 171.303 625.615 186.004 cv
595.633 208.056 574.706 241.045 549.343 268.46 cv
536.664 282.17 522.884 294.487 506.33 303.376 cv
489.775 312.264 470.444 317.734 446.615 317.735 cv
446.114 317.735 li
446.114 318.235 li
446.615 318.235 li
f
446.615 352.663 mo
574.115 352.663 574.115 318.189 701.615 318.189 cv
701.615 319.015 li
574.115 319.015 574.115 353.49 446.615 353.49 cv
446.615 352.663 li
cp
f
446.615 352.663 mo
446.615 353.163 li
510.405 353.166 542.37 344.529 574.245 335.909 cv
606.12 327.292 637.905 318.692 701.615 318.689 cv
701.615 318.189 li
701.115 318.189 li
701.115 319.015 li
701.615 319.015 li
701.615 318.515 li
637.824 318.512 605.859 327.149 573.984 335.77 cv
542.109 344.386 510.324 352.987 446.615 352.99 cv
446.615 353.49 li
447.114 353.49 li
447.114 352.663 li
446.615 352.663 li
446.615 353.163 li
446.615 352.663 li
446.115 352.663 li
446.115 353.49 li
446.115 353.99 li
446.615 353.99 li
510.405 353.993 542.37 345.356 574.245 336.735 cv
606.12 328.118 637.905 319.518 701.615 319.515 cv
702.114 319.515 li
702.114 318.189 li
702.114 317.689 li
701.615 317.689 li
637.824 317.686 605.859 326.323 573.984 334.943 cv
542.109 343.56 510.324 352.16 446.615 352.163 cv
446.115 352.163 li
446.115 352.663 li
446.615 352.663 li
cp
f
181.615 293.786 mo
309.115 293.786 309.115 345.227 436.615 345.227 cv
436.615 348.532 li
309.115 348.532 309.115 297.091 181.615 297.091 cv
181.615 293.786 li
cp
f
446.615 300.333 mo
574.114 300.333 574.114 104.659 701.615 104.659 cv
701.615 107.964 li
574.114 107.964 574.114 303.638 446.615 303.638 cv
446.615 300.333 li
f
181.615 260.735 mo
309.115 260.735 309.115 224.379 436.615 224.379 cv
436.615 227.685 li
309.115 227.685 309.115 264.04 181.615 264.04 cv
181.615 260.735 li
cp
f
446.615 225.426 mo
446.615 222.121 li
495.906 222.121 526.143 219.958 552.056 217.305 cv
551.193 218.5 550.32 219.694 549.447 220.874 cv
524.103 223.405 494.264 225.426 446.615 225.426 cv
.0827039 .0118105 .0663462 0 cmyk
f
549.447 220.874 mo
550.32 219.694 551.193 218.5 552.056 217.305 cv
552.265 217.283 552.467 217.263 552.675 217.241 cv
551.819 218.437 550.957 219.628 550.091 220.809 cv
549.876 220.831 549.662 220.852 549.447 220.874 cv
.449073 .761257 .0835584 .000976577 cmyk
f
550.091 220.809 mo
550.957 219.628 551.819 218.437 552.675 217.241 cv
552.887 217.219 553.1 217.197 553.312 217.176 cv
552.461 218.371 551.603 219.563 550.743 220.744 cv
550.529 220.765 550.306 220.788 550.091 220.809 cv
.584131 .0692454 .181369 0 cmyk
f
550.743 220.744 mo
551.603 219.563 552.461 218.371 553.312 217.176 cv
553.743 217.131 554.176 217.086 554.605 217.041 cv
553.759 218.238 552.911 219.426 552.056 220.61 cv
551.619 220.655 551.183 220.699 550.743 220.744 cv
.782193 .986114 .289006 .181125 cmyk
f
552.056 220.61 mo
552.911 219.426 553.759 218.238 554.605 217.041 cv
554.885 217.012 555.165 216.982 555.443 216.953 cv
554.604 218.149 553.76 219.339 552.912 220.522 cv
552.627 220.551 552.343 220.581 552.056 220.61 cv
.48127 .12842 .425422 0 cmyk
f
552.912 220.522 mo
553.76 219.339 554.604 218.149 555.443 216.953 cv
555.859 216.909 556.276 216.865 556.69 216.821 cv
555.858 218.017 555.024 219.206 554.184 220.39 cv
553.763 220.434 553.336 220.478 552.912 220.522 cv
.449073 .761257 .0835584 .000976577 cmyk
f
554.184 220.39 mo
555.024 219.206 555.858 218.017 556.69 216.821 cv
556.967 216.791 557.238 216.763 557.515 216.733 cv
556.69 217.927 555.858 219.12 555.025 220.302 cv
554.742 220.332 554.468 220.36 554.184 220.39 cv
.48127 .12842 .425422 0 cmyk
f
555.025 220.302 mo
555.858 219.12 556.69 217.927 557.515 216.733 cv
557.923 216.689 558.336 216.645 558.743 216.601 cv
557.925 217.794 557.101 218.988 556.276 220.17 cv
555.861 220.214 555.441 220.258 555.025 220.302 cv
.449073 .761257 .0835584 .000976577 cmyk
f
556.276 220.17 mo
557.101 218.988 557.925 217.794 558.743 216.601 cv
559.557 216.513 560.364 216.426 561.172 216.337 cv
560.364 217.533 559.557 218.719 558.743 219.906 cv
557.925 219.994 557.101 220.083 556.276 220.17 cv
f
558.743 219.906 mo
559.557 218.719 560.364 217.533 561.172 216.337 cv
561.572 216.293 561.975 216.249 562.373 216.205 cv
561.572 217.399 560.769 218.588 559.962 219.774 cv
559.556 219.818 559.15 219.862 558.743 219.906 cv
.48127 .12842 .425422 0 cmyk
f
559.962 219.774 mo
560.769 218.588 561.572 217.399 562.373 216.205 cv
562.954 216.141 563.531 216.077 564.109 216.013 cv
563.315 217.207 562.522 218.394 561.724 219.582 cv
561.139 219.646 560.55 219.71 559.962 219.774 cv
.449073 .761257 .0835584 .000976577 cmyk
f
561.724 219.582 mo
562.522 218.394 563.315 217.207 564.109 216.013 cv
564.522 215.967 564.936 215.921 565.348 215.875 cv
564.559 217.065 563.764 218.26 562.972 219.444 cv
562.554 219.49 562.143 219.536 561.724 219.582 cv
.48127 .12842 .425422 0 cmyk
f
565.348 219.18 mo
566.137 217.99 566.917 216.806 567.703 215.611 cv
573.562 214.952 579.35 214.285 585.262 213.632 cv
584.244 214.846 583.239 216.053 582.228 217.274 cv
576.577 217.907 571.006 218.549 565.348 219.18 cv
.0827039 .0118105 .0663462 0 cmyk
f
582.228 217.274 mo
583.239 216.053 584.244 214.846 585.262 213.632 cv
585.53 213.602 585.803 213.572 586.072 213.543 cv
585.052 214.752 584.035 215.968 583.022 217.186 cv
582.755 217.215 582.495 217.245 582.228 217.274 cv
.449073 .761257 .0835584 .000976577 cmyk
f
583.022 217.186 mo
584.035 215.968 585.052 214.752 586.072 213.543 cv
586.329 213.514 586.584 213.486 586.842 213.458 cv
585.817 214.668 584.798 215.882 583.781 217.101 cv
583.529 217.129 583.273 217.158 583.022 217.186 cv
.584131 .0692454 .181369 0 cmyk
f
583.781 217.101 mo
584.798 215.882 585.817 214.668 586.842 213.458 cv
587.34 213.403 587.839 213.349 588.34 213.295 cv
587.31 214.503 586.283 215.719 585.262 216.937 cv
584.765 216.992 584.276 217.046 583.781 217.101 cv
.782193 .986114 .289006 .181125 cmyk
f
585.262 216.937 mo
586.283 215.719 587.31 214.503 588.34 213.295 cv
589.139 213.208 589.94 213.121 590.745 213.035 cv
589.697 214.243 588.652 215.459 587.615 216.679 cv
586.829 216.764 586.042 216.851 585.262 216.937 cv
.449073 .761257 .0835584 .000976577 cmyk
f
587.615 216.679 mo
588.652 215.459 589.697 214.243 590.745 213.035 cv
591.25 212.981 591.764 212.927 592.271 212.873 cv
591.216 214.078 590.162 215.296 589.118 216.515 cv
588.616 216.57 588.115 216.624 587.615 216.679 cv
.48127 .12842 .425422 0 cmyk
f
589.118 216.515 mo
590.162 215.296 591.216 214.078 592.271 212.873 cv
592.63 212.835 592.979 212.798 593.339 212.76 cv
592.271 213.97 591.217 215.179 590.161 216.403 cv
589.813 216.44 589.464 216.478 589.118 216.515 cv
f
590.161 216.403 mo
591.217 215.179 592.271 213.97 593.339 212.76 cv
593.877 212.704 594.416 212.648 594.957 212.592 cv
593.875 213.802 592.81 215.008 591.741 216.234 cv
591.214 216.29 590.685 216.347 590.161 216.403 cv
.449073 .761257 .0835584 .000976577 cmyk
f
591.741 216.234 mo
592.81 215.008 593.875 213.802 594.957 212.592 cv
595.503 212.535 596.05 212.479 596.599 212.423 cv
595.505 213.628 594.418 214.843 593.339 216.066 cv
592.801 216.122 592.275 216.177 591.741 216.234 cv
.584131 .0692454 .181369 0 cmyk
f
593.339 216.066 mo
594.418 214.843 595.505 213.628 596.599 212.423 cv
596.718 212.411 596.84 212.399 596.959 212.386 cv
595.858 213.591 594.763 214.808 593.677 216.03 cv
593.568 216.042 593.448 216.054 593.339 216.066 cv
.48127 .12842 .425422 0 cmyk
f
595.969 215.793 mo
596.741 214.935 597.519 214.08 598.298 213.232 cv
599.095 213.934 599.891 214.626 600.697 215.318 cv
599.101 215.475 597.53 215.632 595.969 215.793 cv
601.856 215.206 mo
600.847 214.35 599.854 213.493 598.86 212.623 cv
598.869 212.613 598.876 212.605 598.886 212.595 cv
599.024 212.446 599.159 212.3 599.297 212.151 cv
624.484 209.649 654.191 207.658 701.365 207.651 cv
701.365 210.956 li
655.777 210.963 626.503 212.822 601.856 215.206 cv
.0827039 .0118105 .0663462 0 cmyk
f
600.697 215.318 mo
599.891 214.626 599.095 213.934 598.298 213.232 cv
598.485 213.029 598.673 212.826 598.86 212.623 cv
599.854 213.493 600.847 214.35 601.856 215.206 cv
601.469 215.243 601.081 215.281 600.697 215.318 cv
.782193 .986114 .289006 .181125 cmyk
f
593.677 216.03 mo
594.763 214.808 595.858 213.591 596.959 212.386 cv
597.735 212.308 598.513 212.229 599.297 212.151 cv
599.159 212.3 599.024 212.446 598.886 212.595 cv
598.876 212.605 598.869 212.613 598.86 212.623 cv
598.673 212.826 598.485 213.029 598.298 213.232 cv
597.519 214.08 596.741 214.935 595.969 215.793 cv
595.201 215.871 594.438 215.951 593.677 216.03 cv
.48127 .12842 .425422 0 cmyk
f
562.972 219.444 mo
563.764 218.26 564.559 217.065 565.348 215.875 cv
566.137 215.787 566.917 215.7 567.703 215.611 cv
566.917 216.806 566.137 217.99 565.348 219.18 cv
564.559 219.268 563.764 219.357 562.972 219.444 cv
f
181.615 345.227 mo
309.115 345.227 309.115 250.82 436.615 250.82 cv
436.615 254.125 li
309.115 254.125 309.115 348.532 181.615 348.532 cv
181.615 345.227 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 228.731 mo
446.615 228.731 li
446.615 225.426 li
494.264 225.426 524.103 223.405 549.447 220.874 cv
548.557 222.076 547.67 223.259 546.768 224.443 cv
521.993 226.849 492.59 228.731 446.615 228.731 cv
.118257 0 .0197147 0 cmyk
f
546.768 224.443 mo
547.67 223.259 548.557 222.076 549.447 220.874 cv
549.662 220.852 549.876 220.831 550.091 220.809 cv
549.83 221.165 549.57 221.519 549.308 221.874 cv
548.689 222.712 548.066 223.547 547.442 224.377 cv
547.216 224.399 546.994 224.421 546.768 224.443 cv
.499031 .748196 .00274662 0 cmyk
f
547.442 224.377 mo
548.066 223.547 548.689 222.712 549.308 221.874 cv
549.57 221.519 549.83 221.165 550.091 220.809 cv
550.306 220.788 550.529 220.765 550.743 220.744 cv
550.266 221.398 549.788 222.05 549.308 222.7 cv
548.91 223.238 548.511 223.776 548.11 224.312 cv
547.885 224.334 547.667 224.355 547.442 224.377 cv
.60058 .0573434 .119661 0 cmyk
f
548.11 224.312 mo
548.511 223.776 548.91 223.238 549.308 222.7 cv
549.788 222.05 550.266 221.398 550.743 220.744 cv
551.183 220.699 551.619 220.655 552.056 220.61 cv
551.193 221.805 550.32 222.999 549.447 224.179 cv
549.004 224.223 548.556 224.268 548.11 224.312 cv
.871 1 .229892 .104494 cmyk
f
549.447 224.179 mo
550.32 222.999 551.193 221.805 552.056 220.61 cv
552.343 220.581 552.627 220.551 552.912 220.522 cv
552.056 221.716 551.19 222.912 550.324 224.091 cv
550.031 224.12 549.741 224.15 549.447 224.179 cv
.515862 .108736 .365789 0 cmyk
f
550.324 224.091 mo
551.19 222.912 552.056 221.716 552.912 220.522 cv
553.336 220.478 553.763 220.434 554.184 220.39 cv
553.337 221.585 552.482 222.778 551.626 223.959 cv
551.195 224.003 550.757 224.047 550.324 224.091 cv
.499031 .748196 .00274662 0 cmyk
f
551.626 223.959 mo
552.482 222.778 553.337 221.585 554.184 220.39 cv
554.468 220.36 554.742 220.332 555.025 220.302 cv
554.18 221.502 553.339 222.685 552.485 223.871 cv
552.199 223.9 551.913 223.93 551.626 223.959 cv
.515862 .108736 .365789 0 cmyk
f
552.485 223.871 mo
553.339 222.685 554.18 221.502 555.025 220.302 cv
555.441 220.258 555.861 220.214 556.276 220.17 cv
555.443 221.364 554.603 222.557 553.762 223.739 cv
553.335 223.783 552.914 223.827 552.485 223.871 cv
.499031 .748196 .00274662 0 cmyk
f
553.762 223.739 mo
554.603 222.557 555.443 221.364 556.276 220.17 cv
557.101 220.083 557.925 219.994 558.743 219.906 cv
557.925 221.099 557.1 222.293 556.276 223.475 cv
555.443 223.563 554.603 223.652 553.762 223.739 cv
f
562.971 222.749 mo
563.764 221.565 564.559 220.371 565.348 219.18 cv
571.006 218.549 576.577 217.907 582.228 217.274 cv
581.229 218.482 580.222 219.704 579.227 220.917 cv
573.811 221.528 568.445 222.145 562.971 222.749 cv
.118257 0 .0197147 0 cmyk
f
579.227 220.917 mo
580.222 219.704 581.229 218.482 582.228 217.274 cv
582.495 217.245 582.755 217.215 583.022 217.186 cv
582.014 218.398 581.012 219.61 580.01 220.829 cv
579.752 220.858 579.484 220.888 579.227 220.917 cv
.499031 .748196 .00274662 0 cmyk
f
580.01 220.829 mo
581.012 219.61 582.014 218.398 583.022 217.186 cv
583.273 217.158 583.529 217.129 583.781 217.101 cv
582.771 218.312 581.764 219.527 580.76 220.744 cv
580.51 220.772 580.259 220.8 580.01 220.829 cv
.60058 .0573434 .119661 0 cmyk
f
580.76 220.744 mo
581.764 219.527 582.771 218.312 583.781 217.101 cv
584.276 217.046 584.765 216.992 585.262 216.937 cv
584.244 218.151 583.239 219.358 582.228 220.58 cv
581.738 220.634 581.249 220.689 580.76 220.744 cv
.871 1 .229892 .104494 cmyk
f
582.228 220.58 mo
583.239 219.358 584.244 218.151 585.262 216.937 cv
586.042 216.851 586.829 216.764 587.615 216.679 cv
586.586 217.888 585.562 219.103 584.542 220.322 cv
583.766 220.408 583 220.493 582.228 220.58 cv
.499031 .748196 .00274662 0 cmyk
f
584.542 220.322 mo
585.562 219.103 586.586 217.888 587.615 216.679 cv
588.115 216.624 588.616 216.57 589.118 216.515 cv
588.082 217.725 587.054 218.937 586.026 220.158 cv
585.532 220.212 585.034 220.267 584.542 220.322 cv
.515862 .108736 .365789 0 cmyk
f
586.026 220.158 mo
587.054 218.937 588.082 217.725 589.118 216.515 cv
589.464 216.478 589.813 216.44 590.161 216.403 cv
589.122 217.608 588.081 218.828 587.051 220.045 cv
586.706 220.083 586.37 220.12 586.026 220.158 cv
f
587.051 220.045 mo
588.081 218.828 589.122 217.608 590.161 216.403 cv
590.685 216.347 591.214 216.29 591.741 216.234 cv
590.691 217.437 589.637 218.66 588.599 219.877 cv
588.081 219.933 587.566 219.989 587.051 220.045 cv
.499031 .748196 .00274662 0 cmyk
f
588.599 219.877 mo
589.637 218.66 590.691 217.437 591.741 216.234 cv
592.275 216.177 592.801 216.122 593.339 216.066 cv
592.271 217.275 591.217 218.484 590.161 219.708 cv
589.641 219.764 589.116 219.821 588.599 219.877 cv
.60058 .0573434 .119661 0 cmyk
f
590.161 219.708 mo
591.217 218.484 592.271 217.275 593.339 216.066 cv
593.448 216.054 593.568 216.042 593.677 216.03 cv
592.605 217.237 591.541 218.451 590.482 219.674 cv
590.373 219.685 590.269 219.696 590.161 219.708 cv
.515862 .108736 .365789 0 cmyk
f
592.736 219.434 mo
593.808 218.211 594.884 216.998 595.969 215.793 cv
597.53 215.632 599.101 215.475 600.697 215.318 cv
601.858 216.316 603.036 217.309 604.219 218.285 cv
600.284 218.656 596.469 219.041 592.736 219.434 cv
605.425 218.173 mo
604.227 217.197 603.032 216.204 601.856 215.206 cv
626.503 212.822 655.777 210.963 701.365 210.956 cv
701.365 214.261 li
657.953 214.267 629.341 215.953 605.425 218.173 cv
.118257 0 .0197147 0 cmyk
f
604.219 218.285 mo
603.036 217.309 601.858 216.316 600.697 215.318 cv
601.081 215.281 601.469 215.243 601.856 215.206 cv
603.032 216.204 604.227 217.197 605.425 218.173 cv
605.023 218.21 604.619 218.248 604.219 218.285 cv
.871 1 .229892 .104494 cmyk
f
556.276 223.475 mo
557.1 222.293 557.925 221.099 558.743 219.906 cv
559.15 219.862 559.556 219.818 559.962 219.774 cv
559.151 220.966 558.332 222.161 557.515 223.343 cv
557.102 223.387 556.69 223.431 556.276 223.475 cv
.515862 .108736 .365789 0 cmyk
f
557.515 223.343 mo
558.332 222.161 559.151 220.966 559.962 219.774 cv
560.55 219.71 561.139 219.646 561.724 219.582 cv
560.923 220.773 560.116 221.966 559.31 223.15 cv
558.712 223.215 558.116 223.279 557.515 223.343 cv
.499031 .748196 .00274662 0 cmyk
f
559.31 223.15 mo
560.116 221.966 560.923 220.773 561.724 219.582 cv
562.143 219.536 562.554 219.49 562.972 219.444 cv
562.171 220.64 561.373 221.825 560.568 223.013 cv
560.151 223.059 559.728 223.105 559.31 223.15 cv
.515862 .108736 .365789 0 cmyk
f
590.482 219.674 mo
591.541 218.451 592.605 217.237 593.677 216.03 cv
594.438 215.951 595.201 215.871 595.969 215.793 cv
594.884 216.998 593.808 218.211 592.736 219.434 cv
591.982 219.514 591.23 219.593 590.482 219.674 cv
f
560.568 223.013 mo
561.373 221.825 562.171 220.64 562.972 219.444 cv
563.764 219.357 564.559 219.268 565.348 219.18 cv
564.559 220.371 563.764 221.565 562.971 222.749 cv
562.171 222.838 561.373 222.925 560.568 223.013 cv
f
181.615 264.04 mo
309.115 264.04 309.115 227.685 436.615 227.685 cv
436.615 230.99 li
309.115 230.99 309.115 267.346 181.615 267.346 cv
181.615 264.04 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 237.655 mo
574.115 237.655 574.115 262.507 701.615 262.507 cv
701.615 263.608 li
574.115 263.608 574.115 238.757 446.615 238.757 cv
446.615 237.655 li
cp
f
446.615 246.854 mo
574.115 246.854 574.115 305.244 701.615 305.244 cv
701.615 306.346 li
574.115 306.346 574.115 247.956 446.615 247.956 cv
446.615 246.854 li
cp
f
446.615 255.227 mo
574.115 255.227 574.115 351.286 701.615 351.286 cv
701.615 352.388 li
574.115 352.388 574.115 256.329 446.615 256.329 cv
446.615 255.227 li
cp
f
181.615 348.532 mo
309.115 348.532 309.115 254.125 436.615 254.125 cv
436.615 257.43 li
309.115 257.43 309.115 351.837 181.615 351.837 cv
181.615 348.532 li
cp
.60058 .0573434 .119661 0 cmyk
f
446.615 191.163 mo
574.115 191.163 574.115 85.6549 701.615 85.6549 cv
701.615 86.7566 li
574.115 86.7566 574.115 192.265 446.615 192.265 cv
446.615 191.163 li
cp
f
446.615 201.189 mo
574.115 201.189 574.115 147.947 701.615 147.947 cv
701.615 149.049 li
574.115 149.049 574.115 202.29 446.615 202.29 cv
446.615 201.189 li
cp
f
446.615 256.329 mo
574.115 256.329 574.115 352.388 701.615 352.388 cv
701.615 353.49 li
574.115 353.49 574.115 257.43 446.615 257.43 cv
446.615 256.329 li
cp
f
181.615 297.091 mo
309.115 297.091 309.115 348.532 436.615 348.532 cv
436.615 351.837 li
309.115 351.837 309.115 300.396 181.615 300.396 cv
181.615 297.091 li
cp
.48127 .12842 .425422 0 cmyk
f
446.615 303.638 mo
574.115 303.638 574.115 107.964 701.615 107.964 cv
701.615 109.617 li
574.115 109.617 574.115 305.29 446.615 305.29 cv
446.615 303.638 li
cp
f
446.615 339.168 mo
574.115 339.168 574.115 270.494 701.615 270.494 cv
701.615 272.146 li
574.115 272.146 574.115 340.82 446.615 340.82 cv
446.615 339.168 li
cp
f
171.615 169.633 mo
181.615 169.633 li
181.615 215.904 li
171.615 215.904 li
171.615 169.633 li
cp
.694331 .632349 .621027 .583551 cmyk
f
171.615 169.633 mo
171.615 169.883 li
181.365 169.883 li
181.365 215.654 li
171.864 215.654 li
171.864 169.633 li
171.615 169.633 li
171.615 169.883 li
171.615 169.633 li
171.365 169.633 li
171.365 216.154 li
181.864 216.154 li
181.864 169.383 li
171.365 169.383 li
171.365 169.633 li
171.615 169.633 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 78 /N putdup 83 /S putdup 97 /a putdup 99 /c putdup 101 /e putdup 105 /i putdup 107 /k putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 116 /t putdup 119 /w putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings15 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/space <1C60D8A8C9B854D00D> |-/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/k <1C60D8A8C9B7A73DB90BDE2D32BC36BC1297E20AB90FA9E27E830D444A320C85D226D41FA634DF03A4FEE2FD90BF314563D4BF5C68> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-/w <1C60D8A8C9B6079F623B1BE11B16961396A063624588AB070AF82F2F6FEA646F6999B73C9332DE350CB17016778F548397735D109B5E72AA9A92DCB1D7264371419D7043A117419C0FAF4C> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SEJDTW+ArialMT /ArialMT findfont ct_VMDictPut/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 45{/.notdef}rp /N 4{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf79.7266 197.318 mo(Semantic Network)sh171.615 325.396 mo
181.615 325.396 li
181.615 358.447 li
171.615 358.447 li
171.615 325.396 li
cp
f
171.615 325.396 mo
171.615 325.646 li
181.365 325.646 li
181.365 358.197 li
171.864 358.197 li
171.864 325.396 li
171.615 325.396 li
171.615 325.646 li
171.615 325.396 li
171.365 325.396 li
171.365 358.697 li
181.864 358.697 li
181.864 325.146 li
171.365 325.146 li
171.365 325.396 li
171.615 325.396 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F7F6ED1937D1E8A10> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 70 /F putdup 115 /s putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 37{/.notdef}rp /F 7{/.notdef}rp /N 4{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf126.973 346.472 mo(Frames)sh171.615 240.905 mo
181.615 240.905 li
181.615 300.397 li
171.615 300.397 li
171.615 240.905 li
cp
f
171.615 240.905 mo
171.615 241.155 li
181.364 241.155 li
181.364 300.147 li
171.864 300.147 li
171.864 240.905 li
171.615 240.905 li
171.615 241.155 li
171.615 240.905 li
171.365 240.905 li
171.365 300.647 li
181.864 300.647 li
181.864 240.655 li
171.365 240.655 li
171.365 240.905 li
171.615 240.905 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F632B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2BA15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609FBC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D295257B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0B222> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 82 /R putdup 108 /l putdup 117 /u putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 37{/.notdef}rp /F 7{/.notdef}rp /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w 136{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf135.298 275.201 mo(Rules)sh171.615 88.4473 mo
181.615 88.4473 li
181.615 144.634 li
171.615 144.634 li
171.615 88.4473 li
cp
f
171.615 88.4473 mo
171.615 88.6973 li
181.364 88.6973 li
181.364 144.384 li
171.864 144.384 li
171.864 88.4473 li
171.615 88.4473 li
171.615 88.6973 li
171.615 88.4473 li
171.365 88.4473 li
171.365 144.884 li
181.864 144.884 li
181.864 88.1973 li
171.365 88.1973 li
171.365 88.4473 li
171.615 88.4473 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B7EF3224EC6E192BD0FEC2445DA87B99CF0E03A72A> |-/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 76 /L putdup 103 /g putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 37{/.notdef}rp /F 5{/.notdef}rp /L /.notdef /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w 136{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf136.958 121.091 mo(Logic)sh436.615 113.447 mo
446.615 113.447 li
446.615 126.668 li
436.615 126.668 li
436.615 113.447 li
cp
f
436.615 113.447 mo
436.615 113.697 li
446.364 113.697 li
446.364 126.418 li
436.864 126.418 li
436.864 113.447 li
436.615 113.447 li
436.615 113.697 li
436.615 113.447 li
436.365 113.447 li
436.365 126.918 li
446.864 126.918 li
446.864 113.197 li
436.365 113.197 li
436.365 113.447 li
436.615 113.447 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B64EDFF43B9E1D43B76E7425A98F23F483468D5596DA760F1554BAD296AA38A849FEE692D78BAC3B162E2013F61317550246D6F77AF27886D4E04AB44C473130F6FA990DAC6640A48EC2A80691207E5DDBCA7196686E7CD5C980FB78081AA13952C8D8F3373FF54323A4853D0F014ED4C5A1024912E545AAB4BA7F36D08386B7A08B38C3035C03383BB204897FB23E6B597B4E784900841F1858E5E1740AFA815171FE44AAE751E7961222B185E93D26B02E1EB5C1FF9174E0C619907BEEF9FED49CD2B96F29B7B01884> |-/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 66 /B putdup 104 /h putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B 3{/.notdef}rp /F 5{/.notdef}rp /L /.notdef /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w 136{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf436.864 105.607 mo(Both)sh436.615 151.667 mo
446.615 151.667 li
446.615 257.43 li
436.615 257.43 li
436.615 151.667 li
cp
f
436.615 151.667 mo
436.615 151.917 li
446.364 151.917 li
446.364 257.18 li
436.864 257.18 li
436.864 151.667 li
436.615 151.667 li
436.615 151.917 li
436.615 151.667 li
436.365 151.667 li
436.365 257.68 li
446.864 257.68 li
446.864 151.417 li
436.365 151.417 li
436.365 151.667 li
436.615 151.667 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B96470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 73 /I putdup 112 /p putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B 3{/.notdef}rp /F 2{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w 136{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf436.864 146.099 mo(Implicit)sh436.615 282.43 mo
446.615 282.43 li
446.615 358.447 li
436.615 358.447 li
436.615 282.43 li
cp
f
436.615 282.43 mo
436.615 282.68 li
446.365 282.68 li
446.365 358.197 li
436.864 358.197 li
436.864 282.43 li
436.615 282.43 li
436.615 282.68 li
436.615 282.43 li
436.365 282.43 li
436.365 358.697 li
446.864 358.697 li
446.864 282.18 li
436.365 282.18 li
436.365 282.43 li
436.615 282.43 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B64EDFFB83C6241DB110BEE5AB2FAD9D94B39ED5E81E7411B66E9361DDE78FC667AB91EF9824> |-/x <1C60D8A8C9B7A73DB920A1A3B81DE7234ACAA5546B4C65820CF3C50E1629C5A6423BAA34A2ECA8C7FE4B71726AC6704CC23AF1725AFB30D2892FC1BDDAFEAD7BE7BD65F1051699CCF4B0> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 69 /E putdup 120 /x putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B 2{/.notdef}rp /E /F 2{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x 135{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf436.864 276.988 mo(Explicit)sh701.615 38.4473 mo
711.615 38.4473 li
711.615 109.617 li
701.615 109.617 li
701.615 38.4473 li
cp
f
701.615 38.4473 mo
701.615 38.6973 li
711.364 38.6973 li
711.364 109.367 li
701.864 109.367 li
701.864 38.4473 li
701.615 38.4473 li
701.615 38.6973 li
701.615 38.4473 li
701.365 38.4473 li
701.365 109.867 li
711.864 109.867 li
711.864 38.1973 li
701.365 38.1973 li
701.365 38.4473 li
701.615 38.4473 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/G <1C60D8A8C9B6FF86FBC793890B55178BE49EEC5102DE4765B31919F6E98C7D78C667A3BB4B4E624B689DA4C385DFD1B29DE65FB8AA7AB2EF69B5E095C4AF9914BE00567D04850B7313AA11B0D0EAADB46E151A37395ABF4FDE5690DD208A8203F33BC5AE42ABB3FA5CE6CC7C2FF1141A09489DA9290F5991FC3FADB6E8008CAB5CAA6CE68D612C9A2AD14F1DB3B2ED2760EC1A22B5BECD6F37DA404DC4340669554C25AFCF53AD025C5AA750C1F3F80E3A98BEF6E511E50C5B0BE2D927EF> |-/K <1C60D8A8C9B64EDFF4E9C0F6048EB723B0CED8EE1109108A02369C8B45382285654732A05ADDD12E99CCD504BC058489833BA3AE060EFA> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 71 /G putdup 75 /K putdup 100 /d putdup 121 /y putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B 2{/.notdef}rp /E /F /G /.notdef /I /.notdef /K /L /.notdef /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf726.714 78.582 mo(Reasoning)sh416.714 8.58203 mo(Reasoning)sh678.714 8.58203 mo(NeSy Goals)sh124.714 8.58203 mo(Knowledge Representation)sh701.615 252.481 mo
711.615 252.481 li
711.615 272.147 li
701.615 272.147 li
701.615 252.481 li
cp
f
701.615 252.481 mo
701.615 252.731 li
711.365 252.731 li
711.365 271.896 li
701.864 271.896 li
701.864 252.481 li
701.615 252.481 li
701.615 252.731 li
701.615 252.481 li
701.365 252.481 li
701.365 272.396 li
711.864 272.396 li
711.864 252.231 li
701.365 252.231 li
701.365 252.481 li
701.615 252.481 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-/O <1C60D8A8C9B6FF86E621E1FAD9CC02A23AF5AAF7451327A9277DAE8170AAC8E603A02E3EEFF561DDADE9FD6F6F16B77EE709DD797791A73F1C532C58482F9C51E1EAE7EA6E4D820E6AA1026E7BE345B1C97C5D9EBBEF4840C4188F96B5380E7625249BBAD172254404F6F1CB17CABA1F131B17AAAB56C5D3B94E3AC2C2E9F0A0D079C435D0249DF6C47E18FCF00E7FFE3C519BB35DF797EF47286BDCA762289BE1> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 68 /D putdup 79 /O putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B /.notdef /D /E /F /G /.notdef /I /.notdef /K /L /.notdef /N /O 2{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf726.713 266.864 mo(OOD)sh701.615 134.616 mo
711.615 134.616 li
711.615 162.82 li
701.615 162.82 li
701.615 134.616 li
cp
f
701.615 134.616 mo
701.615 134.866 li
711.365 134.866 li
711.365 162.57 li
701.864 162.57 li
701.864 134.616 li
701.615 134.616 li
701.615 134.866 li
701.615 134.616 li
701.365 134.616 li
701.365 163.07 li
711.864 163.07 li
711.864 134.366 li
701.365 134.366 li
701.365 134.616 li
701.615 134.616 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 98 /b putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B /.notdef /D /E /F /G /.notdef /I /.notdef /K /L /.notdef /N /O 2{/.notdef}rp /R /S 13{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf726.714 153.268 mo(Interpretability)sh701.615 297.146 mo
711.615 297.146 li
711.615 319.015 li
701.615 319.015 li
701.615 297.146 li
cp
f
701.615 297.146 mo
701.615 297.396 li
711.364 297.396 li
711.364 318.765 li
701.864 318.765 li
701.864 297.146 li
701.615 297.146 li
701.615 297.396 li
701.615 297.146 li
701.365 297.146 li
701.365 319.265 li
711.864 319.265 li
711.864 296.896 li
701.365 296.896 li
701.365 297.146 li
701.615 297.146 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
SEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf726.713 312.631 mo(Reduced Data)sh701.615 344.015 mo
711.615 344.015 li
711.615 358.447 li
701.615 358.447 li
701.615 344.015 li
cp
f
701.615 344.015 mo
701.615 344.265 li
711.364 344.265 li
711.364 358.197 li
701.864 358.197 li
701.864 344.015 li
701.615 344.015 li
701.615 344.265 li
701.615 344.015 li
701.365 344.015 li
701.365 358.697 li
711.864 358.697 li
711.864 343.765 li
701.365 343.765 li
701.365 344.015 li
701.615 344.015 li
cp
.669856 .599298 .586175 .435218 cmyk
f
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSEJDTW+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D3927> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-systemdict /gcheck known {setglobal} if end {end} ifendSEJDTW+ArialMT /Encoding getdup 84 /T putdup 102 /f putpop%ADOEndSubsetFont
/SEJDTW+ArialMT*1 [32{/.notdef}rp /space 33{/.notdef}rp /B /.notdef /D /E /F /G /.notdef /I /.notdef /K /L /.notdef /N /O 2{/.notdef}rp /R /S /T 12{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]SEJDTW+ArialMT nfSEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf726.713 355.781 mo(Transferability)[5.7373 3.33008 5.56152 5.56152 5 2.77832 5.56152 3.33008 5.56152 5.56152 2.22168 2.22168 2.22168 2.77832 0 ]xsh711.365 227.231 mo
701.864 227.231 li
701.864 188.07 li
711.365 188.07 li
711.365 227.231 li
.148226 .112093 .11783 0 cmyk
f
711.864 227.731 mo
701.365 227.731 li
701.365 227.481 li
701.45 227.481 701.529 227.481 701.615 227.481 cv
701.615 224.176 li
701.529 224.176 701.45 224.176 701.365 224.176 cv
701.365 224.176 li
701.45 224.176 701.529 224.176 701.615 224.176 cv
701.615 220.871 li
701.529 220.871 701.45 220.871 701.365 220.871 cv
701.365 220.871 li
701.45 220.871 701.529 220.871 701.615 220.871 cv
701.615 217.566 li
701.529 217.566 701.45 217.566 701.365 217.566 cv
701.365 217.566 li
701.45 217.566 701.529 217.566 701.615 217.566 cv
701.615 214.261 li
701.615 214.261 li
701.615 210.956 li
701.529 210.956 701.45 210.956 701.365 210.956 cv
701.365 210.956 li
701.45 210.956 701.529 210.956 701.615 210.956 cv
701.615 207.651 li
701.529 207.651 701.45 207.651 701.365 207.651 cv
701.365 207.651 li
701.45 207.651 701.529 207.651 701.615 207.651 cv
701.615 204.345 li
701.529 204.345 701.45 204.345 701.365 204.345 cv
701.365 204.345 li
701.45 204.345 701.529 204.345 701.615 204.345 cv
701.615 201.041 li
701.529 201.041 701.45 201.041 701.365 201.041 cv
701.365 201.041 li
701.45 201.041 701.529 201.041 701.615 201.041 cv
701.615 197.735 li
701.529 197.735 701.45 197.735 701.365 197.735 cv
701.365 197.735 li
701.45 197.735 701.529 197.735 701.615 197.735 cv
701.615 194.43 li
701.529 194.43 701.45 194.43 701.365 194.43 cv
701.365 194.43 li
701.45 194.43 701.529 194.43 701.615 194.43 cv
701.615 191.125 li
701.529 191.125 701.45 191.125 701.365 191.125 cv
701.365 191.125 li
701.45 191.125 701.529 191.125 701.615 191.125 cv
701.615 187.82 li
701.529 187.82 701.45 187.82 701.365 187.82 cv
701.365 187.57 li
711.864 187.57 li
711.864 227.731 li
701.864 188.07 mo
701.864 227.231 li
711.365 227.231 li
711.365 188.07 li
701.864 188.07 li
701.365 214.261 mo
701.365 214.261 li
701.45 214.261 701.529 214.261 701.615 214.261 cv
701.529 214.261 701.45 214.261 701.365 214.261 cv
.132479 .102602 .106935 0 cmyk
f
701.365 217.566 mo
701.365 214.261 li
701.45 214.261 701.529 214.261 701.615 214.261 cv
701.615 214.261 li
701.615 217.566 li
701.529 217.566 701.45 217.566 701.365 217.566 cv
.203067 .241733 .113527 0 cmyk
f
701.365 220.871 mo
701.365 217.566 li
701.45 217.566 701.529 217.566 701.615 217.566 cv
701.615 220.871 li
701.529 220.871 701.45 220.871 701.365 220.871 cv
f
701.365 191.125 mo
701.365 187.82 li
701.365 187.82 li
701.45 187.82 701.529 187.82 701.615 187.82 cv
701.615 191.125 li
701.529 191.125 701.45 191.125 701.365 191.125 cv
.265202 .277226 .152193 0 cmyk
f
701.365 194.43 mo
701.365 191.125 li
701.45 191.125 701.529 191.125 701.615 191.125 cv
701.615 194.43 li
701.529 194.43 701.45 194.43 701.365 194.43 cv
f
701.365 224.176 mo
701.365 220.871 li
701.45 220.871 701.529 220.871 701.615 220.871 cv
701.615 224.176 li
701.529 224.176 701.45 224.176 701.365 224.176 cv
.220462 .126772 .178836 0 cmyk
f
701.365 197.735 mo
701.365 194.43 li
701.45 194.43 701.529 194.43 701.615 194.43 cv
701.615 197.735 li
701.529 197.735 701.45 197.735 701.365 197.735 cv
.203067 .241733 .113527 0 cmyk
f
701.365 201.041 mo
701.365 197.735 li
701.45 197.735 701.529 197.735 701.615 197.735 cv
701.615 201.041 li
701.529 201.041 701.45 201.041 701.365 201.041 cv
.251286 .109773 .133883 0 cmyk
f
701.365 227.481 mo
701.365 224.176 li
701.45 224.176 701.529 224.176 701.615 224.176 cv
701.615 227.481 li
701.529 227.481 701.45 227.481 701.365 227.481 cv
.203067 .241733 .113527 0 cmyk
f
701.365 204.345 mo
701.365 201.041 li
701.45 201.041 701.529 201.041 701.615 201.041 cv
701.615 204.345 li
701.529 204.345 701.45 204.345 701.365 204.345 cv
.251286 .109773 .133883 0 cmyk
f
701.365 207.651 mo
701.365 204.345 li
701.45 204.345 701.529 204.345 701.615 204.345 cv
701.615 207.651 li
701.529 207.651 701.45 207.651 701.365 207.651 cv
.265202 .277226 .152193 0 cmyk
f
701.365 210.956 mo
701.365 207.651 li
701.45 207.651 701.529 207.651 701.615 207.651 cv
701.615 210.956 li
701.529 210.956 701.45 210.956 701.365 210.956 cv
.220462 .126772 .178836 0 cmyk
f
701.365 214.261 mo
701.365 210.956 li
701.45 210.956 701.529 210.956 701.615 210.956 cv
701.615 214.261 li
701.615 214.261 li
701.615 214.261 li
701.529 214.261 701.45 214.261 701.365 214.261 cv
.251286 .109773 .133883 0 cmyk
f
.694331 .632349 .621027 .583551 cmyk
SEJDTW+ArialMT*1 [10 0 0 -10 0 0 ]msf726.714 212.201 mo(None)sh175.414 17.9473 mo
175.414 18.9473 li
176.414 18.9473 li
176.414 17.9473 li
cp
175.414 20.9473 mo
175.414 21.9473 li
176.414 21.9473 li
176.414 20.9473 li
cp
175.414 23.9473 mo
175.414 24.9473 li
176.414 24.9473 li
176.414 23.9473 li
cp
175.414 26.9473 mo
175.414 27.9473 li
176.414 27.9473 li
176.414 26.9473 li
cp
175.414 29.9473 mo
175.414 30.9473 li
176.414 30.9473 li
176.414 29.9473 li
cp
175.414 32.9473 mo
175.414 33.9473 li
176.414 33.9473 li
176.414 32.9473 li
cp
175.414 35.9473 mo
175.414 36.9473 li
176.414 36.9473 li
176.414 35.9473 li
cp
175.414 38.9473 mo
175.414 39.9473 li
176.414 39.9473 li
176.414 38.9473 li
cp
175.414 41.9473 mo
175.414 42.9473 li
176.414 42.9473 li
176.414 41.9473 li
cp
175.414 44.9473 mo
175.414 45.9473 li
176.414 45.9473 li
176.414 44.9473 li
cp
175.414 47.9473 mo
175.414 48.9473 li
176.414 48.9473 li
176.414 47.9473 li
cp
175.414 50.9473 mo
175.414 51.9473 li
176.414 51.9473 li
176.414 50.9473 li
cp
175.414 53.9473 mo
175.414 54.9473 li
176.414 54.9473 li
176.414 53.9473 li
cp
175.414 56.9473 mo
175.414 57.9473 li
176.414 57.9473 li
176.414 56.9473 li
cp
175.414 59.9473 mo
175.414 60.9473 li
176.414 60.9473 li
176.414 59.9473 li
cp
175.414 62.9473 mo
175.414 63.9473 li
176.414 63.9473 li
176.414 62.9473 li
cp
175.414 65.9473 mo
175.414 66.9473 li
176.414 66.9473 li
176.414 65.9473 li
cp
175.414 68.9473 mo
175.414 69.9473 li
176.414 69.9473 li
176.414 68.9473 li
cp
175.414 71.9473 mo
175.414 72.9473 li
176.414 72.9473 li
176.414 71.9473 li
cp
f
441.515 17.9473 mo
441.515 18.9473 li
442.515 18.9473 li
442.515 17.9473 li
cp
441.515 20.9473 mo
441.515 21.9473 li
442.515 21.9473 li
442.515 20.9473 li
cp
441.515 23.9473 mo
441.515 24.9473 li
442.515 24.9473 li
442.515 23.9473 li
cp
441.515 26.9473 mo
441.515 27.9473 li
442.515 27.9473 li
442.515 26.9473 li
cp
441.515 29.9473 mo
441.515 30.9473 li
442.515 30.9473 li
442.515 29.9473 li
cp
441.515 32.9473 mo
441.515 33.9473 li
442.515 33.9473 li
442.515 32.9473 li
cp
441.515 35.9473 mo
441.515 36.9473 li
442.515 36.9473 li
442.515 35.9473 li
cp
441.515 38.9473 mo
441.515 39.9473 li
442.515 39.9473 li
442.515 38.9473 li
cp
441.515 41.9473 mo
441.515 42.9473 li
442.515 42.9473 li
442.515 41.9473 li
cp
441.515 44.9473 mo
441.515 45.9473 li
442.515 45.9473 li
442.515 44.9473 li
cp
441.515 47.9473 mo
441.515 48.9473 li
442.515 48.9473 li
442.515 47.9473 li
cp
441.515 50.9473 mo
441.515 51.9473 li
442.515 51.9473 li
442.515 50.9473 li
cp
441.515 53.9473 mo
441.515 54.9473 li
442.515 54.9473 li
442.515 53.9473 li
cp
441.515 56.9473 mo
441.515 57.9473 li
442.515 57.9473 li
442.515 56.9473 li
cp
441.515 59.9473 mo
441.515 60.9473 li
442.515 60.9473 li
442.515 59.9473 li
cp
441.515 62.9473 mo
441.515 63.9473 li
442.515 63.9473 li
442.515 62.9473 li
cp
441.515 65.9473 mo
441.515 66.9473 li
442.515 66.9473 li
442.515 65.9473 li
cp
441.515 68.9473 mo
441.515 69.9473 li
442.515 69.9473 li
442.515 68.9473 li
cp
441.515 71.9473 mo
441.515 72.9473 li
442.515 72.9473 li
442.515 71.9473 li
cp
441.515 74.9473 mo
441.515 75.9473 li
442.515 75.9473 li
442.515 74.9473 li
cp
441.515 77.9473 mo
441.515 78.9473 li
442.515 78.9473 li
442.515 77.9473 li
cp
441.515 80.9473 mo
441.515 81.9473 li
442.515 81.9473 li
442.515 80.9473 li
cp
441.515 83.9473 mo
441.515 84.9473 li
442.515 84.9473 li
442.515 83.9473 li
cp
f
704.115 17.9473 mo
704.115 18.9473 li
705.115 18.9473 li
705.115 17.9473 li
cp
704.115 20.9473 mo
704.115 21.9473 li
705.115 21.9473 li
705.115 20.9473 li
cp
704.115 23.9473 mo
704.115 24.9473 li
705.115 24.9473 li
705.115 23.9473 li
cp
704.115 26.9473 mo
704.115 27.9473 li
705.115 27.9473 li
705.115 26.9473 li
cp
f
0 367.447 mo
883.229 367.447 li
0 0 0 0 cmyk
f
0 367.947 mo
883.229 367.947 li
883.229 366.947 li
0 366.947 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SEJDTW+ArialMT*1 uf/SEJDTW+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 24.0%%AI8_CreatorVersion: 26.2.1%%For: (kyle Hamilton) ()%%Title: (kr-implicit_explicit-goals.eps)%%CreationDate: 6/4/22 2:08 PM%%Canvassize: 16383%AI5_FileFormat 14.0%AI24_DataStream%.((`,!*F%P"MP/\'bDaS6q!IS!+;D7X%q'DNr_Z]"9;l9\GWT0PY-W<YlFb(!!E?'!.]5'Bb2s0Xh$C9@b4l6N,^]O\@**&.d>Rk%pm0rY`ejpRA&7U/S$<+&9;\fQMEiM8CUdBjY[,-Ii*%Is=Y]`;Xlq`V^Z;kY?SDA[joH$Pm9,GQZRdeW<s9`"4e($_fsHA1dF`@g%9*Oi;VZKKE&I<nuF=^WFWPE^MHJ@oMShm%4"h3cb"a<4_6UZ_5bUPd-.jp;Zbc2rL&Ko0"[-QBChCM)oD94RAp'?1Q1?E\q(GRI4%oAcAel1s@k0=MqQF:AJBBpfB9a8S^t8b1_f=N]Kc+982!I?%ZR/J%p*kh4/md'8PK?ZHR]A,-SM!TO!A_2S9)4g?#_!e;lr%GQ%5%b?"(;ca83<]NHtI&3/m!,Cj->m3TL`QjmO.-7/&'NP91s0=Y9gHP4P;E=9bl+F7afi^B@C`:Z5)I;N;%13i2k\\@J-p;gc%Q]f?P%s,A)i`j/YWhsrjTA28Dk?N>H]?oaP/[96>D/cfUu["]Pls'>+_,tft?aXPG[h:i*?@,'ekeFP54=YU<-<pp9b]c#MHRP-QlWSq'Y%Y\*TX-Sj>,&3(rE$bg^IHC"KcG0I\](]\LpiaiDQ!nnUeME>;A+"tT8#0C2;TQb8iHkF?foA6'</$:1,q%DJj3Q@NL=P^qLMIR+Q%p=g2'G:aP+;FKiIa)A`!H`$0`VH]j4AqdMVQ.9KO/Z<+SV$/1s>7'6bQ-FJ'i3o9nf.TDi//bTtg6UXm(7:>n_t@dkn:GtPc)auS%Q9Os#J=)N!nrNa0Ab#'!"i)2\*2&%'\D@L;VkiPbf-rl7CC@jZYRL6XPYSgS?LU[T!Wqokc1:6Fh"hGa`EFus*=`t$7?S'Vr+%0Z%A.MC4@"opEX'\O#YDfo"Q=o.,b_fsC-qJGGX+'6^?)NK2cg`%1o*-@/F^&MXaPb>qa7G%,;;b/<MdX9ngNmd_"ot"G@9-['4gtg5%bi\eo=7`MFJf[/W!X(2bY8E"^+$"f&h224UHf5G_#Xboq^RJj"rV+Ku(!GqR!13(kfQ4s%pO67I7aGDQ&YK`/0q3*n`_+pi!LBkE%\:+PP715-\Askd)Mp)WWl8Lth=8)!GD-8b1:m8Qn??0<.*`.r;f_$1+A]k8\9F#OSX]`AL$7PC!>dn5uN:kbE$DtCO+\:8T?!G;@%ID63#29W:n!//,g\)tm<1CBe(@hqa\>=/Cfba.%]66H'YN\B[0@r8Yk^hC+fDunkSqhA\NVBr]#PEL)P*Gq?r\n/;$"g\7pecpqu%V%P;/QsX]6-.QO81CQ'T@lMS2eh!+9P2+Fm?oC96Y[FUm!9qP-$E[UQ=tFk%is[=>AEo-\l`ZCQ`YQpO>,N)3P&qE=S"iM`Yp&m_%A,]+jPYf@;-a=%(K4\.u'u`e=R&P$-XMdo9<WZ:P+`P7K.+fNtef&[#!ku&Fr$3E##^@-c5gTZ:!\UDWp_LY9^peOK5;"WYDfX`(%P)J<Q`K(E).$g_)a`@$dqsi]u:6oBmIZg2ZpOE+Ni/decZLkm2+.D612iW@*13s^_^hk6FB5[tg,TufYd&[4:YQ:@q+O>(cfGXf/%!4-JB2]J%dE-q"62&QhM,=oWB$hFX-Ec%[do*XApbp01GQ5mMEpU_=!Yl)X%[iE/LqNYD**$DuJ/K'kR!gpZY0/1uU!l.a\GMHp:%!TKRPdrl2,i`IOSf=OfH3ecDY7b5X"ffXapoDB39lrpLuCA>MM(4=j;G[MC>^?]u!ZX\<I_#`V?<mNCc70jM-\:/",Jr\_!+\99,%R.]#P!W77V'SITKZf$D"7aQ_l`:\Mai/dqFc)h\bbq>DNfB-6\a01qJP:A"q\'^W2--*J7f,K"\UdQm_Rocor4=P6%AMj@;4S/^M%-,Tgs)&RNMG]+JDJu.-(!p5rK?][+V5k_MCem!d$ff-bEJnH"K/A"1@eh?fa@kadrRoO7K2%@iC2&gYJig/qjn+rlsg'm=ZheMq8%iVE`32Co6oNoen>a5BL3JaBMdi-Ud+:Nf#G]>+X"!IWg/r=QEt[e(/N&/7YA)D=*gbq-DZjZ+Q!^pBL.8QE_&ZcR:eZG7;.c`\5!%CThPTX5B7KK7P!-^#p.:#Cu+T.*jd:SUk0bgT^%9>9FJJUX;mdi'sEID;(lFerjCP2T+r$VIB@-aY9bQa#-PCZ;jQ[!b3%Vc#p.:%CDSE"\.o7)>I%7E#(nW,D94KA_)'_YdM.@;05Z>bCt#X_#2_%8G0_sH-AuXmE0K=.QFZEdQG'Bp29TU8N$SH.AH9q+H&ce^Y0ghm%IUP7&eQDN,CXk3HbHW&5?rsD#CGSeA"/s?3bc](O%;*@1>6D;_k^m%5/:V'/IV3WcX`*]`^#D'QH=h^[\;"d<ZXp2'r6B'P"iBK4%I_GDIK/Y?FeQ/>*a#=C7_3Z.bCA>6R>D?9'%+d/B"kN2/osSVn<iacdH(O1:guLGT@i0s:%;*:,-ifRDAi3U0ZX3-L5nLP?5e&+u%mgKKZ2:gN6Y=o_@@+G\!jL@rN41=)dNa!r7qC[:#]_)XP9`Zelafu<4F,^BmIhUJug'rC8ZYZd'p+=1gft>&nbI6K?laG*E-"l$e%P2/U9W>Kg5(J3M1;`)`S9O5-^puo[PD+Q\R2H+/.Dmh30>rO=P5.7'T4tPI:CdU!0;_d@..@+k>Nh:I+btQBh,sCQsZJ3;QFj8E0%]?U7k)O=hM\fpf!.C*KnZ(rcG(I`8"Son0k1g?;WIJUS#?,PQ:VJ(i<8c%=]D!S[tg9)boOsJ_DC<4H"r4h";d#4dBP.jW/DBjSp%[\PAOc^&GeQJG%0P3cVFMQ,6FUA<QnFj$#I+s5WY;gk(FWS;8S/6fD+_pT6'ns?.$L1Rij@S)_.8WMYcDX+Ag'htqIb:e&0Mf($@%2@W%1D63V;P&3ch1qP=j>HnU[Q7U5/'M6`Bh'SFpln%BiPASEZ,JUaCXVXVoVP72`;(TU?r$>!j,tjD-D*sV*4m?1CML8+:YY<$?%%*Q$44A38XFk*ntU:Rr(0>CVd@2YB.(m_ofe)*`_r+2;qdS8QI9Z_Bf8Y<RFl+3k[RUV\>T68=Wm'`3:e$_*H8GZ\:>?Lk[/6T8P%_pUDHmobkP^LYHjA4a)]fPh9mQ?:s41t1?FV"^atZ=W<u@2YB..@.^&f$Kc>k0)7se[8(FOX+/Z'S!TSSdiC-CIn:WA_XS.aYGa&%Yl%tpe!=g`n$\DP@2YB-s(gi;2'b=(Q@9:pYU%>.lYG__)Z#Wpll*14pYm+"hBY8K]jJ\F9Ab0^]D);_A=J<bRBgAhVS?q=fDRoK%^Y#!Sg25sggGUW^;`$pMVVN#R?X1L1oVCqd\$9I(Z>8*=Q8HQ6Z=3"8Q8Da-/5ooYVGG`B?!TB(H0MqX%9]t_eMSm\f3LaEjK'Fj%dWaG\HI7Ws8WoYS96Ern8[bEDEn5A=;dEUj,h[&K]i^/a,tUmqCWM6;oI9+;+j6$UAAe),/4l"BlGYFQPRZ6+oH@A7mLMrhABU8i%ICFX0oHS!SF`#6d'KPLQ:9l$7G+28hfuZ,D.80Zg%8/Hf8M?7f)Le"EBt'48ka#qNp29K$8Wl7`8WrEuP4W3VR]2d*065Vq]8a/X%C9Ctmf8q;,\q[oihec\)btaEQBr7uCP,-74NHK_`IHjaolsqKeOL))+6gje(IZ[l&T;lZWHElN^8UBob?6i*#r8JMkOX,?IOsK;'%Ht6NKFM7IgdX/6@r>34NVJW?9h0"&\g!Y@Kr*i=)V!G%]:YF*mY+,Fi=gq'phef7c7G"$g(W3OP_p5h;l]s!a^"AKTCrpR18X:pV%QLnl=IHliq(J0c98WkC5aK?[XZD:ZId^,Qg=d&Dm89UX%<*`d2,[$H[bHssfZqS*69MJU\,g3dSZYl22STVQH9O67mbHssde4i*l%QDk['P4U<i\o"p%ETF3*VQO-Hen%E+ZD8;M89uqDS97u_Fa[n.0jI(!FrTVIbB_i_QL-T5W]X#!Z7J"-E`)0]*erJIc?\m7ens7*%\o,"Uhef7DD6E39VR`k4CRVE<Y,8b4le64UYH-uXVJ336l^DFpRHD)(Rq]I:laj7b]'_P<j#E(Z34eN;NoR^2j#EK>\%1odG2*%e%]<:K!Djmj+s#@UXs/ru:s0(b"rnhRi\ZYsnj1;h)C&YlMVYRu@RcaY1BU[c>]&WSc\rPhNVE'\:O5i42mf3<jli7!Sk5YIBj8].'%g].;cY3U+GR]ahZ[uI0KErNi>EpgO)b5&WO/*Ee?Y+1R5\oRfM\oR5MVTJYFRO74RAt#U=q)FfikPq$Kl]*4QlT1&rS)u\N5*"[E%q>]L-D6Eb#kGJ&>kMu>%kPtRsY+0QNR[eF_Ngt1i5NeP\Rgn6UVud"h6r8VJ.;6BgbBD]B$:[lhqCZI&i`BI2C9Wa(o5Tdn;dP4I%qj"]Um%r?)dPSYZ^"GJ#^Fgr18:H#(`O-s[MSCqMrdRC)NaHe.JR@lC,67eb+gD3+;D#E_!.;P%%H"HJ7<UC"P^i=WcG_CabKpX.%fh4UKp2UjA_+9^t5m*-7o1+OL9o=-eg23N+oSra5P3:K#i;b<.S@W;,QKL+Oa"LOhOkm2!!8bo#Q72tHH&h?^Cpr<J%DV3&dfj!l%"g?.8_6"SbG!Q4r]e#6C#*@^WIb!m5'm`L+D53b4hm!Ti@9K_MGo1]j"!/##mQ+(!PdK1MQh"9<Jd)552um34;':<4-O&UE#fMer%$s>-1B'9EXa2JSHYDf'h+3m<k2b=%ZA+_pYk;mUGkP0MlgQ#W[7fX^rIJdC3AgbR%F7\DnEtlkso\hcu+V2aM*5t\Ld-N)>IU""U%AnZq[(j8]D+o-+D_a;5A?+4f>_g]_tID[-$p!+s7P*1!XTE2f6)jL2`[+e-X$Q:n8Raj/F=^4m(^/NGq*6W$,k4rCqDd92lL4.7O%)e6Q:<<.PP-A+mApQjdiM\4$K!3;c$f<]:"D&[*3p#_S!=cG;F?+5Z>'LtrRiE-"T5RPGjP60-qh],/6%)Y8Xh1e#]V!Br1LB;CW%!_s*8aUg93bj%i]>B4R]].Oc8H19XeGV>o3UeL\dMG2Q8>/S_H/`VM)"%K/hbi4q@8DV:2T!"@sPgh?\c&<^bF;mSZT6P'j>9[d3%'%<@G-OqWVSsY)R=s>/n\He9sBMbD7%Iubi;"lURg(NBX%a=O-%jBeHLdXfW"&CJ#7*<Cb!rRCQ9=OkP_pc`W")*<V0i&,bB2NOs%7M800r4;8I$!]GacL=6\#smDcjFofjh.D7lRE20l0M%<0iN>`t!^<Db19a-GKnR4:YcbTT`Q5<E0Y40Gb;Fb".?H3,OQ!([8Yf/a%X+pgO,b50eEIj*9'Y,[[DR7$2>pm/&_;bU=b_L`N?S.A,C33LM;giC^WM7Q]j<m&02J8_'Wk3*X%5!%=`U8WgOtoo)/5m"pKU9i4%0Qu2^-:g1b=OT-@G@5LAO3:7ncu_:j6FRQH7teM0e1%I1Khk^Ll+(c;%>.0[`R<$?-XB^*T(.!DeI&m%Vn1V^FmO0;Fp+AsDJ4#Y%_[jVI-RnEt:3@Mm'7q4A-;O6TG1<pJ=fFqL0.AWa[mL6F3PAUAq-PQ>RVLL-JRn+M-"A0]G?`:GF_tJJOFo$(%/nCH%b_LaT2)m_%dV5X]#=N2.<gPO?QVP_K'i/mfmg-K+nOAetGpf,2,j;Sh%W9M?p4:*!4Co/qo]X69M(Hcq8f8\83O>/Q_rWh5H9uM+75;8";8fc6%Tj`qE'N;oJe/B.&lP3/hGdj4n9dGrZ*f=%/!j(h+FNB[nEa_c6fGH)(B+2j0.HIj*S1;9F^d'<(Yts3dgP615TJS*1P.9)3`&fU[%$18b&8#T"\SCh]E7Q'/2MKjFUQ5<sG&_'-nHq'q>^q9s-28i'I&`"'mCKE:]p.Q1WWL4BjZk@r:6,VU]%>."RNHl!X.]5\,G+1sR%_G\8pe3IZ&o9RKtd9fZqd'>FLC%W<T$2#fq_uYe#-.^"N:5s.<]PJ/H^oF>e83SNpU[h[<:Vp(\JeIfQ];Q57'is1P_/g$mS=H+p%?6SPR=)I^DDjJ#;nEl=$=?1A=Ul)n7_!]$!jg:m)N(R*s/"&@/D=EIgiorl]WX1W&AsAp,`M+<mP`$>#"qRX5V*l"E[Z]Ka2J;*"%e3uq)Ka'.*9>\r4d7/)(P.6Eu+W\EF-8Af-H@I-r_>+Pc,P2f`jSss'4:pP(**e1A*iTcJYBNSGDRTW@dlSk`=#J;sHTPiUogTSb%I+E[Z_5g]h$$g:<1>fK],QRg76FT(hP*!`Wg.4OOp;9Kh*Z9uBD_5\FY8gp1(MpFl;c8:aOm9A2!2ceifFh)EW^EZpXl8_ip#)[&%B]?!@C#)hK]U;fs4<'`^iLYLg/(cELPKJ9&jC3j_O<pCmTp6-8iZM<-O.+<U%s3!?7Y;T6CF!')BcjXI*jB-bb(a@WRDFhJ-nfmS%k*\=6'\6k9kdJAT,KBip&1;WH9OV2X0c;N!"#hohbkWr1[UZM*_4u9Q^AkBt\mhhr8>L71BTqoM3*$ouQ67,KjHU9O#_ZflR^4uU%J_+@I]bJZ6''QcZeSV!A;mJG77D7E.>+sJYdrDHK)bTMjCs^T\$DEU6[%\7@eh)DM`O`^^C6UEGnmE\CMX1U@WWdsf'M(O0-s)8S%TEsQsU.EsM5$^8jctV%O3)8:ApeKW/UfSmA.IL4Ma+>R1k6f`P5eXm#5[h:9^a7CR8onM4.7Gkn7`cC[>cI>s-di?D@S()rjcNZ4%fPBP5Gad$qBek_&doD;1?!.ek>d%,VD4sHoL^%%8.tfokQr&R2`)+\JWBhNR;Z\g-!\0!;@OXPmfDYPZ&<4rt&c%Y5cSXQDF@(WN%X?*#m"#@ZbVZP#b3YAS)Fi]+Ul0o.<kTiXD`Taf@@;7cSfe#3Af88PCW&qDdR3Ik)iJ%*P+kG'uMqUE]j#N"I3*a\*@82ec-:8>5%)1cs)1U%\[AN5H+JFPAXK3?b"`.YXl^^LL%?l)7Xn6EP!odRt9<0rEa*>`*!o7]8l&?5l<fE)tEjb-"*apIe3<'150<\hCTW72H$%J?lH`5a6gf,,Lfqc[t_N.;"dMKoIFaHG`KYMod>h_P9[VXR7@u2D:8e85LU"PX#ij:1E+LPm`Jc):sOm%bDa5*F.#d&[s3%!jr>'%WOD>2!*]t'7C+F:FCN!\;do'PL1FMr;1T0J<j&iNhk'MRpiQIlbdVbba/Wj=+Al!Nc"W(sX)UgU+SIdnYkKi5\jS2KqBE?$1_t=c%)EXY&P`F!l.+]V)ki%^S$;*,tC;+d1@2J>Nfj&2bjA]d;88Mik+pL**cYas^V:8(6=>K&R`Bql(,$CFCXO%MO+d@S_?uH74BIQ]t%8r>;FWfi;68=7Qo6".SfO*G&$+!La%+!U^@N^H7bEa2B+a'g&lf&96PcnW]p"\6&,OAFZ)@5+Z(M$tjCDW!Dk*)`kO/06*SSdM^E%I)&pG8V[_S\Zrs,oVdLP%\T,tbW*mG)60a6UaM?r.FMT@A\)X0UggK2AB^YhEb%I-aDQ''$'Q>rPCbWQ9\Lm^aAufne+nqD:j'g8%Wg@3`<@C=7Z(QsO`F+N/%1!TYFd7ab;IkZo,3F`*iS1&3+Mm#B:lN8B8#h4Hnc9'1o`i<Oiu6;f/74`pNu#sgYGgOEK2gk,<Jb\m%ZA20P"5uT<U^(d_aeou$&o+h!=Z`844$^GS@p8%_Ru,q`[BI.hB2HY<QdT:K&#=i79^ge\5u>-6@pih"Ia3h/fN3kB2KskeY8H4Q%!pK5GMEpYGC-r*B6brr#.\IFLmtM$79kl1,&m?Tkl?!m$j&ZGX9WlIN$-;[dKuYM3M%CiRf52cB6U08H0Rai>ebaUU<F`g*?]9OJ%R8f,`&jqW2-*o9nZqSV5)%DbfSK3=pqoAko.(5Qrg94s;roQUP&8[YE&\E4u&==>r7>BguKh=lZ(>VH'#.O>lQiXCs#Hq3i0Hs<4%/i'#VX&s9tQoMb.>^Gl28gHNMe9ibL:2rs9H=\T1$D'hHG;aCSE8aS,Z#C=Qd+HgG+:&fJKh#W7KilK2M/J6!c8]7kAlV1)<^qpH%m+We%Q6o1N2CakL0,HCKnQ%?[K%34t?r:j\aAj,;6<@=ren[#a$m,4s3*?cE(cg@eEL-b=6t8&D`5m%K#S(kr&D\*fA+q-8\]bO)%Blk@LYSudl,@]%DEgenAQ:F;&KX4*1QlI*diB)b1_[(o5#DU;X*(1*&c1$QlfcVES01-TJf<CEW8d<ARn1i"h&]S2bN=nUf+jq2b%#kUj/i#%QLJY!`C"/ckq(rEc$).kE9h/-,jJSpDO=rf1A6Zo/N5jH^WoQ1Cq"k1:I0M1GIEO@k;R7HG:pXmT+VK\n)c0I!MOeM)!%8BntnTB)jW2-UeG^ap=(6%I=,$_%]@.S(JMVuX(=SUr9\0EjrB-\Xp#f)eHHc2oS/1(,lL-Pcn;%UOZW:gW+g/e/%d6o-7(;M.\o%XW<hVD$(P<5aZh'0VNqS04@,8-c.#m+;#HPJI`pbQo5(<9QVGfgbU*e.N+OK)X*gsQUCEgf^GmeGi'VV9%*0]alm.E7&r:5J42d,%Thp(?KFr=9#Mhiu2tZ#r'4q=b#o!n4`Sh_/r+n5]ELtZf+A5E2a3.&,:ZqulA<*`I#VdpU5Vk-#"u=>X1'fH[GMq`$ecCb0UP$U6%3!Ue@i><[IR;u,<%#BORRpl.83*m"8W&gD&i/uP/J4;62^d(^*",ohc#.9f7%46ODF#4Je`^rA=bgAt@))pN/(jE_NN4YT3(K[8"%/^DfOXgj)[;/mp##K;guObrB^(aN,@g;Q26"p;7E#9%Rn(Led6/l#IfN\VM2>f)D0\5`3/\?s8[E!0?3iCn>PiDA7JjU/Dhj\c54%Q"(O<Q1MSGE\Bs3_J(L_acRbLK^6(9`H#oG%b0D`TkeZjK9fc5l6M-//4Qf50SnKiWdV$h'0ZYbG3:iS)<W.4$fhqZe]/-+-3b8Q%Kbg1>i-=&?YUI$7dj@$T=TlQ4GiQS^S#ClT3"AE$grf3l0#K:I>iT?3E!D?_\;nCFgjns\YYe39&<-d:3?qc1a)Tl@_$q6#SAK(j%38,dEi!(Pt@_ct'G?5t.\(3.OKd)iC"t$GQ2e.CANmSLCDSUc9K2L<?@^t(,a!fEe@7<=Kh,B0R\#K\nC7]O]/3IX#1Z5bD"&<IP%lP*BjI[:M,jJil)lBe2"[G)1U(53L]QjhLaTRB]SJRh>f$bg@5':\!sJ@`OT$pBp\N"';9W9Urd/K(g%p,bu)ZJ4fu.pce/iCOt'%RB5l+j"-H43+)`e<qp1E]sJj&MU9_!_6dNY!f>M?b;,(rMYh@.YBcG^@YRpmBa+t_TZ/5q\nEs1WbOAi'#eNB[#iq^H77M56Zh(5%!?hJ[<C<S48NS5].d:<[oZN&GUQQY?J`BWHNoM+=5oeoE%V7Y>>[8dtgjj98GoXk="pBt`FeKLJ\3L@\)_b[8J-"KgSMM+]1:Yo%%8;tmiMC[_Cecjb]?pLWF<4jAN?p3XN=:aEtWRku/okP>ORiG\75bkPu:C'Ysoa8*L4.Gq82[iO]MTFn/BoRPN"9)H20R>:0"!AuC%lH[?<K8O9SJpC?Q3KAFuZr>L15dVG9h6o+!NjBUoNtlI"A&iB.E?(<JE#eU.Yti^bE#_@u30%4=ha,\-+%V"D37ksC9HO@sis#dL%j64f<;c\NNqOj:5U\q-e6=HkI_h$jX"RQmi7?6CfQpCeKWh^VR*67;'Ng%.OAGY7ENiNO-a)q`e7Qne3g]1&q&^,&2<"L$.3%-bH%<@'VB^jlIX7:L4E23OgV@)BFYH)$f4g6mTuNf.Y4b;fKTJ8oj68DUt^_jkC*p7E^h9<"29=_g$XlaDKIDTs`"'h\mFoq\7R+](Hj%fK\_Ol-r@d"3_Ta(;iQ4.sp7^!+qT'QI54SX'sodY6T7$n4!TiLc5A9pZ]/U#<3.8<7]:1G0T-;A[7^Ma0c=nc*J0[J$Rgph)8!N%DS)e1elU=B+&0'-VYJ!2G8>Zc9m`#(BtB$$`&0%N?mTL&EpSB\!.6Xuc`jUMl*$suq%_Y'lW_U9/-!o_G\+Y!*7oQq%t(dD`FlcJ%Yun2Gp!p?PL?!SF4i?Jck5&7=lYG%P=$=<5=SDFg=>F&lZ0\YoZXiV)[;$I.^dl/F)@eHNXdU!?D=]j'=7ZDCa"eIdqJ)<hNoAS_%f3`@fWo)>CS%Ue"_6@b;Jn=[YIkK@N`Fc=,<R\8)GK[-hc2MV6-%c<8ZMKjHebas[R69Btbkc/PV.VTbb<DDuiRSCC5F]Aqqm1"J%rq5TP"l(sT5b@4B`qj?LDg]asb_#4cMk3.:!'S5D$j2#s__k0?m#MqOd/mjZ=,'juc*h3ZrTlT/JM#!j$C^6/b^FV!N<'(GQao#%%P\[NFdlq$LgCsmNVF;lG1+HJRW'Cj,NO12(Kp&m0nD2)l@2O5D^WNUJ[mM:F*eS^U3,D$+5Xe:#r/RlJUpMk1Fc,D4dgN,GBt,TP%,/`lXFZ)g:78#VRF^UC'@As99*V9gkI_sJJ>s\NgI(,e_XMQEI2ahMIO9%T8QW(cWE,cO08U/i%A$CZW0Fk=1c=h16o2<^-RCQ9]%Vt?CAI8+,;#\OP_2Sr-[(mnjFWBnrs\qib/n#?GjmQi2$T9VaqDn&([h975YQ0DKH3S17.[<9K>+]JWrBb+)0h?FXkT/oX?'=CI/%+_JX)gE[4E%"t.2Lkc*6#r#KM&:MJYhpoS@"*=a#Fi3=A49`*Dq924qWME1'cj<4[JDJ5a-P7A\(_V9cHcRYQU;4:Kj/#hj1MJ<Y%nk/P"Q4d^1_[!lfMI.a*oQ,[(/3QKOKVtKg%*5,HQo'@LI=Ck[X_0_k(jpuQ#V2VkN$FOHdSp=^#;4R@(gRD9]g[WN49Z6dgQ!,K%@8%8e't*#4+A!!5h$F14ZgG3IaK,*PaV<,i@V.e%W*c*2GWnn66rI?7?QHB*$mc:FG012o^B,]^:J!k]SdcJ?,X6GJgX[Y3a)k?Z%c%jGsVeX*#6C70UHWD!tNr([S=q'M+9V5D2<l,OL(IBA'U;C>_"TpMXU^We.;D'SQ1^[U+&Pqk>,*Rt1HJN.+\gn;%l2YOoq?04g%nnq+%P(Y#(St>)`H%[D:Q#qq/H4e=mjSX&,d[4d?KZMUE/KM4^((YGW'''@6+m@C<#t9<>obr`*1u+iC>^WT1T/cK$%l<JB4PIWj%',0p.4Epii9^^Dc\3Z,\2__F,ior120C;UZ8.a-Epd>`&Y1k:_R`AD<+G3%G15T=QjclMi'7M0(8\/E=9)>Tl@",fnel*&c##q8V%QLADsfQS:5,4-?1-8!5P%:*fF#`e!<`05Fl"?s,ei@+7^5Bc4!AWp82Cd!sHs6KA.VRCtgWotNj2;t4D%J"C`>eGVDP*kFJ6%1["%Nu)=EV=F1MQ$@Tg(DQZqYp>oIM=I\e^*955l<!tE6.Wp-&ZMbsN&"E*/fD>#"3!MXlVnPC&7;JUUHE9=:MM':F7Mu(=*PhmcNk!:%^0jZP?P$0MrcM6aT7)G0Ii"H:Wn[MC4M@2q37)og8tZk"W])Tf%RkF78SJP=>?).8-s[c'd)\L\LBR12:s.:*e$pW=FX9kgU\ptb%57P`^=%2j3,`jCf6K41nO[%QMghtdmhcKNno?IR$$h:iF5[Iqs2BZ@_WM4b*`k:18<tJ=EmQhJIh_VV.4Y]rYY*"7m70<#u"?C^+%[kV+ob!RH]Jni.9%10eBW7o@CmKrH%4"l_K?_EGaWpP[5"+b.U'-]P)hSD-W<B:ii-BZB4:.Cr.""3+(IG_W'Lo7^!FI-G\St7-<%_hc2u":;(7[nYl(+K-W7OW(45+HdiPD\5O9>goeDFp_f4E,49]ohZip-+,Dt/1o6gjp1MK5P&B1S;AIH\5O.j30XGSE1<IT3(N?-%\4Z,[\8E7u$j8L%@2>W,HW"f6<t+1]eYNd9U.&E@)3pilf'k=B![aap(`nbHgDK+<>mOF>*2h?rh@?.:g@\-V+#$qj7VdT'LMha$%,K=,G&;iu#@-+Q10=(`I6sr.+$aD=\KEG95SS-'#\BH@r26?k1H,;1d%i:9Hld@fS.5XL.C!^^)a%a)S9g'b(O;-\\;RaU$2?L]\%^SH8p^-^4%rMIdUn1M9.Igd#nrVgKChf;uu)=5N8-h$-a[Ws*h?4/CTmdkEs:<(dC`If0?X>C,;Ui\.*!KdE-_4Z_&$l+V3e#>)m%=m3<=W&#j3=6UDc?"R]CRC$GCiV%DBG=%B9b#GJQah:_:As6MQD-ba5"@g?@UT`\On"dI/KL0\'@!1H8d%\Gj+bkg)+K,j<h)rWf%bltF>4;:^Xh#&!"LVY_TJ%9/-T#sk^S7-F`r"@=.:H92W2])WK#7&tKca!9*OZJMXB@9P1QOZ8E%Q6Tn\5^idSA@"(>lAP(?KH0Z%B\YU.X[n)u*mp^7*$n;T\31\5:r"p7S)dsTp:#cP?e/5\%A4JBG,scL#\u[hIg?Gl3QVY&!n*<&$.X]m#UC&XXc.0-I>EWY:.[pM%On\1+"OS'GBI:iWG&Yi&U=!`Fp,+^Pq^NL9&o4srO>XFoV+EM#'_7k@<V46MP'A]#:;gsN!=sRYTlp-ee-gUmSrr27:&$d(bVg50%#E&Fsq\C*t!(Hm<dth+>Jd70\$bnog?^Xo-k-%c7Z\kU-)88T!>C**nD.C&/PQ;>-T0.hE+sNW75]:m&H.h@DRCp16TtJNlPZPh-%,LoS=Mt42_F0aZ,3SBEMC`o^OZg/b[6/$['G^TH46rC!$)p#i3]F/IY*jT>!cD3!'30LNh8ZC?9fFc-J_rC7UFU*b"-4iHg?t*sq%%pn$:\B!o>;%A6k<$Fm.Vqlo\F@pYr!b'"q\BB4d<NAUrP/,d2-fp's,1rGWVITqp_7*[uBI!$km-(E\aN*=0=AK)IYbDK'Y!'dR%+;<-;k[`l_,d`"CWj'4>Bc?(sLCH9`BGf)8BcpATI&t%)k>(<H0;c1Y+DDk77Oj8!S_[>E\rBXdBI4$qcp)$e>r7aY,T;M#K=A$2%8]VGeQqZo+i&\AKd(khp@Q)G?2U#Yhbib(`9-b./Kd*4Zn3lPq&#gB-(4$WU:rG\)&tDG06@pDRdth*W1g$gNb,doc$boa,Oie(E%2@@2SX4Xb9BG>o,VWbH-U7-%"G]BQLWh6s'jQ5cMV"tC7V#!:/`8DbYTAFjc?FMN'6B$Q$8$;`pVREh.[aPU^MeYBZWC=4Pe(")n%K+(dGiE62I'gU:()'Ur7MQXfac)=(Y#bsM_Tb=\4Bh_8npiEsTK+CEqhudBrm1[Xg3X*CA9c'P(eYIl6X?\ip,n)$N*]6mM/QSn"%%A&NZ&!TVVoC<EQnYp92@IU5]DDN5\&5LBZlZR+nR$[iT*Ho8!5*j6_"0_t')1X:uP$)MD$A1_EPejc+d"4o1A-Ve6^#qMsd":5@%n;$kH5mN=d#$'J8!tkgB<U[@'-mYOk^4LXN'cXl2?-%r56Ormn0"uqpC9L/QddOXDXbfoG)Ms8>LhM$$UP=@?r&Pa='TBHkKfA3J%:6T?(9aZja,ZD<i9^P>3\.l>Ma90[1aU.6IQW2@62c]L8&[PmU;C#e6m#cN<VoSCf4JNgpRdg!(H0U*/l@o7S,O)Z(>Nft*Tes+F%\&sXV8PY^WppE_T=F0%0AsIqDf4_M[m7QiU`2=$Z%P8l65hm;&65aGK&^%Sg:OZcF\"??#p3E9:GE5^1LtlYC/5EBur8b9=k?X:W%7ringM$uE>Jf-Y`DY'#l-$"?(94H5I?,e-AcZNU(2B'4[-TO>V?BF@SWC=(h[]>sc?BA=pl1?qS:g5SDoP/-Q]HEdC>:=6c_-s+;%BkXO1KPm7s2J5O4=ELfIXl^ap!DLkIC)KJG/c)+u:u&kg1_NJ%@Jkf$bH;dhnub;eX<W[paiWZBjUOhWOB.06"\c;>DcXu1A<%/B%.I@d-.6jet8464),)+iB(cA)REX'ZD-,LK(2r0d%6+@aNRj"\sZ7rdGG'_r@Q!/.7KE-W$Zr.:WK*j3?DA.0F"kOb1"d`\_%.4`i%4jGh`>B",HKAc1gnir66j`H5_)q<5TH_6GKKP)m:LcW1;KrZUF"-WSVocKSNiPC.4rNs6^H%l>krDqOZ](l;+%Q75`8fBET,Lml&%OFpn1Ts7Ak3`W('Lkb42J/nL`+W:_VUY@n@cs<2P#4LLK0S=SrBdSaA4..@lBV`-HhX3r>DtaXn_;uKfVb*RZBG;A%'N<c<"mt7-%$JN>8]pK7MLc<5eO5WVE?/\<hrQ"8BRmW]+"A4KLU3f7cYFj3ToGJqf+(J4l&ul7F]<.u;R*R[RF1.4T2NlNFRNYWD^=opY*=/YO%5Q#EZ3/r`J[Y3K"3/r`J2C'E<LkW9Z)khm.^Y::rf7>.GhDDm1phQ-9WQaLdjRaplAemSm'8l_1X>^L$7k1j]TMbJ?Al4tEP^rt^%,WS!pbWbjI*DdLLAe>Wt5iU_X-\"*l-j(1#D4c3b;$LS.jP0FUifjJ#Gr"aX?7.C_H2?#]oj;HCcg&L/./_1;@;-;cD_d-.<'U2Z%e!k0&nj8=8:HS#Di*0J57)LmV*F,>+*J+N(/nol70?a`V=H#+I'sj]^`!R-0h8YkfaeA3I8IH]H8!&A,b8;hlBI)^hn?">2+k4L,%Bmpe?mJ/>KmH!(>d;97"jPUQV'ZH$%SkJZ*]%\`lj;trVk_;*$Va/g@OaL=HZXM^b,j*3'bVkX5CCT/*k1rL7>V&%t[38Iq01^hN%MEs;:Q<o[8O*=g;OTsX\Bp.QL]$91oriE&p-60p;6p0%l<Nk.<ga6%ng7hkLGi[ch/.;VB(5@BT]r$[iG2=+Ckh>Y#3"l,<G#gk;%StgMH]<*lf-@>oYR-.n!HE9TCK#D'KM%u%sB#Ed'3#tdPi<"oI>'0Dc6I9ASWL[*kF8^@RG1]YGekI@$QpO<<gBsM`jGO3c"pl--%PB)&]+;)]%I)O-kE!lkW%#"0BR9eZdIc_,V!E*U2NAL]Fm'b3`naO8qWmq8KL_r6bOpc(?G2&hj"G<CZ1*e>IfPN8geoZQWCq501%.@dq=VgsU@%Em]b2NWP5e=-Z?[+dmHk_U$"#.okFH+5L,'AspS>oQ'pIZR22-m59NKLom1hr,6omg29THc4D)/>0RtgWKBBom=%l%p-Wjn/;]=5h">W=B\,DAZDRaIP_NX&,"Wm<$3mk27#'Sa]iI9?n<.l",-aEo/iUdK_Kh%g=4XJTLDF53N4#tt2/"GeD39DOQ7=/[%cU</.CW,@_]SYi;1f+NMbI_U82A-2>V0rpF'a)+cUocpkU)5l-`Nt_1h<58qV%Xl>e*Bi.)k1hH+,WeVbrsEj"VT@b+:ZmIikSPA%o%9&jWN8@E6$Ebt@Lm"t%PHUT2WukM9ZkJ72:+<fRaoAIAFIr`XHLDt#Lj,3<?6cH9b#7"*"?<H8/TO;rCQ[&,`F!2!:t*o<mSPn%7K],0HEC+?3%QoP*)a7'As<<Q&]`B/IoPo"R!bDn6u<?gG.2H+6]990>1_OCJm;WqF^<oHF_t8#Ks/XPoE$?p/3VEuj'^m9mZg(X%#PQ3/+M1s!%n\4K$%^^H&OnEo6O^;,6OYRG8QE?Q2NXrhMmT0SnV\h)FVR1>a.Fe5.TJrA4<?+SjPpjuW>X-$U")M*4ch)jM[[f-%PQ<C3/W1Mo`Pa,TXjKQA[(Itmg2.p5b3FGkUKVb3#K<JHPlZ4M(LR%"ZLYT'5f8,HMBbl+.>s!W'Wd!9#3e24[`\r_i)H/`;aZtn%NEW;C1]g0kKt$b$jVuu+jia!/r>C22^L!!s&M9h?-<9[MNM'<DQe3Sfm@[R')b!#%i'N\W_,V*L#iA6+\?t!obcI"#-EYF?'S7^G%bTok#>I:I!c=dX=WDkL!,8Mc4l$P\^2NK1.1`$re(e,CcJLjo<OE?ks(+C-*6YO:3qC)`s'fm8%nL5$ld6spXm']W'[R_VJO:0mC%kXG?54lZ5Z;D685<70mRa$O-<gbg0'5Aj@f^R1PMX(/3b#2Ts^*r"nV$NFP4*\WJ',U!S^46m[=c8_p*_MbJL]Pcc%%t3BK"_M]U%"iPs:hiWJ*]1jJ8aj_Ps&lGh9J%gY/YZ-lh+mQ3d#1Np#0WCTD0tl=.ZN9fQV,=+76d"r`LdU0dp+!;\UJ`ii7IdYZh+?k7WH%bD%ZjZatX&C_.DGq8Z$[PAV9K,=:74kKC7I;Ek0\oOsR$<Zg.""[@SFi(tL'Wm:>>Ue+lo'^s6.LY_YE87>:IaGC8n66`P/5ld5==A(%Kk0]H(b9XJ'-F>A%Y@_(f;q7:L+c-K5N:qt9rld`KpjB;Q&lA$iBN*$l9LgrNrob1"K.uN"a@s]O)l<W"UAiAJh+*(Mq@ZF9o+c5%<i(u_/o5E&FeFkM:QuM%MFeJa!S1o0JcRgt_setMf^NVG.7<LQ+T8$6c2A:ij)-[h)2jnSs.L2H^.TV[^lMu:pfqS7Hb!O7okosu%<aI0,&D036NuB&Ogjl:sE$"WsM$]o7+:"`LogQ'1ap#@nm%?d[D$K<!!E,+8Hk2X!$pQQt:frM&$Zj;jE?;cd`Dt=Dislil_3"ta%_1;rL!s_ak"6ZAS-#^]3b()V[,ZD@UBI,c5=a@^8-l`ZuEXis6Kb5^JmMS8MBED\9]OSA^4*4bM:FVTO`M>kuXh4.M>=!DIRY&EA%OfqT,4087",b?KHTIUh6(L],!(L]lVWbru=EK]%_V"JG20NToo<?E`H<m%mpJ^M)H7!Z_!o'LpFR&?W[iP+&k[p<[U`.jgtL:B@H%qXK*7Ar&F7$,6'=Z-&$e>PQ28MuG.DT9!ErK\*l?pZG\<_LNTY.>EH<Q<tUoM+l'o-4T.hN8[u==9Di-M&7=R]HQ!GNR!+V4(KM4%RbEbkJI:&0V3kIr=X]*;8@j\iXEq@`*JB>01oOD5m?HSY7]IP\52uOki9f>9dND+7s.\DCaR;$kd^W(Z_dYd*`;4BK7,mHZO9rOT%[;$$Jkp$h^>86c5+4+m]04)XN:)4F7W;^:O[.^Q-TWUm?db5\GO;F='ePZbe@98PsXsXbk8$T9".joHcV9(/:#o,A+h(+kZs(MtM%<UV8q7IQm1(pkOH4DD:(OHnG`N[+^qN>9[ROGD2*;t/WdP8`MF9Kco*j-7LDo@udprYhQO:g%2uJ-k^EGu.+r.CZ=BmeT4%oE&&g%lN[M*fE%(f/kqS\g!L2daciK]&3%ZtLMF[:N^Uh_&jqS4*GW!M-sE6>OWKHV+"qOAmC&=fR8n"mj#$*9.NZDBVr372C*@(Tc-T`%%a[NKOEUY+e*<Dk<qE66Gd+U%6nc_qA!=P<?e_QETrU$;rl5c93j.bi`QK/l076@OW5G`,_V]<5=cRu.+fPMW<[Ha"P^%@QZ0`8k&%q1ooRl7ot02WStMU_BF]K*Pdjj$8_k2XZ^m1CTN@kDYPmB?=kN*k?AaD_)M5YOiu_-$-Xc.\G.QP])@Ai`TkA8S@k:n4ufTnqY[a%]FsGA<o);r1$CP)d5+t-n$_q<+["q>Y_XYYoYs@4/b\"T!*'](W!qNhGq:S(78F?'Ml.>E01,qqb&O(r&a]`^X[@u1>)i1dCENhA%_'g1k+(kl)jCo8In$!00oh^a6??#"l^O.(P5="Hc?:1iqroc-B*.SWn<b10DX.r\C(H/Ah6)h82]C9<8I8L8gO3S0dD1#SsIE"&t%:/f*E]5PU+5GKq'EGbQRlP8Q(Ri-huI"blYgl6DXh:+d<-[S[c^X:jbJ"^5M/l;cbhLY5IT/Kq.:h*A$4BbAQJkneI&C]!"=C%YW%**<5pKs-qf0o8$@:O4AsfPMWA94&I*@=fK3)jr"bJjZbQ664V(D.X6BOWYdEHahNJf>)MJVeHOa_iYfVM'a!C>Ls1A1&,u!`Frp>%'VcdRI6N%rO1?SkIsa$Ve0NVkCI/^jXlXh\,.c#g%5"_8BJ7G(OtNfGB?2BnT#X4^$pHBp4"@J+7_Li*%9'J,jU=#nDQA!hR<l)u%K7`FsLWtM..`/,`%-s53)=";=#5EbKU72]-b(-9m%GlPWR>F8ls/]YflMi>0DGinF.CJSf^34gs`6dN3W.gm?Z>J(*N_km&3%'I^%;Y<^.eOp*;0rRnTVh"iNm$"WKAg`A5i/!,G-X^kHZ_0)YGrg3I=sHa89W4^I,dYXOBJ1Y%B#r(IWFl7oN1*.++H^\;!ir'AIW_Mo%QnMW2`"RF:OoB7a*@UIf*6IGb&L\8f%pV,rB8BZ#KFMMZiZr&Lhl>LK&_KI/OnjN4k^[8Go;Hgh4[Z7]iXSpGBG_%OM'ZW$;R2+W%?(8WW@!Zr\_jn$DC<fpgo<7_Rq';]4d@r6s7"hW((i%A6XNi[3*jET%geZC.YVa6PFe8[)@_CH#,N5pV>p:(Uq:"_oXrp/ppK#2N%.u.1"%l#"MFV$-2)G(^Kjs/"cr],Vr5<E0!6SK,B1^]2"];)+n,g"R0p*I\N`Did`\#g"W.^=fTK0fHM6]==V-Y)rNcsaWbH7eu-%5[p=naT7#6]F".`?h56LYM>q2mLUeOqYW?W%[At4I)IO^U[U]EXo#LY&b-!-'(_n^jT)@PNP9shkr(/cnfh>o5rg`/!d7[fO0F.j%+?)jn?FOm=,fCgWKjc*J-OIP>c59g9'Es3@'dD)Jno+:8oZVhl6Njr4).eUKVM\,q%\F$tL%f%$OHTkfmib!H=lh?rhU(7)$GfG*%D>4K4[gA-U:FUj.S]EW$K$KL.`&$@N7IN-e)!n=X#AsP&)S![9K&B*IoV:?]!QX6YOt@M9oRWKI#KV8E"L*BJ0jN+t=/f<odKV#H%YDp>(7R^ED;$_9944#\>3GQ(6r%g'&ifH-"PdL1>,m#=Ac`!i1MHVuiq*jCKhee'BSUUDZAjD@BZU$5SRc78qC>kR]L%(YeBnO,d%IqC_-lDG%cOa/4^DUWPEO8Jj>_7?i"j!Z"mj)!K%[<V6!Um5%BEKSU!\B2e^\.YQIE$_j-i*\GK&&8O+6@lF*a2B%/KIN$#R1]go%'\;s"_bPHc+V9H)+ibK5"9sEBF;l&Q$ib202H%")0H-7<BunVC)e`XKSL0YU>2L>pjB[^$!]>aGo%5K1WjkRndFk]/VEr!-3R5;8%O/pNtC*ErhD`;eG.tdmoX]oc,7KZ`pndJ(O36`E4Hkdi)d2OZWAY6UoLad"U+uTK_J"\.$gCURnjJ4h0pd<1=0-1/:T1&hgAC!dX%Y2W(YNj`*@3YeMMdKngsZ[.bq@:6KH&&e)!`@K0bfi8lugY,[b`Xf9-ghn'"3+H>C"Lr\F*83kaf3HHe%=gXA8^WBRNJk9`ROGg3%)LN`;lO=s4k$r\,AqX<+T0NG)D'R>Vkllt"ngDnGe!\jkH:2gd5`a('l@dnW6Z8(pqh1RThS_"Q:q(GUXkUE=&j&7:1J.k\:_eiE%8sM#/K$uDG#3QhB4KdEo+3W\>"0_rQ5a4C6dRl)N2jAS-MC<aTjo@.rhdI<8)C4R%Mb1fJ,25@[hI8Y,'#MAG;.JhO6-4YN('O=H%XtY5,A*l0CMWMIPenm1sD;Ec[h$2>eWg<P;.@1+@KMXYhiU6HF4O+R$4mm=j);KqC/[u&ET]!Cu_/ZUOJ>!0^pqB=Dq):]EY3LNP%"bkK>F@jC5PDa,9M_EnmU4pP7UG&qTD*peX]%]9-MV)e2,lA-2>6of*aefZLlYc#Hqk`L7:ToTf?Ro?e5V`p8o22>K_gj=bIJFG0%&B^HDPV3W3$;XlgPb2SG%DU8RY7mrrd!iQ)Y3>D(X;?$6_prTNeG;a8m.qYJ>2):M"gAbr4t3QIH`^$;5_LNW.2V($7f2O"NBng&%f#/=T%U$o8)2Hr_ka/$ues5[3oe^k4D!XDpK3"uM%e&.Y3YNDLX%h5T+39L#abQ7pY&q-aC`%#A-l3FBWG*'08P](ZEhF>L\m;P_%ejLn"<BY0[[+:a,8M-&D6n]T]e6XD=NIBT@a!3smW)WFE:/Z0R-Y^&PYDD7`=>,MAdZ8]6hH(q=qB_7olY4_WlCh/]9.B=S)bro!%gGhRfoEOI>J"0!(gLf[qr*i^o1=ikn)21f$P_SmV1MJiT6qiU![XiTS%DnKQ5sD>?c;p&/SLdj?IjIHeCTZlLC^OcpTSaH,F46ot%7FjVq)iZ>R2Wro9&5u#a0aAeH9Ppup%L.)\MPYXR'taGLJMt#?:.3!/]o3P!O&1GXm,>n9h:Ahk0")=sTCh]!Bi;fYO`F%dA4C:.%6O9e'DS.Ua%L.(q:&Nef"!&M!T!U6[:ftYdj-,WeLCgHeBegTB<H!fD>Z9Aj,RDISa<hT?Jc)2#(>PXe'AR,O=`CL81:ZqR%*mo0%"_SZk4K``*)&rep>&]JF,E[!EJl=n"a-ibtJfAV>B&V3VbG`o"C07,s['a]5J"`eN38n8G^2fT0QNnKbIc4[t?8>gS<4>HQ)=("^%iH#]qiK*=+pJVb-h=%ck--:[m#)1S^jTX4L)cmFg\>nCOUe.FXIqSh*l$#\*kT8iMe&js"knMRH"*3CceRe*Vn-il)nJDL&VBaOn%if0sX`d14M`Hm6Sd,GrJCZ2=gRrmBi<7C>3m>@U,Z2f7>'BhW\3AVe5QE]57.'#Q:334d[:m)m*.hW#&d9#q5o%g`&qkh4DTNHZ>%mHh7E#B5lUf-OrmJcR-kl.@+g0UI@XWd@"Xk:)CAL>#4D$hpnI&L!Yc,i$2jo:H'8qfVa@S0QHIW;@/EIUVl[hgN-\8rHO`d))KX%BCH;19,=Uo/"r&=[p<J?eJSlk"1@qUi<tCY#.5U1"tYmIm[p!tR<Ct6-9Y`H1eC1F,cc84[-3J]C=V"'WotF"`pc2fOo>k<+sbVg%U)_An$C_X+PS5CL:mI2;0k>rJ7V"t5,a/i@5Th0f'9$PPfe1kY'S$9c?7]>N81Z<Q8;**b(`()A+A5!7`Bb&5:+=0/<J^lU!!^5q%5Pa:H4AP/&i=gP`NKOaK!g-:T=G?GqMdne/b()"MYsk@?>MEtMJ7jm:>*<XBXUSGha7A'<<K?d1m\QQb+9]c:6.IZC>nd'El0(k[%?+6=O1JQNpRucl<S6:S-=9id1S(7(QR)RDK6(E)aiU&489XWE^MOaU#PSd1\MA=2=[>2>H4o2E3c<dq`,F^$_lIHf'IhOrAKen=?%[.,,*02*$=D3f%8ooiad]F%@*j=?D^OsWeR5n(02dNJG/Xl0t"Ak8TT68gjoDVtn=$,<]9PN@+lOY17LgqmT.cincA/pS'>!kLjh%gIi59`(ST(Z`=QpY%!nl$FO3KZ1Td7P$1):X-i+F.e1B\MSN:*HlqDk&6qY#W27=6D[S(`FL%i6B!'&J[&i(%V7;Q)ko.-sb%kW7%I'-ERMEWShCG>@\\`_Zqnd<^QnMVj`kP?4J.!Fqa5E;fh.q&^C./%/al@h;ojg_Ql?Et::[B9tkd8sDh9K$7JjY@H[jFEt"\M/)*%%SYVE>.?4.4o:VQ]`E/r''[Y4J/)sCgimqqBk;0>eJRfKKL:!Gc36I\('#?B`Mg!.I%&4-f"/40h2%f07/[b/aq,CF:1]XIJ'a4[%d;i)-K<TM3bQ>K/_-h[W%<5Ut\$CaXjG)!BN6O(\)1>O1BTCT/n\gb&2^_rhU4R7`WV*/fLKrfoEDfB].C5F$X3`cO]Pi<3"0HJ1%O2e.-.(S'qW%?6tI&_]*E;$2aWYlH:UJV3nXg[>/>s+YMjVA1_<R40.Yqe)cAchF*g9!YP/%7MRL3>upc(i-!of_4A9+>`l<[%s3%_RJ*\gqmuC8n(VYU+9uD'9rEj->[+(jK'lZ8DF(DgZ?Dt9hE`&"ZdO*_KYo'@&T6]ddLhAd):VKP"\#H'a(IV=`-rr4:%-RetpfV%6&UPdZ-M[)*Mu_O>Hkp.Rf5U5p$L5:=_IEhO(D;Aihf*r$hc?t5YBF6't,Y6>E/@Z_dcDD=W,&?nK)I6b)23:E_.:pR$AtIWH9[Q%gH$k,i(""g>ojo0^ZBLON5`)9jR/]EbqbdNj7Loc0XP4lDXq#Mdqpcr4SJ0E.T0Ipa+,14Qo8,)T^f/GRF_t_G!tTWY$TA4FeBC]%0`!pF5e'S9ggF`C_.HT2Rgo(U!9Vd.))bKWHOZ>q"RB.-bOmOUOU85X8HOec)VKY8$@RkRP>00&H->.9nniiQ=!E%>SKi?eTT^2n%_-SECh^fuQ^Jlb%rue4@[d:uDS+Rs#:.@E]VfkFY40<XJ]D"U<R;*5fM4sM-;bM%C=fir5V,A0uWu*3hC7G(d"&kMb$D#HRgNEOY%q!)$ZdUNKuCq]^NQjp]##oiW]bC(mo)5Mr-RSds,$h"6j9@*N9Y``is*$O\?Zg6(=2-e1@G/a7?FfE<G%7\?>')S8<%72'b`DDH%%Xp92Tdf@7j3$Lq`,-SZtmDH`FXQ*-(F8Rglec<n%nrV=:A1Q:6r_$)<D@2XcB$6J;QkWS'VD(V2,D?Vb.?"D'UB=Cr3h$2X7j&A=%&>u'I!f&5'jucIk'WU=:p,eBtXNU7Td:EtSI\\VM@k8Vcq;\CP=4#9)c5QtSm]H!^N.2chdnKNY_fBHQ;&o?UgDTrGRH(nKh"A_=%N(A_hnuN0hE<+5efR(<;O,LF+A[.ak`ulP?QM!m^7%mLe!?\42`:g?:$duP<BkF5)OK[fHFAl!`/Q1o12`7Mf<4+_?(aRJP(bO\N%_QmLr%p[Or"*J/UrX!>=V<K]O^o_$1/rk-D3cO@S7Ia$+gVk-.^$-Gn!?L\qF:MqKNO;g(MD"q&1Z6ElP$EsAf>XV-@l_jCcCG!D%f>k/Gc%K+V3k$AFYp<BMPh$\n"#6V6!L6p443t:aD2mY@=oZ3pkS\p&=:[]f3Oq^8kV^8q*i_n.*9/q8`AP^3g/ohfmDo\2fsNOf%Y]W-cQOAS*ha*!eNu"jSFue,UeXpG@kG[3KX'4Jb"*q'i4Z1][)C)RgRN]VVZ,ha,[[>EDN0'+ma2fj@UQj=u92X9)>26Q7r#U[P%=#J^/&C)#cEI1)`dqI_='7HHVHU^rG6pmm@g)F88@P\]J5,,pf")]0^2?@F>]&k1SoOWgWamprmQ/cREPLAU%%sQueF+-Mf/9OIF%N1E=sH::jl;)4_]p)$3_IZU+T:f)]12h'`FE;1N#c9$Q\^uO.=+MfFD3B$E8Qj.pj*OU>4cUVo&Bb>(miRK]-[3R6r/)V2A`@9>q%brDN*Wq\6B#//'f3Trea)@p3"B.^2O`^W,CaP$7hKEY#Q>H(>1W.!3WUsBUDBH;;N";K#SO>oba9==tXNPIiE_?I0G^6t69r`oT(%;'jT*G[5'JiW+b[Nc\h<*'glkW5)`O!2cgfJEeI^F[$SpL)#;@INW7Hj_4nfs)s\0?N.cqhJo4a#EcOKjheSa*,]F2PBboLA!s[6%%&W;XQCg9#Z+kkEL%eW*Bs_,d)<VK0&OnU2+6a"/k7$/`\hrEHhEck)4#<K+3dm-fCIF=n*V2b3T]*?HG*bP"NH</<#V2)$A^rZ4%6M4Up'6PZ+Ol,.=ku*m%][I,FaJ4nB96L9.n0rRSQMkq`K937a\\gBm@6^[AJY8(4Z4?*lh.t&ZL[i[9=<5TZ*JA(SVbg8./17Um%au=`K-+R>#jC#H9Mti.bQM&&J00#l.)H.ea=b.@lRrmAiF1\GLTEsOF@(\kZJJ0T(6O8BZ#+ojL0c_*=QYUJ$5nd59Qh-=pJU`nG%#NStEW!5cl24fe/F>PQD`_RXfHn6ljAD"?'*>Ukp:_J`p<O.6l]OkgSU8JNJXful!IU1!s[:Y\XGI1H(b--^D13,W+4+P(A&1EuK%35p&_@?MA\P8\;J:K[K1OtPcA(jUs>DU;t*aohB*-l*Vf?[r>?*H#qgi)L9._k-hb9c@EAo).Na$4bHK)$\5(&Yr)r]K(VU;'ZEP%GoX_Q%O`Y8CDc)"Jkci2g/&#V(G4Vo0RiBr4TeF5N)Kh^OZ">VN_`kaB\YPo<qn_\^sS!45@IK'UWIDjmG+2r_B36trZ?)G.$JY&%XKLO6`c#`e*f5N$%?R`t;8jki-mL*-mn=:L`K9sBQt8OSI6S/^*b1WFd&-.c3?3XI?VZM[VMCZU8o'6"Wh911?JLO)'\U>@Pa(6A%W>r!SjXK;!mDHTR?c?64ZVVr:I#_'MVG`O#me+_YRY8bWJi!bo":Y5DIE-l8nHm$`L>ZN`r%o0FOpd;KJX4OO'OUr9PJP\gV/gZ$%D!WqK+XP2oL;H'G&fju)[M\h)#fB#IAf5H")jp9\r/m=C$k@0#iZUhM3=E.64(&s[Hftn<kQne8ih39]TeqRDOSO2U>U&RZ:+(su%]_OkF/Rl!44qWtW!BQtlE^/e5>GqeYOZV/H!;ifH)@qM)0s!H&Q'-7,KKDk]E>Ltmo/D1b2Ru?"!FO9<f"=EZ!80[ai8YSc,#cfN%En6<l5DmLbZ5`(KE;NrF@RB;u2,kEV?6]$FE^eV)Kii5&8>7V<1XRq'-7Z/MF(kJOOWo[:KBSG>IY9r8?h8FOR;l[AOisk6F[(>&%:7B>HFUD2[(j@5+X!UUj!\XBM89eCM?69EAUJ;Y>$*0/We"I'sXJ>R2$,)[@\I1Hc&46B=4"T8taNBIGei"D"GnCM$Nf^+nU!0eQ%f;XX2>a9D36M@e'egRU_q7]5FK['`AA<c@sijpbk^%/KALEK=uP\Y+.>XPKLVJt6^r^20OZhuJ5A*uK#roBI_7EqrS\\D6Q3bQ-]%7kViQAU-L&'31dg)G2p(F#'W(^tTO!??X[O7<`BqbLGejk97g29:ILCgtt2TLa+*A?N%:bdA/:Ye)HUODs>SA0,grB^FYAsT\/W`%dtlHqdWlgE=`5+%3$\7I`m9g'T*u3=i3P^cqdRJ(''pRVf'Tm6n;n/KJWl!fB>cY8G.PMg8XA@AYVD-t!4-daK.pIEZ[7^97[SPH%)pA:k";d4^8]O\ap%??,I6(jJ,j^EL!-AGE6G)%'2m)fqVROlf09h;elYO%<YY4BFpL#VD^Hn0!7L`J@A_#]9Vf#%cHTkc/p_o(G%@H@cGHA#D4:^mRKM@QZe=.)\]$'Cl#f2^>?'eC&36E,gtV!qP:lVR>f58<P/Y/76AOb6Fp\7Z1X;+gbE(XV"?7Cto@^]?Na=hoRh%(72N%5'j=*'J^arDLj1UfceiiNIL=R!Vq40ci$QSmYgSf7Pli]Tq!@=?g3d<8mm<BU7BVu!+#)8gUp`[ret^01i?lTfi;GU!&p)6%9=$W`T4-TthWA^b^()>tIhUK];a<'@V(r]qab%]2CC`Te/u*&3&#(5IVD+5;d55;2$#%\m=$&+Z:uEpA@ql7!G(gsDd@T5OT0[2W%&.j.J3q@<@/iLg%s,%kr)ckadL5i[-!BgT]3N[:Y/r?9Z9#i4`&AT/Km!AHSXo9pW9NCV3ZBl4@UNk>0BF"^sJU6WdrG8t&1G+!K%;O3%Qm.l\0r%nEMZ-*E:PJe(n%XNIhkAn"qncHZf(#<V)"4q:`k?mJ</YLSeL]or$YVh;]%<[2R_dQnOC+e\^d;T9edi_sms1b(Y%M@-B/`2_eE2lBc[Za.AB2N<&?U.?Qf@t-(:hr?8W8VstVna2l3@[INt>VS,';%/"@1BmV-%n+7;%C<YTJ%6_YgK&RQ=$L1.>06<&%A<N9DR70`S_c@=TL&C=fS4R7p=2f&s6Q$*>Gr22cO,)Ik5=\a@[f(-7kY`/kfV-ohO$lSg1,4.7iQq3c=.'m&^TLk*'6l?g#(#tK%*u:>AFoV9;WSRIBF<O]F);K5Nda/h"3;Gn4ee63o7TH"TRR0j54ju[Efr/X=aKk7L5`CRY9e8BZ>m%(s[7W"S\U]j6h68.B&7^r*%+h*\/ST.g`-r']>kn=_4i6AY8</Q4SBnM^,-s<BT$+'%^7e(1Qb)6!CgYXSr*0l.9Q&>9dAjAucE\JrXkOa$T50F[Y#Nn'0DQs4a%bmg=9<^20-6/:[\R*/hfr90U1:?R[P:AEt7:N`]>8*2X.)`1iFn5s^S@^9-JHrdJ(]JTq[*9+b)F-4.B&+g/fSNBm4o8YYp\D\Ut%r7h83MC=alb.Uh=pmJ0&>SfXYf!sr61KO*H7eiPYr"Pbjn%!Whd9]llioAI"^#4!^]%#p\XSOjU#k0Jqp0<V$Y8oq+$AW$:KFF;E%o-Al1h84bRaoPEa#2Y:+VaC]0-1*P4YQlqQ;<\`'bc>PrSq7A%qORm!s(hrlG^Y;Gpq6L!XJB!$6;!na3AcW$QP/^'-O8012bNU-%E*!%rdt6!/Qm"qn":]-R?u[=/<+OAt=L;HRYq">B=(IgE(XNdkfk@aOBIhL^mc][1G%YrCp3]i(+KnfJmDhDAs22FkY1Jq&4nG3;%64+]%]NV_GJ@Q8W(K56?#mK(1IdscFD>pG54Yb<:_jlN4eVC3BCm1m"]]7nf!pVHAl?OiFpI@Z3:BC'+E]<U=%J`3Cbc\L^8aF^+%rbJ'npPZSP0o`oX>dh053S#C,g7,-9s'2eKmFUMD/@G"l+R/^GDM]+cp)8=U[g>Wfouc[[^'.KLbu%%*Rbm2-ZbV:m!ZBH1-gdSu%^&r^JEiiTM[3bpgS2jTlP$O!3BuOpNL\f4k8DNiuet/3GKD9c3F-.1YflGu25^>fS5)PVf&hs[0'd,G"9EJ^9)F/p`mf,^1pkc9"%WKM7+%:Fi6R-&lc5pGsLoj27!Z32!QN'[?HDsJ:2T/-S*YeeA?nA?X"pJUN6-65Z21Z<nWDF-eaC[CkKBPAe,d7DMQ8BhCE[gI#5%q/="RX;ZBk[`kS'&FoC6oM&n:1r(jNB)+">/5!(&Q[fZqYBba4:K3?eY0O]2n.jqs>A]OIRi9bSB9Mka]>)=*gS'6OQ,BX,k,Nh+%lhkqA@!cla<"F7H>C9u6@`Zf_6TE$^i-o$hbCYWZ;\kX,.n8o5_,3f%nuXj=?&bk.5cF3EEm%VXG\2%po3H*VB&W!gl2VO`ik=iM%1T5Z;nihe\RDrL)!"j1'%pK.5c]&@2;%PD*/@32Z;UeT,[."V=?RVSdTm1S5UW-N+V&4(8+s`LVe+=bD@d^Qq/@n#TYZaVXY%Ypb%;L8mm_I4t87CIk>Mn^($r<40(N%R'bZlTI@J%Q<7r&9/Sk(79q@iP4.'lX\+\>I4d-B*ic>uhZq.SneD$.gs-+?g^2VE3?mlnuj`%;"2"I4!u4;%IH"q5f%=-JLMHl2dqCW%4[]sPD.^a_Y,c`o,4K0S/jG8Y^%B_,4SOCBmfGJ"8@\<GK()fR'm&t:6)WEXFcTJi,,Y9%D;9[[%E3=^lo2j$Vq=(lVod96IKbSKVoE'3/*@g%JUKWu.K6"*<_43*$6F;#XWL?>ffL^e'(RO*Z>M4_?fUD$a2M.\#`kl[s$+&M%D!,,;eJ.)IrP!r?)GbP\,?>>YQpK8^FIm&2q[Tq^:\jN[s#M`d8o_\<GG2*%"Ob._Z_1ApVL/VbOd59/hstDD*9_kAX$#D":t/WS%Odt*p>7g.H5nY(6<^^i3'X?hO'()'G$?)WO!%G?k&f&l9q&;%t.XhNOK1UAUY"a::QCpi:\IQX?`@V*fkMG,qImYY[Zf<iV"\e7T%l$qhE::riE2qIiAhK^GlV\N)P.RhCM%q56,_sTc1j!H-`3!CeUY!eQ32U^';l02\.,suJS0g-G`&trZB##l;q5?Bm$k(+c@+I6,g%Y/OVZhqNMnN.iu@5'o`bVNUFIQhT1TOMt'u&^Kn>8XZ+JV5o1(:fm7\+)3c5V*"0ADF`[F$+b775ORbCpS&8O4el")QN?]"&!oK6%rEKAqC8MfVc(np$mq?e5,G6%bIRu12&)NMV\0=q`GZ+AaJ]V(La9&'La`)&1;Q_Vr=F0V:"d(B`"faN7>HLfE`%srFjk?d%7I80j%?t%r^<ub.mH^&"ng!$,Hh9[>\FeUF<_^Ul;2/J.L*IGrXEeJ='GAH$EF09Dp,.Om&Y5kAM";rc$_N:I-X>5N4%[Q<f`'dJ=cLg.5%q&2[^@!/IO4LC]`J)<*tU9Xtug:&OSa5Zah)^n@kFd+I,DKFS0hihNOhq$Ym:.TSU8ZQpa/OcbK3lc^D5mQ]0B&*hmQWTmS8L(Je%[!al]0fohX%&J)6qFJCD%uDM#Zc[Fg35#B<pa9-t3'Bi`%1-Y;m1g`]NaWt!hcT\"h/"mO5g5D1pS3T1:mr%QrlPFEAs>31%?_I\%s(*n"UM^"[PN@3-q3(=*#tM)cAYPfelJXKUj!it\3Gmdla^1JPqI',m"8.WteF:ZZe`2A&W/:(2BB[6%",O]8Y'D3rLT&@lp1Hcr%eBN*Q1(EqaZfpKgD+]WVY<Y"!.nNeuRR>`d#\4fr>46D4C;&ENp$'u.btVuL-U!K>Z\a(LTIl:.o,@Y_kM^4+^D:$_CB,RaT&iiL%`i9n\b4t]LYH.lX/k_W2/b![R!tj[rIh>VZ#/O;\PI&?C'.@=qJne(XWF0,^giU^U9K)h'+\ZZq=M@Uf)5*Oi)uDTppfE;0iKY"X%qY(T%J%6at:b^VSnRHI:lt&_9r&YVjr#"-Thp90Smn*Prrg<BI,87`10@5P8/>Mc)rVJ(84)#J/+;E5u),Z1DUb)MY29Duh*rS/O%miJZ_.H4^JCPr!jGhJ5arr"_d>nKq-khi7QC@6K)1kWIs!4e00hP0Gm$hoir(%a.X']OFB9D=;%SVAXM>'Dm@5"JZ9T?@U!hj1a4%nP(IcL_H_#.:^T4)Lq4tKVcp^DII1m1np.A459O`6+89i?pE-h=Q.JZ_l\m\RAO3(TRSg22e0q@crYC.TkM9DptJ4klD*5l7eKH2%EWoKk*%W'YPYe*GU*_lr=Z+<i:usjX#W*RrrnT=7Ufpgm0#^tq(_>-h7S3<K$'7AF^/YRi\hp=<=8eX**.0K9VHPb%;*JPG$iBpG%Uh0-*)s'aL_r.L"Mkl5N6$g7NL:TthbHY#gl4/`"I79LoDhK!^.W$?Q3>LhUAd5*f"moII7j?+r"s,=Tag^E77=WL%<'04Q]^%=?%Y_f&W2W3C3fNcr6eu:_UgkidEh;c`^d]csZ]7#Ha>2`^c]4lr*C!X/)^XPWNpA;mGC<"K<R@#<&0t2`i$^+Xg*N&F&Grp"8/*+\+%pq_/S?\%a@o(@T+S2%lRqk3,.;Lj4HC0&]ZPjY_na*8(dItTG95$:+\!Ugk.2p=)6L320G31nGc;nTP9*I)tpi":H'6iB'GaMNN^%7Q@1\g1nur+,8lU'C$lC!\5)LKpkI:JU5#>gH4S";2k]7CI#T097CJco5[L;F`,m&"SIWUBYQ,nS=-C.HF\,^%:mmI45mPWGlmZ0%:bCB:q3=kH"KmE;KR1gQ06iK2TJ0bYT\dS(M_59&Oe726Jo$DLC[]L>eeE1Kp9emr?mCbYME9c*Sd7CdM4GWM&p?V?]Nemt-A?\(%j!6=UM7b'taLbE49.?`L]OWs=2JR$tI?;`7Ba"eR%_#aP,-u!N"]k5rW2=B-@$d!faFDLP(3$4^G)u=$@Rl"@$$l\RBooRb9p"E$%/)s?i!R?!@mYgdFaaQG&\10DKTrKL;7bU:N_kgRY40?8=\?<?D^'Wj:mg_QY0)t8Bc.H2dHRcqj1185t`Xkk%2b,&?\Za1_?h>lJ%Dm#qJ&]_E0'q3&g]!51V;f^j28fbBrb:>[kRGB!+^uXPK5b&rmK$^_1c9Du)]qWut7eCJRkHlf+^#B9NnB)u8>&Yr6G2n!OkBZsE%5If65eNkLNT`9'\Z3b9C2c!_H\1gQ3%X@_oo:Om/2cj3`Y8CW[N`Y/=4<cC?L:$759[%"<iY`,o=1uVe(-]Am3,ghr*YPDtA_[->%[iYM5c#Zp=J=4O7eEu$&U3$02=)U"<Cb#qS[`aY%U(NFiA)gpoF]/3-'dm'9mn51:OpVr39aU5kT]m?((&uLll5_P<IJ2t!KqnV`%&Oogo%ae`"Gik]$]rOTg'OSN__fS9`Q.X6K@0Mg;o(dEk#;aTa+lJDpIA$K$b3h(TQPh6RjM3XcmflrA;eoruT?<&MO.9@m($H.u%[efE!-=l<:bt#p\Ur#-=lYW4+kt,1;!6<h[oIuDO(o1V,:Ok4f-;*bC::'L)+>iGi%s7o.5XKPg[f[-@dRDCg<EfuF82li&fA!*q%.l(S_hFP?X59K7=@98NjT)8K)i&[]E)oCr:roFCr)8-.G0=8QSNO,cE'VTMh_1f(t4^.E-)1.Z;mK3!!-`nI3D7N1SM7]%ScR'h7%8<k3GMqJ\'d4lA10%-\0k]6gWN6@!QV`T_g?[)]KW*&X]$lp>$,a<Qm<24G@n%EC`56h+B(rTS_/<T"/=cYMmOAfm.UAY_H\*Q<g%9'f]U)DdN]aj\[<J"8&(^plj6;#m4iqcBijBmC@H[=jX(E'#7GCX5Vq^hbPQ6f<g.4<Vd+4?lO[I`BA>Y_>2/r=0<F*A0dmMD:XG%TE64hJ15KNj!]Q\>)pZ6Ds%]#g@F[Jn!T6E#_f^,ejR/I?O+\?H1g?FfC:-thqUjkYUf0L3R<2!a!,?Ron([eT*tGKp]k[9k*Z+W%JA/Y.+qQ&f7;j"L;M3W?kMKRUF=lp4a1HON#Q2G7672P14a;0H"PNKRJAo-lip^U(rJ\+j=7>R\7(fQ26>Ll`]E?(UP'Apr=Wg>M%]?KWIg72\0AZbXnq?iVtDrnb(DK.NJl*OUYNh]R(gtB\[eY/Y7b5)_EiqbbmWm)e6BKNe+Ir0B,IhIH3o/c't:uYRZ\>`]TeD`m5%"5q#>^p?PhW4&*1IKI)?$TB!OTo">-/r@^.a7sE3b?GpbfXR_Nn!&EXg4J;7N$DAG[d]dFT89hh?^e0:Ok%(=3i\(0OI7E^4'T+^%$o&,uG:Yg0*/k[un[FRea<XAP^>[aR$LoaZ`[7Ju;YL)I&iB*ujIBMG;mqrh(NP4i/;&BUe96c-QE%1O8,ppSeualN,Pb[L;kCWG%%:!`/g?&pILT#acUq(l.(uuMHNhc?(@J)@^\D0'afUXl.$%/obT%3-f2O^gT?)5i';Qia+c\Ap$21+%^.)YUD)qA?r1bTkCU`ITu%Tols.!dhT7R;&G?#Vf_cFjH"`r$sM")/NSs_Y0A4/P^a/i90sPNc-_a9`/31MM='&*3YBcF$H4[E-Ffg)`X3Jr8ZDp(B?Z!mj-]W%H4p<tAgCG\hgVHb0n3bVAp"TQ\Yed(Dek`RN9%ijkK)*?#,')\%sZK1:]U1.Zs]^d[/sD\l)GHe<g#B$<q^g7Zr8&p)"G8oJl"cY%fH'kYjC7\BU=t'WB,-Lt;BQ>ZEAXAoeePQBarG(n7BCK'?)&P+@@04RK!-Ps_*NH@,lo<'3o46_+%%+=b2*>c/L$skGu\]bG2mGJ%Beo4Lc!q7^3AX72HJ4qGn/49-dikY[RiE()5Xh*W3DEH,U]]@#PV8<kX2j4YnLt0BR7)IV9\52/0'TC0;3B=lma.s=/-Vub'J%?t%LtJk>On.^BdtY6)q@.uXmA$/.K.VPK1Kj"poqQdj=s#i:Qj>tpHZUG&$ZS`0EHE`(i.jUU&,BUNIO]mAC,%0g\imVJ:Jl%!pVH#_%\&d$16:uBZ,:6\4O7(2gCkCY+#@$)[9?+KC34^k)#agpR3oII;R8C>:/2/uac!mbLiP@";<&ZJ6eNq#.%Tn<Z[Yqtu/%fKp'sAWT%mj8tt;Hsqq3FSfd`&Q(FJBJZD>r]/\+;]LJpF7=tF+6]"q+%Jp)2^.\Yt-iPN2SIprt+>=h2UW4+=uuG0uX"bo6"%`"q9@J,8=Kh%S"CDD-#<Q7mD:DJP!$,YUZ/$[WFo\XGqVHJq9)gW5pC/4BVE*16jjbT!7*nH'?Ph46Q$/n%#dtR-i[(0;sN;@VAX=F3+ZAQL%ug,%@m)-2%B+eL1#((K0>T6Vd"M+.C^qZfZ?$SA]WBC;Y5/JJFFFHK<X?g*1+r)<,YTBQDVs5[DUOmGqH&RVWaoEW!ArgS-Th!?Gog2Z%Pcc4on8\^#,Yg+PimKL9DGi()lRo>MO[(&lSO4OO#U<bfqLBbu-"?$9Mnk7?Po2iM.\MSEQN$=r+@m/2OufVhNP&_jNfJTML_"#J%l>m.@BINL=0-LRl">SFpIstAVr;\7o\6A7*^Nhtfb;#Yn-U?Hd:N*2D)h\>Kh%Oq+p@*^ZMJQ,DA\(\#']G`E5\n/"e'7`Rk<]R-%S2rYW.FZP(fA0o\GKI,<V&@+XCgjp5`r'u$KPneOZ.*"@.^;t;`f=@$`H4$JO)O%:W-V`fEL8A6J6%MP,Q"V?j=#WZ0u0ekq$XP-%;#5Wii@.[gL=i)_P^f_^9mPd3b2DB0MQR9LLfFSVW9-iV<XAuGRU%hc94`YDj&F<(),Dlgm0L[Lri(0p*#*L`M3Uj'FEh#Ei2mEV%TF4M/l-*F6Y,d"Y2Sf)n'D?#8WB!UQ4S>)6_`t"0,tH;f_0E9SgG5Y\"R8k1q5,5HbCWcF#F%I^\4i_7GQhl'jZsYl3WkZlJ@LZ*%SEn$HVea4?1N7,X(&$lr104QGTiB-(SD`0OQB-5=&rbk-_'65"[!h6U?PaD0a_o+=g,16l\Aa00,^<0>,'?2?aXW?Dl%O5dg:7-+%'$n:3TTd/ZLgB0c=CVuKWjnW"I9i9ehbuKIfk,JjZ4p_.p!X:&n;'`<DEUeL@AW<s8$o"aBS/1oOX$!8=,3G:r\[i';Bo7GRI2Bh%l%bL[ar'V'^1YX31S_j[MqWU#B;'rO`_E<Z-jm72.GFjC#6P&!T=Y\l5>_j*RUZTo/D1%1TjqYb3QK1aNqu%J"Nt8."4asndm?f7%!(%:aOjtTDi01;P=8XY)7RBC=?7]BB6QhP%+U4-r<Tnd4,sG\\h6EZn0>eu/gRYmRKXJOtA^GIVC#%U70X!g5([CrOlTVXR?Y,bI%5q`K2dQ_1`+L^hKSIl:XWg&+ZHfK5Th/Z41=okgUlu!6OkdXE`*&^PH#U32LDKeO.9<FRb::]-mAq$l]Khe/k?MDA^#\J6*U8s6!%Rfuj8lb_CJ'grp<j;Dp>@3UZ(XbrRJCKCDF4<ONVb1FM`lq4WCFUnj>Wu^`[mXnqam`,rDdZNJN2TfW^96MSmcg8=P?J0H9hDEm&%poX?FCK\*mdQ5n9js/:4GRZ/O`G3CJ[B%ngKSeiZMTFk'9S8A=O?bGeoS:lsO-::id1p8r75!DEEWb<rM2U4*Ng/P:'#RHJ<"=01%#P,$m/0%"\\k\Pl<:9X]3U\_$B5T'>qO=m>p\Pf"XDQZ:Dt2O2R)tA)O[ZPOc3ul?2VcO=QpOK8@um\KkZ[\@K[@eLPVL63^>81R%#nr2d8Qpd\0<S!PGjg6<4*XFEXi7rOJED@:;SBXE@3&XcOm`Z[N[Kct^LAG>']OmNbtaH_6#h?%NdlI1gg?ukYnQ2CET*=of@@cP%F&>8S>t94DODaO-nL2iW*$u:3:+0"t'tSZtI4O61F^)P<JO8=a$YifT_,"P!)E_CD"f2l$msilR#=Ff]o(M[d@bgD&2P'33ZuhU>%.OA#TY>5G8S1JD(1uh5bD,D_iUI'tJ\Ca64c,F%$!7rHZBa-g[/R&hjD'>,9(V/F.!;`7@Qb&&Y/;]#$.D:F:(G(GL#HBGQ'ID5>%&S/)eY;naai]/5j-pODZcR8M,ki'D@@HmtFe@<1M<Og>%blH%X5[*OiQ_k)BW/@Th#"_00JA3ERD=.34Zk21>&Q>!`0-J(FHo#db%Kr=Rbch?2^LBgr501J\_"J!9#GT#YWLo`+]*u7LGEh0WG=ni:BlY:<JM+6:mE%^rVd%AZ0-=;:/k.Yl%i/f'`3;Q4%@LPGTP3$YK%KIpmT9a4"GnSsSWn6N,GQKk]W-=PNDpbZt?O9X#n*+qa!32WJI<A))C7r<XSoh?nCml06c^:`K8b_mi)^-4`S-K"@&mmXPA<Jh*(%X6\GuW._$T(mlVY3h:(b%Hrt^[-'R`E<Df_1IUY:![MEh_?c?iOlp"f5,ToOQH,m^&5TgM\+!bbm6@Nc8;L1W</^XgA'k>\f4mUj%<]Co$5pRuLo+;tgLqi@MC6G1>GrN`L3_7414N*"t9baE'o7Rn;i4(qd`fNW^'9uo[3I#"2j#NT6EeQ*jHQUY`h?`.dIPeol!;_JS%qYqsGEUp`=)65*;;fNLXU+a'Up\<@bMGgr`6\fNQe&Y6q22m,:%qsH+*(Jl@pM64ecM74L/XL_l1O.R<Ne>t\O"`D>a3/GUAn;&_%pGR-'0Mp'9.8VO@SqKO5hX-egqA@RN2MO#XiF<_Y!WOj,GmJ($R[a+I>-/j]]P!-4dcNaMKQ0CeG!5aqVeOA#XscaLeVJE]Nem$d%4u57!_Yl)]'5t'BRr"\,%NKe\&U%*)S[c:ZQK&!@a.1hG]<&"c/@C&CGSs.>R***4)iDC2crF;TmItNSd)*]3Nn1:h@QBrsgJtDR%g2<<qB!3#PZ*f>.2`(6GMQGaqE<$DW7m7V&[`kAWXFI/pJ&VcOJ_'9iTXJ(8MpiNLZ='e(7<ak\5-*"X):r\Xd+C)&ETC(lZ3NC\%_b]I$cLDa-`N0m2YH!3(Q6^JNP8oN69m&pc1+j'I].Kb/1B!?:\(>0uPKh_uJQ*6coo-P^!h?Qt)<JE>gUCM![:T)A.=6YL/0"X\%S03sb4)9,TC_UX5`BW^YVii2&Emcn9gs%Vh0_U/c>fJ)NkDkLW9>FKW([LWEjRk_d)ljgK*pEH)1T1lKo>o$bd)s&0TP="rX`/=I%OQR!41@NLqOU1GRc"3tb8oH^HB/8N>i"/K3QFC1Uj)Y5?.,s-E-#krgO(sETa@Eg!(dGtqYH/StkqbSELt;W)"XD6U)+.F&9u;NZ%ohIt!*MRr)1:3<3VMnYi0)*(r1=]^L!6F=W-"qIiZOo`ILq[d'71CRJ++!u]<<13,PJ)$fLGEeU"m'2DF_UPsp5aRjabaTY:Q_=:%j4@VTN%At4%JIG0`(&]t:?neMLiaNG*L3\fM<F(4jS>@BBc4?@ni):uN=W@m;$\0_+.a9t0N"OR?U)"u#PI'0qe`n7b?!5()&"]b%)8O.HMV8jjFXr@np?;P2P7Y8gAd``@`m#N*q03,*j)Kq5+_S+'(.iNe&)TGJgaZ1YoQ-T3n7[f)oZ/aoq/HUpSL+4i8565OF6>)e%*lm"La3ZeSd^8)S;g;lkr07rb!G:bY]Of=B!$Kdra$k@E,jdtrs,:jTB9L5t^%&u+Iptf@hI>InHB#ZWW4DUX\kJJ#Wu8e==B:DA%@cc<Z%<W&ArP"Y!T/pr.b/i>S--@ZCgI'c2&4L:&>Wljt*`nE[+,n[3?HhRlhHBA%,H6XN6sB:6n(H+1S/Y:K3/\(2+,%lRod6;f%^uL,Rdtst)]#aF5*Zc)gTaq],cbG_eq%<B=L=:L^Eb5ODj+a0NGE;,sg;3HM%pfnTFU:Z#0Mh:i$aMIj).b>]2WKl7j2+>Mp-8!A%OL]sIUP4'->,Gb.&+cRlO(35_ngSp,JfA*BYAq1-D7hDRG24oA8iA>Q_GCb>6,k1.JVC`iEIl3d.t5ZFnCEpi.^?t4Um-p;_.bUT%^glgR_+[ju.3<NEjsa)f>0`J((aE;U"3mo*0aaP_*XX54>$oj^S3A%A(1=()3\&0*LB,2PB#NH1]qS_UKn@)2++u,)hpnUD=c_r:%_XP(L)"H*RJW))0anDCK@N8,;9aUqn5,if,dM;<H3k;%)$l>1`2:5*R`Q'Ng@ZD)sSXaXm$Pe3=`<jqS5:0RA#[Vmoj`):Z$=(lI%=\#`%[>4R'\gKHuHRG4Pd\flGqOIje(THRTF#d;';tYJTb-l7lhU6q-UiC&TLllteHY]Oen17f@*'?)PhL_Z#i\:-s1E=rL%B)_6%-^+Aqr(7C%PgV>Fe6MTFWbF5S+LOUd9q#9RIe<Z44n)*NN)$GAlMHID5+Q0f5d%c0@J)DfG!`+NMt5>+YUo2"EgZ<k+5dF,n)e9n%(I)iQH5JCH&Rs"*N:f,t4IYq\1M,KcMfAb-M<[Pk=E5K4@d'_5@L$F7Z\M^]8R0/Ti+TMS3;Q:+Z[<_/$("ke_P4hc^<AE;LRS?n%.'".q-_//l`+)d7LBZq[.3c*rbkg0f^n85l8Um7EEG1(B\SVe]9"WkgOL`K#X<0l\R<D[#DrJC1!`'>q+M7Cj>4A8ni3V[De'skP%%ii+n*d"0@)#p0,O@lP8BV\a#dL#[:qosCN^rp9Af,a^1'?[:DamO\XpcU<AmQ5p9d)io__%@\#`QKu@b8Y:,Zft&DjEJVM=&b+p%ED=q\jGor=(l%3O++L0jj]P`*5r4KR>ONtC9.r^PnitFfG9*)8/50!e>YD/,H4dFJ9qK]#8(+T@5/NFR^)-msl88I(5&>$lKAu;C%)??H6>4bSpWInm:H'3e/moLf)\J%rb5`-Kn[+XW>^/d(k*DG:[BS4dN'rg4d?=7ZfAZCZ%g54PMA*SU=KXGOZ-4O`l[aihi=^LC^%P)$7Lm-$,I;Ci;&?d,"l?si-lLj@`oYK]pl'o'"l<V20C*M>i>81d1lF;22b49bkRV8q^LEn9Ah]_(jIXh/MHf/^$,q$Qt#n6&[m%WO7N]7LZP(6:0THRkDk]<4g<mA!/p.4]'%a<AAIhR&Y[HSp>t]a]JZsTVBT;.Gk["F0U:X$-Ym00]YJTUcLlP8:0P35#Pc0a5F,i%d$Or/m$QttG2(;*j>un=![$`tdK1mX;LQrY)="0GhOKiJZ<!1S>f0Ijbn&>Kl2_,t\LUZV'&9ON?K%@Vf9skCh'DC%YF2>b`W=6`%,<R7#@YjODVD'`$A0T8JVPKH_a-79Uq_lC2*iEYMd@5"..tA`6F/[2AJg?M&`:(SM`t&S"bla1(GpCh(CejEn)LknVAgB*F%PDdi%83uYbdHo%q*gB]3"Z;%7mcTM'RhW_=O<C$GQF.WR#2J-p1W)`f@I#?IP%s9=#8Hb5)-6P%"<\()5*2K8bG-pZ8dOYm$YF^*#Qj^Y%f?>s8cGH-cSQr$+f]qUGoptWh;dCJYM"Kt&05b"Jf]`5mm@8p&X=X;e;^p`9TKtZDJgi491gt^6Eq9Hj?7dWQ!D.t/d)`+YbWQNN%65l8Yoi/J*KBlUGOQ6\`Rr&:s:Ks=nC3,,t#IA_?,H*l.@*:4gElWO[<god+Z>ecmU")C!'V9XdD,q)Lrtn!rFAsjVBhc.s@i6C.%j/C=[>#B/FHj.)9VZKK>#S\U.jO]3P)1TV]brd;h+%Ya9k!<&Z/$>;P@h9Zpb7uHOgW5,s-f[,e*YGe&;]!,IOLem8=d2]`=dCBK%EnI=*1!DUbn=#Z*p9o"UCKr]fje+-qSq4u0E9&?YKQqG?&\KnTRj+()>.Ci="WmHkbKJULd!iVo(i,)&oRR5b/nEMX\O$4BO"ljU%KV0Mo^bV#saGdf"/<7UEEcC6e6obkL%@_+g"`lKYPMZeJJifO;r1Iq;_g_.0%5KjXV2=^lQ&:sqAgZn>L/L6Z+Bp/n(niiSqhsQt%$IgAc]tr)G12K2t58(fb;C3Wrp%")(WZl:l[As77?3YrC^JO65IYo>?3T1B.-\H+i>\V:5$Iif0MSNBCJLrE9J0#@+64ftZN\`UL%=>^?p?3gd0W(AF$(L)q<O+fGUXk*_d.Ai'b_WcNkmj2K/8,Wl\YV-YuI.FNeEH'sW[54;12A3h58=L]*%-p&tnQ$sRQkjbf-KJ](%lF[aI"@f)6-;5_#'E1/;FYA<IF.-N&RkLF^AL!*h:I5qDXO&>jWm3jnDNM9W!"C\O!XQ;;_*-]b3@YidYfdhJ["Fqo7KViUffOB9%EN%Ic2uDQLEB.UThg&hn5.gqZ(>o\9eD3+']Gq[g1:S-1[&lOCUqUfhn#:=COEb#Wr7*Nc!YM%O_k\G@iWcF`I>*Y>HRKV-i%$p+%`O5WKlaBnrN#/PP2XDu'irui_DKh`hK?k_*XABC+QaS&DM(U7p3H@%UcC=d/(@?QQS6j\*b09Kf#lUmqBb4Gg8(7aSSE._<pjm.3%dAfo&"".`Y-b'p*K#3u?m]P+>p@b#jGDe7_-*:-q+68q+!6usu<Q,YU&^G)F,[o)UH0`;<B<oiCl5C::7ldeKi@/\=<0[Vih/Va8%%8<]8X<=!5V1VBaff(U:FVF;N1M5'Fc">I5>/k`9Y^DsS"5eM^2JJ'h']^@-Cs]n_^5N4]V?Kf,E?!$C=&mqITjNgoc4o<)cGNaG%@]J?(!srdR(3gGOk"qR;$f7gY+Ko8X=&cX#q-3+E08Ihh$J6.<CtuEgCJhi%eMg4\&\VZhFN<S#2dHAA1o0g^-i=+k>VR,.ltbql%1[GCE`[0T=G/r(anAnN?YcuO<g0+jXBgNi0SGXHC=TXGPX`q,Y6l<Ip9j\<O[9P"4:.pXp"<,OJMnYGuV@;u@?j%&3;8ELdj'O8]%Ei>&o3TPfQ=tZK1.mh?US4s0cR(?(&6q\2V8YYt%R<1Wk"57akbuu88X;f0kFb_,S!L)a_WAj[s/b&"W<FE/4DXGaf>2+[Ti>c92%_.0j"3&/1+&F8/F?^3)C=($@.!Js[V&;#9=D(C,<9n*1_o^PbeONp0=b4bl$MTl-3:.&4:qObN"9GSqm`p;GgorX'4&QS2*853]O%NY,BfE!=Tb1cB-0@S^VbNAs^GId]#Xa_PMQRKIp>,Xc-#=Ji@Qo;7$`hjhcjL'X'a"uu)Z\f0!c&J"1dm_V]fk#p,+g`kX>ZOV<V%1in'VcnQEkQ\50">4-A44.C`ED9Mb*g5B/rUnA18L:mY4m+c!m[Ai&I.+jLKK5V-@$`K2?b0pW=afg6$Y.t&@?GbII47$T"ZN$"H%W5Y//ae^,*QNcDh3786d%4!VN-2]'LR\8&Y?GeJ>hZ`W@A3>pZD25Jl6a>OW2iK<:jldEkG&`APR'GMsl$6N?+lj_9\EM*^fXK$1%^k0j7VRg8Cm5G^&=1c!LSR0_o"dZA[!Cj8-^XM&.Du.^7UU1?#+aW/noh7pBaW/p5Ok4qEVH5uO:PPYdl^/a]0m`L;ojj*IeW6\r%@?Z6`(a>?uRA+tjIfAlpNf+h^5CGD?"A>l(?=$s!&Z?P,Re[*7Ud.qj`T4pnKHB53?#^n,'Ds*ufebcZN&7F5`]NI^NQ*R!6NI3U%:0%`0/$899$J*P(;q)&93J%,6G>(!VT.unheaDX?V-!Y`g-o'pfOR)WI1m8,I;mW3$I[B<C&<a[>(<3+FC.Q<e!j2.WRs(<e?DW2%9":l%4i9X-J:G0C,X%lp"*pNrI5oBVXVFb/_7"D<#tqT-VbYs6aYb[4gZf+<9*gJ$c9#R3rE0E;Rl+#*hFUaG,.4JSZ>K\3;)':#%bB*uZm]E"_]\X1'VVkVl6'8KoQEc3jJNW,rR!o6!-5nk6,j*hG+n(MD#[d92[<!pnU"+e\XK--JUBVQB^sMf)6,,eq`uF?gd)K3f%J:Q%ZZ=(D?6A:#'0'8EtVqgujmjnG`4-Us!_[[iG&j:V!Je04QP(fbpGd2kFnbP;oqaaj"]I2!bo4ZJ6SkUEG8J(s3*=Voi#e#=r%KD=qef;Ju"$u(*MMuq68lobjQceACA1g3+VXoO7P<07q[k:d!m%FiJPE/<-?lbgDeEs<X-A2@SjW[[r]<;anM$TT[TBs=*Z*H.5\%m'*bE3K0J;0[5pcf#?WI>Xf12ZYBY"^@kqZqDu!4Zq(]0Rq09p8B^j^5cXo"@)4)*O5;FBD?b+!R)c8-'';J"*[L-:dPJ"QF@(N8%EAc@d%!m*MKjU8mrK%P^WW)k:lUH2V+g(Q<2T<@u3&aQ1kc(u2ZHE&A-runr*I*.:Pb86)#P5<V2@U?Ogj"cN'>F-2]1<Ac]LJ8Y%:%ue6_gMrOQbsI91d@U%OH32c1spc6RX!3=D1^0eiu0_2aF:(sG+J%\"9/K*\LBE+^,\_fC;i5X-#sW52IUL#d8U9ddkMstTln#%%^Q/k2rK0hqTMoaBBi?n^I.0Z"MUPL0a&\7)="q%(G"'(bl(>a+g`G#A:]7mbkQnF<NF[Daf_=)%j6i6[Ha)t&BgNn[1VhI1YKq>c%NM67H?@71":+dKd)D.js9o[cD%kVqSGBs-QgEY('-Xi2&#okj.Y'2"'Q0i,=_Bs(dK>Y3;j@O@X:R&&:D@!^#O$1tA$NUG-l40.O%KD&3TE_Bh$!Ys!u%k=jVn(F:45CE+DC61#i-;=_]0YIEij%K]#]V_MSks6A8VL3ej'hJd=3H45YjmSc[U[9;rmFoV"Xj:\.,^,mn%T66P7\(/[_!m*Si3T/`D1;WrsCfi@*n7Ifl,MUf9f83.42kJX=>CV8/Xrb.<bE9B\m;!A[4R"4['H\Htf*e^@aA:K8?BpG\]IQ87%?qqG?UsUUn/cQENgW'XgWVro9dMH9+Ine:j-D#qY<ejIfQ3_9jZWGeS8;-MY8UO]c%F#//AJ2CVT$4.^?'0RN=,sGZ(C2)*#nSIo%Ls(cN>M<apYOt=*h7g,7*)Gc3^3eAK<iX:?*^hm3\[pmiIe6Ar$6mXle2R"pH[eP805)dc>qG(bNK`F-9",;]3uCVi0S98@o8C-#%=&DjbiVc%$M.*hJ9%eY5OJVm/p"DVWcKSB4$:gfWQ/6S-?iR"r[CJN#TctGMnTYIBNOdS,/(UYbn=$N&$SM*I8,+KrF6<Yd'sc0^%-ZF)87H^K(SY[r^FR_8r%2]^D6gc=!W4BfBI/FlZX(.fn'AHCJ)e^^B7)hmUN<aY_(!SL4GjRpY.GB'%Ls16R#`:#XLYg94%k-o[%(]S,_]0+D+XpY`&,5fR\r(+[_Hr]K+=k48[KbWg6BU]aH_>*i%[Y`_-0\dc_?eabmi,%7UZKUbihC-YEifqZ,+u.l`/R#4!&$$($%>VW[Sn)DpQ6o,=?hi:j0<Lf')S+c>iEuaJshJQP=^g.UhJ0df[.C\F,numcFfBjBSlMiiTIrV#/!?\<DkFu+cAXU&l1V0!P9T_@?%r\k]aIt(_uh"3UeK/.Z#Yb#78pJ3q,(ZomcOa(o"A6&<J!`B!gKV;BV15C%@@Qm)D"oX8Bqo6OC6T.)WHC_rj_JcPk\eJbF\6k&\%!Km_,C?4NCRc*G7ED\e/,6.R$ZemS6##edhXuH,O3IU!kCO?-G8rE!jMq9U=![P4OkTr4eDnB!P@5d[LDTQ80NM@k+J`M'0]fJHX%TNUH;nah61$s5$>rP%U#:MT,Xh6_!3es.R(b>b7'#H]Po"//S:UIfTd+j87/fW$bdpa\YsPX[:&,SCX72J`VfK:u1cL[GaPB&?a_%>N4RXD)5J$&Hs&4]E\\6(BU1p`:+J^Y.DZ@A%`A\[^B^\*Pn#]16';01ii2Z]c>:Yb7O<5hb(WC0L64>Bu!'W0.K,RSZ0j4FA5&o%k0"MJ50b3hP7*RoB+F6/.4:ajdhr!CZEpm6%'Q!EMiO@X)GOW5>kf$q1r<++1f&nmaDZ]hLI4M-bS_h+MXQHd1lE##[#`UN1JPm`%o';/N@.b,2D(_EqQqH:Zc5#(3F;CpC&UqY;FJDP*?N,jF)aMBR3r+>-&t)%6a-q]B6]QJc.,foM=)_?6)Q=UZ,:%R(aE*4R'DZ-=%cK>[^a!\I-?2d^DN:gon!btRHYOuAj9apJ3i!2]ABg;Wf3c$BjPdnd:!LB4)g"uYVp%JIU;(rB"X,(r2(\i[MY6"&d1-pHS!]H*P%;r7CB>/?d;5GkoaQB";@J8Te\Idd>d`=Sd]R5.1%\^g:Q[0@V=s6DANR&YgVaPuMKm6R5b]slI0gteet-UGRKB+bg+<dMO9@Q2,G%8h2\rj/mMj)P?f4*(8I"c'uE4s$AsOILU_T1FINBU]3tmA**%1R3%Mkmbj/3'u[),TmugNGbaeRH!RDdik4&Yk"l_JLg4YWD-?Up%<`K`\+ZJ`9X#3>8,HqO"gfY\J4q=qSfVTq9e"I]rM'*Xaq%\NS`Ha^p8b%N6]g7MEipgaF`/\HUMeO;].H.BH/W.,ih<'^@$@C@n%E[DDJN-5lp2Y_h\ft+HMM)C7bK1bioLGSnp?#f2aWRr`WD1(QOH%7!Uc:@H=0j8Y]V&hPji?7=3&GD2#pfF[]`(GM,JpilM0f7[t%]I):0IZU!6*o\_WKTA-J>>`O+Tg+5Ah5nBA$ZCD2heR&TC[sC:#u1%rU!6J>=&VFo6*^AK9EipRo>G6M[j!t'G$`/h1]tBp?A`o!%L*eXd5fp,5@">VD&H\\TD<0ej%KNcahVa$3UMVaOq/PBb.8=46A*A.)7eYqnnXMq91pEiA4+;$RK2<G[YWIe;<^=ACO+qI5j4JNc%S!"$B2/2VFMlFf;g9p8>-=>^u8%Fn[!_7-@6r0*EitqSA>CZcfW'0's+QRJ8(;UQsn8d.Ge)>,A:bpObn\/P_qS4F"RH4*)Z(`Xe%05?@2Vct:B76d0S&7n(<$%BI`eVatrrXDG)jLBkdeY.FNnhR%7O(F+#-iW+b01WJKV$0M^gFR`5e>c%O@Cn#[>sa=BhU\N-0J_tm%3U`LNPM&koPg[?6idXSaLDl%+D?A@/!=DK%3%oeM:6ouu8dP+FDX?A;ZOsL.I^&5OLX>TDq^'oiG3Q=9UBi2d9=^m(NcPn=h2hb[%"/l8@,)GcTl6Hdo%Tp[3,>oR\6pea6Gp=f,AQk94NHp/9$OhuP@k9eS)MhdCBS>JTP[ret0>_``&.Tb#0G\(W(di7fa;%"XjYI\g%"XOS_'eF%B1-&I@8.Z(UJfk7!1("%b%Yd[b>bF,;;)tVkUk@c::)odVj^9\Q6n.)G`[oS/!^l""'c,0;."TDo7?FU6$BJr<E\NbZ%(N`1SdBEWa"#uZYcnW+lj^?jD`TT-!bJDt%2*/o[EO(_[[)8hP3LGLD&RAjF)X#Iecr_8[P&Zd:_]aV>&:pN!j%)?^RSlf"=Jfhd%!F\;FIfVgU"9KIi@-m`k`_['L#[KjeD9@K2+qep)6c+H^N=fh3QkM>rFpa=11`ZUm%gQ=9&!)YTT8O,R!>Zb'$kS=**t*-H:e!,m%fjH!;(^Ioi`$R_t6!t`O3"nEDFg@^O+@-Uq`MLDJ'@H;PR+Y;mJBu"4"?d.1",9PTc/R)X:bXS[@];s\.[H*X:.e!0L!E2@%YfuJ%K*MjU$-[f/JB5fl![&e[:IW)eUQQFb,d<-P*m6sfi%ngZ3[2dR1kLJfKB8k-9#3J1?!pK:b#%@dE=-*A/5q1?I39**9Ts&!#TZI!%"Wjn&MhqlFMTfbLODu",Yr3*F%.GE=-AXXKQ*B4=bEQGS!XJ>a\OP1*E#H-OMO+mj0EB#u;&E-fdMF[s`5]p:`l-gg.S(Wr/sZfQ%JBinI.]n_kASM2Wa]q8%K?U$*/4e,Bd>X6bO=CDP'F>6cm-'7U/cm+c<l*4hiTWlN:srL.TECAo/:KYu(^g]lMU0D!`kl.Njq8*\%d@RAT6Ua0qpt3YEA5nqXBh5^PB_[fg\26Tm86DaJ&'IpPQH:mJ;".;k<*6#X%Lu9\4sXZDJ^(uT%uXak$$f&HQ0a/1!k<eXi#smY%#.V1MGT^.A8j\V)JVsS*`&WFm6T/Hd?2T7a'brV,0ZR9EfnHk.(^?@c`%f>8-BJcDQ\N\@b!X&LLW%/bif\!uI0NAtAP+'gTcK'r%K_ANFNf=>.:c-%DAqM9L18@+44VJk^U>+mbSAumc_0/Ktp12Y"TL"-!-%b1F!@NF(>,Y=imP@*7!qUMe%8BTfG^)+P=9--50G"p6%#Tbrn.R4_!Ra)!IL;F"C-pl&[#_Y&tSBX7["+ZP-"UISPbp\-nU1&Tf.N0JO"*cN@\-/(M?j6n4^f[JYL&j_PB]WZR*XJ*P&=LfG%"XBQE#Z;j4$@EU_BHU4r$>2Xr#02G7_oFN$KL?le!=>WV$RRhaR",9?Od;tt5e"c:"!Zbb,ReX*2Nec+Q,Nh;bRBk0+ZWc#^nB]f%@2[mV6\#?0Y^slc7KnY\4OAUe6Na?E\A4ZNTKo5C%F5@&19$'8/-rQr"9Ln[@'-:j*>Z_I(n%$g^p+NXiJ>!/M+rSbD(H?S9#q-i%Ns_C2.<'k+OWaiZ^*20SaG'^A*)$GB+05$2JHo.N6s!r%;%[AA-3BS?P!N3I8HT[pb7JlA.2r6Tql],YZfTM+:"7-nR!mb*lHQ3l%oanO_]iSE>3kh%chHKb/GK5E0^M_0kh4&WUW:/Aq9E3ERp%L.iQR2L?opMYkY=rcN?Hu<q?2[:H:E,PS'`+KtE>,m,).f&91*>6l%lCo>g)ucHjhD2*TdF<60nQ_EWq;V-Te2u/s>aMoRO,[6@@Xg<i9=B%TIJs&^Nk*`tnTsR@c^+:dGqZnHV_@FQh0$`Vj]cPq$.S<e%I<hErP#JPag$`mn:)fEm*dcaJ7oZt*>j6NJ^$9ug]\"\1oJZ]Tf>Z$A7VT##6[Zj_rjuakRd8XpVIm"`UYPSTrVLrdGhI#4r[Fl7%]%f,c?LH?Mm?irHhNn/Oh@\SYSX]@SjsQKj+A-o"GOmq6g%;OZ$IM_]S*bLWk!I\AA2>L+JV'!joV'PFFoClT=&'kfo@VIDms<sb%dA1#MDfMDq(@UYU_o[SC:G]CWARCBffq\-[ro0jOgM.tn1+G61IBAe3Nq;g`pR[FeZ28b&cB_=UN2cWpMqu++nlPd<IE0B-'b@.)%!'Vg#4HrP`QDjk:Pn[#M;3qZa2O&mr"tLK2b,,Ohl>dTW,Q^h4fht<,iqK:6#S7'"/mML0'C!A&aPFc`J;RpLYd']U=c$OS//&"7%PDB;Gla$sc's2G*,kTLB?k!XfP)s\bZCtBN6,A2;P(FkrAskKcWXN>jQ]m$sCeUcsC+L$i7RY-fZSYZOK@(s#d!PhT+[BT=A&^9,%-6o6n)%d=Y17:g*jH?cAB,?]R\l^;<#fK/QK&K)U&<YBb&kF.;bABY8!W`r8!X6LG-WWPh6m]]bn54b*NJrRAclIc@%p9Vai8Ors%BNRh1"9hSQNt9JB.%(5@6\*=W'G>DK6,=-U+<N_a"bji!F$UsjC!__#,k/l'E@_?ifq;k\MFGLh*"5?U7#$@^^sSO?80"k<%n^GJ%$ud=M*#-RDErZc^@%"pJ=n-`]0T?:XP)sYo(D.*\(u?Dt.OPt^i1g>Yi)F[B3*hN7kQAqmb(?jQ"9KubQ2h:2;iuU8n8XWL6=@X8%M[Bo"d<$p<Js;Ek`IX!U#8[q!#U4(K(*jEOK8!%^$rdh,X'c1(9Xuib_fNTrAOFp$$Cko2htl/FlP!JW58+K)ds('03lF-bFQEG.%:"JBJR$`fBC"nXu2=HkZidWU;r3^s?NqVkm\^2,l1_F`hS$-AXC[56OVmh/4QC=*dQg8:9LRFO3^:'YGC8R@imH.^BV(QC;HV;Z-%?\k8@^A^@o(]N6*7c$O>fXZlVk(`<V.i3'%o4__3YBGA;lT@Q&]Tr?V]Je58QhPnB;(XkV(RNaa-LRGrk2eY:h:7Ksk2qEaqfOdp%e<04J1%4m$ms2%-^O*+^9O<UIpe.`+R4n;T`l<M9e2DYCCHGgK=1$MY\Cc$TRU`[BYHn?(Sc+'3HTJ=\[-p0.`HJiLY&W]S%NcG1%qsA:#[6:66)X_'!?2!E@L<kilhgX:JLht5Hk1fdEo(uMKF/EBLok[qmp>]NC$gmK3ein0,odScj>c?;7RZ-%&CEIaTfej^qm9f#@%b\YL(FM<2k>NE_`]e<l/F^oag/TX'3`*E/!bcU<"b0DMsF((\(`P,rsf6l5@[uA(kMspKjHelYskM?Re24rKe9pJddI\14*eDkXW%9`FHaSpIm8dFS?fU[Ft.nhRm`VhaI!q1&G=I>>F8HhjG>J+QsH^"1C<IBV,GNc1J`HZS*11G<pa`o#!Fe]ZNE[q2"tXa,1bh>!4]%J#V>/I9"nbhL!daH0ad9'/AA[4'Lo`^*=inqVtq=kA(YYHhTmE41it\L44Q0kF0uQYA\g%hGQMcE$8^M^:N]8``u!,]rlZ#USfW:%rG-&WZ?-#52_Lkc_Ym->B'dk4AaYQ(VPjHCR(Do!4"p>7QT\\jEuLdV4&!lKT)3/TCP_f0rYi$X-8%B,,PS@T='[c>Hi:p=G)uXK%qKAEFCMo(!de4_B0,"PA$]Du5R7\_J'EO^t:n^K1-S$[C'G@E6&je%LKW%cK67O6Z8u[J1-tP\EJP7hX7\5KpPYqhP6:f!>PS-Tm%fouP7JE0$'FQ2i\i3V+$/l2Ob2AAKK*b(Ne-4k;oojgBpgYlkIs8VP64'"0o?+-^>QICN@AZ1hTj&2e:3XFr#3\h=g-]pe].TI[T%-rcn][IW]]AaCU/B"[ec>k;>%AHutqZhJqj=])+fTb2VkW>O$`ON=f?`iFFH);5gr]qoV8s8Vp"D<GguRup1#cb6lc;&(;>=!\GM%Wt9!0'ou%tQ0n"mpM:LR.M?TsrUntrrmFlA;Fi<=_hq+bY?cH2^,lPl3M+ol[OpL[r4LHTIT9:Z:dk^o0Cue-\ncqiX[f(IM+U5]%NN-n,<?u1YCh.(AMj?k*S"^9>UF<O"/+<C.[&B7&.4aeJOcN$XX4TWdN?G!6KdHZ>7S$^Vk>kktOf6NC`$-l!aG83P&sZ(_C?.oh%ETk"AV8&2E)?`Bu9NFM(*'NRXB4^dCh.WV7lY'8"."na\b2',<a!FU_aCq!L<:'sL.T3`Vfgr,FIn<DhF\oRI]1DHa\YI?KO>QgV%[%ruPMlLk>rJl]df)'=dR3:``9)<>NM(2E'W9R<`Qq+kW;]AT]#YcSm:rk=@d0PN-f9')t.ZGoTMO=E+o/Nl$<SM>3V,Cu+1A9.p%b0EiVMcq-e7OliA]L?W!J(a48%XQ<ArHI`s>p(Pe80=OjOG*[$*\.=@/YEdeG[*hd*+BAFW4FU,ALu7Z1a8&3m8/R-U(W,lAH8P1%)@?e4EjDEI!%$%s"!s.-L,pJ`?r/>L?t^sX2O&ck]uF;9#N]sn^J>f5;?EM7g#VsBB'0'PmJcOk9jL6Q1?KeCp9A8!ric.XX1kWH%pT?_:T;0*_JX.lT>O66G.i["KF]g'KYP5fd7U5ujX8+k6;t\N/1t.h=X^CDmTeHFY*kEtP6sRF-MlW1-m\6iDlU//ScFX]"oaUTL%3_tgeY]kNX53$'(2Djf4^NRfeSBl"7Ss`gKq=@qMFo0&"cdQ^;>[(LhkdX9.moD+8_G+P$O4L7?),iOE))=ZNA>fJn!s98DO9-7=%$AahC#V$?!J-Ro_I'dQ\1aEnV6sN-40T9E?"oniE!!"\Q&4-qcFUgrlDWZXYn1H%LS$!,#b3AOljAqYW[So,KaL[BFR4`HQXuP#?%m\t>[fr+[QbLfV(AnUkOOG8O?4W[)Wm2cH-lDFHrTO#uU\[mXFl."5X^!B>pM42du=.otrFJ<[>lJ;m6Esi$VVcjJ9[ei*qZfO=r%H+kfbYuqtg)4`h^s+lJcH.O>pPkg<*>uX_\`n/tU^W_7Q:dO0erh1E,oaf:T!8H_JZ?p9X?4c.CfmQKj6i-ZR;h;Th"9FPE"XPnX%Dj+%C.*]$jO8R[Xjnk4T%mp1h)5O%!.mie5iuLZjlob^sNksO=?k)f)K_?Gn/0WrMZ'gXuWc7ir^(K(reKY:)/+%e]oE[ii:Nc_Z%Z`jDZb4aa*C=Oet=3RDIF;sIhQs+CAc(uL24YhijQe72G'rjY3"cF(LOJ682\,iI[7'=XcLS<4W3t,2jkHQDjCD(A3P@Jr&L-&H7%aTr^bG"Zm+>jhmm'LZ8'"0RAKgKp/n_)ZI2WNS\fR%f=c9IdV[pcMIJ5n[O)HtaCBC^I:I(ko1<q=odX<2H>a,?A)gI#cPB5n[OI%JP_JJGBasqN68]+8,R3NL="Rb:+T\sI8g:jWr!8MVh,5m+ZjVP%[g8L(-Z8AdHHToNgE^e^#3DVq9\hJi?%CE#O`cG^(dL*@lK:m%8@Z(?WlT*.5m>8G3-Id(UaSae.N##)"dBX+7S_'"#ddW&HV(;cmsUa(rtLG_dXHiW_k>=R>)KFUYZdlrH054-(ceeq*"Mkdok5:7%k[>=?A40U>pT9fnJ_GX3MjXR2FhdCWFpIDnF=<'#[)lQ`n`43dBRCq"A33b_Bl<BDPhr,[N04@%D@:W*NZ++LD2s<qq]"4HId4S-%IbM2!-SG*^+1+B^-kTm`Y3(ZI>'sFL3cQJ6;+DIqJd.qmMJu0a<H)thk"t="Te3ProU5gZFjGb)&n\5`oG7h(#EXKmC>k@X!jN$:%R,4):hM2FsRhVQV5TB]okC*G`=?-3Y16OUs#\"'M#*3Mpp4?_Q2Dc&5%&EH&!]$JTWri%)GN/(??0,P#+u`d;)0^h?CL6N^lWqNW%d&9H%E8NVL?UFN<7=C'Ok%.<(YfONJX8lb"#5pXdk*QGj@NZgf0M%,F#E&CCo=R6WMh][D,@hjB'2(\%i\T]9i!hN_,-2AJ,SJY3%p@PddYjmt/6#^ag!)bsK$BP:ANPTP@TO+AC6`AH:$r&RsK6Z8jR,]dp<E.2Y1f10c6VD0%,_dFC0!NL3@^6F(,PG9#p;.7u.kjT\%X/5lh*68Y^?rA^W4.MdO_>as]o45JRGWA-"WVe%+p&U98`cs)76.@%sBLERHB(Si_lqrHsm4R%j\J@SEFT_Ye5he*a</99D15$u7%X+A/bkd&+oT&^"b2dD;/!&mdi^hZWQ0SgZ%5TGSU_e)fK"Q]GQJphDRdr^t:`4rpP"kiC!E!#P("YoRSC8;5FVeLf55m"OknW*ZP%8+N4'apbQ3'\*0m?3GAm\q^kC:]CV;G&?pEqQ`5$.!-fMq1;qC9?fB3(kjI(0cHp"A:*IX<K.%\UMbdA&*ZL"66(5k:_UBn`"M\U%)<^X\jT+#o1a&7HKchIu(^+G2K+^__6RJcN,V8=c?i5Xj#AS]WCoSj%iOD2(AnV8OT1"UJQB;NB_E:c(;rc<Q6R!j89JgkU[$_CL%boGA7jA:5dU+(PP*&Ir_l\)J_^5KKP0n!4(2Rc&C!,^l9Ai.6k:\a=B9KY$P69du(`);/Tl,g$34</hg7@PcI'=?k[oi^Wt:l0dK%+^[<KOoX!#B9:%/m1s(m_iplodb6"%9a$3a-T4_3Cto_-H)ud/Z%TRo)0.&s$HX.cF7jJri^5i;YcPIX$0*4b:tG\A;@ui9k_YO\%h>H<g\D@6C-<t%Sh8n0<D^<T*U-j.']&:Hg#e`tT29\so#X&bThpEh``jj5dUK<4a!_5X)(02FARY*r^(N7!]gu]YD;?%DU0/aa3%e@B-NW3sPNiq&cXRP7"iR/ug(]taW0?Cm:mZnQR20p@Drp-8H<KXqI^7V2PQjK$>h@N$oV4P7TH*$fT$;#TJkO',.X)`Ut'eXsj+%Js>92nZ<'U2AcZ*a6hWNlh-8a(m)@Xc2bUph!?Rc-i9$[e6cRG_feY0nf2O('c=%B_UF2[?ZEchGu4Xa4tt+^SY`Q7iL`(cM/hdr%E"HsnQ$6u^E`"r<,WfV>>H/,>g2CR7q(Ui-:h0e33fVVTJeS_2`caWAfB#iIU,#K^$"Th6\@\OQ*:r>0/a*:*nOL9V(5A&)Xtar7%JeKjlgDasP2Q[AEdPL^O^DS1h3"?O`5.^sg_i;n$(&8lRcba`#YE2j+phlTh=N"Oa,#Mg0:JLnB_24G#TK#VH@mW#"\.OPV%R<f<%4_h%a*5F"YBkR0u"JH*A6;D`:>a^5""40iR_"-Ad"3)Ym5>2dCLP8h9cOG*YVn"+H9:0=FBTWg5b,5'$Xojb!TDhE@9:_rbUQI6r%o7p$hEDQbFr9WA"-/rZtfh([A/7>$[</=giIY#G3`A?A&!'Vc5;-??D"g;&!#Q`k/-\Qeqd=fG&/3lBT];P^QlN)*[T#(GWX3Z>D%JuWNp^E,&.=:UWe@d?Nt-SS:UY2/T[Z8]cA"(VrdpooCMY]G7@F2G0A=ajd)+Le*hoE5VH"+UlqN;e'FO]>7giN`oN`s>5@M3G2S%q3()#42RLSHQ&U",02&qn0mE/$1MQYK%tT,KgOI5JqATd^*f>7C3YaF$PB(dFFYPY6c7me)@%2iMAapR*oN?ke$NI-##W:;rX/Lo%qi^]#5l%NrqtO`?=WO_uTV8_#ld!I"B8"/Yc)N`b;NaCGMYr2<E?P>!,&<s1e6I165i%E`?Vf-%FP1Fch_MKk?/m;8MX"oE;XtYQ%J/_PqJ-VhsodT43$5%fCo1Qu=^n\V;f-[[P_(_9pK&fuD'N7:S2e\jkrAOe>g_!-o/[UgZ:e3D!DhIA__!qt)Zk-(9UX5Ni1`o$`%\IgP5Ip@_6hUu5gp;3jKe5\,h4<W27kOA!^-]WbHLo\Hg:cCiJ60J)n+n"/Qj*KBTWZ"81OWi./F2S:I67\ufDJBZK?\sG+F4Aa)%B+omO[t_hK!Kf`67_j<1MW/C]O<T;7!uHf.@-]P_p)l&J7@VmK]i_eF3r$.V$hDkY&db7V%%,Eu*RI5X:9DlY6FT%J;m:CeE6LU"%EY]8k'4^lCf[(J[SP#tW%:U1c6\>rM<T0as)h&::<>&Wu%*1<$_2>c;@s3j;S(([nc;M_-1:mBB/uM=sTgd<UJmCf?0Z.UDY<4(U%[^?T!$$2L5UFm`Z(EVQ)82BidN<NB&`*D6B^aB'_1kjO*gPa+1QCKAQ\5,o0cicoalJ9GCa_LA8"PnO*2T#PC`0hKtHe+cnW2k<9%%^s^uOuDM5P#S@Q15?g)W*?`B6";jeW%JRho`ficg'J`iM]c<n@gn15;Y$.EWC37"Je/`:Z]^]^$/G=oJ8=dc8\d;<i;PT,\p:8,%`RYB6_I@EDU*gjIKAUoB9F-s%Y60G$4U42?EJE81V4tqF8]-'_hH6.an\mLF2*nLJHQpD'L"AI&*#:q,+/3I#s"t+_POCm(Cdr##%R"GgmrZ3pO*i&4Pq$pWVdXgVA*s;kI5it\7Zl%LIV"0lRkD&lg,"(CKhB.a]KM0*::@oFa/>Ug>L;?D,8R9nQ_t;HD1!W-WkBMN9%/uil)/;<c(3t0h*j80[HEto<ST]o:,cEK`O!uW?U^rg'HkgEr&qor`OLab^%7IeR(O(biO`G8PD<lKre-,W!B:r*Y4ZnrMV7]gpN%#X1;*J*bEHOmR`D-+,6KF8t?;I*?k!F9`_"!s`8([khh<jVg]Li.,S.B!osY801JP\I0p5+EIC;Jhn;hLq/U(UHnlOAH8V@k%oVG%)Sqh\M[N`d)5FeJO_f%D60d9jN#_IR6;ep_i"qLb;/E]/p^Fr8?!r`D2'mBNN%R:7V64H^Io(ipaY0AL#-@8)*,S27l7;e'O;FP&%VG"=nT0]H(a6DQ<.NT,P/1#(Aq#t)9&;;O1a<E?3_04r\_MqG4HW(P2BiMHV1`u6foWdE0#)tU0-%REk3Z(PSraIHi5),(D(L!2R%$9E\@^Ya%%!VQIt7]m%*j[ij!&I.DQp,S4iF0KVSh_PAfALJ_OkQn-ko]B`OCq?lfF61=%Ml%kqjRHBCNoR>RV-ZDh<++QVQ-6Hh%T#M>?bHQc[#$FC2)H3`l#"^_A!6RnHjD0Sr$BF"=JqBt%/1t`mDJVq-PKe20;-QbYi%bCM&FdlKUEm_(d"mV?MCUNLclTJ3H7W+G%mE@lF(H?5`GU.L23LWimg3W[Ml+\FYK6T.`Tu!HLmu>'>c9gpKE5h=e01\u[,R</a#7pm:69MaCb^l@$*3+p7736H37X]I8b:#oE%qkK!1(fSdD@Du%Vi$$>`A67'F<E)I]6BL`_??76Ye0M7GrW+]-gQ5dI@C`p)7B/gK""]_W@5Rn+7KGU'%0]oifPNQY);KdJ`!R)<%QLaeZ2Dj-cHB((Nd'D<=mKrPpY%')fAU)[o<_0=3Be@GGH,Ju[2V^U9dpt/.Aep'31%fiXWT1c2DrG@>E9o'IfV@l@""tB/2mbKC%:%d!qX@4:o(Om)TMHL[nq6te.jKaG<A=Okm+%D2kjhZ\]pTs.Q"c=`Kaqh4'UZ9^\)=C8m9;#ttZA#U0SZ_e':L0Oh]*6fpoN^G[%bu2rscaIY7%?3*F!GG=FpU>AoR@>m8k+$iG_haN:q4c7IHUCGK,Fh0V\aOc/rOu^_B#C)Z*5uWo$I\()A@P2(UI!loEGC#kZ?hU^%fr*uZ'tFJ'G%?fH+#YnV$1XZ?e3au:Z\=YNB[2:EK9,7Q&jp0C=AV21Z";kULSI,%!l2FTk4e5<n"KA+!k^!PDYS-To[Rh=RVXm%%ep+Iq0Em@Uae>)eP%rr2"KbDWijmjK8D,)m(@!@S5SiG!"7C::fth'_la1r#G0(k2.NuucY_97K?tB)Y@e,@p*S53Q)8mB_iQOA,%qHEX^D:%Ic:^CLJETIL_];.-(+%$sY2m)[UgbGRrfJR&T,Eifg<^R?)64!gnh/S':=Q-VM,*4)ad@_lM.e@WUT%5PCm*MmB+=rDm%*ItK/!.n:P\2>-VEWpd$fEjAB,ZUV9r>::_i2'lon&Wl6-/6.1ASk!T$;\Ze?BiR5;MHnpBX%/6Nr]_%`ute6b]U)h_r!-XrYJQ7%r0#5'<Yu=Z6.^Y)/=K+'b:[W-:d16Jn`!Hh%#Cg)&$]nTL1l/E*?>@S%IieB\de4#BObM(d-N`mU6&r#LifP-A/<?V(pQ(JK5VU=%5drI%H?XsY<1Ym)?Y2,[61ViA,/P92H&Ss3'T$u<AL"5UL*h!@-!,X<OZL=Jpgh1\0i9eR,;QJ$\I"cQ,Vj=<H",[dO5[rKD#`52%o@67m'\b2A]7m8^Y3_hF_8/Zc!5Bab^:Id!KlIEC[?pNCW$e:*9<>QU()o(r3I.J%/%#J,U:JUl/<t5dd=$'\C2,f`OpjIZjqDM1%eC)k&*K%3>=ut\^i%YAFQ'_n@>BtS8aA`k:`uomELud$A`X@IIDGp3^Cp1@J5p9IRO&aeK9["m$M9-fOB.RbX[j%ol^tt88#*&*$%'kKqP)hDhJ8?CIB*tuF]'QXLTU+nnc6PGH)CQgof")C.EFdaEiPBfgi^TDr&Tr7):_enQ/]U>XPbqXe?TJF.eU>B(q1rud4&,NC_%-s1:ZXA?-OWAfF;*$%o0=7NR>Wm\uja4@f=V(mR[OsrfCjEnU+'&kCH0$eR\PK`,PSD8T;?/i5"P]EsFLnAHg@#J29*r./J!+\df%r'J&-0a#J,1ZO<&YSQ%@`)*C]NXb%)6%NNZJn)bfLt5VmT_r8:qD33+642rqf=LWJQ%2Va'uPW7*k&CcFYZ&SRh?KC(K[sL]ngKT%7+IJVMfq1p8pCH!o7He")-GC>6Q#lcD.goiMP'TQ_ld03RI"E;ZVDp5Z#*DG/'+/#c/D't#%[X#BPOo7RjfcL[4s0_8c6uq!iB:u%W$m]Z4?NmR/EiXNoH5ZIb+kf\H.Imb^cR\#\t,"Gjn:K:P&!LZ0hO%CW9GE!p+sY1k%@:kqC6=Ffq8K)c)sqSO!Gh-'J3=ZJj&9q%,O"NSa9Pk7K;ln&ChH=PNqU*=lX?EO?ncWITT44V[&^[S%+bF%J6M[]/I"]1;lqUj'KY"'Qf7`Qf+9s&5iWSTLa90,QfSigI98TJ%V_'`#M3A@e%hM1CXd%(FROf_6Tm6.=>rXrJccp?"&.?DQlpiD>f4BhnB!t8^NR6ji#s#&P%TEY^4EVhhKE&.&C_E6m*pHK>irs"(%@g`^L5pWE&+[sE2T=9iBeVLL6`=Hu8_-i&P8l\VWGK/[e!MYBYj.W[IHj^/%,$Vi'Mf,e9a-cLd!:afQ/Z?l`&jda+\Fq1=LW`*f%#a/=ha5q!D7k`TmBF;eOI7!"bf6Rt]\2Ng4`/F2l&1fjt0%6nUp)40bU7]<=aPYE?_?eI'n<OZp,FQ']OMe$r!;C[]>L=@('OAf\%BW4_EKaC1CbkQe'^7;N0&+joJ]\g5eJ,'\2(OcCPHn>E1cAiJf9*+D;#al6B,WLq#\?SnrIga(uK1HN4:mY>;>_a&T'%N2?A*6G%%i\2G@%nb&0Y%>3Oa$dS&^bp`]3*W2[%./@4n:n_a1,s_7s2srZ#19@cqEHEFM#a^oAJrBn8C<Q>#B*JAaNQIX5:rQZbh_7s;30s\%0W4'F=O0cB]f=/=dK0fHAV>sTLW?,BSW46b)(@U'I2?`I!2gk:T^5oN6"P;](.p]!'Fq=c>:(VZ"pbS&,Eo-JgaP#,[bqlW?_P'q%OkPSq?XkXS@X#6mdt=`A4]$2WNZb%oFg`;SLQ9F[-u,:5ZESnAA4T`F]Ns->Fe(%F15$7$P]TcHVqLV'@jT7%RttK)2Q%iq'jZg<%lFSgKZ!!,,;mKYG,!Pe_"Jppu]oBuF.,R\F^_XU<>tO5S8enGH[LaX9>`jA;[H_eP"H$$B.c\tiIWfBE/?kh`H>'NIi4pPGd-B==%VV<sdM6'b49oqqN"Nc9`N[/Q!:a2i?hI&YF4B9:8).sZ:oj3a*c9bhajArTtAo,gBQSu$3$ks./LdloT.jX;%$6,b&mE/uaG`aSE%OcLRI%ig!:!e(5ek9cA`$#n=/hoDhd.YD=YM'O+DH(M#["6&im0)Mi*6Ou#]J;HN,fGZ(Wbt&Sr.u-NW@D#>H_<rsa4:>8W77fgr%<XZR3QdTn8U-0Km`YGlrhi_o*_U_)a`?c$>CM_*H)sS-jT+A;m[iUndT*7]DGNC\W`EnCrD^<T*-IU2QL]_XL*<1E+Bf;)fd2j9^%?do&Y#<U\8c:QZ'!+B@2_n*-Zp67toN1@jqQ&QdSfbJ!2[b79%>"4tC@!loq'n'\iVB1+^`NGRe(pIhIo5#AQ'SR*L?_#)7_7)%k%L(f5"D&]uo!cjBs"]G2L5tZ]=IH]n9>5+$1/S8=0NOV>7B#n2:lt?ZU7YJ7d34a_^m!/-!NclIsL*t-9q#.YF-]BHn>hP9)fHL?O%<Pl?mVNNQ<0IO44]K-Z3>r<OU'7G\PkupTf\\u>o/^1%SA8\&EHuiB7T=^8VhC7MUP1USS",l5>APJ"S4e0lh"#jZI"hWRthoFF-%)pAK;*gko(qWN^F5j(?^[nCutR4\R+%h*bci/H=\[JousIH('$'Q[NG#'b6>Jbqr;HG:EjK/f.%cjl)dZje/[25gR"H6+56Gm+P3%#dfQu<4bUQ6m.jF:lZ*!GTfoO`A0bK-miFc&ku7ta!6a\5=&WR3$sonQpr'ZLlUW4.kHJ5MJshuajlq,jASQ`"7#Q;^rOC0MS"d$%0?'/?Y-YGCAOer)7"Ooda_Tg`=#",#$nD1F2%9,LEd1ZXQFDJ"eo68s&i'.1<_!Dk$Wu0rk0L:bEeoo)l_":a_$aaBS>HcJh=i4G%.OX&Rp4kXAi6a/DNBrHN/u&$TJuUT>_L<r:KfajB=Ub.ac[ak%$3"LD+?u&Q_iJ!n&$j&H1mN/5>cPP*+c.@<24tMR5!:*^TjRsY%.YJ\Y`H<$QSiO;5dh<-WnGcTc410j?\41VFamsX]adX$,LOd>Us45k?F4I*KkucqEV'23>7SMiU=XaVa$pOd95AM.%&J%tYh&6)S%/EQbmr&^RGnCgW=W[s9,ogh>I3bs!aQ5+7HZNVV[\]W4(_M..?9&t8-DMhEY4&B[lnQEi(Pa'3md9`3Q$#kGB<><jNO]_W#XsCmS%YRj"Ic>4MX`EuQlTFrkJs6l^Dn]5N'BIkUgb=;ssSG,c<htq44JB8_sI:6Be8sHlj]Jg%!I.,Qi)a*^I%ARPiBVZ3"au,%-caB\C%r13lV%^E9)pDQ!6KmK;(6<j"2/O6SJi^$NBX`:D^[N:GCp)Z5<KTgRTC$T@S15cmZ?Rhk*a\W"I`I&SQ3;#%R3kf"Sb;q#W1b"f$%^[>m:=Ii?65F=\*i>L9Z`.t/A(OaUnD2<d^Ii(r-Z&@`NDhRIS=lV%"'/<pFEh2LJ%i5fX"5Ld7P@#2hhIUVa4lV.bc!`V(C$(=$%/?BJ!dn[lU4d&oVlK_S@"scFR"L+h8OuOnZ)L+"s1mVd!OH0W1EAS!fB2q5?gBs'eWo6U6*md@r#(HLuD;Hl`Rj%b/=JENN(+C*^%G22Vd)RP6!W8LsX`Wd"kkt92PRG5l?*a(k8$RmTo&#?6raI^Gghk:W4%tfaJY'P^;^-XlO%lb%"<5QX3YV=?L5ZWJjLmpq)fHZO4%e.;GE^?(>jAV/.Q=cl!(*ie=7h[N;W1m.S:ln/P+0TJ-dAF.<%'K]l&AGG-OFLa?l*?prQQ`5>=8%//c'ecq@@Q*ao!g_Br%<AS1%./,h=X&'STC[2[.@PnDGo(8O"c56[BfGoa<#c@0PZ!bF^@Y7$k^/IK_:tdb<e-Zt^K8@U[iLU?>s$K9:/VGfXphI3P[=*,8&IY=i%VgBr;6BM]Mb9XKH2LkUWU/&q%n!#a5D\c;tC%-#FL\!72#%<0ER*&oUGeQogd2*[B\2Ps5rCO>B&@*(+G'Q,4/pmKdQ0nYI"=qKO%k:^,tG/uE&=ib-$D7ZJB"arBfighR0+YGeDq=.Jd%@BE^%QhAh^//;R@?MI<l9@W`aYDlZG9L=*b`.41fca&@(1D64`'`e,Bh[6s%11jKO#^08[#H#7+*N$`_,hK%Vl9MDENbIBKB6!nK9P5$/F4=@>M`MONW5A_u5YW=$:UqkB'Nid^pGRO#q<06b=hbVpVH,NY?TR:K%U<O'jC7_pF#X!1W-),npreA35\#?[F*ug,l`;&GpMnm5h505BSY_c(0ojhoZ_)llW@sguTUCqID/iE9Wi?8jB-S[_>>Bi,'[Ohmu%PYuUh4G_r^N>A*Z&r(&2,qdT^_o]^`[$="?mU?%W8"g*\q:a`D*6Fu6()6!+WZ`eo]#:<:Wff-OW6NX);0EcIre;BW!l74"me`CR%Lta,D4%c16BYOsIBC>Q7]#/\/9Wp"F1ldZr_fK!DDO3MI`5OZ&C;a`.>HBQlmcNiQ>EQW5jYN2a_qWF@>9Fqr?Zg!Akh^Ye_->,$%H[pFLbe`&=")="A\=0[78%FdiN!]P3cM*bi@h9:)AB9_1=Gn*k*A>A:k]%%H[Qs]0JFSLQY9[j8"kW\8+79='\>EtDeMYk-q$rh:%<Q`E[*+K`!<(,\[KEpJf(-WE(\Yl@B2C@\4g>)[+6%l@J0iAs&:5+-O&KG\IgNEs>ZONZ4?TNh3B2D0M^f0!*UtfRhgZN=+3jg%T%&1@T"[MKhXPS&,qoh.\Ql]fpeh2)eOMSpA:R@:gj7Z`b0@js1*"jj@Zl_bX'g2n#'g/SegLk6bfnf]Ai)Ckg9J`+es`5:`(Y<5G_%j^?q!kU`D0s#mU6,?XcQTI#%aV=:+(l%JJI!:boc'"VhakAuDCd.3IaF/P_tWU'pW_R%Se*fMnjcWUd]<X35^PS#.aO9=DI0;CK*%++sM-JZAPr2ln4&&B"+W=D^(h4t)Qa5?`j@'dZkYB*RhTG9;teG``F,RK]kE>LL1r&?%_WG.3f(YI"8oiWc:?%?=!Wick05gqXkO%SN)iqo)RAA5n]%K3t1<BQsoR#hFh[XJcP2VCNU2S(p<hWa2J"K?jDEcnhH]9#DS7t4QLkueA/)5*':B3JWECei^A;o=AApi")dU'%p[o^a58)Z3mmoonb.q$NZGg$!K(U8YrP_@m3hM!`G7]Npn7+D"IqJ3(m]E3!kri6ZDOYGSq7,GJ1A<L#^Wm@pMLcY5=Gbh1?,J/(%aF=DZBG]V`T,[gNm?&aFo$^C!LD(BW#ZrolhuV!Zfe;`7^pkdHfI6b'%-/M:%djN~>%AI9_PrivateDataEnd